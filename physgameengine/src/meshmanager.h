//© Copyright 2010 - 2011 BlackTopp Studios Inc.
/* This file is part of The PhysGame Engine.

    The PhysGame Engine is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The PhysGame Engine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with The PhysGame Engine.  If not, see <http://www.gnu.org/licenses/>.
*/
/* The original authors have included a copy of the license specified above in the
   'Docs' folder. See 'gpl.txt'
*/
/* We welcome the use of The PhysGame anyone, including companies who wish to
   Build professional software and charge for their product.

   However there are some practical restrictions, so if your project involves
   any of the following you should contact us and we will try to work something
   out:
    - DRM or Copy Protection of any kind(except Copyrights)
    - Software Patents You Do Not Wish to Freely License
    - Any Kind of Linking to Non-GPL licensed Works
    - Are Currently In Violation of Another Copyright Holder's GPL License
    - If You want to change our code and not add a few hundred MB of stuff to
        your distribution

   These and other limitations could cause serious legal problems if you ignore
   them, so it is best to simply contact us or the Free Software Foundation, if
   you have any questions.

   Joseph Toppi - toppij@gmail.com
   John Blackwood - makoenergy02@gmail.com
*/
#ifndef _meshmanager_h
#define _meshmanager_h

#include "vector3.h"
#include "managerbase.h"

namespace phys
{
    class Mesh;
    class CollisionShape;
    ///////////////////////////////////////////////////////////////////////////////
    /// @class MeshManager
    /// @headerfile meshmanager.h
    /// @brief This manager handles the storage, generation, and query of of Graphics Meshes.
    /// @details
    ///////////////////////////////////////
    class PHYS_LIB MeshManager : public ManagerBase
    {
        protected:
            std::map<String,Mesh*> GeneratedMeshes;
            std::map<String,Mesh*> LoadedMeshes;
        public:
            /// @brief Class constructor.
            MeshManager();
            /// @brief Class destructor.
            virtual ~MeshManager();

            ///////////////////////////////////////////////////////////////////////////////
            // Generic Mesh Utility

            /// @brief Gets a mesh stored in this manager.
            /// @return Returns a pointer to the requested mesh.
            /// @param MeshName The name of the mesh to retrieve.
            Mesh* GetMesh(const String& MeshName);

            ///////////////////////////////////////////////////////////////////////////////
            // Non-Generated Mesh Management

            /// @brief Loads a mesh file from disk and prepares it for use.
            /// @return Returns a pointer to the loaded mesh.
            /// @param MeshName The name of the mesh file to be loaded.
            /// @param Group The resource group from which the mesh file should be loaded.
            virtual Mesh* LoadMesh(const String& MeshName, const String& Group);
            /// @brief Unloads a mesh file.
            /// @param MeshName The name of the mesh to be unloaded.
            virtual void UnloadMesh(const String& MeshName);
            /// @brief Gets the number of currently loaded mesh files.
            /// @return Returns a whole representing the number of mesh files currently loaded.
            virtual Whole GetNumLoadedMeshes();

            ///////////////////////////////////////////////////////////////////////////////
            // Generated Mesh Management

            /// @brief Gets the number of meshes this generator has created and are in use.
            /// @return Returns a Whole representing the number of meshes created by this generator.
            virtual Whole GetNumGeneratedMeshes();
            /// @brief Destroys a named Mesh, freeing it's resources.
            /// @param MeshName The name of the mesh to be destroyed.
            virtual void DestroyGeneratedMesh(const String& MeshName);
            /// @brief Destroys all the meshes generated by this generator.
            virtual void DestroyAllGeneratedMeshes();

            ///////////////////////////////////////////////////////////////////////////////
            // Mesh Generation

            /// @brief Creates a box graphical mesh which can be used for actors.
            /// @return Returns a pointer to the created Mesh.
            /// @param MeshName The name for the mesh which will be created.  Use this to reference the mesh when creating other objects that need a mesh.
            /// @param MaterialName The name of the material script which will be applied to this mesh.
            /// @param HalfExtents Half of the full dimentions of the final object in world units.  This allows the objects origin to be it's center.
            virtual Mesh* CreateBoxMesh(const String& MeshName, const String& MaterialName, const Vector3& HalfExtents);
            /// @brief Creates a cylinder graphical mesh which can be used for actors.
            /// @return Returns a pointer to the created Mesh.
            /// @param MeshName The name for the mesh which will be created.  Use this to reference the mesh when creating other objects that need a mesh.
            /// @param MaterialName The name of the material script which will be applied to this mesh.
            /// @param HalfExtents Half of the full dimentions of the final object in world units.  This allows the objects origin to be it's center.
            /// @param AxisOrientation Vector3 representing which axis the cylinder should be aligned on.  Should be one of the three: (1,0,0), (0,1,0), (0,0,1).
            /// @param CircleRes The number of segments the circle should be comprised of.  Determines the "resolution" of the cylinder.
            /// @param Segments Optional parameter to specify the number of segments the cylinder should be comprised of.  Mostly just useful if a special material is made for his.
            virtual Mesh* CreateCylinderMesh(const String& MeshName, const String& MaterialName, const Vector3& HalfExtents, const Vector3& AxisOrientation, const Whole& CircleRes = 16, const Whole& Segments = 1);
            /// @brief Creates a sphere graphical mesh which can be used for actors.
            /// @return Returns a pointer to the created Mesh.
            /// @param MeshName The name for the mesh which will be created.  Use this to reference the mesh when creating other objects that need a mesh.
            /// @param MaterialName The name of the material script which will be applied to this mesh.
            /// @param Radius The radius to generate the sphere with in world units.
            /// @param Rings The number of horizontal rings the sphere is to be comprised of.
            /// This along with the segments parameter controls the overall resolution of the sphere.  Less then 16 is not recommended.
            /// @param Segments The number of vertical rings the sphere is to be comprised of.
            /// This along with the rings parameter controls the overall resolution of the sphere.  Less then 16 is not recommended.
            virtual Mesh* CreateSphereMesh(const String& MeshName, const String& MaterialName, const Real& Radius, const Real& Rings = 16, const Real& Segments = 16);

            ///////////////////////////////////////////////////////////////////////////////
            // Inherited from Managerbase

            /// @copydoc phys::ManagerBase::Initialize()
            virtual void Initialize();

            /// @copydoc phys::ManagerBase::DoMainLoopItems()
            virtual void DoMainLoopItems();

            /// @copydoc phys::ManagerBase::GetType()
            virtual ManagerBase::ManagerTypeName GetType() const;
    };//MeshManager
}//phys

#endif
