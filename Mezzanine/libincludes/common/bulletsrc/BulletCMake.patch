9a10,12
> #Added by BTS to make compiler flags the same across the board
> add_definitions( ${CommonBuildFlags} )
> 
23,25c26,31
< OPTION(USE_DOUBLE_PRECISION "Use double precision"	OFF)
< OPTION(USE_GRAPHICAL_BENCHMARK "Use Graphical Benchmark" ON)
< OPTION(USE_MULTITHREADED_BENCHMARK "Use Multithreaded Benchmark" OFF)
---
> #OPTION(USE_DOUBLE_PRECISION "Use double precision"	OFF)
> SET(USE_DOUBLE_PRECISION	OFF)
> #OPTION(USE_GRAPHICAL_BENCHMARK "Use Graphical Benchmark" OFF)
> SET(USE_GRAPHICAL_BENCHMARK OFF)
> #OPTION(USE_MULTITHREADED_BENCHMARK "Use Multithreaded Benchmark" OFF)
> SET(USE_MULTITHREADED_BENCHMARK OFF)
31,32c37,41
< OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" OFF)
< OPTION(USE_MSVC_INCREMENTAL_LINKING "Use MSVC Incremental Linking" OFF)
---
> #OPTION(USE_MSVC_RUNTIME_LIBRARY_DLL "Use MSVC Runtime Library DLL (/MD or /MDd)" ON)
> #OPTION(USE_MSVC_INCREMENTAL_LINKING "Use MSVC Incremental Linking" OFF)
> SET(USE_MSVC_RUNTIME_LIBRARY_DLL OFF)
> SET(USE_MSVC_INCREMENTAL_LINKING OFF)
> 
34c43,44
< OPTION(USE_CUSTOM_VECTOR_MATH "Use custom vectormath library" OFF)
---
> #OPTION(USE_CUSTOM_VECTOR_MATH "Use custom vectormath library" OFF)
> SET(USE_CUSTOM_VECTOR_MATH OFF)
48c58,59
< 		OPTION(USE_DX11 "Use DirectX 11"	ON)
---
> 		#OPTION(USE_DX11 "Use DirectX 11"	ON)
> 		SET(USE_DX11 ON)
50c61,62
< 		OPTION(USE_DX11 "Use DirectX 11"	OFF)
---
> 		#OPTION(USE_DX11 "Use DirectX 11"	OFF)
> 		SET(USE_DX11 OFF)
94c106,107
< 	OPTION(USE_MSVC_SSE "Use MSVC /arch:sse option"	ON)
---
> 	#OPTION(USE_MSVC_SSE "Use MSVC /arch:sse option" ON)
> 	SET(USE_MSVC_SSE ON)
98c111,112
< 	OPTION(USE_MSVC_FAST_FLOATINGPOINT "Use MSVC /fp:fast option"	ON)
---
> 	#OPTION(USE_MSVC_FAST_FLOATINGPOINT "Use MSVC /fp:fast option"	ON)
> 	SET(USE_MSVC_FAST_FLOATINGPOINT ON)
107,108c121,122
< OPTION(INTERNAL_CREATE_DISTRIBUTABLE_MSVC_PROJECTFILES "Create MSVC projectfiles that can be distributed" OFF)
< 
---
> #OPTION(INTERNAL_CREATE_DISTRIBUTABLE_MSVC_PROJECTFILES "Create MSVC projectfiles that can be distributed" OFF)
> SET(INTERNAL_CREATE_DISTRIBUTABLE_MSVC_PROJECTFILES OFF)
120,124c134,137
< 
< 
< OPTION(INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES "Create MSVC projectfiles with relative paths" OFF)
< OPTION(INTERNAL_ADD_POSTFIX_EXECUTABLE_NAMES "Add MSVC postfix for executable names (_Debug)" OFF)
< 
---
> #OPTION(INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES "Create MSVC projectfiles with relative paths" OFF)
> SET(INTERNAL_CREATE_MSVC_RELATIVE_PATH_PROJECTFILES OFF)
> #OPTION(INTERNAL_ADD_POSTFIX_EXECUTABLE_NAMES "Add MSVC postfix for executable names (_Debug)" OFF)
> SET(INTERNAL_ADD_POSTFIX_EXECUTABLE_NAMES OFF)
128c141
< 
---
> mark_as_advanced(CMAKE_DEBUG_POSTFIX CMAKE_MINSIZEREL_POSTFIX CMAKE_RELWITHDEBINFO_POSTFIX)
143c156,157
< 		OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	ON)
---
> 		#OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	ON)
> 		SET(BUILD_AMD_OPENCL_DEMOS OFF)
145c159,160
< 		OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	OFF)
---
> 		#OPTION(BUILD_AMD_OPENCL_DEMOS "Build OpenCL demos for AMD (GPU or CPU)"	OFF)
> 		SET(BUILD_AMD_OPENCL_DEMOS OFF)
159c174,175
< 		OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"	ON)
---
> 		#OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"	ON)
> 		SET(BUILD_INTEL_OPENCL_DEMOS ON)
161c177,178
< 		OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"	OFF)
---
> 		#OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"	OFF)
> 		SET(BUILD_INTEL_OPENCL_DEMOS OFF)
162a180
> 	mark_as_advanced(INTEL_OPENCL_INCLUDES INTEL_OPENCL_LIBRARIES)
176c194,195
< 		OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	ON)
---
> 		#OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	ON)
> 		SET(BUILD_NVIDIA_OPENCL_DEMOS OFF)
178c197,198
< 		OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	OFF)
---
> 		#OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	OFF)
> 		SET(BUILD_NVIDIA_OPENCL_DEMOS OFF)
191,192c211,213
< IF (MSVC OR APPLE)
< 	OPTION(BUILD_MINICL_OPENCL_DEMOS "Build OpenCL demos for MiniCL (Generic CPU)"  ON)
---
> IF (${WIN32} OR APPLE)
> 	#OPTION(BUILD_MINICL_OPENCL_DEMOS "Build OpenCL demos for MiniCL (Generic CPU)"  ON)
> 	SET(BUILD_MINICL_OPENCL_DEMOS OFF)
194,195c215,216
< 	OPTION(BUILD_MINICL_OPENCL_DEMOS "Build OpenCL demos for MiniCL (Generic CPU)" OFF)
< 	
---
> 	#OPTION(BUILD_MINICL_OPENCL_DEMOS "Build OpenCL demos for MiniCL (Generic CPU)" OFF)
> 	SET(BUILD_MINICL_OPENCL_DEMOS OFF)
202c223,224
<                 OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"        ON)
---
>                 #OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"        ON)
> 				SET(BUILD_INTEL_OPENCL_DEMOS ON)
205c227,228
<                 OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"        OFF)
---
>                 #OPTION(BUILD_INTEL_OPENCL_DEMOS "Build OpenCL demos for Intel (CPU)"        OFF)
> 				SET(BUILD_INTEL_OPENCL_DEMOS OFF)
206a230
> 		mark_as_advanced(INTEL_OPENCL_ICD_CFG INTEL_OPENCL_INCLUDES INTEL_OPENCL_LIBRARIES)
208c232
< 	FIND_PATH(NVIDIA_OPENCL_INCLUDES CL/cl.h)
---
> 		FIND_PATH(NVIDIA_OPENCL_INCLUDES CL/cl.h)
214c238,240
< 		OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	ON)
---
> 		#OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	ON)
> 		SET(BUILD_NVIDIA_OPENCL_DEMOS OFF)
> 		mark_as_advanced(NVIDIA_OPENCL_ICD_CFG NVIDIA_OPENCL_INCLUDES NVIDIA_OPENCL_LIBRARIES)
216,217c242,244
<                 MESSAGE("NVidia OPENCL NOT FOUND")
< 		OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	OFF)
---
> 		MESSAGE("OPENCL NOT FOUND")
> 		#OPTION(BUILD_NVIDIA_OPENCL_DEMOS "Build OpenCL demos for NVidia (GPU)"	OFF)
> 		SET(BUILD_NVIDIA_OPENCL_DEMOS OFF)
222,223c249,250
< OPTION(BUILD_CPU_DEMOS "Build original Bullet CPU demos"        ON)
< 
---
> #OPTION(BUILD_CPU_DEMOS "Build original Bullet CPU demos"        OFF)
> set(BUILD_CPU_DEMOS OFF)
226c253,254
< OPTION(INTERNAL_UPDATE_SERIALIZATION_STRUCTURES "Internal update serialization structures" OFF)
---
> #OPTION(INTERNAL_UPDATE_SERIALIZATION_STRUCTURES "Internal update serialization structures" OFF)
> SET(INTERNAL_UPDATE_SERIALIZATION_STRUCTURES OFF)
241c269,270
< OPTION(USE_GLUT "Use Glut"	ON)
---
> #OPTION(USE_GLUT "Use Glut"	ON)
> SET(USE_GLUT OFF)
255c284,285
< OPTION(USE_GLUT "Use Glut"	ON)
---
> #OPTION(USE_GLUT "Use Glut"	ON)
> SET(USE_GLUT OFF)
315c345,347
< OPTION(BUILD_DEMOS "Set when you want to build the demos" ON)
---
> #OPTION(BUILD_DEMOS "Set when you want to build the demos" ON)
> set( BUILD_DEMOS off )
> 
333c365,366
< OPTION(BUILD_EXTRAS "Set when you want to build the extras" ON)
---
> #OPTION(BUILD_EXTRAS "Set when you want to build the extras" ON)
> SET(BUILD_EXTRAS ON)
343c376,377
< 	OPTION(INSTALL_LIBS "Set when you want to install libraries" ON)
---
> 	#OPTION(INSTALL_LIBS "Set when you want to install libraries" ON)
> 	SET(INSTALL_LIBS OFF)
346c380,381
< 		OPTION(INSTALL_LIBS "Set when you want to install libraries" ON)
---
> 		#OPTION(INSTALL_LIBS "Set when you want to install libraries" ON)
> 		SET(INSTALL_LIBS OFF)
349c384,385
< 		OPTION(INSTALL_LIBS "Set when you want to install libraries" OFF)
---
> 		#OPTION(INSTALL_LIBS "Set when you want to install libraries" OFF)
> 		SET(INSTALL_LIBS OFF)
371c407,408
< 	OPTION(INSTALL_EXTRA_LIBS "Set when you want extra libraries installed" OFF)
---
> 	#OPTION(INSTALL_EXTRA_LIBS "Set when you want extra libraries installed" OFF)
> 	SET(INSTALL_EXTRA_LIBS OFF)
374c411,426
< OPTION(BUILD_UNIT_TESTS "Build Unit Tests"	OFF)
---
> #OPTION(BUILD_UNIT_TESTS "Build Unit Tests"	OFF)
> SET(BUILD_UNIT_TESTS OFF)
> 
> #Hack to put the libs directly into the phys source tree
> #if(${WIN32})
> #	set(BuildPlat "windows")
> #endif(${WIN32})
> #if(${UNIX})
> #	set(BuildPlat "linux")
> #endif(${UNIX})
> #if(${APPLE})
> #	set(BuildPlat "macosx")
> #endif(${APPLE})
> #SET (LIBRARY_OUTPUT_PATH "${BULLET_PHYSICS_SOURCE_DIR}/../../../../data/${BuildPlat}/bullet/")
> # /HACK
> SET (LIBRARY_OUTPUT_PATH ${Bullet_BINARY_DIR})
