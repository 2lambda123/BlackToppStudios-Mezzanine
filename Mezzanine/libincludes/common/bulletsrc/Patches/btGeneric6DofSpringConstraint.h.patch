--- btGeneric6DofSpringConstraint.old.h	Mon Sep 10 23:36:57 2012
+++ btGeneric6DofSpringConstraint.new.h	Fri Jul 19 13:38:04 2013
@@ -1,11 +1,11 @@
 /*
 Bullet Continuous Collision Detection and Physics Library, http://bulletphysics.org
-Copyright (C) 2006, 2007 Sony Computer Entertainment Inc. 
+Copyright (C) 2006, 2007 Sony Computer Entertainment Inc.
 
 This software is provided 'as-is', without any express or implied warranty.
 In no event will the authors be held liable for any damages arising from the use of this software.
-Permission is granted to anyone to use this software for any purpose, 
-including commercial applications, and to alter it and redistribute it freely, 
+Permission is granted to anyone to use this software for any purpose,
+including commercial applications, and to alter it and redistribute it freely,
 subject to the following restrictions:
 
 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
@@ -41,10 +41,10 @@
 	btScalar	m_springDamping[6]; // between 0 and 1 (1 == no damping)
 	void init();
 	void internalUpdateSprings(btConstraintInfo2* info);
-public: 
-	
+public:
+
 	BT_DECLARE_ALIGNED_ALLOCATOR();
-	
+
     btGeneric6DofSpringConstraint(btRigidBody& rbA, btRigidBody& rbB, const btTransform& frameInA, const btTransform& frameInB ,bool useLinearReferenceFrameA);
     btGeneric6DofSpringConstraint(btRigidBody& rbB, const btTransform& frameInB, bool useLinearReferenceFrameB);
 	void enableSpring(int index, bool onOff);
@@ -54,6 +54,26 @@
 	void setEquilibriumPoint(int index);  // set the current constraint position/orientation as an equilibrium point for given DOF
 	void setEquilibriumPoint(int index, btScalar val);
 
+	bool isSpringEnabled(int index) const
+	{
+	    return m_springEnabled[index];
+	}
+
+	btScalar getStiffness(int index) const
+	{
+	    return m_springStiffness[index];
+	}
+
+	btScalar getDamping(int index) const
+	{
+	    return m_springDamping[index];
+	}
+
+	btScalar getEquilibriumPoint(int index) const
+	{
+	    return m_equilibriumPoint[index];
+	}
+
 	virtual void setAxis( const btVector3& axis1, const btVector3& axis2);
 
 	virtual void getInfo2 (btConstraintInfo2* info);
@@ -69,7 +89,7 @@
 struct btGeneric6DofSpringConstraintData
 {
 	btGeneric6DofConstraintData	m_6dofData;
-	
+
 	int			m_springEnabled[6];
 	float		m_equilibriumPoint[6];
 	float		m_springStiffness[6];
