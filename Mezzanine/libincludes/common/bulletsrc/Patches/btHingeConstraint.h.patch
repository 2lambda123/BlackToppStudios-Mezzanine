--- btHingeConstraint.old.h	Wed Jun  6 19:56:31 2012
+++ btHingeConstraint.new.h	Fri Jul 19 15:11:10 2013
@@ -4,8 +4,8 @@
 
 This software is provided 'as-is', without any express or implied warranty.
 In no event will the authors be held liable for any damages arising from the use of this software.
-Permission is granted to anyone to use this software for any purpose, 
-including commercial applications, and to alter it and redistribute it freely, 
+Permission is granted to anyone to use this software for any purpose,
+including commercial applications, and to alter it and redistribute it freely,
 subject to the following restrictions:
 
 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
@@ -65,14 +65,14 @@
 #ifdef	_BT_USE_CENTER_LIMIT_
 	btAngularLimit	m_limit;
 #else
-	btScalar	m_lowerLimit;	
-	btScalar	m_upperLimit;	
+	btScalar	m_lowerLimit;
+	btScalar	m_upperLimit;
 	btScalar	m_limitSign;
 	btScalar	m_correction;
 
-	btScalar	m_limitSoftness; 
-	btScalar	m_biasFactor; 
-	btScalar	m_relaxationFactor; 
+	btScalar	m_limitSoftness;
+	btScalar	m_biasFactor;
+	btScalar	m_relaxationFactor;
 
 	bool		m_solveLimit;
 #endif
@@ -97,15 +97,15 @@
 	btScalar	m_stopCFM;
 	btScalar	m_stopERP;
 
-	
+
 public:
 
 	BT_DECLARE_ALIGNED_ALLOCATOR();
-	
+
 	btHingeConstraint(btRigidBody& rbA,btRigidBody& rbB, const btVector3& pivotInA,const btVector3& pivotInB, const btVector3& axisInA,const btVector3& axisInB, bool useReferenceFrameA = false);
 
 	btHingeConstraint(btRigidBody& rbA,const btVector3& pivotInA,const btVector3& axisInA, bool useReferenceFrameA = false);
-	
+
 	btHingeConstraint(btRigidBody& rbA,btRigidBody& rbB, const btTransform& rbAFrame, const btTransform& rbBFrame, bool useReferenceFrameA = false);
 
 	btHingeConstraint(btRigidBody& rbA,const btTransform& rbAFrame, bool useReferenceFrameA = false);
@@ -123,7 +123,7 @@
 
 	void	getInfo2Internal(btConstraintInfo2* info,const btTransform& transA,const btTransform& transB,const btVector3& angVelA,const btVector3& angVelB);
 	void	getInfo2InternalUsingFrameOffset(btConstraintInfo2* info,const btTransform& transA,const btTransform& transB,const btVector3& angVelA,const btVector3& angVelB);
-		
+
 
 	void	updateRHS(btScalar	timeStep);
 
@@ -136,14 +136,14 @@
 		return m_rbB;
 	}
 
-	btRigidBody& getRigidBodyA()	
-	{		
-		return m_rbA;	
-	}	
-
-	btRigidBody& getRigidBodyB()	
-	{		
-		return m_rbB;	
+	btRigidBody& getRigidBodyA()
+	{
+		return m_rbA;
+	}
+
+	btRigidBody& getRigidBodyB()
+	{
+		return m_rbB;
 	}
 
 	btTransform& getFrameOffsetA()
@@ -156,8 +156,18 @@
 		return m_rbBFrame;
 	}
 
+	void setUseReferenceFrameA(bool useReferenceFrameA)
+	{
+	    m_useReferenceFrameA = useReferenceFrameA;
+	}
+
+	bool getUseReferenceFrameA() const
+	{
+	    return m_useReferenceFrameA;
+	}
+
 	void setFrames(const btTransform& frameA, const btTransform& frameB);
-	
+
 	void	setAngularOnly(bool angularOnly)
 	{
 		m_angularOnly = angularOnly;
@@ -175,6 +185,7 @@
 	//       maintain a given angular target.
 	void enableMotor(bool enableMotor) 	{ m_enableAngularMotor = enableMotor; }
 	void setMaxMotorImpulse(btScalar maxMotorImpulse) { m_maxMotorImpulse = maxMotorImpulse; }
+	void setMotorTargetVelocity(btScalar motorTargetVelocity) { m_motorTargetVelocity = motorTargetVelocity; }
 	void setMotorTarget(const btQuaternion& qAinB, btScalar dt); // qAinB is rotation of body A wrt body B.
 	void setMotorTarget(btScalar targetAngle, btScalar dt);
 
@@ -192,6 +203,33 @@
 #endif
 	}
 
+	btScalar getLimitSoftness() const
+	{
+#ifdef	_BT_USE_CENTER_LIMIT_
+		return m_limit.getSoftness();
+#else
+		return m_limitSoftness;
+#endif
+	}
+
+	btScalar getLimitBiasFactor() const
+	{
+#ifdef	_BT_USE_CENTER_LIMIT_
+		return m_limit.getBiasFactor();
+#else
+		return m_biasFactor;
+#endif
+	}
+
+	btScalar getLimitRelaxationFactor() const
+	{
+#ifdef	_BT_USE_CENTER_LIMIT_
+		return m_limit.getRelaxationFactor();
+#else
+		return m_relaxationFactor;
+#endif
+	}
+
 	void	setAxis(btVector3& axisInA)
 	{
 		btVector3 rbAxisA1, rbAxisA2;
@@ -230,7 +268,7 @@
 	{
 #ifdef	_BT_USE_CENTER_LIMIT_
 	return m_limit.getHigh();
-#else		
+#else
 	return m_upperLimit;
 #endif
 	}
@@ -243,10 +281,10 @@
 	void testLimit(const btTransform& transA,const btTransform& transB);
 
 
-	const btTransform& getAFrame() const { return m_rbAFrame; };	
+	const btTransform& getAFrame() const { return m_rbAFrame; };
 	const btTransform& getBFrame() const { return m_rbBFrame; };
 
-	btTransform& getAFrame() { return m_rbAFrame; };	
+	btTransform& getAFrame() { return m_rbAFrame; };
 	btTransform& getBFrame() { return m_rbBFrame; };
 
 	inline int getSolveLimit()
@@ -267,33 +305,38 @@
 #endif
 	}
 
-	inline bool getAngularOnly() 
-	{ 
-		return m_angularOnly; 
-	}
-	inline bool getEnableAngularMotor() 
-	{ 
-		return m_enableAngularMotor; 
-	}
-	inline btScalar getMotorTargetVelosity() 
-	{ 
-		return m_motorTargetVelocity; 
-	}
-	inline btScalar getMaxMotorImpulse() 
-	{ 
-		return m_maxMotorImpulse; 
+	inline bool getAngularOnly()
+	{
+		return m_angularOnly;
+	}
+	inline bool getEnableAngularMotor()
+	{
+		return m_enableAngularMotor;
+	}
+	inline btScalar getMotorTargetVelosity()
+	{
+		return m_motorTargetVelocity;
+	}
+	inline btScalar getMaxMotorImpulse()
+	{
+		return m_maxMotorImpulse;
 	}
 	// access for UseFrameOffset
 	bool getUseFrameOffset() { return m_useOffsetForConstraintFrame; }
 	void setUseFrameOffset(bool frameOffsetOnOff) { m_useOffsetForConstraintFrame = frameOffsetOnOff; }
 
 
-	///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5). 
+	///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
 	///If no axis is provided, it uses the default axis for this constraint.
 	virtual	void	setParam(int num, btScalar value, int axis = -1);
 	///return the local value of parameter
 	virtual	btScalar getParam(int num, int axis = -1) const;
 
+	virtual	int getFlags() const
+    {
+        return m_flags;
+    }
+
 	virtual	int	calculateSerializeBufferSize() const;
 
 	///fills the dataBuffer and returns the struct name (and 0 on failure)
@@ -329,7 +372,7 @@
 	btTransformFloatData m_rbBFrame;
 	int			m_useReferenceFrameA;
 	int			m_angularOnly;
-	
+
 	int			m_enableAngularMotor;
 	float	m_motorTargetVelocity;
 	float	m_maxMotorImpulse;
