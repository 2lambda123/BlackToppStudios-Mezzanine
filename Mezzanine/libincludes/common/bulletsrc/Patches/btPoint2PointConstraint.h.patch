--- btPoint2PointConstraint.old.h	Wed Jun  6 19:56:31 2012
+++ btPoint2PointConstraint.new.h	Fri Jul 19 15:11:19 2013
@@ -4,8 +4,8 @@
 
 This software is provided 'as-is', without any express or implied warranty.
 In no event will the authors be held liable for any damages arising from the use of this software.
-Permission is granted to anyone to use this software for any purpose, 
-including commercial applications, and to alter it and redistribute it freely, 
+Permission is granted to anyone to use this software for any purpose,
+including commercial applications, and to alter it and redistribute it freely,
 subject to the following restrictions:
 
 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
@@ -57,14 +57,14 @@
 public:
 #endif
 	btJacobianEntry	m_jac[3]; //3 orthogonal linear constraints
-	
+
 	btVector3	m_pivotInA;
 	btVector3	m_pivotInB;
-	
+
 	int			m_flags;
 	btScalar	m_erp;
 	btScalar	m_cfm;
-	
+
 public:
 
 	BT_DECLARE_ALIGNED_ALLOCATOR();
@@ -111,11 +111,16 @@
 		return m_pivotInB;
 	}
 
-	///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5). 
+	///override the default global value of a parameter (such as ERP or CFM), optionally provide the axis (0..5).
 	///If no axis is provided, it uses the default axis for this constraint.
 	virtual	void	setParam(int num, btScalar value, int axis = -1);
 	///return the local value of parameter
 	virtual	btScalar getParam(int num, int axis = -1) const;
+
+	virtual	int getFlags() const
+    {
+        return m_flags;
+    }
 
 	virtual	int	calculateSerializeBufferSize() const;
 
