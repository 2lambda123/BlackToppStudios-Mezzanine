--- CMakeLists.txt	2012-12-22 21:13:31.000000000 -0600
+++ openal-soft/CMakeLists.txt	2012-12-23 11:12:11.287327019 -0600
@@ -26,45 +26,45 @@
 SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)
 
 
-OPTION(SSE  "Check for SSE CPU extensions"      ON)
-OPTION(NEON "Check for ARM Neon CPU extensions" ON)
+OPTION(ALSOFT_SSE  "Check for SSE CPU extensions"      ON)
+OPTION(ALSOFT_NEON "Check for ARM Neon CPU extensions" ON)
 
-OPTION(REQUIRE_SSE  "Require SSE CPU extensions"      OFF)
-OPTION(REQUIRE_NEON "Require ARM Neon CPU extensions" OFF)
+OPTION(ALSOFTREQUIRE_SSE  "Require SSE CPU extensions"      OFF)
+OPTION(ALSOFTREQUIRE_NEON "Require ARM Neon CPU extensions" OFF)
 
 
-OPTION(ALSA    "Check for ALSA backend"                ON)
-OPTION(OSS     "Check for OSS backend"                 ON)
-OPTION(SOLARIS "Check for Solaris backend"             ON)
-OPTION(SNDIO   "Check for SndIO backend"               ON)
-OPTION(MMDEVAPI "Check for MMDevApi"                   ON)
-OPTION(DSOUND  "Check for DirectSound backend"         ON)
-OPTION(WINMM   "Check for Windows Multimedia backend"  ON)
-OPTION(PORTAUDIO  "Check for PortAudio backend"        ON)
-OPTION(PULSEAUDIO "Check for PulseAudio backend"       ON)
-OPTION(COREAUDIO  "Check for CoreAudio backend"        ON)
-OPTION(OPENSL     "Check for OpenSL backend"           ON)
-OPTION(WAVE    "Enable Wave Writer backend"            ON)
-
-OPTION(REQUIRE_ALSA       "Require ALSA backend"               OFF)
-OPTION(REQUIRE_OSS        "Require OSS backend"                OFF)
-OPTION(REQUIRE_SOLARIS    "Require Solaris backend"            OFF)
-OPTION(REQUIRE_SNDIO      "Require SndIO backend"              OFF)
-OPTION(REQUIRE_MMDEVAPI   "Require MMDevApi"                   OFF)
-OPTION(REQUIRE_DSOUND     "Require DirectSound backend"        OFF)
-OPTION(REQUIRE_WINMM      "Require Windows Multimedia backend" OFF)
-OPTION(REQUIRE_PORTAUDIO  "Require PortAudio backend"          OFF)
-OPTION(REQUIRE_PULSEAUDIO "Require PulseAudio backend"         OFF)
-OPTION(REQUIRE_COREAUDIO  "Require CoreAudio backend"          OFF)
-OPTION(REQUIRE_OPENSL     "Require OpenSL backend"             OFF)
+OPTION(ALSOFTBACKEND_ALSA    "Check for ALSA backend"                ON)
+OPTION(ALSOFTBACKEND_OSS     "Check for OSS backend"                 ON)
+OPTION(ALSOFTBACKEND_SOLARIS "Check for Solaris backend"             ON)
+OPTION(ALSOFTBACKEND_SNDIO   "Check for SndIO backend"               ON)
+OPTION(ALSOFTBACKEND_MMDEVAPI "Check for MMDevApi"                   ON)
+OPTION(ALSOFTBACKEND_DSOUND  "Check for DirectSound backend"         ON)
+OPTION(ALSOFTBACKEND_WINMM   "Check for Windows Multimedia backend"  ON)
+OPTION(ALSOFTBACKEND_PORTAUDIO  "Check for PortAudio backend"        ON)
+OPTION(ALSOFTBACKEND_PULSEAUDIO "Check for PulseAudio backend"       ON)
+OPTION(ALSOFTBACKEND_COREAUDIO  "Check for CoreAudio backend"        ON)
+OPTION(ALSOFTBACKEND_OPENSL     "Check for OpenSL backend"           ON)
+OPTION(ALSOFTBACKEND_WAVE    "Enable Wave Writer backend"            ON)
+
+OPTION(ALSOFTREQUIRE_ALSA       "Require ALSA backend"               OFF)
+OPTION(ALSOFTREQUIRE_OSS        "Require OSS backend"                OFF)
+OPTION(ALSOFTREQUIRE_SOLARIS    "Require Solaris backend"            OFF)
+OPTION(ALSOFTREQUIRE_SNDIO      "Require SndIO backend"              OFF)
+OPTION(ALSOFTREQUIRE_MMDEVAPI   "Require MMDevApi"                   OFF)
+OPTION(ALSOFTREQUIRE_DSOUND     "Require DirectSound backend"        OFF)
+OPTION(ALSOFTREQUIRE_WINMM      "Require Windows Multimedia backend" OFF)
+OPTION(ALSOFTREQUIRE_PORTAUDIO  "Require PortAudio backend"          OFF)
+OPTION(ALSOFTREQUIRE_PULSEAUDIO "Require PulseAudio backend"         OFF)
+OPTION(ALSOFTREQUIRE_COREAUDIO  "Require CoreAudio backend"          OFF)
+OPTION(ALSOFTREQUIRE_OPENSL     "Require OpenSL backend"             OFF)
 
-OPTION(DLOPEN  "Check for the dlopen API for loading optional libs"  ON)
+OPTION(ALSOFT_DLOPEN  "Check for the dlopen API for loading optional libs"  ON)
 
-OPTION(WERROR  "Treat compile warnings as errors"      OFF)
+OPTION(ALSOFT_WERROR  "Treat compile warnings as errors"      OFF)
 
-OPTION(UTILS  "Build and install utility programs"  ON)
+OPTION(ALSOFT_UTILS  "Build and install utility programs"  ON)
 
-OPTION(EXAMPLES  "Build and install example programs"  ON)
+OPTION(ALSOFT_EXAMPLES  "Build and install example programs"  ON)
 
 OPTION(ALSOFT_CONFIG "Install alsoft.conf sample configuration file" ON)
 
@@ -159,7 +159,7 @@
         ADD_DEFINITIONS(-Wextra)
     ENDIF()
 
-    IF(WERROR)
+    IF(ALSOFT_WERROR)
         ADD_DEFINITIONS(-Werror)
     ENDIF()
 
@@ -346,7 +346,7 @@
 
 
 # Check for the dlopen API (for dynamicly loading backend libs)
-IF(DLOPEN)
+IF(ALSOFT_DLOPEN)
     CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
     IF(HAVE_DLFCN_H)
         CHECK_LIBRARY_EXISTS(dl dlopen "" HAVE_LIBDL)
@@ -458,7 +458,7 @@
 SET(HAVE_NEON 0)
 
 # Check for SSE support
-IF(SSE AND ALIGN_DECL)
+IF(ALSOFT_SSE AND ALIGN_DECL)
     CHECK_INCLUDE_FILE(xmmintrin.h HAVE_XMMINTRIN_H "${SSE_SWITCH}")
     IF(HAVE_XMMINTRIN_H)
         SET(HAVE_SSE 1)
@@ -470,12 +470,12 @@
         SET(CPU_EXTS "${CPU_EXTS}, SSE")
     ENDIF()
 ENDIF()
-IF(REQUIRE_SSE AND NOT HAVE_SSE)
+IF(ALSOFTREQUIRE_SSE AND NOT HAVE_SSE)
     MESSAGE(FATAL_ERROR "Failed to enabled required SSE CPU extensions")
 ENDIF()
 
 # Check for ARM Neon support
-IF(NEON)
+IF(ALSOFT_NEON)
     CHECK_INCLUDE_FILE(arm_neon.h HAVE_ARM_NEON_H)
     IF(HAVE_ARM_NEON_H)
         SET(HAVE_NEON 1)
@@ -483,7 +483,7 @@
         SET(CPU_EXTS "${CPU_EXTS}, Neon")
     ENDIF()
 ENDIF()
-IF(REQUIRE_NEON AND NOT HAVE_NEON)
+IF(ALSOFTREQUIRE_NEON AND NOT HAVE_NEON)
     MESSAGE(FATAL_ERROR "Failed to enabled required ARM Neon CPU extensions")
 ENDIF()
 
@@ -509,7 +509,7 @@
 SET(HAVE_WAVE       0)
 
 # Check ALSA backend
-IF(ALSA)
+IF(ALSOFTBACKEND_ALSA)
     CHECK_INCLUDE_FILE(alsa/asoundlib.h HAVE_ALSA_ASOUNDLIB_H)
     IF(HAVE_ALSA_ASOUNDLIB_H)
         CHECK_SHARED_FUNCTION_EXISTS(snd_pcm_open "alsa/asoundlib.h" asound "" HAVE_LIBASOUND)
@@ -525,12 +525,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_ALSA AND NOT HAVE_ALSA)
+IF(ALSOFTREQUIRE_ALSA AND NOT HAVE_ALSA)
     MESSAGE(FATAL_ERROR "Failed to enabled required ALSA backend")
 ENDIF()
 
 # Check OSS backend
-IF(OSS)
+IF(ALSOFTBACKEND_OSS)
     CHECK_INCLUDE_FILE(sys/soundcard.h HAVE_SYS_SOUNDCARD_H)
     IF(HAVE_SYS_SOUNDCARD_H)
         SET(HAVE_OSS 1)
@@ -538,12 +538,12 @@
         SET(BACKENDS  "${BACKENDS} OSS,")
     ENDIF()
 ENDIF()
-IF(REQUIRE_OSS AND NOT HAVE_OSS)
+IF(ALSOFTREQUIRE_OSS AND NOT HAVE_OSS)
     MESSAGE(FATAL_ERROR "Failed to enabled required OSS backend")
 ENDIF()
 
 # Check Solaris backend
-IF(SOLARIS)
+IF(ALSOFTBACKEND_SOLARIS)
     CHECK_INCLUDE_FILE(sys/audioio.h HAVE_SYS_AUDIOIO_H)
     IF(HAVE_SYS_AUDIOIO_H)
         SET(HAVE_SOLARIS 1)
@@ -551,12 +551,12 @@
         SET(BACKENDS  "${BACKENDS} Solaris,")
     ENDIF()
 ENDIF()
-IF(REQUIRE_SOLARIS AND NOT HAVE_SOLARIS)
+IF(ALSOFTREQUIRE_SOLARIS AND NOT HAVE_SOLARIS)
     MESSAGE(FATAL_ERROR "Failed to enabled required Solaris backend")
 ENDIF()
 
 # Check SndIO backend
-IF(SNDIO)
+IF(ALSOFTBACKEND_SNDIO)
     CHECK_INCLUDE_FILE(sndio.h HAVE_SNDIO_H)
     IF(HAVE_SNDIO_H)
         CHECK_SHARED_FUNCTION_EXISTS(sio_open "sndio.h" sndio "" HAVE_LIBSNDIO)
@@ -568,13 +568,13 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_SNDIO AND NOT HAVE_SNDIO)
+IF(ALSOFTREQUIRE_SNDIO AND NOT HAVE_SNDIO)
     MESSAGE(FATAL_ERROR "Failed to enabled required SndIO backend")
 ENDIF()
 
 # Check for MMDevApi backend
 IF(HAVE_WINDOWS_H)
-    IF(MMDEVAPI)
+    IF(ALSOFTBACKEND_MMDEVAPI)
         CHECK_INCLUDE_FILE(mmdeviceapi.h HAVE_MMDEVICEAPI_H)
         IF(HAVE_MMDEVICEAPI_H)
             SET(HAVE_MMDEVAPI 1)
@@ -584,12 +584,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_MMDEVAPI AND NOT HAVE_MMDEVAPI)
+IF(ALSOFTREQUIRE_MMDEVAPI AND NOT HAVE_MMDEVAPI)
     MESSAGE(FATAL_ERROR "Failed to enabled required MMDevApi backend")
 ENDIF()
 
 # Check DSound/MMSystem backend
-IF(DSOUND)
+IF(ALSOFTBACKEND_DSOUND)
     CHECK_INCLUDE_FILE(dsound.h HAVE_DSOUND_H)
     IF(HAVE_DSOUND_H)
         CHECK_SHARED_FUNCTION_EXISTS(DirectSoundCreate "dsound.h" dsound "" HAVE_LIBDSOUND)
@@ -606,12 +606,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_DSOUND AND NOT HAVE_DSOUND)
+IF(ALSOFTREQUIRE_DSOUND AND NOT HAVE_DSOUND)
     MESSAGE(FATAL_ERROR "Failed to enabled required DSound backend")
 ENDIF()
 
 IF(HAVE_WINDOWS_H)
-    IF(WINMM)
+    IF(ALSOFTBACKEND_WINMM)
         CHECK_INCLUDE_FILES("windows.h;mmsystem.h" HAVE_MMSYSTEM_H -D_WIN32_WINNT=0x0501)
         IF(HAVE_MMSYSTEM_H AND HAVE_LIBWINMM)
             SET(HAVE_WINMM 1)
@@ -620,12 +620,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_WINMM AND NOT HAVE_WINMM)
+IF(ALSOFTREQUIRE_WINMM AND NOT HAVE_WINMM)
     MESSAGE(FATAL_ERROR "Failed to enabled required WinMM backend")
 ENDIF()
 
 # Check PortAudio backend
-IF(PORTAUDIO)
+IF(ALSOFTBACKEND_PORTAUDIO)
     CHECK_INCLUDE_FILE(portaudio.h HAVE_PORTAUDIO_H)
     IF(HAVE_PORTAUDIO_H)
         CHECK_SHARED_FUNCTION_EXISTS(Pa_Initialize "portaudio.h" portaudio "" HAVE_LIBPORTAUDIO)
@@ -641,12 +641,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_PORTAUDIO AND NOT HAVE_PORTAUDIO)
+IF(ALSOFTREQUIRE_PORTAUDIO AND NOT HAVE_PORTAUDIO)
     MESSAGE(FATAL_ERROR "Failed to enabled required PortAudio backend")
 ENDIF()
 
 # Check PulseAudio backend
-IF(PULSEAUDIO)
+IF(ALSOFTBACKEND_PULSEAUDIO)
     CHECK_INCLUDE_FILE(pulse/pulseaudio.h HAVE_PULSE_PULSEAUDIO_H)
     IF(HAVE_PULSE_PULSEAUDIO_H)
         CHECK_SHARED_FUNCTION_EXISTS(pa_context_new "pulse/pulseaudio.h" pulse "" HAVE_LIBPULSE)
@@ -662,7 +662,7 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_PULSEAUDIO AND NOT HAVE_PULSEAUDIO)
+IF(ALSOFTREQUIRE_PULSEAUDIO AND NOT HAVE_PULSEAUDIO)
     MESSAGE(FATAL_ERROR "Failed to enabled required PulseAudio backend")
 ENDIF()
 
@@ -690,12 +690,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_COREAUDIO AND NOT HAVE_COREAUDIO)
+IF(ALSOFTREQUIRE_COREAUDIO AND NOT HAVE_COREAUDIO)
     MESSAGE(FATAL_ERROR "Failed to enabled required CoreAudio backend")
 ENDIF()
 
 # Check for OpenSL (Android) backend
-IF(OPENSL)
+IF(ALSOFTBACKEND_OPENSL)
     CHECK_INCLUDE_FILES("SLES/OpenSLES.h;SLES/OpenSLES_Android.h" HAVE_SLES_OPENSLES_ANDROID_H)
     IF(HAVE_SLES_OPENSLES_ANDROID_H)
         CHECK_SHARED_FUNCTION_EXISTS(slCreateEngine "SLES/OpenSLES.h" OpenSLES "" HAVE_LIBOPENSLES)
@@ -707,12 +707,12 @@
         ENDIF()
     ENDIF()
 ENDIF()
-IF(REQUIRE_OPENSL AND NOT HAVE_OPENSL)
+IF(ALSOFTREQUIRE_OPENSL AND NOT HAVE_OPENSL)
     MESSAGE(FATAL_ERROR "Failed to enabled required OpenSL backend")
 ENDIF()
 
 # Optionally enable the Wave Writer backend
-IF(WAVE)
+IF(ALSOFTBACKEND_WAVE)
     SET(HAVE_WAVE 1)
     SET(ALC_OBJS  ${ALC_OBJS} Alc/backends/wave.c)
     SET(BACKENDS  "${BACKENDS} WaveFile,")
@@ -721,7 +721,7 @@
 # This is always available
 SET(BACKENDS  "${BACKENDS} Null")
 
-IF(EXAMPLES)
+IF(ALSOFT_EXAMPLES)
     # Might be able to use earlier versions, but these definitely work
     PKG_CHECK_MODULES(FFMPEG libavcodec>=53.61.100 libavformat>=53.32.100 libavutil>=51.35.100)
 ENDIF()
@@ -803,7 +803,7 @@
     MESSAGE(STATUS "")
 ENDIF()
 
-IF(UTILS)
+IF(ALSOFT_UTILS)
     ADD_EXECUTABLE(openal-info utils/openal-info.c)
     TARGET_LINK_LIBRARIES(openal-info ${LIBNAME})
 
@@ -821,7 +821,7 @@
     MESSAGE(STATUS "")
 ENDIF()
 
-IF(EXAMPLES)
+IF(ALSOFT_EXAMPLES)
     IF(FFMPEG_FOUND)
         ADD_EXECUTABLE(alstream examples/common/alhelpers.c
                                 examples/common/alffmpeg.c
