// Â© Copyright 2010 - 2015 BlackTopp Studios Inc.
/* This file is part of The Mezzanine Engine.

    The Mezzanine Engine is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The Mezzanine Engine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with The Mezzanine Engine.  If not, see <http://www.gnu.org/licenses/>.
*/
/* The original authors have included a copy of the license specified above in the
   'Docs' folder. See 'gpl.txt'
*/
/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to
   Build professional software and charge for their product.

   However there are some practical restrictions, so if your project involves
   any of the following you should contact us and we will try to work something
   out:
    - DRM or Copy Protection of any kind(except Copyrights)
    - Software Patents You Do Not Wish to Freely License
    - Any Kind of Linking to Non-GPL licensed Works
    - Are Currently In Violation of Another Copyright Holder's GPL License
    - If You want to change our code and not add a few hundred MB of stuff to
        your distribution

   These and other limitations could cause serious legal problems if you ignore
   them, so it is best to simply contact us or the Free Software Foundation, if
   you have any questions.

   Joseph Toppi - toppij@gmail.com
   John Blackwood - makoenergy02@gmail.com
*/

// WARNING!
// This file is automatically generated. If you change it your changes wil not persist.

#ifndef _exception_h
#define _exception_h

#include "datatypes.h"

/// @file
/// @brief This implements the exception hiearchy for Mezzanine.
/// @warning This file is automatically generated. If you change it your changes wil not persist.

///////////////////////////////////////////////////////////////////////////////
/// @brief This is the exception thrown by most Mezzanine systems that can throw exceptions.

class ExceptionBase : public std::exception
{
    public:
        /// @enum ExceptionCodes
        /// @brief This enum provides mapping/naming for all the core Mezzanine.
        /// @details This system might superficially look convoluted. It is designed to make
        /// capturing as much detail about problems as they occur.
        ///
        /// The numbers listed here must be unique to each exception. If an error code does not
        /// identify the problem exactly it should be considered 'Unknown' for as much as it does
        /// specify. For example, if there is an error opening a file for reading and writing, and
        /// we don't know why it failed, using @ref IO_EXCEPTION would make sense
        enum ExceptionCodes
        {
@ExceptionEnumerations@
        };

    private:
        /// @internal
        /// @brief This stores the exception type as a string.
        const String ExceptionTypeName;
        /// @internal
        /// @brief When converting to Java types this is the kind of exception this becomes.
        const String ExceptionJavaTypeName;
        /// @internal
        /// @brief This stores the Error Message
        const String ErrorMessage;
        /// @internal
        /// @brief This stores the function name where the exception originated.
        const String Function;
        /// @internal
        /// @brief This stores the file where the exception originated.
        const String File;
        /// @internal
        /// @brief This stores the line number where the exception originated.
        const Int32 Line;
    public:
        /// @brief Simple Constructor.
        /// @param TypeName The name of the type of exception being thrown.
        /// @param JavaTypeName What Java exception Corresponds to this?
        /// @param Message A basic description of the error.
        /// @param SrcFunction The name of the function from which this originated.
        /// @param SrcFile The name of the file from which this originated.
        /// @param FileLine The line on the named file from which this originated.
        /// @details Don't call this, use @ref MEZZ_EXCEPTION to throw these, it is much simpler.
        /// This constructor might change with time to include more data.
        ExceptionBase(const String& TypeName,
                      const String& JavaTypeName,
                      const String& Message,
                      const String& SrcFunction,
                      const String& SrcFile,
                      const Int32& FileLine);
        /// @brief Class destructor.
        virtual ~ExceptionBase() throw();

       ///////////////////////////////////////////////////////////////////////////////
        // Error Information
        /// @brief Gets the exception code for this exception.
        /// @return Returns the exception code for this exception.
        virtual Int32 GetExceptionCode() const throw() = 0;

        /// @brief Gets the function of the exception.
        /// @return Returns a const string reference
        const String& GetFunction() const throw();
        /// @brief Gets the file of the exception.
        /// @return Returns the name of the file this exception is being thrown from.
        const String& GetFile() const throw();
        /// @brief Gets the line number of the exception.
        /// @return Returns the line in the file this exception is being thrown from.
        const Int32& GetLine() const throw();

        ///////////////////////////////////////////////////////////////////////////////
        // Class MetaData
        /// @brief Gets the name of the exception type.
        /// @return Returns the exception type as a string.
        const String& GetExceptionTypeName() const throw();
        /// @brief Gets the name of the exception type.
        /// @return Returns the exception type as a string.
        const String& GetExceptionJavaTypeName() const throw();

        ///////////////////////////////////////////////////////////////////////////////
        // Error Messages
        /// @brief Constructs the complete message from all the information provided about the exception.
        /// @return Returns a string with the complete error.
        String GetCompleteMessage() const;
        /// @brief Retrieves the error message.
        /// @return This returns a string that is the stored error message.
        virtual String what() throw();
};//Exception

///////////////////////////////////////////////////////////////////////////////
/// @internal
/// @struct ExceptionFactory
/// @brief Template class that serves as the base for exception factories.
/// @details Additional exceptions and their factories have to specialize from this template
/// changing the type value to the new exception type.This allows our exception macro to find the
/// appropriate factory at compile when template are being resolved. So this system can be
/// extended with additional exceptions wherever desired. Attempting to create an unknown exception
/// simply won't compile because the base exception class being abstract.
///////////////////////////////////////////////////////////////////////////////
template <Int32 N>
struct ExceptionFactory
{
    /// @brief This allows parameterized uses of this type when, so exception can be throw without directly using the type system
    typedef ExceptionBase Type;
}; //ExceptionFactory


///////////////////////////////////////////////////////////////////////////////
// Exception code class definitions.

@Exceptions@


#ifndef MEZZ_EXCEPTION
/// @brief An easy way to throw exception with rich information.
/// @details An important part of troubleshooting errors from the users perspective is being able to
/// tie a specific 'fix' to a specific error message. An important part of that is catching the
/// right exceptions at the right time. It is also important to not allocate more memory or other
/// resources while creating an exception.
/// @n @n
/// This macro makes doing all of these easy. Every exception thrown by this macro with provide the
/// function name, the file name and the line in the file from which it was thrown. That provides
/// all the information the developer needs to identify the issue. This uses some specific template
/// machinery to generate specifically typed exceptions static instances at compile to insure the
/// behaviors a programmer needs. Since these are allocated (optimized out really) when the program
/// is first loaded so there will be no allocations when this is called, and the type is controlled
/// by the error number parameter.
/// @n @n
/// As long as the automation developer provides a unique string for each failure, then any messages
/// logged or presented to the user or log will uniquely identify that specific problem. This
/// allows the user to perform very specific web searches and potentially allows
/// troubleshooters/technicians to skip lengthy diagnostics steps.
/// @param num A specific code from the @ref ExceptionBase::ExceptionCodes enum will control the
/// type of exception produced.
/// @param desc A message/description to be passed through to the exceptions constructor.
#define MEZZ_EXCEPTION(num, desc) throw ExceptionFactory<num>::Type(desc, __func__, __FILE__, __LINE__ );
#endif

#endif // \_GenException_h
