/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Mezzanine__XML__Attribute swig_types[0]
#define SWIGTYPE_p_Mezzanine__XML__AttributeIterator swig_types[1]
#define SWIGTYPE_p_Mezzanine__XML__AttributeStruct swig_types[2]
#define SWIGTYPE_p_Mezzanine__XML__Document swig_types[3]
#define SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator swig_types[4]
#define SWIGTYPE_p_Mezzanine__XML__Node swig_types[5]
#define SWIGTYPE_p_Mezzanine__XML__NodeIterator swig_types[6]
#define SWIGTYPE_p_Mezzanine__XML__NodeStruct swig_types[7]
#define SWIGTYPE_p_Mezzanine__XML__NodeText swig_types[8]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t swig_types[9]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t swig_types[10]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t swig_types[11]
#define SWIGTYPE_p_Mezzanine__XML__ParseResult swig_types[12]
#define SWIGTYPE_p_Mezzanine__XML__TreeWalker swig_types[13]
#define SWIGTYPE_p_Mezzanine__XML__Writer swig_types[14]
#define SWIGTYPE_p_Mezzanine__XML__WriterFile swig_types[15]
#define SWIGTYPE_p_Mezzanine__XML__WriterStream swig_types[16]
#define SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper swig_types[17]
#define SWIGTYPE_p_Mezzanine__XML__XPathNode swig_types[18]
#define SWIGTYPE_p_Mezzanine__XML__XPathNodeSet swig_types[19]
#define SWIGTYPE_p_Mezzanine__XML__XPathParseResult swig_types[20]
#define SWIGTYPE_p_Mezzanine__XML__XPathQuery swig_types[21]
#define SWIGTYPE_p_Mezzanine__XML__XPathVariable swig_types[22]
#define SWIGTYPE_p_Mezzanine__XML__XPathVariableSet swig_types[23]
#define SWIGTYPE_p_Resource__DataStream swig_types[24]
#define SWIGTYPE_p_SDL_Event swig_types[25]
#define SWIGTYPE_p_attribute_iterator swig_types[26]
#define SWIGTYPE_p_bool swig_types[27]
#define SWIGTYPE_p_char swig_types[28]
#define SWIGTYPE_p_difference_type swig_types[29]
#define SWIGTYPE_p_double swig_types[30]
#define SWIGTYPE_p_f_p_void__void swig_types[31]
#define SWIGTYPE_p_f_size_t__p_void swig_types[32]
#define SWIGTYPE_p_float swig_types[33]
#define SWIGTYPE_p_int swig_types[34]
#define SWIGTYPE_p_iterator swig_types[35]
#define SWIGTYPE_p_iterator_category swig_types[36]
#define SWIGTYPE_p_long_long swig_types[37]
#define SWIGTYPE_p_short swig_types[38]
#define SWIGTYPE_p_signed_char swig_types[39]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[40]
#define SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t swig_types[41]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[42]
#define SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t swig_types[43]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[44]
#define SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t swig_types[45]
#define SWIGTYPE_p_std__istream swig_types[46]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[47]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[48]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[49]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[50]
#define SWIGTYPE_p_std__string swig_types[51]
#define SWIGTYPE_p_std__stringstream swig_types[52]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[53]
#define SWIGTYPE_p_std__wstring swig_types[54]
#define SWIGTYPE_p_swig__ConstIterator swig_types[55]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[56]
#define SWIGTYPE_p_swig__Iterator swig_types[57]
#define SWIGTYPE_p_unsigned_char swig_types[58]
#define SWIGTYPE_p_unsigned_int swig_types[59]
#define SWIGTYPE_p_unsigned_long swig_types[60]
#define SWIGTYPE_p_unsigned_long_long swig_types[61]
#define SWIGTYPE_p_unsigned_short swig_types[62]
#define SWIGTYPE_p_value_type swig_types[63]
#define SWIGTYPE_p_void swig_types[64]
#define SWIGTYPE_p_wchar_t swig_types[65]
static swig_type_info *swig_types[67];
static swig_module_info swig_module = {swig_types, 66, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_MezzanineXML
#define SWIG_name    "MezzanineXML"

static VALUE mMezzanineXML;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020010 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"
        #include "SDL.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        #ifdef GetExceptionCode
        #undef GetExceptionCode
        #endif

        using namespace Mezzanine;
        using namespace Mezzanine::Threading;
    

#include <stdexcept>


namespace swig {
  class SwigGCReferences {
    // Hash of all GC_VALUE's currently in use
    static SwigGCReferences s_references;

    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      return s_references;
    }
    static void initialize() {
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(s_references._hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(s_references._hash, obj, INT2NUM(n));
        else
          rb_hash_delete(s_references._hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                       (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  SwigGCReferences SwigGCReferences::s_references;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


#include <string>


#include <iostream>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <deque>


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 


#include <float.h>


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsCharArray(VALUE obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (VALUE obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

static swig_class SwigClassGCVALUE;


/*
  Document-method: MezzanineXML::GCVALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GCVALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::GCVALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GCVALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

static swig_class SwigClassAttribute;

SWIGINTERN VALUE
_wrap_new_Attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::Attribute *)new Mezzanine::XML::Attribute();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Attribute_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Attribute_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__Attribute);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeStruct *arg1 = (Mezzanine::XML::AttributeStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeStruct *","Attribute", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeStruct * >(argp1);
  result = (Mezzanine::XML::Attribute *)new Mezzanine::XML::Attribute(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Attribute__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeStruct, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Attribute__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Attribute.new", 
    "    Attribute.new()\n"
    "    Attribute.new(Mezzanine::XML::AttributeStruct *attr)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.<

  call-seq:
    <(r) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Attribute___lt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator <((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.>

  call-seq:
    >(r) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Attribute___gt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator >((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.<=

  call-seq:
    <=(r) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Attribute___le__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator <=((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.>=

  call-seq:
    >=(r) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Attribute___ge__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator >=((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","Name", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->Name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","Value", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->Value();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_string__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AsString", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->AsString((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_string__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->AsString();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_string(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_string__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Attribute_as_string__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_string", 
    "    Mezzanine::Char8 const * Attribute.as_string(Mezzanine::Char8 const *def)\n"
    "    Mezzanine::Char8 const * Attribute.as_string()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_int__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsInt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AsInt", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((Mezzanine::XML::Attribute const *)arg1)->AsInt(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_int__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsInt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (int)((Mezzanine::XML::Attribute const *)arg1)->AsInt();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_int(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_int__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_int__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_int", 
    "    int Attribute.as_int(int def)\n"
    "    int Attribute.as_int()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_uint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsUint", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","AsUint", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)((Mezzanine::XML::Attribute const *)arg1)->AsUint(arg2);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_uint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsUint", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (unsigned int)((Mezzanine::XML::Attribute const *)arg1)->AsUint();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_uint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_uint__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_uint__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_uint", 
    "    unsigned int Attribute.as_uint(unsigned int def)\n"
    "    unsigned int Attribute.as_uint()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_double__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsDouble", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","AsDouble", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)((Mezzanine::XML::Attribute const *)arg1)->AsDouble(arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_double__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsDouble", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (double)((Mezzanine::XML::Attribute const *)arg1)->AsDouble();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_double(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_double__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_double__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_double", 
    "    double Attribute.as_double(double def)\n"
    "    double Attribute.as_double()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_float__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","AsFloat", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (float)((Mezzanine::XML::Attribute const *)arg1)->AsFloat(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_float__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (float)((Mezzanine::XML::Attribute const *)arg1)->AsFloat();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_float(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_float__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_float__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_float", 
    "    float Attribute.as_float(float def)\n"
    "    float Attribute.as_float()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_real__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsReal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","AsReal", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = (Mezzanine::Real)((Mezzanine::XML::Attribute const *)arg1)->AsReal(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_real__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsReal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::XML::Attribute const *)arg1)->AsReal();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_real(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_real__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_real__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_real", 
    "    Mezzanine::Real Attribute.as_real(Mezzanine::Real def)\n"
    "    Mezzanine::Real Attribute.as_real()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_whole__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsWhole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","AsWhole", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  result = (Mezzanine::Whole)((Mezzanine::XML::Attribute const *)arg1)->AsWhole(arg2);
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_whole__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsWhole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::XML::Attribute const *)arg1)->AsWhole();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_whole(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_whole__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_whole__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_whole", 
    "    Mezzanine::Whole Attribute.as_whole(Mezzanine::Whole def)\n"
    "    Mezzanine::Whole Attribute.as_whole()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_integer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::Integer result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsInteger", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Integer","AsInteger", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Integer >(val2);
  result = (Mezzanine::Integer)((Mezzanine::XML::Attribute const *)arg1)->AsInteger(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_integer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Integer result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsInteger", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::Integer)((Mezzanine::XML::Attribute const *)arg1)->AsInteger();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_integer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_integer__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_integer__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_integer", 
    "    Mezzanine::Integer Attribute.as_integer(Mezzanine::Integer def)\n"
    "    Mezzanine::Integer Attribute.as_integer()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_bool__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","AsBool", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->AsBool(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_as_bool__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","AsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->AsBool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Attribute_as_bool(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Attribute_as_bool__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Attribute_as_bool__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_bool", 
    "    bool Attribute.as_bool(bool def)\n"
    "    bool Attribute.as_bool()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_set_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute *","SetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->SetName((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_set_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute *","SetValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetValue", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetValue", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->SetValue((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_get_next_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","GetNextAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = ((Mezzanine::XML::Attribute const *)arg1)->GetNextAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_get_previous_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","GetPreviousAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = ((Mezzanine::XML::Attribute const *)arg1)->GetPreviousAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_hash_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","HashValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = ((Mezzanine::XML::Attribute const *)arg1)->HashValue();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Attribute_internal_object(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::AttributeStruct *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const *","InternalObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  result = (Mezzanine::XML::AttributeStruct *)((Mezzanine::XML::Attribute const *)arg1)->InternalObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__AttributeStruct, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_Attribute(Mezzanine::XML::Attribute *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ParseMinimal_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseMinimal));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParsePi_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParsePi));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseComments_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseComments));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseCdata_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseCdata));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseWsPcdata_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseWsPcdata));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseEscapes_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseEscapes));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseEol_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseEol));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseWconvAttribute_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseWconvAttribute));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseWnormAttribute_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseWnormAttribute));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseDeclaration_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseDeclaration));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseDocType_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseDocType));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseWsPcdata_single_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseWsPcdata_single));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseDefault_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseDefault));
  return _val;
}


SWIGINTERN VALUE
_wrap_ParseFull_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::ParseFull));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatIndent_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatIndent));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatWriteBom_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatWriteBom));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatRaw_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatRaw));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatNoDeclaration_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatNoDeclaration));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatNoEscapes_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatNoEscapes));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatSaveFileText_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatSaveFileText));
  return _val;
}


SWIGINTERN VALUE
_wrap_FormatDefault_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Mezzanine::XML::FormatDefault));
  return _val;
}


static swig_class SwigClassNode;

SWIGINTERN VALUE
_wrap_new_Node__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::Node *)new Mezzanine::XML::Node();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_Node(Mezzanine::XML::Node *arg1) {
    delete arg1;
}

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Node_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Node_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__Node);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Node__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeStruct *arg1 = (Mezzanine::XML::NodeStruct *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeStruct *","Node", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeStruct * >(argp1);
  result = (Mezzanine::XML::Node *)new Mezzanine::XML::Node(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Node(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Node__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Node__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "Node.new", 
    "    Node.new()\n"
    "    Node.new(Mezzanine::XML::NodeStruct *p)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.==

  call-seq:
    ==(r) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Node___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator ==((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.<

  call-seq:
    <(r) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Node___lt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.>

  call-seq:
    >(r) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_Node___gt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator >((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.<=

  call-seq:
    <=(r) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Node___le__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.>=

  call-seq:
    >=(r) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_Node___ge__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator >=((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (bool)((Mezzanine::XML::Node const *)arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_type(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Type", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::XML::NodeType)((Mezzanine::XML::Node const *)arg1)->Type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Name", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->Name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Value", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->Value();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_first_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetFirstAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetFirstAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_last_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetLastAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetLastAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_first_child(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetFirstChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetFirstChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_last_child(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetLastChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetLastChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_next_sibling__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetNextSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetNextSibling();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_previous_sibling__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetPreviousSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetPreviousSibling();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_parent(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetParent", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetParent();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_root(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetRoot", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetRoot();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_text(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeText result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetText", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetText();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::NodeText(static_cast< const Mezzanine::XML::NodeText& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeText, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","GetChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","GetChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = ((Mezzanine::XML::Node const *)arg1)->GetChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_get_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_get_child__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_get_child__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_child", 
    "    Mezzanine::XML::Node Node.get_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.get_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_next_sibling__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetNextSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetNextSibling", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_get_next_sibling(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_get_next_sibling__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_get_next_sibling__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_next_sibling", 
    "    Mezzanine::XML::Node Node.get_next_sibling()\n"
    "    Mezzanine::XML::Node Node.get_next_sibling(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_previous_sibling__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetPreviousSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetPreviousSibling", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_get_previous_sibling(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_get_previous_sibling__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_get_previous_sibling__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_previous_sibling", 
    "    Mezzanine::XML::Node Node.get_previous_sibling()\n"
    "    Mezzanine::XML::Node Node.get_previous_sibling(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_child_value__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetChildValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->GetChildValue();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_child_value__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetChildValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChildValue", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_get_child_value(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_get_child_value__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_get_child_value__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_child_value", 
    "    Mezzanine::Char8 const * Node.get_child_value()\n"
    "    Mezzanine::Char8 const * Node.get_child_value(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_set_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","SetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->SetName((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_set_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","SetValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SetValue", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AppendAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (arg1)->AppendAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","AppendAttribute", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","AppendAttribute", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_append_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_append_attribute__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_append_attribute__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_attribute", 
    "    Mezzanine::XML::Attribute Node.append_attribute(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Attribute Node.append_attribute(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","PrependAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_attribute_after(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertAttributeAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertAttributeAfter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertAttributeAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertAttributeAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_attribute_before(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertAttributeBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertAttributeBefore", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertAttributeBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertAttributeBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","AppendCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","AppendCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","PrependCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","PrependCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_copy_after__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertCopyAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_copy_before__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertCopyBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","AppendChild", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  result = (arg1)->AppendChild(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (arg1)->AppendChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","PrependChild", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  result = (arg1)->PrependChild(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (arg1)->PrependChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_child_after__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertChildAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","InsertChildAfter", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_child_before__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertChildBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","InsertChildBefore", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_child__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AppendChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (arg1)->AppendChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_child__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","AppendChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","AppendChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (arg1)->AppendChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_append_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_append_child__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Node_append_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_append_child__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_append_child__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_child", 
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::XML::NodeType Type)\n"
    "    Mezzanine::XML::Node Node.append_child()\n"
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_child__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","PrependChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (arg1)->PrependChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_child__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","PrependChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","PrependChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (arg1)->PrependChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_prepend_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_prepend_child__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Node_prepend_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_prepend_child__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_prepend_child__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.prepend_child", 
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::XML::NodeType Type)\n"
    "    Mezzanine::XML::Node Node.prepend_child()\n"
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_child_after__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertChildAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertChildAfter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_insert_child_after(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_child_after__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_child_after__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_child_after", 
    "    Mezzanine::XML::Node Node.insert_child_after(Mezzanine::XML::NodeType Type, Mezzanine::XML::Node const &node)\n"
    "    Mezzanine::XML::Node Node.insert_child_after(Mezzanine::Char8 const *Name, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_child_before__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertChildBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertChildBefore", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_insert_child_before(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_child_before__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_child_before__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_child_before", 
    "    Mezzanine::XML::Node Node.insert_child_before(Mezzanine::XML::NodeType Type, Mezzanine::XML::Node const &node)\n"
    "    Mezzanine::XML::Node Node.insert_child_before(Mezzanine::Char8 const *Name, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_append_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","AppendCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","AppendCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","AppendCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_append_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_append_copy__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_append_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_copy", 
    "    Mezzanine::XML::Node Node.append_copy(Mezzanine::XML::Attribute const &proto)\n"
    "    Mezzanine::XML::Node Node.append_copy(Mezzanine::XML::Node const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_prepend_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","PrependCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","PrependCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","PrependCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_prepend_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_prepend_copy__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_prepend_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.prepend_copy", 
    "    Mezzanine::XML::Node Node.prepend_copy(Mezzanine::XML::Attribute const &proto)\n"
    "    Mezzanine::XML::Node Node.prepend_copy(Mezzanine::XML::Node const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_copy_after__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertCopyAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyAfter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyAfter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_insert_copy_after(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_copy_after__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_copy_after__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_copy_after", 
    "    Mezzanine::XML::Node Node.insert_copy_after(Mezzanine::XML::Attribute const &proto, Mezzanine::XML::Attribute const &attr)\n"
    "    Mezzanine::XML::Node Node.insert_copy_after(Mezzanine::XML::Node const &proto, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_insert_copy_before__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","InsertCopyBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyBefore", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyBefore", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_insert_copy_before(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_copy_before__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_insert_copy_before__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_copy_before", 
    "    Mezzanine::XML::Node Node.insert_copy_before(Mezzanine::XML::Attribute const &proto, Mezzanine::XML::Attribute const &attr)\n"
    "    Mezzanine::XML::Node Node.insert_copy_before(Mezzanine::XML::Node const &proto, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_remove_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","RemoveAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","RemoveAttribute", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","RemoveAttribute", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_remove_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","RemoveAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","RemoveAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_remove_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_remove_attribute__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_remove_attribute__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.remove_attribute", 
    "    bool Node.remove_attribute(Mezzanine::XML::Attribute const &a)\n"
    "    bool Node.remove_attribute(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_remove_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","RemoveChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","RemoveChild", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","RemoveChild", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_remove_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","RemoveChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","RemoveChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_remove_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_remove_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_remove_child__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.remove_child", 
    "    bool Node.remove_child(Mezzanine::XML::Node const &n)\n"
    "    bool Node.remove_child(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_childby_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindChildbyAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< Mezzanine::Char8 * >(buf4);
  result = ((Mezzanine::XML::Node const *)arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_childby_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindChildbyAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  result = ((Mezzanine::XML::Node const *)arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_find_childby_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_find_childby_attribute__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Node_find_childby_attribute__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Node.find_childby_attribute", 
    "    Mezzanine::XML::Node Node.find_childby_attribute(Mezzanine::Char8 const *Name, Mezzanine::Char8 const *AttrName, Mezzanine::Char8 const *AttrValue)\n"
    "    Mezzanine::XML::Node Node.find_childby_attribute(Mezzanine::Char8 const *AttrName, Mezzanine::Char8 const *AttrValue)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Path", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Char8","Path", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Char8 >(val2);
  result = ((Mezzanine::XML::Node const *)arg1)->Path(arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Path", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->Path();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_path__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Node_path__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.path", 
    "    Mezzanine::String Node.path(Mezzanine::Char8 delimiter)\n"
    "    Mezzanine::String Node.path()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_first_element_by_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FirstElementByPath", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FirstElementByPath", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Char8","FirstElementByPath", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::Char8 >(val3);
  result = ((Mezzanine::XML::Node const *)arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_first_element_by_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FirstElementByPath", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FirstElementByPath", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_first_element_by_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_first_element_by_path__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Node_first_element_by_path__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.first_element_by_path", 
    "    Mezzanine::XML::Node Node.first_element_by_path(Mezzanine::Char8 const *Path, Mezzanine::Char8 delimiter)\n"
    "    Mezzanine::XML::Node Node.first_element_by_path(Mezzanine::Char8 const *Path)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_traverse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node *","Traverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__TreeWalker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::TreeWalker &","Traverse", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::TreeWalker &","Traverse", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::TreeWalker * >(argp2);
  result = (bool)(arg1)->Traverse(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_single_node__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindSingleNode", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","FindSingleNode", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp3);
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_single_node__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindSingleNode", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_single_node__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathQuery,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const &","FindSingleNode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathQuery const &","FindSingleNode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_find_single_node(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_find_single_node__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_find_single_node__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_find_single_node__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.find_single_node", 
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::Char8 const *query)\n"
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::XML::XPathQuery const &query)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_nodes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindNodes", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","FindNodes", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp3);
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_nodes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindNodes", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_find_nodes__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathQuery,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const &","FindNodes", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathQuery const &","FindNodes", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_find_nodes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_find_nodes__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_find_nodes__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_find_nodes__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.find_nodes", 
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::Char8 const *query)\n"
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::XML::XPathQuery const &query)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "unsigned int","Print", 6, argv[4] ));
  } 
  arg6 = static_cast< unsigned int >(val6);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "unsigned int","Print", 6, argv[4] ));
  } 
  arg6 = static_cast< unsigned int >(val6);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_10(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_11(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_print__SWIG_13(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_print(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_print__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_print__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_print__SWIG_13(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_print__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_print__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Node_print__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Node_print__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Node_print__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Node_print__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Node_print__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Node_print__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Node_print__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Node_print__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Node_print__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "Node.print", 
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding, unsigned int Depth)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding, unsigned int Depth)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent, unsigned int flags, unsigned int Depth)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.begin

  call-seq:
    begin -> NodeIterator

Return an iterator to the beginning of the Node.
*/
SWIGINTERN VALUE
_wrap_Node_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->begin();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::iterator(static_cast< const Mezzanine::XML::Node::iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.end

  call-seq:
    end -> NodeIterator

Return an iterator to past the end of the Node.
*/
SWIGINTERN VALUE
_wrap_Node_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->end();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::iterator(static_cast< const Mezzanine::XML::Node::iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_attributes_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","attributes_begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->attributes_begin();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::attribute_iterator(static_cast< const Mezzanine::XML::Node::attribute_iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__AttributeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_attributes_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","attributes_end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->attributes_end();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::attribute_iterator(static_cast< const Mezzanine::XML::Node::attribute_iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__AttributeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_children__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->GetChildren();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_get_children__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","GetChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChildren", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Node_get_children(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Node_get_children__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Node_get_children__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_children", 
    "    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > Node.get_children()\n"
    "    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > Node.get_children(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_attributes(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","attributes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->attributes();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_off_set_debug(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","OffSetDebug", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->OffSetDebug();
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_hash_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","HashValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = ((Mezzanine::XML::Node const *)arg1)->HashValue();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Node_internal_object(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const *","InternalObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::XML::NodeStruct *)((Mezzanine::XML::Node const *)arg1)->InternalObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassAttributeIterator;

SWIGINTERN VALUE
_wrap_new_AttributeIterator__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::AttributeIterator *)new Mezzanine::XML::AttributeIterator();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_AttributeIterator_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_AttributeIterator_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_AttributeIterator__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::AttributeIterator *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","AttributeIterator", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","AttributeIterator", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","AttributeIterator", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","AttributeIterator", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (Mezzanine::XML::AttributeIterator *)new Mezzanine::XML::AttributeIterator((Mezzanine::XML::Attribute const &)*arg1,(Mezzanine::XML::Node const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_AttributeIterator(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_AttributeIterator__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AttributeIterator__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "AttributeIterator.new", 
    "    AttributeIterator.new()\n"
    "    AttributeIterator.new(Mezzanine::XML::Attribute const &attr, Mezzanine::XML::Node const &GetParent)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::AttributeIterator.==

  call-seq:
    ==(rhs) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_AttributeIterator___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::AttributeIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__AttributeIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::AttributeIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp2);
  result = (bool)((Mezzanine::XML::AttributeIterator const *)arg1)->operator ==((Mezzanine::XML::AttributeIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator___ref__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::XML::Attribute *) &((Mezzanine::XML::AttributeIterator const *)arg1)->operator *();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator___deref__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::XML::Attribute *)((Mezzanine::XML::AttributeIterator const *)arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Attribute, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_AttributeIterator(Mezzanine::XML::AttributeIterator *arg1) {
    delete arg1;
}


/*
  Document-method: MezzanineXML::Attribute.<

  call-seq:
    <(r) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_AttributeIterator___lt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(*arg1)->operator <((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.>

  call-seq:
    >(r) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_AttributeIterator___gt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(*arg1)->operator >((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.<=

  call-seq:
    <=(r) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_AttributeIterator___le__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Attribute.>=

  call-seq:
    >=(r) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_AttributeIterator___ge__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(*arg1)->operator >=((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (bool)(*arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","Name", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->Name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","Value", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->Value();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_string__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AsString", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::Char8 *)(*arg1)->AsString((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_string__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->AsString();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_string(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_string__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AttributeIterator_as_string__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_string", 
    "    Mezzanine::Char8 const * Attribute.as_string(Mezzanine::Char8 const *def)\n"
    "    Mezzanine::Char8 const * Attribute.as_string()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_int__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsInt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AsInt", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(*arg1)->AsInt(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_int__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsInt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (int)(*arg1)->AsInt();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_int(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_int__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_int__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_int", 
    "    int Attribute.as_int(int def)\n"
    "    int Attribute.as_int()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_uint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsUint", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","AsUint", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)(*arg1)->AsUint(arg2);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_uint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsUint", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (unsigned int)(*arg1)->AsUint();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_uint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_uint__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_uint__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_uint", 
    "    unsigned int Attribute.as_uint(unsigned int def)\n"
    "    unsigned int Attribute.as_uint()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_double__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsDouble", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","AsDouble", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)(*arg1)->AsDouble(arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_double__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsDouble", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (double)(*arg1)->AsDouble();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_double(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_double__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_double__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_double", 
    "    double Attribute.as_double(double def)\n"
    "    double Attribute.as_double()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_float__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","AsFloat", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (float)(*arg1)->AsFloat(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_float__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (float)(*arg1)->AsFloat();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_float(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_float__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_float__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_float", 
    "    float Attribute.as_float(float def)\n"
    "    float Attribute.as_float()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_real__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsReal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","AsReal", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = (Mezzanine::Real)(*arg1)->AsReal(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_real__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsReal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::Real)(*arg1)->AsReal();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_real(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_real__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_real__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_real", 
    "    Mezzanine::Real Attribute.as_real(Mezzanine::Real def)\n"
    "    Mezzanine::Real Attribute.as_real()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_whole__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsWhole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","AsWhole", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  result = (Mezzanine::Whole)(*arg1)->AsWhole(arg2);
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_whole__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsWhole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::Whole)(*arg1)->AsWhole();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_whole(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_whole__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_whole__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_whole", 
    "    Mezzanine::Whole Attribute.as_whole(Mezzanine::Whole def)\n"
    "    Mezzanine::Whole Attribute.as_whole()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_integer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::Integer result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsInteger", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Integer","AsInteger", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Integer >(val2);
  result = (Mezzanine::Integer)(*arg1)->AsInteger(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_integer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Integer result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsInteger", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::Integer)(*arg1)->AsInteger();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_integer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_integer__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_integer__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_integer", 
    "    Mezzanine::Integer Attribute.as_integer(Mezzanine::Integer def)\n"
    "    Mezzanine::Integer Attribute.as_integer()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_bool__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","AsBool", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(*arg1)->AsBool(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_as_bool__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","AsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (bool)(*arg1)->AsBool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttributeIterator_as_bool(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttributeIterator_as_bool__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttributeIterator_as_bool__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Attribute.as_bool", 
    "    bool Attribute.as_bool(bool def)\n"
    "    bool Attribute.as_bool()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_set_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator *","SetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_set_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator *","SetValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetValue", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetValue", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(*arg1)->SetValue((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_get_next_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","GetNextAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (*arg1)->GetNextAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_get_previous_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","GetPreviousAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (*arg1)->GetPreviousAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_hash_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","HashValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (*arg1)->HashValue();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttributeIterator_internal_object(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::AttributeStruct *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::AttributeIterator const *","InternalObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::AttributeIterator * >(argp1);
  result = (Mezzanine::XML::AttributeStruct *)(*arg1)->InternalObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__AttributeStruct, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassParseResult;

SWIGINTERN VALUE
_wrap_ParseResult_Status_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::ParseStatus arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult *","Status", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseStatus","Status", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::ParseStatus >(val2);
  if (arg1) (arg1)->Status = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ParseResult_Status_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::ParseStatus result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult *","Status", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  result = (Mezzanine::XML::ParseStatus) ((arg1)->Status);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ParseResult_Offset_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult *","Offset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","Offset", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  if (arg1) (arg1)->Offset = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ParseResult_Offset_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult *","Offset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  result =  ((arg1)->Offset);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ParseResult_DocumentEncoding_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::Encoding arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult *","DocumentEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","DocumentEncoding", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::Encoding >(val2);
  if (arg1) (arg1)->DocumentEncoding = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ParseResult_DocumentEncoding_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Encoding result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult *","DocumentEncoding", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  result = (Mezzanine::XML::Encoding) ((arg1)->DocumentEncoding);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ParseResult_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ParseResult_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__ParseResult);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ParseResult(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::ParseResult *)new Mezzanine::XML::ParseResult();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ParseResult_description(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__ParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::ParseResult const *","Description", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::ParseResult * >(argp1);
  result = (char *)((Mezzanine::XML::ParseResult const *)arg1)->Description();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_ParseResult(Mezzanine::XML::ParseResult *arg1) {
    delete arg1;
}

static swig_class SwigClassWriter;

SWIGINTERN void
free_Mezzanine_XML_Writer(Mezzanine::XML::Writer *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Writer_write(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Writer *arg1 = (Mezzanine::XML::Writer *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Writer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer *","Write", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Writer * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","Write", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","Write", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->Write((void const *)arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassWriterFile;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_WriterFile_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_WriterFile_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__WriterFile);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_WriterFile(int argc, VALUE *argv, VALUE self) {
  void *arg1 = (void *) 0 ;
  int res1 ;
  Mezzanine::XML::WriterFile *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "void *","WriterFile", 1, argv[0] )); 
  }
  result = (Mezzanine::XML::WriterFile *)new Mezzanine::XML::WriterFile(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WriterFile_write(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::WriterFile *arg1 = (Mezzanine::XML::WriterFile *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__WriterFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::WriterFile *","Write", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::WriterFile * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","Write", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","Write", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->Write((void const *)arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_WriterFile(Mezzanine::XML::WriterFile *arg1) {
    delete arg1;
}

static swig_class SwigClassWriterStream;

SWIGINTERN VALUE
_wrap_new_WriterStream__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::WriterStream *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","WriterStream", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","WriterStream", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp1);
  result = (Mezzanine::XML::WriterStream *)new Mezzanine::XML::WriterStream(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_WriterStream_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_WriterStream_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__WriterStream);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_WriterStream__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::WriterStream *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","WriterStream", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","WriterStream", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp1);
  result = (Mezzanine::XML::WriterStream *)new Mezzanine::XML::WriterStream(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_WriterStream(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WriterStream__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WriterStream__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "WriterStream.new", 
    "    WriterStream.new(std::basic_ostream< char,std::char_traits< char > > &stream)\n"
    "    WriterStream.new(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &stream)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WriterStream_write(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::WriterStream *arg1 = (Mezzanine::XML::WriterStream *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__WriterStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::WriterStream *","Write", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::WriterStream * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","Write", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","Write", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->Write((void const *)arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_WriterStream(Mezzanine::XML::WriterStream *arg1) {
    delete arg1;
}

static swig_class SwigClassXMLStreamWrapper;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XMLStreamWrapper_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XMLStreamWrapper_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XMLStreamWrapper(int argc, VALUE *argv, VALUE self) {
  Resource::DataStream *arg1 = (Resource::DataStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XMLStreamWrapper *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Resource__DataStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Resource::DataStream *","XMLStreamWrapper", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Resource::DataStream * >(argp1);
  result = (Mezzanine::XML::XMLStreamWrapper *)new Mezzanine::XML::XMLStreamWrapper(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XMLStreamWrapper(Mezzanine::XML::XMLStreamWrapper *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XMLStreamWrapper_write(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XMLStreamWrapper *arg1 = (Mezzanine::XML::XMLStreamWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XMLStreamWrapper *","Write", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XMLStreamWrapper * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","Write", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","Write", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->Write((void const *)arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassDocument;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Document_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Document_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__Document);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Document(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::Document *)new Mezzanine::XML::Document();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_Document(Mezzanine::XML::Document *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Document_reset__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Reset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  (arg1)->Reset();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_reset__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Document *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Reset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Document,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const &","Reset", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Document const &","Reset", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Document * >(argp2);
  (arg1)->Reset((Mezzanine::XML::Document const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_reset(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Document_reset__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_reset__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Document.reset", 
    "    void Document.reset()\n"
    "    void Document.reset(Mezzanine::XML::Document const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Load", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Load", 4, argv[2] ));
  } 
  arg4 = static_cast< Mezzanine::XML::Encoding >(val4);
  result = (arg1)->Load(*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Load", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->Load(*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  result = (arg1)->Load(*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< char,std::char_traits< char > > *arg2 = 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_istream< char,std::char_traits< char > > &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_istream< char,std::char_traits< char > > &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Load", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Load", 4, argv[2] ));
  } 
  arg4 = static_cast< Mezzanine::XML::Encoding >(val4);
  result = (arg1)->Load(*arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< char,std::char_traits< char > > *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_istream< char,std::char_traits< char > > &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_istream< char,std::char_traits< char > > &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char,std::char_traits< char > > * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Load", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->Load(*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_istream< char,std::char_traits< char > > &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_istream< char,std::char_traits< char > > &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_istream< char,std::char_traits< char > > * >(argp2);
  result = (arg1)->Load(*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_istream< wchar_t,std::char_traits< wchar_t > > &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_istream< wchar_t,std::char_traits< wchar_t > > &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_istream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Load", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->Load(*arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_istream< wchar_t,std::char_traits< wchar_t > > &","Load", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_istream< wchar_t,std::char_traits< wchar_t > > &","Load", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_istream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  result = (arg1)->Load(*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Load", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","Load", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->Load((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","Load", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Load", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (arg1)->Load((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_load(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_load__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_load__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_load__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_load__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Document.load", 
    "    Mezzanine::XML::ParseResult Document.load(Resource::DataStream &stream, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load(Resource::DataStream &stream, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load(Resource::DataStream &stream)\n"
    "    Mezzanine::XML::ParseResult Document.load(std::basic_istream< char,std::char_traits< char > > &stream, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load(std::basic_istream< char,std::char_traits< char > > &stream, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load(std::basic_istream< char,std::char_traits< char > > &stream)\n"
    "    Mezzanine::XML::ParseResult Document.load(std::basic_istream< wchar_t,std::char_traits< wchar_t > > &stream, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load(std::basic_istream< wchar_t,std::char_traits< wchar_t > > &stream)\n"
    "    Mezzanine::XML::ParseResult Document.load(Mezzanine::Char8 const *contents, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load(Mezzanine::Char8 const *contents)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_file__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","LoadFile", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","LoadFile", 4, argv[2] ));
  } 
  arg4 = static_cast< Mezzanine::XML::Encoding >(val4);
  result = (arg1)->LoadFile((char const *)arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_file__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","LoadFile", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->LoadFile((char const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_file__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","LoadFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (arg1)->LoadFile((char const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_file__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","LoadFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","LoadFile", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","LoadFile", 4, argv[2] ));
  } 
  arg4 = static_cast< Mezzanine::XML::Encoding >(val4);
  result = (arg1)->LoadFile((wchar_t const *)arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_file__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","LoadFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "unsigned int","LoadFile", 3, argv[1] ));
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (arg1)->LoadFile((wchar_t const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_file__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","LoadFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  result = (arg1)->LoadFile((wchar_t const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_load_file(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_load_file__SWIG_5(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_load_file__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load_file__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load_file__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load_file__SWIG_3(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load_file__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Document.load_file", 
    "    Mezzanine::XML::ParseResult Document.load_file(char const *Path, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load_file(char const *Path, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load_file(char const *Path)\n"
    "    Mezzanine::XML::ParseResult Document.load_file(wchar_t const *Path, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load_file(wchar_t const *Path, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load_file(wchar_t const *Path)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBuffer", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","LoadBuffer", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBuffer", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","LoadBuffer", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","LoadBuffer", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBuffer", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","LoadBuffer", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBuffer", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","LoadBuffer", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBuffer", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void const *","LoadBuffer", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBuffer", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_load_buffer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load_buffer__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load_buffer__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_load_buffer__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Document.load_buffer", 
    "    Mezzanine::XML::ParseResult Document.load_buffer(void const *contents, size_t size, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load_buffer(void const *contents, size_t size, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load_buffer(void const *contents, size_t size)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer_inplace__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBufferInplace", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","LoadBufferInplace", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBufferInplace", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","LoadBufferInplace", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","LoadBufferInplace", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  result = (arg1)->LoadBufferInplace(arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer_inplace__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBufferInplace", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","LoadBufferInplace", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBufferInplace", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","LoadBufferInplace", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (arg1)->LoadBufferInplace(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer_inplace__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBufferInplace", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","LoadBufferInplace", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBufferInplace", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  result = (arg1)->LoadBufferInplace(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_load_buffer_inplace(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load_buffer_inplace__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load_buffer_inplace__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_load_buffer_inplace__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Document.load_buffer_inplace", 
    "    Mezzanine::XML::ParseResult Document.load_buffer_inplace(void *contents, size_t size, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load_buffer_inplace(void *contents, size_t size, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load_buffer_inplace(void *contents, size_t size)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer_inplace_own__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBufferInplaceOwn", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","LoadBufferInplaceOwn", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBufferInplaceOwn", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","LoadBufferInplaceOwn", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","LoadBufferInplaceOwn", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer_inplace_own__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBufferInplaceOwn", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","LoadBufferInplaceOwn", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBufferInplaceOwn", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","LoadBufferInplaceOwn", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_load_buffer_inplace_own__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::ParseResult result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document *","LoadBufferInplaceOwn", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "void *","LoadBufferInplaceOwn", 2, argv[0] )); 
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","LoadBufferInplaceOwn", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ParseResult(static_cast< const Mezzanine::XML::ParseResult& >(result))), SWIGTYPE_p_Mezzanine__XML__ParseResult, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_load_buffer_inplace_own(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Document_load_buffer_inplace_own__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_load_buffer_inplace_own__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *ptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &ptr, 0, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_load_buffer_inplace_own__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Document.load_buffer_inplace_own", 
    "    Mezzanine::XML::ParseResult Document.load_buffer_inplace_own(void *contents, size_t size, unsigned int options, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    Mezzanine::XML::ParseResult Document.load_buffer_inplace_own(void *contents, size_t size, unsigned int options)\n"
    "    Mezzanine::XML::ParseResult Document.load_buffer_inplace_own(void *contents, size_t size)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Save", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Resource::DataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Resource__DataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Resource::DataStream &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Resource::DataStream &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Resource::DataStream * >(argp2);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Save", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Save", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_10(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_11(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Save", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_13(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Save", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save__SWIG_14(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","Save", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Save", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Save", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_save(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_save__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_save__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_save__SWIG_11(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_save__SWIG_14(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Document_save__SWIG_10(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Document_save__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Document_save__SWIG_13(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Document_save__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_save__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_save__SWIG_12(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_save__SWIG_9(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_save__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_save__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Resource__DataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_save__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_save__SWIG_8(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Document.save", 
    "    void Document.save(Resource::DataStream &stream, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Document.save(Resource::DataStream &stream, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Document.save(Resource::DataStream &stream, Mezzanine::Char8 const *indent)\n"
    "    void Document.save(Resource::DataStream &stream)\n"
    "    void Document.save(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Document.save(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Document.save(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent)\n"
    "    void Document.save(Mezzanine::XML::Writer &WriterInstance)\n"
    "    void Document.save(std::basic_ostream< char,std::char_traits< char > > &stream, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Document.save(std::basic_ostream< char,std::char_traits< char > > &stream, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Document.save(std::basic_ostream< char,std::char_traits< char > > &stream, Mezzanine::Char8 const *indent)\n"
    "    void Document.save(std::basic_ostream< char,std::char_traits< char > > &stream)\n"
    "    void Document.save(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &stream, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Document.save(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &stream, Mezzanine::Char8 const *indent)\n"
    "    void Document.save(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &stream)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SaveFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SaveFile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","SaveFile", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","SaveFile", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SaveFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SaveFile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","SaveFile", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2,(Mezzanine::Char8 const *)arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SaveFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SaveFile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2,(Mezzanine::Char8 const *)arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "char const *","SaveFile", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","SaveFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SaveFile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","SaveFile", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","SaveFile", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","SaveFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SaveFile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","SaveFile", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2,(Mezzanine::Char8 const *)arg3,arg4);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","SaveFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SaveFile", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2,(Mezzanine::Char8 const *)arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_save_file__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","SaveFile", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "wchar_t const *","SaveFile", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Document_save_file(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_save_file__SWIG_7(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Document_save_file__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Document_save_file__SWIG_6(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Document_save_file__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_save_file__SWIG_5(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Document_save_file__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_wchar_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_save_file__SWIG_4(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Document, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Document_save_file__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "Document.save_file", 
    "    bool Document.save_file(char const *Path, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    bool Document.save_file(char const *Path, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    bool Document.save_file(char const *Path, Mezzanine::Char8 const *indent)\n"
    "    bool Document.save_file(char const *Path)\n"
    "    bool Document.save_file(wchar_t const *Path, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    bool Document.save_file(wchar_t const *Path, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    bool Document.save_file(wchar_t const *Path, Mezzanine::Char8 const *indent)\n"
    "    bool Document.save_file(wchar_t const *Path)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Document_document_element(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Document const *","DocumentElement", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Document * >(argp1);
  result = ((Mezzanine::XML::Document const *)arg1)->DocumentElement();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_set_memory_management_functions(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AllocationFunction arg1 = (Mezzanine::XML::AllocationFunction) 0 ;
  Mezzanine::XML::DeAllocationFunction arg2 = (Mezzanine::XML::DeAllocationFunction) 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[0], (void**)(&arg1), SWIGTYPE_p_f_size_t__p_void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "Mezzanine::XML::AllocationFunction","Mezzanine::XML::SetMemoryManagementFunctions", 1, argv[0] )); 
    }
  }
  {
    int res = SWIG_ConvertFunctionPtr(argv[1], (void**)(&arg2), SWIGTYPE_p_f_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), Ruby_Format_TypeError( "", "Mezzanine::XML::DeAllocationFunction","Mezzanine::XML::SetMemoryManagementFunctions", 2, argv[1] )); 
    }
  }
  Mezzanine::XML::SetMemoryManagementFunctions(arg1,arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_get_memory_allocation_function(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::AllocationFunction result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::AllocationFunction)Mezzanine::XML::GetMemoryAllocationFunction();
  vresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_size_t__p_void);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_get_memory_deallocation_function(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::DeAllocationFunction result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::DeAllocationFunction)Mezzanine::XML::GetMemoryDeallocationFunction();
  vresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_void__void);
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassNodeIterator;

SWIGINTERN VALUE
_wrap_new_NodeIterator__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::NodeIterator *)new Mezzanine::XML::NodeIterator();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NodeIterator_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NodeIterator_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__NodeIterator);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NodeIterator__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeIterator *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","NodeIterator", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","NodeIterator", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::XML::NodeIterator *)new Mezzanine::XML::NodeIterator((Mezzanine::XML::Node const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_NodeIterator(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_NodeIterator__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NodeIterator__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "NodeIterator.new", 
    "    NodeIterator.new()\n"
    "    NodeIterator.new(Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::NodeIterator.==

  call-seq:
    ==(rhs) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_NodeIterator___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__NodeIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::NodeIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp2);
  result = (bool)((Mezzanine::XML::NodeIterator const *)arg1)->operator ==((Mezzanine::XML::NodeIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator___ref__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::XML::Node *) &((Mezzanine::XML::NodeIterator const *)arg1)->operator *();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator___deref__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::XML::Node *)((Mezzanine::XML::NodeIterator const *)arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_NodeIterator(Mezzanine::XML::NodeIterator *arg1) {
    delete arg1;
}


/*
  Document-method: MezzanineXML::Node.<

  call-seq:
    <(r) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_NodeIterator___lt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.>

  call-seq:
    >(r) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_NodeIterator___gt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator >((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.<=

  call-seq:
    <=(r) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_NodeIterator___le__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.>=

  call-seq:
    >=(r) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_NodeIterator___ge__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator >=((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (bool)(*arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_type(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Type", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::XML::NodeType)(*arg1)->Type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Name", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->Name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Value", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->Value();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_first_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetFirstAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetFirstAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_last_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetLastAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetLastAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_first_child(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetFirstChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetFirstChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_last_child(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetLastChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetLastChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_next_sibling__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetNextSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetNextSibling();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_next_sibling__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetNextSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetNextSibling", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_get_next_sibling(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_get_next_sibling__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_get_next_sibling__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_next_sibling", 
    "    Mezzanine::XML::Node Node.get_next_sibling()\n"
    "    Mezzanine::XML::Node Node.get_next_sibling(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_previous_sibling__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetPreviousSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetPreviousSibling();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_previous_sibling__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetPreviousSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetPreviousSibling", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_get_previous_sibling(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_get_previous_sibling__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_get_previous_sibling__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_previous_sibling", 
    "    Mezzanine::XML::Node Node.get_previous_sibling()\n"
    "    Mezzanine::XML::Node Node.get_previous_sibling(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_parent(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetParent", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetParent();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_root(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetRoot", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetRoot();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_text(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeText result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetText", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetText();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::NodeText(static_cast< const Mezzanine::XML::NodeText& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeText, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","GetChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","GetChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->GetChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_get_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_get_child__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_get_child__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_child", 
    "    Mezzanine::XML::Node Node.get_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.get_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_child_value__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetChildValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_child_value__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetChildValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChildValue", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_get_child_value(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_get_child_value__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_get_child_value__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_child_value", 
    "    Mezzanine::Char8 const * Node.get_child_value()\n"
    "    Mezzanine::Char8 const * Node.get_child_value(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_set_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","SetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_set_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","SetValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SetValue", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(*arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AppendAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->AppendAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","AppendAttribute", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","AppendAttribute", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_append_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_append_attribute__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_append_attribute__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_attribute", 
    "    Mezzanine::XML::Attribute Node.append_attribute(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Attribute Node.append_attribute(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","PrependAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_attribute_after(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertAttributeAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertAttributeAfter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertAttributeAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertAttributeAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_attribute_before(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertAttributeBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertAttributeBefore", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertAttributeBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertAttributeBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","AppendCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","AppendCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (*arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","AppendCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","AppendCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (*arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_append_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_append_copy__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_append_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_copy", 
    "    Mezzanine::XML::Node Node.append_copy(Mezzanine::XML::Attribute const &proto)\n"
    "    Mezzanine::XML::Node Node.append_copy(Mezzanine::XML::Node const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","PrependCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","PrependCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (*arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","PrependCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","PrependCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (*arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_prepend_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_prepend_copy__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_prepend_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.prepend_copy", 
    "    Mezzanine::XML::Node Node.prepend_copy(Mezzanine::XML::Attribute const &proto)\n"
    "    Mezzanine::XML::Node Node.prepend_copy(Mezzanine::XML::Node const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_copy_after__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertCopyAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_copy_after__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertCopyAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyAfter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyAfter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_insert_copy_after(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_copy_after__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_copy_after__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_copy_after", 
    "    Mezzanine::XML::Node Node.insert_copy_after(Mezzanine::XML::Attribute const &proto, Mezzanine::XML::Attribute const &attr)\n"
    "    Mezzanine::XML::Node Node.insert_copy_after(Mezzanine::XML::Node const &proto, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_copy_before__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertCopyBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_copy_before__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertCopyBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyBefore", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyBefore", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_insert_copy_before(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_copy_before__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_copy_before__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_copy_before", 
    "    Mezzanine::XML::Node Node.insert_copy_before(Mezzanine::XML::Attribute const &proto, Mezzanine::XML::Attribute const &attr)\n"
    "    Mezzanine::XML::Node Node.insert_copy_before(Mezzanine::XML::Node const &proto, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","AppendChild", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  result = (*arg1)->AppendChild(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->AppendChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_child__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AppendChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->AppendChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_append_child__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","AppendChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","AppendChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->AppendChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_append_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_append_child__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeIterator_append_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_append_child__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_append_child__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_child", 
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::XML::NodeType Type)\n"
    "    Mezzanine::XML::Node Node.append_child()\n"
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","PrependChild", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  result = (*arg1)->PrependChild(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->PrependChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_child__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","PrependChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->PrependChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_prepend_child__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","PrependChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","PrependChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->PrependChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_prepend_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_prepend_child__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeIterator_prepend_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_prepend_child__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_prepend_child__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.prepend_child", 
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::XML::NodeType Type)\n"
    "    Mezzanine::XML::Node Node.prepend_child()\n"
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_child_after__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertChildAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","InsertChildAfter", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_child_after__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertChildAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertChildAfter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_insert_child_after(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_child_after__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_child_after__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_child_after", 
    "    Mezzanine::XML::Node Node.insert_child_after(Mezzanine::XML::NodeType Type, Mezzanine::XML::Node const &node)\n"
    "    Mezzanine::XML::Node Node.insert_child_after(Mezzanine::Char8 const *Name, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_child_before__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertChildBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","InsertChildBefore", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_insert_child_before__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","InsertChildBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertChildBefore", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_insert_child_before(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_child_before__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_insert_child_before__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_child_before", 
    "    Mezzanine::XML::Node Node.insert_child_before(Mezzanine::XML::NodeType Type, Mezzanine::XML::Node const &node)\n"
    "    Mezzanine::XML::Node Node.insert_child_before(Mezzanine::Char8 const *Name, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_remove_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","RemoveAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","RemoveAttribute", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","RemoveAttribute", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_remove_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","RemoveAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","RemoveAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_remove_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_remove_attribute__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_remove_attribute__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.remove_attribute", 
    "    bool Node.remove_attribute(Mezzanine::XML::Attribute const &a)\n"
    "    bool Node.remove_attribute(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_remove_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","RemoveChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","RemoveChild", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","RemoveChild", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_remove_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","RemoveChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","RemoveChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_remove_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_remove_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_remove_child__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.remove_child", 
    "    bool Node.remove_child(Mezzanine::XML::Node const &n)\n"
    "    bool Node.remove_child(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_childby_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindChildbyAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< Mezzanine::Char8 * >(buf4);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_childby_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindChildbyAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_find_childby_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_find_childby_attribute__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeIterator_find_childby_attribute__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Node.find_childby_attribute", 
    "    Mezzanine::XML::Node Node.find_childby_attribute(Mezzanine::Char8 const *Name, Mezzanine::Char8 const *AttrName, Mezzanine::Char8 const *AttrValue)\n"
    "    Mezzanine::XML::Node Node.find_childby_attribute(Mezzanine::Char8 const *AttrName, Mezzanine::Char8 const *AttrValue)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Path", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Char8","Path", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Char8 >(val2);
  result = (*arg1)->Path(arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Path", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->Path();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_path__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeIterator_path__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.path", 
    "    Mezzanine::String Node.path(Mezzanine::Char8 delimiter)\n"
    "    Mezzanine::String Node.path()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_first_element_by_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FirstElementByPath", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FirstElementByPath", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Char8","FirstElementByPath", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::Char8 >(val3);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_first_element_by_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FirstElementByPath", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FirstElementByPath", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_first_element_by_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_first_element_by_path__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NodeIterator_first_element_by_path__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.first_element_by_path", 
    "    Mezzanine::XML::Node Node.first_element_by_path(Mezzanine::Char8 const *Path, Mezzanine::Char8 delimiter)\n"
    "    Mezzanine::XML::Node Node.first_element_by_path(Mezzanine::Char8 const *Path)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_traverse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator *","Traverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__TreeWalker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::TreeWalker &","Traverse", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::TreeWalker &","Traverse", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::TreeWalker * >(argp2);
  result = (bool)(*arg1)->Traverse(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_single_node__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindSingleNode", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","FindSingleNode", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp3);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_single_node__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindSingleNode", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_single_node__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathQuery,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const &","FindSingleNode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathQuery const &","FindSingleNode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp2);
  result = (*arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_find_single_node(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_find_single_node__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_find_single_node__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_find_single_node__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.find_single_node", 
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::Char8 const *query)\n"
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::XML::XPathQuery const &query)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_nodes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindNodes", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","FindNodes", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp3);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_nodes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindNodes", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_find_nodes__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathQuery,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const &","FindNodes", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathQuery const &","FindNodes", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp2);
  result = (*arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_find_nodes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_find_nodes__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_find_nodes__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_find_nodes__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.find_nodes", 
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::Char8 const *query)\n"
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::XML::XPathQuery const &query)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "unsigned int","Print", 6, argv[4] ));
  } 
  arg6 = static_cast< unsigned int >(val6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  (*arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "unsigned int","Print", 6, argv[4] ));
  } 
  arg6 = static_cast< unsigned int >(val6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  (*arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_10(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_11(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_print__SWIG_13(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  (*arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_print(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_print__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_print__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_print__SWIG_13(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_print__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_print__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeIterator_print__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NodeIterator_print__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NodeIterator_print__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NodeIterator_print__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NodeIterator_print__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NodeIterator_print__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NodeIterator_print__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NodeIterator_print__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NodeIterator_print__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "Node.print", 
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding, unsigned int Depth)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding, unsigned int Depth)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent, unsigned int flags, unsigned int Depth)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.begin

  call-seq:
    begin -> NodeIterator

Return an iterator to the beginning of the Node.
*/
SWIGINTERN VALUE
_wrap_NodeIterator_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->begin();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::iterator(static_cast< const Mezzanine::XML::Node::iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.end

  call-seq:
    end -> NodeIterator

Return an iterator to past the end of the Node.
*/
SWIGINTERN VALUE
_wrap_NodeIterator_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->end();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::iterator(static_cast< const Mezzanine::XML::Node::iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_attributes_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","attributes_begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->attributes_begin();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::attribute_iterator(static_cast< const Mezzanine::XML::Node::attribute_iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__AttributeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_attributes_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","attributes_end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->attributes_end();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::attribute_iterator(static_cast< const Mezzanine::XML::Node::attribute_iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__AttributeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_children__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->GetChildren();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_get_children__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","GetChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChildren", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeIterator_get_children(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeIterator_get_children__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeIterator_get_children__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_children", 
    "    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > Node.get_children()\n"
    "    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > Node.get_children(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_attributes(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","attributes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->attributes();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_off_set_debug(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","OffSetDebug", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->OffSetDebug();
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_hash_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","HashValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (*arg1)->HashValue();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeIterator_internal_object(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeIterator const *","InternalObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeIterator * >(argp1);
  result = (Mezzanine::XML::NodeStruct *)(*arg1)->InternalObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassNamedNodeIterator;

SWIGINTERN VALUE
_wrap_new_NamedNodeIterator__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::NamedNodeIterator *)new Mezzanine::XML::NamedNodeIterator();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NamedNodeIterator_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NamedNodeIterator_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NamedNodeIterator__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::NamedNodeIterator *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","NamedNodeIterator", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","NamedNodeIterator", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","NamedNodeIterator", 2, argv[1] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::XML::NamedNodeIterator *)new Mezzanine::XML::NamedNodeIterator((Mezzanine::XML::Node const &)*arg1,(Mezzanine::Char8 const *)arg2);
  DATA_PTR(self) = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return self;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_NamedNodeIterator(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_NamedNodeIterator__SWIG_0(nargs, args, self);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NamedNodeIterator__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "NamedNodeIterator.new", 
    "    NamedNodeIterator.new()\n"
    "    NamedNodeIterator.new(Mezzanine::XML::Node const &node, Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::NamedNodeIterator.==

  call-seq:
    ==(rhs) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NamedNodeIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::NamedNodeIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp2);
  result = (bool)((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator ==((Mezzanine::XML::NamedNodeIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator___ref__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::XML::Node *) &((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator *();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator___deref__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator ->", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::XML::Node *)((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator ->();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Node, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_NamedNodeIterator(Mezzanine::XML::NamedNodeIterator *arg1) {
    delete arg1;
}


/*
  Document-method: MezzanineXML::Node.<

  call-seq:
    <(r) -> bool

Lower than comparison operator.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator___lt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator <", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator <", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator <", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.>

  call-seq:
    >(r) -> bool

Higher than comparison operator.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator___gt__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator >", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator >", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator >", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator >((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.<=

  call-seq:
    <=(r) -> bool

Lower or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator___le__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator <=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator <=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator <=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.>=

  call-seq:
    >=(r) -> bool

Higher or equal comparison operator.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator___ge__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","operator >=", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","operator >=", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","operator >=", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->operator >=((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (bool)(*arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_type(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Type", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::XML::NodeType)(*arg1)->Type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Name", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->Name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Value", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->Value();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_first_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetFirstAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetFirstAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_last_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetLastAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetLastAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_first_child(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetFirstChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetFirstChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_last_child(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetLastChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetLastChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_next_sibling__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetNextSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetNextSibling();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_next_sibling__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetNextSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetNextSibling", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_get_next_sibling(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_get_next_sibling__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_get_next_sibling__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_next_sibling", 
    "    Mezzanine::XML::Node Node.get_next_sibling()\n"
    "    Mezzanine::XML::Node Node.get_next_sibling(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_previous_sibling__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetPreviousSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetPreviousSibling();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_previous_sibling__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetPreviousSibling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetPreviousSibling", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_get_previous_sibling(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_get_previous_sibling__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_get_previous_sibling__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_previous_sibling", 
    "    Mezzanine::XML::Node Node.get_previous_sibling()\n"
    "    Mezzanine::XML::Node Node.get_previous_sibling(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_parent(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetParent", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetParent();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_root(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetRoot", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetRoot();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_text(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeText result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetText", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetText();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::NodeText(static_cast< const Mezzanine::XML::NodeText& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeText, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","GetChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","GetChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->GetChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_get_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_get_child__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_get_child__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_child", 
    "    Mezzanine::XML::Node Node.get_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.get_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_child_value__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetChildValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_child_value__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetChildValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChildValue", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_get_child_value(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_get_child_value__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_get_child_value__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_child_value", 
    "    Mezzanine::Char8 const * Node.get_child_value()\n"
    "    Mezzanine::Char8 const * Node.get_child_value(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_set_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","SetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_set_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","SetValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","SetValue", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(*arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AppendAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->AppendAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","AppendAttribute", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","AppendAttribute", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_append_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_append_attribute__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_append_attribute__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_attribute", 
    "    Mezzanine::XML::Attribute Node.append_attribute(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Attribute Node.append_attribute(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","PrependAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_attribute_after(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertAttributeAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertAttributeAfter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertAttributeAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertAttributeAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_attribute_before(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertAttributeBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertAttributeBefore", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertAttributeBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertAttributeBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","AppendCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","AppendCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (*arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","AppendCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","AppendCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (*arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_append_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_append_copy__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_append_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_copy", 
    "    Mezzanine::XML::Node Node.append_copy(Mezzanine::XML::Attribute const &proto)\n"
    "    Mezzanine::XML::Node Node.append_copy(Mezzanine::XML::Node const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_copy__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","PrependCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","PrependCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (*arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_copy__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","PrependCopy", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","PrependCopy", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (*arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_prepend_copy(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_prepend_copy__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_prepend_copy__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.prepend_copy", 
    "    Mezzanine::XML::Node Node.prepend_copy(Mezzanine::XML::Attribute const &proto)\n"
    "    Mezzanine::XML::Node Node.prepend_copy(Mezzanine::XML::Node const &proto)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_copy_after__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertCopyAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_copy_after__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertCopyAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyAfter", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyAfter", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_insert_copy_after(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_copy_after__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_copy_after__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_copy_after", 
    "    Mezzanine::XML::Node Node.insert_copy_after(Mezzanine::XML::Attribute const &proto, Mezzanine::XML::Attribute const &attr)\n"
    "    Mezzanine::XML::Node Node.insert_copy_after(Mezzanine::XML::Node const &proto, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_copy_before__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertCopyBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","InsertCopyBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp3);
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_copy_before__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertCopyBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyBefore", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyBefore", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertCopyBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertCopyBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_insert_copy_before(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_copy_before__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_copy_before__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_copy_before", 
    "    Mezzanine::XML::Node Node.insert_copy_before(Mezzanine::XML::Attribute const &proto, Mezzanine::XML::Attribute const &attr)\n"
    "    Mezzanine::XML::Node Node.insert_copy_before(Mezzanine::XML::Node const &proto, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","AppendChild", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  result = (*arg1)->AppendChild(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->AppendChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_child__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AppendChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->AppendChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_append_child__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","AppendChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","AppendChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","AppendChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->AppendChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_append_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_append_child__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_append_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_append_child__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_append_child__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.append_child", 
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::XML::NodeType Type)\n"
    "    Mezzanine::XML::Node Node.append_child()\n"
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.append_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","PrependChild", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  result = (*arg1)->PrependChild(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->PrependChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_child__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","PrependChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->PrependChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_prepend_child__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","PrependChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","PrependChild", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","PrependChild", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->PrependChild((Mezzanine::String const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_prepend_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_prepend_child__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_prepend_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_prepend_child__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_prepend_child__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.prepend_child", 
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::XML::NodeType Type)\n"
    "    Mezzanine::XML::Node Node.prepend_child()\n"
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::Node Node.prepend_child(Mezzanine::String const &Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_child_after__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertChildAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","InsertChildAfter", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_child_after__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertChildAfter", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertChildAfter", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildAfter", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_insert_child_after(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_child_after__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_child_after__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_child_after", 
    "    Mezzanine::XML::Node Node.insert_child_after(Mezzanine::XML::NodeType Type, Mezzanine::XML::Node const &node)\n"
    "    Mezzanine::XML::Node Node.insert_child_after(Mezzanine::Char8 const *Name, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_child_before__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertChildBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeType","InsertChildBefore", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::XML::NodeType >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_insert_child_before__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","InsertChildBefore", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","InsertChildBefore", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","InsertChildBefore", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::Node * >(argp3);
  result = (*arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_insert_child_before(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_child_before__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_insert_child_before__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.insert_child_before", 
    "    Mezzanine::XML::Node Node.insert_child_before(Mezzanine::XML::NodeType Type, Mezzanine::XML::Node const &node)\n"
    "    Mezzanine::XML::Node Node.insert_child_before(Mezzanine::Char8 const *Name, Mezzanine::XML::Node const &node)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_remove_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","RemoveAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","RemoveAttribute", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","RemoveAttribute", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_remove_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","RemoveAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","RemoveAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_remove_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_remove_attribute__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_remove_attribute__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.remove_attribute", 
    "    bool Node.remove_attribute(Mezzanine::XML::Attribute const &a)\n"
    "    bool Node.remove_attribute(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_remove_child__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","RemoveChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","RemoveChild", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","RemoveChild", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_remove_child__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","RemoveChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","RemoveChild", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_remove_child(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_remove_child__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_remove_child__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.remove_child", 
    "    bool Node.remove_child(Mezzanine::XML::Node const &n)\n"
    "    bool Node.remove_child(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_childby_attribute__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindChildbyAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 4, argv[2] ));
  }
  arg4 = reinterpret_cast< Mezzanine::Char8 * >(buf4);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_childby_attribute__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindChildbyAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindChildbyAttribute", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_find_childby_attribute(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_find_childby_attribute__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NamedNodeIterator_find_childby_attribute__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Node.find_childby_attribute", 
    "    Mezzanine::XML::Node Node.find_childby_attribute(Mezzanine::Char8 const *Name, Mezzanine::Char8 const *AttrName, Mezzanine::Char8 const *AttrValue)\n"
    "    Mezzanine::XML::Node Node.find_childby_attribute(Mezzanine::Char8 const *AttrName, Mezzanine::Char8 const *AttrValue)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Path", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  ecode2 = SWIG_AsVal_char(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Char8","Path", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Char8 >(val2);
  result = (*arg1)->Path(arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Path", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->Path();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_path__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_path__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.path", 
    "    Mezzanine::String Node.path(Mezzanine::Char8 delimiter)\n"
    "    Mezzanine::String Node.path()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_first_element_by_path__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  char val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FirstElementByPath", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FirstElementByPath", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_char(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Char8","FirstElementByPath", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::Char8 >(val3);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_first_element_by_path__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FirstElementByPath", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FirstElementByPath", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_first_element_by_path(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_first_element_by_path__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_first_element_by_path__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.first_element_by_path", 
    "    Mezzanine::XML::Node Node.first_element_by_path(Mezzanine::Char8 const *Path, Mezzanine::Char8 delimiter)\n"
    "    Mezzanine::XML::Node Node.first_element_by_path(Mezzanine::Char8 const *Path)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_traverse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator *","Traverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__TreeWalker,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::TreeWalker &","Traverse", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::TreeWalker &","Traverse", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::TreeWalker * >(argp2);
  result = (bool)(*arg1)->Traverse(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_single_node__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindSingleNode", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","FindSingleNode", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp3);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_single_node__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindSingleNode", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_single_node__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindSingleNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathQuery,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const &","FindSingleNode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathQuery const &","FindSingleNode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp2);
  result = (*arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_find_single_node(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_find_single_node__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_find_single_node__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_find_single_node__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.find_single_node", 
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::Char8 const *query)\n"
    "    Mezzanine::XML::XPathNode Node.find_single_node(Mezzanine::XML::XPathQuery const &query)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_nodes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindNodes", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","FindNodes", 3, argv[1] )); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp3);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_nodes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","FindNodes", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_find_nodes__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","FindNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathQuery,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const &","FindNodes", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathQuery const &","FindNodes", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp2);
  result = (*arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_find_nodes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_find_nodes__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_find_nodes__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_find_nodes__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Node.find_nodes", 
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::Char8 const *query)\n"
    "    Mezzanine::XML::XPathNodeSet Node.find_nodes(Mezzanine::XML::XPathQuery const &query)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "unsigned int","Print", 6, argv[4] ));
  } 
  arg6 = static_cast< unsigned int >(val6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Writer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Writer &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Writer &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Writer * >(argp2);
  (*arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if ((argc < 5) || (argc > 5)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(argv[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), Ruby_Format_TypeError( "", "unsigned int","Print", 6, argv[4] ));
  } 
  arg6 = static_cast< unsigned int >(val6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::XML::Encoding","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< Mezzanine::XML::Encoding >(val5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_8(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_9(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< char,std::char_traits< char > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< char,std::char_traits< char > > * >(argp2);
  (*arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_10(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "unsigned int","Print", 5, argv[3] ));
  } 
  arg5 = static_cast< unsigned int >(val5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_11(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "unsigned int","Print", 4, argv[2] ));
  } 
  arg4 = static_cast< unsigned int >(val4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_12(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Print", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_print__SWIG_13(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","Print", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &","Print", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::basic_ostream< wchar_t,std::char_traits< wchar_t > > * >(argp2);
  (*arg1)->Print(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_print(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[7];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 7) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_print__SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_print__SWIG_9(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_print__SWIG_13(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_print__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_print__SWIG_12(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NamedNodeIterator_print__SWIG_8(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_print__SWIG_11(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_print__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_print__SWIG_7(nargs, args, self);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NamedNodeIterator_print__SWIG_6(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NamedNodeIterator_print__SWIG_1(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NamedNodeIterator_print__SWIG_10(nargs, args, self);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NamedNodeIterator_print__SWIG_0(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_NamedNodeIterator_print__SWIG_5(nargs, args, self);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 7, "Node.print", 
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding, unsigned int Depth)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(Mezzanine::XML::Writer &WriterInstance)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding, unsigned int Depth)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags, Mezzanine::XML::Encoding DocumentEncoding)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(std::basic_ostream< char,std::char_traits< char > > &os)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent, unsigned int flags, unsigned int Depth)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent, unsigned int flags)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os, Mezzanine::Char8 const *indent)\n"
    "    void Node.print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &os)\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.begin

  call-seq:
    begin -> NodeIterator

Return an iterator to the beginning of the Node.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->begin();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::iterator(static_cast< const Mezzanine::XML::Node::iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::Node.end

  call-seq:
    end -> NodeIterator

Return an iterator to past the end of the Node.
*/
SWIGINTERN VALUE
_wrap_NamedNodeIterator_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->end();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::iterator(static_cast< const Mezzanine::XML::Node::iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__NodeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_attributes_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","attributes_begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->attributes_begin();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::attribute_iterator(static_cast< const Mezzanine::XML::Node::attribute_iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__AttributeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_attributes_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","attributes_end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->attributes_end();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node::attribute_iterator(static_cast< const Mezzanine::XML::Node::attribute_iterator& >(result))), SWIGTYPE_p_Mezzanine__XML__AttributeIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_children__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->GetChildren();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_get_children__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","GetChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","GetChildren", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (*arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NamedNodeIterator_get_children(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NamedNodeIterator_get_children__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NamedNodeIterator_get_children__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Node.get_children", 
    "    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > Node.get_children()\n"
    "    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > Node.get_children(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_attributes(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","attributes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->attributes();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >(static_cast< const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >& >(result))), SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_off_set_debug(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","OffSetDebug", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->OffSetDebug();
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_hash_value(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","HashValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (*arg1)->HashValue();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NamedNodeIterator_internal_object(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NamedNodeIterator const *","InternalObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NamedNodeIterator * >(argp1);
  result = (Mezzanine::XML::NodeStruct *)(*arg1)->InternalObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassNodeText;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NodeText_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NodeText_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__NodeText);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NodeText(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::NodeText *)new Mezzanine::XML::NodeText();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_get_string(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","GetString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->GetString();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_string__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","AsString", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->AsString((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_FromCharPtr((const char *)result);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_string__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->AsString();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_string(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_string__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeText_as_string__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_string", 
    "    Mezzanine::Char8 const * NodeText.as_string(Mezzanine::Char8 const *def)\n"
    "    Mezzanine::Char8 const * NodeText.as_string()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_int__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsInt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","AsInt", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (int)((Mezzanine::XML::NodeText const *)arg1)->AsInt(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_int__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsInt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (int)((Mezzanine::XML::NodeText const *)arg1)->AsInt();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_int(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_int__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_int__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_int", 
    "    int NodeText.as_int(int def)\n"
    "    int NodeText.as_int()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_uint__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsUint", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","AsUint", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (unsigned int)((Mezzanine::XML::NodeText const *)arg1)->AsUint(arg2);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_uint__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsUint", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (unsigned int)((Mezzanine::XML::NodeText const *)arg1)->AsUint();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_uint(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_uint__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_uint__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_uint", 
    "    unsigned int NodeText.as_uint(unsigned int def)\n"
    "    unsigned int NodeText.as_uint()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_double__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsDouble", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","AsDouble", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (double)((Mezzanine::XML::NodeText const *)arg1)->AsDouble(arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_double__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsDouble", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (double)((Mezzanine::XML::NodeText const *)arg1)->AsDouble();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_double(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_double__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_double__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_double", 
    "    double NodeText.as_double(double def)\n"
    "    double NodeText.as_double()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_float__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "float","AsFloat", 2, argv[0] ));
  } 
  arg2 = static_cast< float >(val2);
  result = (float)((Mezzanine::XML::NodeText const *)arg1)->AsFloat(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_float__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsFloat", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (float)((Mezzanine::XML::NodeText const *)arg1)->AsFloat();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_float(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_float__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_float__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_float", 
    "    float NodeText.as_float(float def)\n"
    "    float NodeText.as_float()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_real__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsReal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","AsReal", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = (Mezzanine::Real)((Mezzanine::XML::NodeText const *)arg1)->AsReal(arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_real__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsReal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::XML::NodeText const *)arg1)->AsReal();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_real(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_real__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_real__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_real", 
    "    Mezzanine::Real NodeText.as_real(Mezzanine::Real def)\n"
    "    Mezzanine::Real NodeText.as_real()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_whole__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsWhole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","AsWhole", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  result = (Mezzanine::Whole)((Mezzanine::XML::NodeText const *)arg1)->AsWhole(arg2);
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_whole__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsWhole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::XML::NodeText const *)arg1)->AsWhole();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_whole(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_whole__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_whole__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_whole", 
    "    Mezzanine::Whole NodeText.as_whole(Mezzanine::Whole def)\n"
    "    Mezzanine::Whole NodeText.as_whole()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_integer__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Integer arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  Mezzanine::Integer result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsInteger", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Integer","AsInteger", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Integer >(val2);
  result = (Mezzanine::Integer)((Mezzanine::XML::NodeText const *)arg1)->AsInteger(arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_integer__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Integer result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsInteger", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (Mezzanine::Integer)((Mezzanine::XML::NodeText const *)arg1)->AsInteger();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_integer(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_integer__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_integer__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_integer", 
    "    Mezzanine::Integer NodeText.as_integer(Mezzanine::Integer def)\n"
    "    Mezzanine::Integer NodeText.as_integer()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_bool__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","AsBool", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->AsBool(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_as_bool__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","AsBool", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->AsBool();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_as_bool(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NodeText_as_bool__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_as_bool__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.as_bool", 
    "    bool NodeText.as_bool(bool def)\n"
    "    bool NodeText.as_bool()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  result = (bool)(arg1)->Set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->Set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->Set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_set__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->Set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NodeText_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_set__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_set__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_set__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NodeText_set__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeText_set__SWIG_4(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "NodeText.set", 
    "    bool NodeText.set(Mezzanine::Char8 const *rhs)\n"
    "    bool NodeText.set(int rhs)\n"
    "    bool NodeText.set(unsigned int rhs)\n"
    "    bool NodeText.set(double rhs)\n"
    "    bool NodeText.set(bool rhs)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NodeText_data(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__NodeText, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::NodeText const *","data", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::NodeText * >(argp1);
  result = ((Mezzanine::XML::NodeText const *)arg1)->data();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_NodeText(Mezzanine::XML::NodeText *arg1) {
    delete arg1;
}

static swig_class SwigClassTreeWalker;

SWIGINTERN void
free_Mezzanine_XML_TreeWalker(Mezzanine::XML::TreeWalker *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_TreeWalker_on_traversal_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__TreeWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::TreeWalker *","OnTraversalBegin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::TreeWalker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node &","OnTraversalBegin", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node &","OnTraversalBegin", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(arg1)->OnTraversalBegin(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TreeWalker_on_each_node(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__TreeWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::TreeWalker *","OnEachNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::TreeWalker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node &","OnEachNode", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node &","OnEachNode", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(arg1)->OnEachNode(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TreeWalker_on_traversal_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__TreeWalker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::TreeWalker *","OnTraversalEnd", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::TreeWalker * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node &","OnTraversalEnd", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node &","OnTraversalEnd", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (bool)(arg1)->OnTraversalEnd(*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_as_utf8__SWIG_0(int argc, VALUE *argv, VALUE self) {
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "wchar_t const *","Mezzanine::XML::AsUtf8", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);
  result = Mezzanine::XML::AsUtf8((wchar_t const *)arg1);
  vresult = SWIG_NewPointerObj((new std::basic_string< char,std::char_traits< char >,std::allocator< char > >(static_cast< const std::basic_string< char,std::char_traits< char >,std::allocator< char > >& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_as_utf8__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &","Mezzanine::XML::AsUtf8", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &","Mezzanine::XML::AsUtf8", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > * >(argp1);
  result = Mezzanine::XML::AsUtf8((std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &)*arg1);
  vresult = SWIG_NewPointerObj((new std::basic_string< char,std::char_traits< char >,std::allocator< char > >(static_cast< const std::basic_string< char,std::char_traits< char >,std::allocator< char > >& >(result))), SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_as_utf8(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_wchar_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_as_utf8__SWIG_0(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_as_utf8__SWIG_1(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "as_utf8", 
    "    std::basic_string< char,std::char_traits< char >,std::allocator< char > > as_utf8(wchar_t const *str)\n"
    "    std::basic_string< char,std::char_traits< char >,std::allocator< char > > as_utf8(std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &str)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_as_wide__SWIG_0(int argc, VALUE *argv, VALUE self) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "char const *","Mezzanine::XML::AsWide", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = Mezzanine::XML::AsWide((char const *)arg1);
  vresult = SWIG_NewPointerObj((new std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >(static_cast< const std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >& >(result))), SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, SWIG_POINTER_OWN |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return vresult;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_as_wide__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &","Mezzanine::XML::AsWide", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &","Mezzanine::XML::AsWide", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::basic_string< char,std::char_traits< char >,std::allocator< char > > * >(argp1);
  result = Mezzanine::XML::AsWide((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
  vresult = SWIG_NewPointerObj((new std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >(static_cast< const std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >& >(result))), SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_as_wide(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_as_wide__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_as_wide__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "as_wide", 
    "    std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > as_wide(char const *str)\n"
    "    std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > as_wide(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &str)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_get_one_tag(int argc, VALUE *argv, VALUE self) {
  std::istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_std__istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::istream &","Mezzanine::XML::GetOneTag", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::istream &","Mezzanine::XML::GetOneTag", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< std::istream * >(argp1);
  result = Mezzanine::XML::GetOneTag(*arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_pre_parse_class_from_single_tag__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  Mezzanine::XML::Document *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 3, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 3, argv[2])); 
    }
    arg3 = ptr;
  }
  result = (Mezzanine::XML::Document *)Mezzanine::XML::PreParseClassFromSingleTag((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return vresult;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_pre_parse_class_from_single_tag__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::XML::Document *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 2, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::XML::PreParseClassFromSingleTag", 2, argv[1])); 
    }
    arg2 = ptr;
  }
  result = (Mezzanine::XML::Document *)Mezzanine::XML::PreParseClassFromSingleTag((std::string const &)*arg1,(std::string const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__Document, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_pre_parse_class_from_single_tag(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pre_parse_class_from_single_tag__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_pre_parse_class_from_single_tag__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "pre_parse_class_from_single_tag", 
    "    Mezzanine::XML::Document * pre_parse_class_from_single_tag(Mezzanine::String const &NameSpace, Mezzanine::String const &ClassName, Mezzanine::String const &OneTag)\n"
    "    Mezzanine::XML::Document * pre_parse_class_from_single_tag(Mezzanine::String const &ClassName, Mezzanine::String const &OneTag)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_escape_xml(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::XML::EscapeXML", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::XML::EscapeXML", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = Mezzanine::XML::EscapeXML((std::string const &)*arg1);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return vresult;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


static swig_class SwigClassXPathNode;

SWIGINTERN VALUE
_wrap_new_XPathNode__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNode *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XPathNode__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNode *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","XPathNode", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","XPathNode", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Node * >(argp1);
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode((Mezzanine::XML::Node const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathNode_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathNode_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__XPathNode);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathNode__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::Attribute *arg1 = 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNode *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__XML__Attribute,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::Attribute const &","XPathNode", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Attribute const &","XPathNode", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::Attribute * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::Node const &","XPathNode", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::Node const &","XPathNode", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::Node * >(argp2);
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode((Mezzanine::XML::Attribute const &)*arg1,(Mezzanine::XML::Node const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XPathNode(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XPathNode__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XPathNode__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__Node, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XPathNode__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "XPathNode.new", 
    "    XPathNode.new()\n"
    "    XPathNode.new(Mezzanine::XML::Node const &node)\n"
    "    XPathNode.new(Mezzanine::XML::Attribute const &GetAttribute, Mezzanine::XML::Node const &GetParent)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNode_get_node(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const *","GetNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp1);
  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetNode();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNode_get_attribute(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Attribute result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const *","GetAttribute", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp1);
  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetAttribute();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Attribute(static_cast< const Mezzanine::XML::Attribute& >(result))), SWIGTYPE_p_Mezzanine__XML__Attribute, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNode_get_parent(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::Node result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const *","GetParent", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp1);
  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetParent();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::Node(static_cast< const Mezzanine::XML::Node& >(result))), SWIGTYPE_p_Mezzanine__XML__Node, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::XPathNode.==

  call-seq:
    ==(n) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_XPathNode___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNode const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp2);
  result = (bool)((Mezzanine::XML::XPathNode const *)arg1)->operator ==((Mezzanine::XML::XPathNode const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XPathNode(Mezzanine::XML::XPathNode *arg1) {
    delete arg1;
}

static swig_class SwigClassXPathNodeSet;

SWIGINTERN VALUE
_wrap_new_XPathNodeSet__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XPathNodeSet__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet::const_iterator arg1 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator arg2 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::CollectionType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet::const_iterator","XPathNodeSet", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet::const_iterator >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet::const_iterator","XPathNodeSet", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNodeSet::const_iterator >(argp2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet::CollectionType","XPathNodeSet", 3, argv[2] ));
  } 
  arg3 = static_cast< Mezzanine::XML::XPathNodeSet::CollectionType >(val3);
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_XPathNodeSet__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet::const_iterator arg1 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator arg2 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet::const_iterator","XPathNodeSet", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet::const_iterator >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet::const_iterator","XPathNodeSet", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNodeSet::const_iterator >(argp2);
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XPathNodeSet(Mezzanine::XML::XPathNodeSet *arg1) {
    delete arg1;
}

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathNodeSet_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathNodeSet_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathNodeSet__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const &","XPathNodeSet", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNodeSet const &","XPathNodeSet", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet((Mezzanine::XML::XPathNodeSet const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XPathNodeSet(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_XPathNodeSet__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XPathNodeSet__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XPathNodeSet__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_XPathNodeSet__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "XPathNodeSet.new", 
    "    XPathNodeSet.new()\n"
    "    XPathNodeSet.new(Mezzanine::XML::XPathNodeSet::const_iterator begin, Mezzanine::XML::XPathNodeSet::const_iterator end, Mezzanine::XML::XPathNodeSet::CollectionType Type)\n"
    "    XPathNodeSet.new(Mezzanine::XML::XPathNodeSet::const_iterator begin, Mezzanine::XML::XPathNodeSet::const_iterator end)\n"
    "    XPathNodeSet.new(Mezzanine::XML::XPathNodeSet const &ns)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNodeSet_type(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNodeSet::CollectionType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const *","Type", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = (Mezzanine::XML::XPathNodeSet::CollectionType)((Mezzanine::XML::XPathNodeSet const *)arg1)->Type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::XPathNodeSet.size

  call-seq:
    size -> size_t

Size or Length of the XPathNodeSet.
*/
SWIGINTERN VALUE
_wrap_XPathNodeSet_size(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = ((Mezzanine::XML::XPathNodeSet const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::XPathNodeSet.begin

  call-seq:
    begin -> XPathNode

Return an iterator to the beginning of the XPathNodeSet.
*/
SWIGINTERN VALUE
_wrap_XPathNodeSet_begin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = (Mezzanine::XML::XPathNodeSet::const_iterator)((Mezzanine::XML::XPathNodeSet const *)arg1)->begin();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: MezzanineXML::XPathNodeSet.end

  call-seq:
    end -> XPathNode

Return an iterator to past the end of the XPathNodeSet.
*/
SWIGINTERN VALUE
_wrap_XPathNodeSet_end(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = (Mezzanine::XML::XPathNodeSet::const_iterator)((Mezzanine::XML::XPathNodeSet const *)arg1)->end();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNodeSet_sort__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet *","sort", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","sort", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->sort(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNodeSet_sort__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet *","sort", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  (arg1)->sort();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XPathNodeSet_sort(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_XPathNodeSet_sort__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XPathNodeSet_sort__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "XPathNodeSet.sort", 
    "    void XPathNodeSet.sort(bool reverse)\n"
    "    void XPathNodeSet.sort()\n");
  
  return Qnil;
}



/*
  Document-method: MezzanineXML::XPathNodeSet.first

  call-seq:
    first -> XPathNode

Return the first element in XPathNodeSet.
*/
SWIGINTERN VALUE
_wrap_XPathNodeSet_first(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNode result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const *","first", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = ((Mezzanine::XML::XPathNodeSet const *)arg1)->first();
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNode(static_cast< const Mezzanine::XML::XPathNode& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNode, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathNodeSet_empty(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const *","Empty", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp1);
  result = (bool)((Mezzanine::XML::XPathNodeSet const *)arg1)->Empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassXPathParseResult;

SWIGINTERN VALUE
_wrap_XPathParseResult_Offset_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathParseResult *","Offset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathParseResult * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","Offset", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  if (arg1) (arg1)->Offset = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathParseResult_Offset_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathParseResult *","Offset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathParseResult * >(argp1);
  result =  ((arg1)->Offset);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathParseResult_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathParseResult_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathParseResult(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathParseResult *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::XPathParseResult *)new Mezzanine::XML::XPathParseResult();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathParseResult_description(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathParseResult const *","Description", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathParseResult * >(argp1);
  result = (char *)((Mezzanine::XML::XPathParseResult const *)arg1)->Description();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XPathParseResult(Mezzanine::XML::XPathParseResult *arg1) {
    delete arg1;
}

static swig_class SwigClassXPathVariable;

SWIGINTERN VALUE
_wrap_XPathVariable_name(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable const *","Name", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::XPathVariable const *)arg1)->Name();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_type(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathValueType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable const *","Type", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  result = (Mezzanine::XML::XPathValueType)((Mezzanine::XML::XPathVariable const *)arg1)->Type();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_get_boolean(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable const *","GetBoole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  result = (bool)((Mezzanine::XML::XPathVariable const *)arg1)->GetBoole();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_get_number(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable const *","GetNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  result = (double)((Mezzanine::XML::XPathVariable const *)arg1)->GetNumber();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_get_string(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Char8 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable const *","GetString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::XPathVariable const *)arg1)->GetString();
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_get_node_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable const *","GetNodeSet", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  result = (Mezzanine::XML::XPathNodeSet *) &((Mezzanine::XML::XPathVariable const *)arg1)->GetNodeSet();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->Set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","Set", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->Set(arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariable_set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathNodeSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariable *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariable * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const &","Set", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNodeSet const &","Set", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp2);
  result = (bool)(arg1)->Set((Mezzanine::XML::XPathNodeSet const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_XPathVariable_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XPathVariable_set__SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XPathVariable_set__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XPathVariable_set__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_XPathVariable_set__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "XPathVariable.set", 
    "    bool XPathVariable.set(bool Value)\n"
    "    bool XPathVariable.set(double Value)\n"
    "    bool XPathVariable.set(Mezzanine::Char8 const *Value)\n"
    "    bool XPathVariable.set(Mezzanine::XML::XPathNodeSet const &Value)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XPathVariable(Mezzanine::XML::XPathVariable *arg1) {
    delete arg1;
}

static swig_class SwigClassXPathVariableSet;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathVariableSet_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathVariableSet_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathVariableSet(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::XML::XPathVariableSet *)new Mezzanine::XML::XPathVariableSet();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XPathVariableSet(Mezzanine::XML::XPathVariableSet *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XPathVariableSet_add(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathValueType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  Mezzanine::XML::XPathVariable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","Add", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Add", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathValueType","Add", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::XML::XPathValueType >(val3);
  result = (Mezzanine::XML::XPathVariable *)(arg1)->Add((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariableSet_set__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariableSet_set__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "double","Set", 3, argv[1] ));
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariableSet_set__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[1], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 3, argv[1] ));
  }
  arg3 = reinterpret_cast< Mezzanine::Char8 * >(buf3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariableSet_set__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","Set", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Set", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNodeSet const &","Set", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNodeSet const &","Set", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::XML::XPathNodeSet * >(argp3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::XPathNodeSet const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XPathVariableSet_set(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XPathVariableSet_set__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XPathVariableSet_set__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_XPathVariableSet_set__SWIG_2(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_XPathVariableSet_set__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "XPathVariableSet.set", 
    "    bool XPathVariableSet.set(Mezzanine::Char8 const *Name, bool Value)\n"
    "    bool XPathVariableSet.set(Mezzanine::Char8 const *Name, double Value)\n"
    "    bool XPathVariableSet.set(Mezzanine::Char8 const *Name, Mezzanine::Char8 const *Value)\n"
    "    bool XPathVariableSet.set(Mezzanine::Char8 const *Name, Mezzanine::XML::XPathNodeSet const &Value)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariableSet_get__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathVariable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Get", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::XML::XPathVariable *)(arg1)->Get((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathVariableSet_get__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  Mezzanine::XML::XPathVariable *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet const *","Get", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","Get", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  result = (Mezzanine::XML::XPathVariable *)((Mezzanine::XML::XPathVariableSet const *)arg1)->Get((Mezzanine::Char8 const *)arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XPathVariableSet_get(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XPathVariableSet_get__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XPathVariableSet_get__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "XPathVariableSet.get", 
    "    Mezzanine::XML::XPathVariable const * XPathVariableSet.get(Mezzanine::Char8 const *Name)\n"
    "    Mezzanine::XML::XPathVariable const * XPathVariableSet.get(Mezzanine::Char8 const *Name)\n");
  
  return Qnil;
}


static swig_class SwigClassXPathQuery;

SWIGINTERN VALUE
_wrap_new_XPathQuery__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Char8 *arg1 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg2 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathQuery *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","XPathQuery", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< Mezzanine::Char8 * >(buf1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathVariableSet *","XPathQuery", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathVariableSet * >(argp2);
  result = (Mezzanine::XML::XPathQuery *)new Mezzanine::XML::XPathQuery((Mezzanine::Char8 const *)arg1,arg2);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_XPathQuery_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_XPathQuery_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__XML__XPathQuery);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_XPathQuery__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Char8 *arg1 = (Mezzanine::Char8 *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  Mezzanine::XML::XPathQuery *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Char8 const *","XPathQuery", 1, argv[0] ));
  }
  arg1 = reinterpret_cast< Mezzanine::Char8 * >(buf1);
  result = (Mezzanine::XML::XPathQuery *)new Mezzanine::XML::XPathQuery((Mezzanine::Char8 const *)arg1);
  DATA_PTR(self) = result;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return self;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_XPathQuery(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_XPathQuery__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_XPathQuery__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "XPathQuery.new", 
    "    XPathQuery.new(Mezzanine::Char8 const *query, Mezzanine::XML::XPathVariableSet *variables)\n"
    "    XPathQuery.new(Mezzanine::Char8 const *query)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_XML_XPathQuery(Mezzanine::XML::XPathQuery *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_XPathQuery_return_type(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathValueType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","ReturnType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  result = (Mezzanine::XML::XPathValueType)((Mezzanine::XML::XPathQuery const *)arg1)->ReturnType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathQuery_evaluate_boolean(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","EvaluateBoole", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const &","EvaluateBoole", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNode const &","EvaluateBoole", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp2);
  result = (bool)((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateBoole((Mezzanine::XML::XPathNode const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathQuery_evaluate_number(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","EvaluateNumber", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const &","EvaluateNumber", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNode const &","EvaluateNumber", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp2);
  result = (double)((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateNumber((Mezzanine::XML::XPathNode const &)*arg2);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathQuery_evaluate_string__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","EvaluateString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const &","EvaluateString", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNode const &","EvaluateString", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp2);
  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateString((Mezzanine::XML::XPathNode const &)*arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathQuery_evaluate_string__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::XPathNode *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  size_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","EvaluateString", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(argv[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Char8 *","EvaluateString", 2, argv[0] ));
  }
  arg2 = reinterpret_cast< Mezzanine::Char8 * >(buf2);
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "size_t","EvaluateString", 3, argv[1] ));
  } 
  arg3 = static_cast< size_t >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_Mezzanine__XML__XPathNode,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const &","EvaluateString", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNode const &","EvaluateString", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp4);
  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateString(arg2,arg3,(Mezzanine::XML::XPathNode const &)*arg4);
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return vresult;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_XPathQuery_evaluate_string(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_XPathQuery_evaluate_string__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_XPathQuery_evaluate_string__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "XPathQuery.evaluate_string", 
    "    size_t XPathQuery.evaluate_string(Mezzanine::XML::XPathNode const &n)\n"
    "    size_t XPathQuery.evaluate_string(Mezzanine::Char8 *buffer, size_t capacity, Mezzanine::XML::XPathNode const &n)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathQuery_evaluate_node_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","EvaluateNodeSet", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__XML__XPathNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathNode const &","EvaluateNodeSet", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::XML::XPathNode const &","EvaluateNodeSet", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::XML::XPathNode * >(argp2);
  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateNodeSet((Mezzanine::XML::XPathNode const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::XML::XPathNodeSet(static_cast< const Mezzanine::XML::XPathNodeSet& >(result))), SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_XPathQuery_result(int argc, VALUE *argv, VALUE self) {
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::XML::XPathParseResult *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::XML::XPathQuery const *","Result", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::XML::XPathQuery * >(argp1);
  result = (Mezzanine::XML::XPathParseResult *) &((Mezzanine::XML::XPathQuery const *)arg1)->Result();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__XML__XPathParseResult, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_Mezzanine__XML__XMLStreamWrapperTo_p_Mezzanine__XML__Writer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Writer *)  ((Mezzanine::XML::XMLStreamWrapper *) x));
}
static void *_p_Mezzanine__XML__WriterFileTo_p_Mezzanine__XML__Writer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Writer *)  ((Mezzanine::XML::WriterFile *) x));
}
static void *_p_Mezzanine__XML__WriterStreamTo_p_Mezzanine__XML__Writer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Writer *)  ((Mezzanine::XML::WriterStream *) x));
}
static void *_p_Mezzanine__XML__DocumentTo_p_Mezzanine__XML__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Node *)  ((Mezzanine::XML::Document *) x));
}
static swig_type_info _swigt__p_Mezzanine__XML__Attribute = {"_p_Mezzanine__XML__Attribute", "Mezzanine::XML::Attribute *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__AttributeIterator = {"_p_Mezzanine__XML__AttributeIterator", "Mezzanine::XML::AttributeIterator *|Mezzanine::XML::Node::attribute_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__AttributeStruct = {"_p_Mezzanine__XML__AttributeStruct", "Mezzanine::XML::AttributeStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Document = {"_p_Mezzanine__XML__Document", "Mezzanine::XML::Document *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NamedNodeIterator = {"_p_Mezzanine__XML__NamedNodeIterator", "Mezzanine::XML::NamedNodeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Node = {"_p_Mezzanine__XML__Node", "Mezzanine::XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeIterator = {"_p_Mezzanine__XML__NodeIterator", "Mezzanine::XML::NodeIterator *|Mezzanine::XML::Node::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeStruct = {"_p_Mezzanine__XML__NodeStruct", "Mezzanine::XML::NodeStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeText = {"_p_Mezzanine__XML__NodeText", "Mezzanine::XML::NodeText *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ParseResult = {"_p_Mezzanine__XML__ParseResult", "Mezzanine::XML::ParseResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__TreeWalker = {"_p_Mezzanine__XML__TreeWalker", "Mezzanine::XML::TreeWalker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Writer = {"_p_Mezzanine__XML__Writer", "Mezzanine::XML::Writer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__WriterFile = {"_p_Mezzanine__XML__WriterFile", "Mezzanine::XML::WriterFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__WriterStream = {"_p_Mezzanine__XML__WriterStream", "Mezzanine::XML::WriterStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XMLStreamWrapper = {"_p_Mezzanine__XML__XMLStreamWrapper", "Mezzanine::XML::XMLStreamWrapper *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathNode = {"_p_Mezzanine__XML__XPathNode", "Mezzanine::XML::XPathNodeSet::const_iterator|Mezzanine::XML::XPathNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathNodeSet = {"_p_Mezzanine__XML__XPathNodeSet", "Mezzanine::XML::XPathNodeSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathParseResult = {"_p_Mezzanine__XML__XPathParseResult", "Mezzanine::XML::XPathParseResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathQuery = {"_p_Mezzanine__XML__XPathQuery", "Mezzanine::XML::XPathQuery *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathVariable = {"_p_Mezzanine__XML__XPathVariable", "Mezzanine::XML::XPathVariable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathVariableSet = {"_p_Mezzanine__XML__XPathVariableSet", "Mezzanine::XML::XPathVariableSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Resource__DataStream = {"_p_Resource__DataStream", "Resource::DataStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_attribute_iterator = {"_p_attribute_iterator", "attribute_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Mezzanine::Boole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Mezzanine::PreciseReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "Mezzanine::XML::DeAllocationFunction|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t__p_void = {"_p_f_size_t__p_void", "void *(*)(size_t)|Mezzanine::XML::AllocationFunction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_category = {"_p_iterator_category", "iterator_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t = {"_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t", "std::basic_istream< wchar_t,std::char_traits< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t = {"_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t = {"_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t", "std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Mezzanine__XML__Attribute,
  &_swigt__p_Mezzanine__XML__AttributeIterator,
  &_swigt__p_Mezzanine__XML__AttributeStruct,
  &_swigt__p_Mezzanine__XML__Document,
  &_swigt__p_Mezzanine__XML__NamedNodeIterator,
  &_swigt__p_Mezzanine__XML__Node,
  &_swigt__p_Mezzanine__XML__NodeIterator,
  &_swigt__p_Mezzanine__XML__NodeStruct,
  &_swigt__p_Mezzanine__XML__NodeText,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,
  &_swigt__p_Mezzanine__XML__ParseResult,
  &_swigt__p_Mezzanine__XML__TreeWalker,
  &_swigt__p_Mezzanine__XML__Writer,
  &_swigt__p_Mezzanine__XML__WriterFile,
  &_swigt__p_Mezzanine__XML__WriterStream,
  &_swigt__p_Mezzanine__XML__XMLStreamWrapper,
  &_swigt__p_Mezzanine__XML__XPathNode,
  &_swigt__p_Mezzanine__XML__XPathNodeSet,
  &_swigt__p_Mezzanine__XML__XPathParseResult,
  &_swigt__p_Mezzanine__XML__XPathQuery,
  &_swigt__p_Mezzanine__XML__XPathVariable,
  &_swigt__p_Mezzanine__XML__XPathVariableSet,
  &_swigt__p_Resource__DataStream,
  &_swigt__p_SDL_Event,
  &_swigt__p_attribute_iterator,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_size_t__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_iterator_category,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__wstring,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_Mezzanine__XML__Attribute[] = {  {&_swigt__p_Mezzanine__XML__Attribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__AttributeIterator[] = {  {&_swigt__p_Mezzanine__XML__AttributeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__AttributeStruct[] = {  {&_swigt__p_Mezzanine__XML__AttributeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Document[] = {  {&_swigt__p_Mezzanine__XML__Document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NamedNodeIterator[] = {  {&_swigt__p_Mezzanine__XML__NamedNodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Node[] = {  {&_swigt__p_Mezzanine__XML__Node, 0, 0, 0},  {&_swigt__p_Mezzanine__XML__Document, _p_Mezzanine__XML__DocumentTo_p_Mezzanine__XML__Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeIterator[] = {  {&_swigt__p_Mezzanine__XML__NodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeStruct[] = {  {&_swigt__p_Mezzanine__XML__NodeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeText[] = {  {&_swigt__p_Mezzanine__XML__NodeText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ParseResult[] = {  {&_swigt__p_Mezzanine__XML__ParseResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__TreeWalker[] = {  {&_swigt__p_Mezzanine__XML__TreeWalker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Writer[] = {  {&_swigt__p_Mezzanine__XML__Writer, 0, 0, 0},  {&_swigt__p_Mezzanine__XML__XMLStreamWrapper, _p_Mezzanine__XML__XMLStreamWrapperTo_p_Mezzanine__XML__Writer, 0, 0},  {&_swigt__p_Mezzanine__XML__WriterFile, _p_Mezzanine__XML__WriterFileTo_p_Mezzanine__XML__Writer, 0, 0},  {&_swigt__p_Mezzanine__XML__WriterStream, _p_Mezzanine__XML__WriterStreamTo_p_Mezzanine__XML__Writer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__WriterFile[] = {  {&_swigt__p_Mezzanine__XML__WriterFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__WriterStream[] = {  {&_swigt__p_Mezzanine__XML__WriterStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XMLStreamWrapper[] = {  {&_swigt__p_Mezzanine__XML__XMLStreamWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathNode[] = {  {&_swigt__p_Mezzanine__XML__XPathNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathNodeSet[] = {  {&_swigt__p_Mezzanine__XML__XPathNodeSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathParseResult[] = {  {&_swigt__p_Mezzanine__XML__XPathParseResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathQuery[] = {  {&_swigt__p_Mezzanine__XML__XPathQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathVariable[] = {  {&_swigt__p_Mezzanine__XML__XPathVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathVariableSet[] = {  {&_swigt__p_Mezzanine__XML__XPathVariableSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Resource__DataStream[] = {  {&_swigt__p_Resource__DataStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_attribute_iterator[] = {  {&_swigt__p_attribute_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t__p_void[] = {  {&_swigt__p_f_size_t__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_category[] = {  {&_swigt__p_iterator_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Mezzanine__XML__Attribute,
  _swigc__p_Mezzanine__XML__AttributeIterator,
  _swigc__p_Mezzanine__XML__AttributeStruct,
  _swigc__p_Mezzanine__XML__Document,
  _swigc__p_Mezzanine__XML__NamedNodeIterator,
  _swigc__p_Mezzanine__XML__Node,
  _swigc__p_Mezzanine__XML__NodeIterator,
  _swigc__p_Mezzanine__XML__NodeStruct,
  _swigc__p_Mezzanine__XML__NodeText,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,
  _swigc__p_Mezzanine__XML__ParseResult,
  _swigc__p_Mezzanine__XML__TreeWalker,
  _swigc__p_Mezzanine__XML__Writer,
  _swigc__p_Mezzanine__XML__WriterFile,
  _swigc__p_Mezzanine__XML__WriterStream,
  _swigc__p_Mezzanine__XML__XMLStreamWrapper,
  _swigc__p_Mezzanine__XML__XPathNode,
  _swigc__p_Mezzanine__XML__XPathNodeSet,
  _swigc__p_Mezzanine__XML__XPathParseResult,
  _swigc__p_Mezzanine__XML__XPathQuery,
  _swigc__p_Mezzanine__XML__XPathVariable,
  _swigc__p_Mezzanine__XML__XPathVariableSet,
  _swigc__p_Resource__DataStream,
  _swigc__p_SDL_Event,
  _swigc__p_attribute_iterator,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_p_void__void,
  _swigc__p_f_size_t__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_iterator_category,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,
  _swigc__p_std__istream,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__wstring,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_MezzanineXML(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mMezzanineXML = rb_define_module("MezzanineXML");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  rb_define_const(mMezzanineXML, "XML_VERSION", SWIG_From_int(static_cast< int >(100)));
  
  SwigClassGCVALUE.klass = rb_define_class_under(mMezzanineXML, "GCVALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGCVALUE);
  rb_undef_alloc_func(SwigClassGCVALUE.klass);
  rb_define_method(SwigClassGCVALUE.klass, "inspect", VALUEFUNC(_wrap_GCVALUE_inspect), -1);
  rb_define_method(SwigClassGCVALUE.klass, "to_s", VALUEFUNC(_wrap_GCVALUE_to_s), -1);
  SwigClassGCVALUE.mark = 0;
  SwigClassGCVALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mMezzanineXML, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mMezzanineXML, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  rb_define_const(mMezzanineXML, "MEZZANINE_CORE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mMezzanineXML, "MEZZ_FRAMESTOTRACK", SWIG_From_int(static_cast< int >(10)));
  
  SwigClassAttribute.klass = rb_define_class_under(mMezzanineXML, "Attribute", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__Attribute, (void *) &SwigClassAttribute);
  rb_define_alloc_func(SwigClassAttribute.klass, _wrap_Attribute_allocate);
  rb_define_method(SwigClassAttribute.klass, "initialize", VALUEFUNC(_wrap_new_Attribute), -1);
  rb_define_method(SwigClassAttribute.klass, "<", VALUEFUNC(_wrap_Attribute___lt__), -1);
  rb_define_method(SwigClassAttribute.klass, ">", VALUEFUNC(_wrap_Attribute___gt__), -1);
  rb_define_method(SwigClassAttribute.klass, "<=", VALUEFUNC(_wrap_Attribute___le__), -1);
  rb_define_method(SwigClassAttribute.klass, ">=", VALUEFUNC(_wrap_Attribute___ge__), -1);
  rb_define_method(SwigClassAttribute.klass, "empty", VALUEFUNC(_wrap_Attribute_empty), -1);
  rb_define_method(SwigClassAttribute.klass, "name", VALUEFUNC(_wrap_Attribute_name), -1);
  rb_define_method(SwigClassAttribute.klass, "value", VALUEFUNC(_wrap_Attribute_value), -1);
  rb_define_method(SwigClassAttribute.klass, "as_string", VALUEFUNC(_wrap_Attribute_as_string), -1);
  rb_define_method(SwigClassAttribute.klass, "as_int", VALUEFUNC(_wrap_Attribute_as_int), -1);
  rb_define_method(SwigClassAttribute.klass, "as_uint", VALUEFUNC(_wrap_Attribute_as_uint), -1);
  rb_define_method(SwigClassAttribute.klass, "as_double", VALUEFUNC(_wrap_Attribute_as_double), -1);
  rb_define_method(SwigClassAttribute.klass, "as_float", VALUEFUNC(_wrap_Attribute_as_float), -1);
  rb_define_method(SwigClassAttribute.klass, "as_real", VALUEFUNC(_wrap_Attribute_as_real), -1);
  rb_define_method(SwigClassAttribute.klass, "as_whole", VALUEFUNC(_wrap_Attribute_as_whole), -1);
  rb_define_method(SwigClassAttribute.klass, "as_integer", VALUEFUNC(_wrap_Attribute_as_integer), -1);
  rb_define_method(SwigClassAttribute.klass, "as_bool", VALUEFUNC(_wrap_Attribute_as_bool), -1);
  rb_define_method(SwigClassAttribute.klass, "set_name", VALUEFUNC(_wrap_Attribute_set_name), -1);
  rb_define_method(SwigClassAttribute.klass, "set_value", VALUEFUNC(_wrap_Attribute_set_value), -1);
  rb_define_method(SwigClassAttribute.klass, "get_next_attribute", VALUEFUNC(_wrap_Attribute_get_next_attribute), -1);
  rb_define_method(SwigClassAttribute.klass, "get_previous_attribute", VALUEFUNC(_wrap_Attribute_get_previous_attribute), -1);
  rb_define_method(SwigClassAttribute.klass, "hash_value", VALUEFUNC(_wrap_Attribute_hash_value), -1);
  rb_define_method(SwigClassAttribute.klass, "internal_object", VALUEFUNC(_wrap_Attribute_internal_object), -1);
  SwigClassAttribute.mark = 0;
  SwigClassAttribute.destroy = (void (*)(void *)) free_Mezzanine_XML_Attribute;
  SwigClassAttribute.trackObjects = 0;
  rb_define_singleton_method(mMezzanineXML, "ParseMinimal", VALUEFUNC(_wrap_ParseMinimal_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParsePi", VALUEFUNC(_wrap_ParsePi_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseComments", VALUEFUNC(_wrap_ParseComments_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseCdata", VALUEFUNC(_wrap_ParseCdata_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseWsPcdata", VALUEFUNC(_wrap_ParseWsPcdata_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseEscapes", VALUEFUNC(_wrap_ParseEscapes_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseEol", VALUEFUNC(_wrap_ParseEol_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseWconvAttribute", VALUEFUNC(_wrap_ParseWconvAttribute_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseWnormAttribute", VALUEFUNC(_wrap_ParseWnormAttribute_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseDeclaration", VALUEFUNC(_wrap_ParseDeclaration_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseDocType", VALUEFUNC(_wrap_ParseDocType_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseWsPcdata_single", VALUEFUNC(_wrap_ParseWsPcdata_single_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseDefault", VALUEFUNC(_wrap_ParseDefault_get), 0);
  rb_define_singleton_method(mMezzanineXML, "ParseFull", VALUEFUNC(_wrap_ParseFull_get), 0);
  rb_define_const(mMezzanineXML, "EncodingAuto", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingAuto)));
  rb_define_const(mMezzanineXML, "EncodingUTF8", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF8)));
  rb_define_const(mMezzanineXML, "EncodingUTF16LE", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF16LE)));
  rb_define_const(mMezzanineXML, "EncodingUTF16BE", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF16BE)));
  rb_define_const(mMezzanineXML, "EncodingUTF16", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF16)));
  rb_define_const(mMezzanineXML, "EncodingUTF32LE", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF32LE)));
  rb_define_const(mMezzanineXML, "EncodingUTF32BE", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF32BE)));
  rb_define_const(mMezzanineXML, "EncodingUTF32", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingUTF32)));
  rb_define_const(mMezzanineXML, "Encodingwchar_t", SWIG_From_int(static_cast< int >(Mezzanine::XML::Encodingwchar_t)));
  rb_define_const(mMezzanineXML, "EncodingLatin1", SWIG_From_int(static_cast< int >(Mezzanine::XML::EncodingLatin1)));
  rb_define_singleton_method(mMezzanineXML, "FormatIndent", VALUEFUNC(_wrap_FormatIndent_get), 0);
  rb_define_singleton_method(mMezzanineXML, "FormatWriteBom", VALUEFUNC(_wrap_FormatWriteBom_get), 0);
  rb_define_singleton_method(mMezzanineXML, "FormatRaw", VALUEFUNC(_wrap_FormatRaw_get), 0);
  rb_define_singleton_method(mMezzanineXML, "FormatNoDeclaration", VALUEFUNC(_wrap_FormatNoDeclaration_get), 0);
  rb_define_singleton_method(mMezzanineXML, "FormatNoEscapes", VALUEFUNC(_wrap_FormatNoEscapes_get), 0);
  rb_define_singleton_method(mMezzanineXML, "FormatSaveFileText", VALUEFUNC(_wrap_FormatSaveFileText_get), 0);
  rb_define_singleton_method(mMezzanineXML, "FormatDefault", VALUEFUNC(_wrap_FormatDefault_get), 0);
  rb_define_const(mMezzanineXML, "NodeNull", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeNull)));
  rb_define_const(mMezzanineXML, "NodeDocument", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeDocument)));
  rb_define_const(mMezzanineXML, "NodeElement", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeElement)));
  rb_define_const(mMezzanineXML, "NodePcdata", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodePcdata)));
  rb_define_const(mMezzanineXML, "NodeCdata", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeCdata)));
  rb_define_const(mMezzanineXML, "NodeComment", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeComment)));
  rb_define_const(mMezzanineXML, "NodePi", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodePi)));
  rb_define_const(mMezzanineXML, "NodeDeclaration", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeDeclaration)));
  rb_define_const(mMezzanineXML, "NodeDocType", SWIG_From_int(static_cast< int >(Mezzanine::XML::NodeDocType)));
  rb_define_const(mMezzanineXML, "StatusOk", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusOk)));
  rb_define_const(mMezzanineXML, "StatusFileNotFound", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusFileNotFound)));
  rb_define_const(mMezzanineXML, "StatusIOError", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusIOError)));
  rb_define_const(mMezzanineXML, "StatusOutOfMemory", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusOutOfMemory)));
  rb_define_const(mMezzanineXML, "StatusInternalError", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusInternalError)));
  rb_define_const(mMezzanineXML, "StatusUnrecognizedTag", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusUnrecognizedTag)));
  rb_define_const(mMezzanineXML, "StatusBadProcessingInstruction", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadProcessingInstruction)));
  rb_define_const(mMezzanineXML, "StatusBadComment", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadComment)));
  rb_define_const(mMezzanineXML, "StatusBadCdata", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadCdata)));
  rb_define_const(mMezzanineXML, "StatusBadDocType", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadDocType)));
  rb_define_const(mMezzanineXML, "StatusBadPcdata", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadPcdata)));
  rb_define_const(mMezzanineXML, "StatusBadStartElement", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadStartElement)));
  rb_define_const(mMezzanineXML, "StatusBadAttribute", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadAttribute)));
  rb_define_const(mMezzanineXML, "StatusBadEndElement", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusBadEndElement)));
  rb_define_const(mMezzanineXML, "StatusEndElementMismatch", SWIG_From_int(static_cast< int >(Mezzanine::XML::StatusEndElementMismatch)));
  rb_define_const(mMezzanineXML, "XPathTypeNone", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathTypeNone)));
  rb_define_const(mMezzanineXML, "XPathTypeNodeSet", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathTypeNodeSet)));
  rb_define_const(mMezzanineXML, "XPathTypeNumber", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathTypeNumber)));
  rb_define_const(mMezzanineXML, "XPathTypeString", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathTypeString)));
  rb_define_const(mMezzanineXML, "XPathTypeBoole", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathTypeBoole)));
  
  SwigClassNode.klass = rb_define_class_under(mMezzanineXML, "Node", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__Node, (void *) &SwigClassNode);
  rb_define_alloc_func(SwigClassNode.klass, _wrap_Node_allocate);
  rb_define_method(SwigClassNode.klass, "initialize", VALUEFUNC(_wrap_new_Node), -1);
  rb_define_method(SwigClassNode.klass, "==", VALUEFUNC(_wrap_Node___eq__), -1);
  rb_define_method(SwigClassNode.klass, "<", VALUEFUNC(_wrap_Node___lt__), -1);
  rb_define_method(SwigClassNode.klass, ">", VALUEFUNC(_wrap_Node___gt__), -1);
  rb_define_method(SwigClassNode.klass, "<=", VALUEFUNC(_wrap_Node___le__), -1);
  rb_define_method(SwigClassNode.klass, ">=", VALUEFUNC(_wrap_Node___ge__), -1);
  rb_define_method(SwigClassNode.klass, "empty", VALUEFUNC(_wrap_Node_empty), -1);
  rb_define_method(SwigClassNode.klass, "type", VALUEFUNC(_wrap_Node_type), -1);
  rb_define_method(SwigClassNode.klass, "name", VALUEFUNC(_wrap_Node_name), -1);
  rb_define_method(SwigClassNode.klass, "value", VALUEFUNC(_wrap_Node_value), -1);
  rb_define_method(SwigClassNode.klass, "get_first_attribute", VALUEFUNC(_wrap_Node_get_first_attribute), -1);
  rb_define_method(SwigClassNode.klass, "get_last_attribute", VALUEFUNC(_wrap_Node_get_last_attribute), -1);
  rb_define_method(SwigClassNode.klass, "get_first_child", VALUEFUNC(_wrap_Node_get_first_child), -1);
  rb_define_method(SwigClassNode.klass, "get_last_child", VALUEFUNC(_wrap_Node_get_last_child), -1);
  rb_define_method(SwigClassNode.klass, "get_parent", VALUEFUNC(_wrap_Node_get_parent), -1);
  rb_define_method(SwigClassNode.klass, "get_root", VALUEFUNC(_wrap_Node_get_root), -1);
  rb_define_method(SwigClassNode.klass, "get_text", VALUEFUNC(_wrap_Node_get_text), -1);
  rb_define_method(SwigClassNode.klass, "get_child", VALUEFUNC(_wrap_Node_get_child), -1);
  rb_define_method(SwigClassNode.klass, "get_attribute", VALUEFUNC(_wrap_Node_get_attribute), -1);
  rb_define_method(SwigClassNode.klass, "get_next_sibling", VALUEFUNC(_wrap_Node_get_next_sibling), -1);
  rb_define_method(SwigClassNode.klass, "get_previous_sibling", VALUEFUNC(_wrap_Node_get_previous_sibling), -1);
  rb_define_method(SwigClassNode.klass, "get_child_value", VALUEFUNC(_wrap_Node_get_child_value), -1);
  rb_define_method(SwigClassNode.klass, "set_name", VALUEFUNC(_wrap_Node_set_name), -1);
  rb_define_method(SwigClassNode.klass, "set_value", VALUEFUNC(_wrap_Node_set_value), -1);
  rb_define_method(SwigClassNode.klass, "append_attribute", VALUEFUNC(_wrap_Node_append_attribute), -1);
  rb_define_method(SwigClassNode.klass, "prepend_attribute", VALUEFUNC(_wrap_Node_prepend_attribute), -1);
  rb_define_method(SwigClassNode.klass, "insert_attribute_after", VALUEFUNC(_wrap_Node_insert_attribute_after), -1);
  rb_define_method(SwigClassNode.klass, "insert_attribute_before", VALUEFUNC(_wrap_Node_insert_attribute_before), -1);
  rb_define_method(SwigClassNode.klass, "append_child", VALUEFUNC(_wrap_Node_append_child), -1);
  rb_define_method(SwigClassNode.klass, "prepend_child", VALUEFUNC(_wrap_Node_prepend_child), -1);
  rb_define_method(SwigClassNode.klass, "insert_child_after", VALUEFUNC(_wrap_Node_insert_child_after), -1);
  rb_define_method(SwigClassNode.klass, "insert_child_before", VALUEFUNC(_wrap_Node_insert_child_before), -1);
  rb_define_method(SwigClassNode.klass, "append_copy", VALUEFUNC(_wrap_Node_append_copy), -1);
  rb_define_method(SwigClassNode.klass, "prepend_copy", VALUEFUNC(_wrap_Node_prepend_copy), -1);
  rb_define_method(SwigClassNode.klass, "insert_copy_after", VALUEFUNC(_wrap_Node_insert_copy_after), -1);
  rb_define_method(SwigClassNode.klass, "insert_copy_before", VALUEFUNC(_wrap_Node_insert_copy_before), -1);
  rb_define_method(SwigClassNode.klass, "remove_attribute", VALUEFUNC(_wrap_Node_remove_attribute), -1);
  rb_define_method(SwigClassNode.klass, "remove_child", VALUEFUNC(_wrap_Node_remove_child), -1);
  rb_define_method(SwigClassNode.klass, "find_childby_attribute", VALUEFUNC(_wrap_Node_find_childby_attribute), -1);
  rb_define_method(SwigClassNode.klass, "path", VALUEFUNC(_wrap_Node_path), -1);
  rb_define_method(SwigClassNode.klass, "first_element_by_path", VALUEFUNC(_wrap_Node_first_element_by_path), -1);
  rb_define_method(SwigClassNode.klass, "traverse", VALUEFUNC(_wrap_Node_traverse), -1);
  rb_define_method(SwigClassNode.klass, "find_single_node", VALUEFUNC(_wrap_Node_find_single_node), -1);
  rb_define_method(SwigClassNode.klass, "find_nodes", VALUEFUNC(_wrap_Node_find_nodes), -1);
  rb_define_method(SwigClassNode.klass, "print", VALUEFUNC(_wrap_Node_print), -1);
  rb_define_method(SwigClassNode.klass, "begin", VALUEFUNC(_wrap_Node_begin), -1);
  rb_define_method(SwigClassNode.klass, "end", VALUEFUNC(_wrap_Node_end), -1);
  rb_define_method(SwigClassNode.klass, "attributes_begin", VALUEFUNC(_wrap_Node_attributes_begin), -1);
  rb_define_method(SwigClassNode.klass, "attributes_end", VALUEFUNC(_wrap_Node_attributes_end), -1);
  rb_define_method(SwigClassNode.klass, "get_children", VALUEFUNC(_wrap_Node_get_children), -1);
  rb_define_method(SwigClassNode.klass, "attributes", VALUEFUNC(_wrap_Node_attributes), -1);
  rb_define_method(SwigClassNode.klass, "off_set_debug", VALUEFUNC(_wrap_Node_off_set_debug), -1);
  rb_define_method(SwigClassNode.klass, "hash_value", VALUEFUNC(_wrap_Node_hash_value), -1);
  rb_define_method(SwigClassNode.klass, "internal_object", VALUEFUNC(_wrap_Node_internal_object), -1);
  SwigClassNode.mark = 0;
  SwigClassNode.destroy = (void (*)(void *)) free_Mezzanine_XML_Node;
  SwigClassNode.trackObjects = 0;
  
  SwigClassAttributeIterator.klass = rb_define_class_under(mMezzanineXML, "AttributeIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__AttributeIterator, (void *) &SwigClassAttributeIterator);
  rb_define_alloc_func(SwigClassAttributeIterator.klass, _wrap_AttributeIterator_allocate);
  rb_define_method(SwigClassAttributeIterator.klass, "initialize", VALUEFUNC(_wrap_new_AttributeIterator), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "==", VALUEFUNC(_wrap_AttributeIterator___eq__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "__ref__", VALUEFUNC(_wrap_AttributeIterator___ref__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "__deref__", VALUEFUNC(_wrap_AttributeIterator___deref__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "<", VALUEFUNC(_wrap_AttributeIterator___lt__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, ">", VALUEFUNC(_wrap_AttributeIterator___gt__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "<=", VALUEFUNC(_wrap_AttributeIterator___le__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, ">=", VALUEFUNC(_wrap_AttributeIterator___ge__), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "empty", VALUEFUNC(_wrap_AttributeIterator_empty), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "name", VALUEFUNC(_wrap_AttributeIterator_name), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "value", VALUEFUNC(_wrap_AttributeIterator_value), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_string", VALUEFUNC(_wrap_AttributeIterator_as_string), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_int", VALUEFUNC(_wrap_AttributeIterator_as_int), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_uint", VALUEFUNC(_wrap_AttributeIterator_as_uint), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_double", VALUEFUNC(_wrap_AttributeIterator_as_double), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_float", VALUEFUNC(_wrap_AttributeIterator_as_float), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_real", VALUEFUNC(_wrap_AttributeIterator_as_real), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_whole", VALUEFUNC(_wrap_AttributeIterator_as_whole), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_integer", VALUEFUNC(_wrap_AttributeIterator_as_integer), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "as_bool", VALUEFUNC(_wrap_AttributeIterator_as_bool), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "set_name", VALUEFUNC(_wrap_AttributeIterator_set_name), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "set_value", VALUEFUNC(_wrap_AttributeIterator_set_value), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "get_next_attribute", VALUEFUNC(_wrap_AttributeIterator_get_next_attribute), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "get_previous_attribute", VALUEFUNC(_wrap_AttributeIterator_get_previous_attribute), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "hash_value", VALUEFUNC(_wrap_AttributeIterator_hash_value), -1);
  rb_define_method(SwigClassAttributeIterator.klass, "internal_object", VALUEFUNC(_wrap_AttributeIterator_internal_object), -1);
  SwigClassAttributeIterator.mark = 0;
  SwigClassAttributeIterator.destroy = (void (*)(void *)) free_Mezzanine_XML_AttributeIterator;
  SwigClassAttributeIterator.trackObjects = 0;
  
  SwigClassParseResult.klass = rb_define_class_under(mMezzanineXML, "ParseResult", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__ParseResult, (void *) &SwigClassParseResult);
  rb_define_alloc_func(SwigClassParseResult.klass, _wrap_ParseResult_allocate);
  rb_define_method(SwigClassParseResult.klass, "initialize", VALUEFUNC(_wrap_new_ParseResult), -1);
  rb_define_method(SwigClassParseResult.klass, "Status=", VALUEFUNC(_wrap_ParseResult_Status_set), -1);
  rb_define_method(SwigClassParseResult.klass, "Status", VALUEFUNC(_wrap_ParseResult_Status_get), -1);
  rb_define_method(SwigClassParseResult.klass, "Offset=", VALUEFUNC(_wrap_ParseResult_Offset_set), -1);
  rb_define_method(SwigClassParseResult.klass, "Offset", VALUEFUNC(_wrap_ParseResult_Offset_get), -1);
  rb_define_method(SwigClassParseResult.klass, "DocumentEncoding=", VALUEFUNC(_wrap_ParseResult_DocumentEncoding_set), -1);
  rb_define_method(SwigClassParseResult.klass, "DocumentEncoding", VALUEFUNC(_wrap_ParseResult_DocumentEncoding_get), -1);
  rb_define_method(SwigClassParseResult.klass, "description", VALUEFUNC(_wrap_ParseResult_description), -1);
  SwigClassParseResult.mark = 0;
  SwigClassParseResult.destroy = (void (*)(void *)) free_Mezzanine_XML_ParseResult;
  SwigClassParseResult.trackObjects = 0;
  
  SwigClassWriter.klass = rb_define_class_under(mMezzanineXML, "Writer", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__Writer, (void *) &SwigClassWriter);
  rb_undef_alloc_func(SwigClassWriter.klass);
  rb_define_method(SwigClassWriter.klass, "write", VALUEFUNC(_wrap_Writer_write), -1);
  SwigClassWriter.mark = 0;
  SwigClassWriter.destroy = (void (*)(void *)) free_Mezzanine_XML_Writer;
  SwigClassWriter.trackObjects = 0;
  
  SwigClassWriterFile.klass = rb_define_class_under(mMezzanineXML, "WriterFile", ((swig_class *) SWIGTYPE_p_Mezzanine__XML__Writer->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__WriterFile, (void *) &SwigClassWriterFile);
  rb_define_alloc_func(SwigClassWriterFile.klass, _wrap_WriterFile_allocate);
  rb_define_method(SwigClassWriterFile.klass, "initialize", VALUEFUNC(_wrap_new_WriterFile), -1);
  rb_define_method(SwigClassWriterFile.klass, "write", VALUEFUNC(_wrap_WriterFile_write), -1);
  SwigClassWriterFile.mark = 0;
  SwigClassWriterFile.destroy = (void (*)(void *)) free_Mezzanine_XML_WriterFile;
  SwigClassWriterFile.trackObjects = 0;
  
  SwigClassWriterStream.klass = rb_define_class_under(mMezzanineXML, "WriterStream", ((swig_class *) SWIGTYPE_p_Mezzanine__XML__Writer->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__WriterStream, (void *) &SwigClassWriterStream);
  rb_define_alloc_func(SwigClassWriterStream.klass, _wrap_WriterStream_allocate);
  rb_define_method(SwigClassWriterStream.klass, "initialize", VALUEFUNC(_wrap_new_WriterStream), -1);
  rb_define_method(SwigClassWriterStream.klass, "write", VALUEFUNC(_wrap_WriterStream_write), -1);
  SwigClassWriterStream.mark = 0;
  SwigClassWriterStream.destroy = (void (*)(void *)) free_Mezzanine_XML_WriterStream;
  SwigClassWriterStream.trackObjects = 0;
  
  SwigClassXMLStreamWrapper.klass = rb_define_class_under(mMezzanineXML, "XMLStreamWrapper", ((swig_class *) SWIGTYPE_p_Mezzanine__XML__Writer->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper, (void *) &SwigClassXMLStreamWrapper);
  rb_define_alloc_func(SwigClassXMLStreamWrapper.klass, _wrap_XMLStreamWrapper_allocate);
  rb_define_method(SwigClassXMLStreamWrapper.klass, "initialize", VALUEFUNC(_wrap_new_XMLStreamWrapper), -1);
  rb_define_method(SwigClassXMLStreamWrapper.klass, "write", VALUEFUNC(_wrap_XMLStreamWrapper_write), -1);
  SwigClassXMLStreamWrapper.mark = 0;
  SwigClassXMLStreamWrapper.destroy = (void (*)(void *)) free_Mezzanine_XML_XMLStreamWrapper;
  SwigClassXMLStreamWrapper.trackObjects = 0;
  
  SwigClassDocument.klass = rb_define_class_under(mMezzanineXML, "Document", ((swig_class *) SWIGTYPE_p_Mezzanine__XML__Node->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__Document, (void *) &SwigClassDocument);
  rb_define_alloc_func(SwigClassDocument.klass, _wrap_Document_allocate);
  rb_define_method(SwigClassDocument.klass, "initialize", VALUEFUNC(_wrap_new_Document), -1);
  rb_define_method(SwigClassDocument.klass, "reset", VALUEFUNC(_wrap_Document_reset), -1);
  rb_define_method(SwigClassDocument.klass, "load", VALUEFUNC(_wrap_Document_load), -1);
  rb_define_method(SwigClassDocument.klass, "load_file", VALUEFUNC(_wrap_Document_load_file), -1);
  rb_define_method(SwigClassDocument.klass, "load_buffer", VALUEFUNC(_wrap_Document_load_buffer), -1);
  rb_define_method(SwigClassDocument.klass, "load_buffer_inplace", VALUEFUNC(_wrap_Document_load_buffer_inplace), -1);
  rb_define_method(SwigClassDocument.klass, "load_buffer_inplace_own", VALUEFUNC(_wrap_Document_load_buffer_inplace_own), -1);
  rb_define_method(SwigClassDocument.klass, "save", VALUEFUNC(_wrap_Document_save), -1);
  rb_define_method(SwigClassDocument.klass, "save_file", VALUEFUNC(_wrap_Document_save_file), -1);
  rb_define_method(SwigClassDocument.klass, "document_element", VALUEFUNC(_wrap_Document_document_element), -1);
  SwigClassDocument.mark = 0;
  SwigClassDocument.destroy = (void (*)(void *)) free_Mezzanine_XML_Document;
  SwigClassDocument.trackObjects = 0;
  rb_define_module_function(mMezzanineXML, "set_memory_management_functions", VALUEFUNC(_wrap_set_memory_management_functions), -1);
  rb_define_module_function(mMezzanineXML, "get_memory_allocation_function", VALUEFUNC(_wrap_get_memory_allocation_function), -1);
  rb_define_module_function(mMezzanineXML, "get_memory_deallocation_function", VALUEFUNC(_wrap_get_memory_deallocation_function), -1);
  
  SwigClassNodeIterator.klass = rb_define_class_under(mMezzanineXML, "NodeIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__NodeIterator, (void *) &SwigClassNodeIterator);
  rb_define_alloc_func(SwigClassNodeIterator.klass, _wrap_NodeIterator_allocate);
  rb_define_method(SwigClassNodeIterator.klass, "initialize", VALUEFUNC(_wrap_new_NodeIterator), -1);
  rb_define_method(SwigClassNodeIterator.klass, "==", VALUEFUNC(_wrap_NodeIterator___eq__), -1);
  rb_define_method(SwigClassNodeIterator.klass, "__ref__", VALUEFUNC(_wrap_NodeIterator___ref__), -1);
  rb_define_method(SwigClassNodeIterator.klass, "__deref__", VALUEFUNC(_wrap_NodeIterator___deref__), -1);
  rb_define_method(SwigClassNodeIterator.klass, "<", VALUEFUNC(_wrap_NodeIterator___lt__), -1);
  rb_define_method(SwigClassNodeIterator.klass, ">", VALUEFUNC(_wrap_NodeIterator___gt__), -1);
  rb_define_method(SwigClassNodeIterator.klass, "<=", VALUEFUNC(_wrap_NodeIterator___le__), -1);
  rb_define_method(SwigClassNodeIterator.klass, ">=", VALUEFUNC(_wrap_NodeIterator___ge__), -1);
  rb_define_method(SwigClassNodeIterator.klass, "empty", VALUEFUNC(_wrap_NodeIterator_empty), -1);
  rb_define_method(SwigClassNodeIterator.klass, "type", VALUEFUNC(_wrap_NodeIterator_type), -1);
  rb_define_method(SwigClassNodeIterator.klass, "name", VALUEFUNC(_wrap_NodeIterator_name), -1);
  rb_define_method(SwigClassNodeIterator.klass, "value", VALUEFUNC(_wrap_NodeIterator_value), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_first_attribute", VALUEFUNC(_wrap_NodeIterator_get_first_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_last_attribute", VALUEFUNC(_wrap_NodeIterator_get_last_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_first_child", VALUEFUNC(_wrap_NodeIterator_get_first_child), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_last_child", VALUEFUNC(_wrap_NodeIterator_get_last_child), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_next_sibling", VALUEFUNC(_wrap_NodeIterator_get_next_sibling), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_previous_sibling", VALUEFUNC(_wrap_NodeIterator_get_previous_sibling), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_parent", VALUEFUNC(_wrap_NodeIterator_get_parent), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_root", VALUEFUNC(_wrap_NodeIterator_get_root), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_text", VALUEFUNC(_wrap_NodeIterator_get_text), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_child", VALUEFUNC(_wrap_NodeIterator_get_child), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_attribute", VALUEFUNC(_wrap_NodeIterator_get_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_child_value", VALUEFUNC(_wrap_NodeIterator_get_child_value), -1);
  rb_define_method(SwigClassNodeIterator.klass, "set_name", VALUEFUNC(_wrap_NodeIterator_set_name), -1);
  rb_define_method(SwigClassNodeIterator.klass, "set_value", VALUEFUNC(_wrap_NodeIterator_set_value), -1);
  rb_define_method(SwigClassNodeIterator.klass, "append_attribute", VALUEFUNC(_wrap_NodeIterator_append_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "prepend_attribute", VALUEFUNC(_wrap_NodeIterator_prepend_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "insert_attribute_after", VALUEFUNC(_wrap_NodeIterator_insert_attribute_after), -1);
  rb_define_method(SwigClassNodeIterator.klass, "insert_attribute_before", VALUEFUNC(_wrap_NodeIterator_insert_attribute_before), -1);
  rb_define_method(SwigClassNodeIterator.klass, "append_copy", VALUEFUNC(_wrap_NodeIterator_append_copy), -1);
  rb_define_method(SwigClassNodeIterator.klass, "prepend_copy", VALUEFUNC(_wrap_NodeIterator_prepend_copy), -1);
  rb_define_method(SwigClassNodeIterator.klass, "insert_copy_after", VALUEFUNC(_wrap_NodeIterator_insert_copy_after), -1);
  rb_define_method(SwigClassNodeIterator.klass, "insert_copy_before", VALUEFUNC(_wrap_NodeIterator_insert_copy_before), -1);
  rb_define_method(SwigClassNodeIterator.klass, "append_child", VALUEFUNC(_wrap_NodeIterator_append_child), -1);
  rb_define_method(SwigClassNodeIterator.klass, "prepend_child", VALUEFUNC(_wrap_NodeIterator_prepend_child), -1);
  rb_define_method(SwigClassNodeIterator.klass, "insert_child_after", VALUEFUNC(_wrap_NodeIterator_insert_child_after), -1);
  rb_define_method(SwigClassNodeIterator.klass, "insert_child_before", VALUEFUNC(_wrap_NodeIterator_insert_child_before), -1);
  rb_define_method(SwigClassNodeIterator.klass, "remove_attribute", VALUEFUNC(_wrap_NodeIterator_remove_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "remove_child", VALUEFUNC(_wrap_NodeIterator_remove_child), -1);
  rb_define_method(SwigClassNodeIterator.klass, "find_childby_attribute", VALUEFUNC(_wrap_NodeIterator_find_childby_attribute), -1);
  rb_define_method(SwigClassNodeIterator.klass, "path", VALUEFUNC(_wrap_NodeIterator_path), -1);
  rb_define_method(SwigClassNodeIterator.klass, "first_element_by_path", VALUEFUNC(_wrap_NodeIterator_first_element_by_path), -1);
  rb_define_method(SwigClassNodeIterator.klass, "traverse", VALUEFUNC(_wrap_NodeIterator_traverse), -1);
  rb_define_method(SwigClassNodeIterator.klass, "find_single_node", VALUEFUNC(_wrap_NodeIterator_find_single_node), -1);
  rb_define_method(SwigClassNodeIterator.klass, "find_nodes", VALUEFUNC(_wrap_NodeIterator_find_nodes), -1);
  rb_define_method(SwigClassNodeIterator.klass, "print", VALUEFUNC(_wrap_NodeIterator_print), -1);
  rb_define_method(SwigClassNodeIterator.klass, "begin", VALUEFUNC(_wrap_NodeIterator_begin), -1);
  rb_define_method(SwigClassNodeIterator.klass, "end", VALUEFUNC(_wrap_NodeIterator_end), -1);
  rb_define_method(SwigClassNodeIterator.klass, "attributes_begin", VALUEFUNC(_wrap_NodeIterator_attributes_begin), -1);
  rb_define_method(SwigClassNodeIterator.klass, "attributes_end", VALUEFUNC(_wrap_NodeIterator_attributes_end), -1);
  rb_define_method(SwigClassNodeIterator.klass, "get_children", VALUEFUNC(_wrap_NodeIterator_get_children), -1);
  rb_define_method(SwigClassNodeIterator.klass, "attributes", VALUEFUNC(_wrap_NodeIterator_attributes), -1);
  rb_define_method(SwigClassNodeIterator.klass, "off_set_debug", VALUEFUNC(_wrap_NodeIterator_off_set_debug), -1);
  rb_define_method(SwigClassNodeIterator.klass, "hash_value", VALUEFUNC(_wrap_NodeIterator_hash_value), -1);
  rb_define_method(SwigClassNodeIterator.klass, "internal_object", VALUEFUNC(_wrap_NodeIterator_internal_object), -1);
  SwigClassNodeIterator.mark = 0;
  SwigClassNodeIterator.destroy = (void (*)(void *)) free_Mezzanine_XML_NodeIterator;
  SwigClassNodeIterator.trackObjects = 0;
  
  SwigClassNamedNodeIterator.klass = rb_define_class_under(mMezzanineXML, "NamedNodeIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, (void *) &SwigClassNamedNodeIterator);
  rb_define_alloc_func(SwigClassNamedNodeIterator.klass, _wrap_NamedNodeIterator_allocate);
  rb_define_method(SwigClassNamedNodeIterator.klass, "initialize", VALUEFUNC(_wrap_new_NamedNodeIterator), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "==", VALUEFUNC(_wrap_NamedNodeIterator___eq__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "__ref__", VALUEFUNC(_wrap_NamedNodeIterator___ref__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "__deref__", VALUEFUNC(_wrap_NamedNodeIterator___deref__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "<", VALUEFUNC(_wrap_NamedNodeIterator___lt__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, ">", VALUEFUNC(_wrap_NamedNodeIterator___gt__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "<=", VALUEFUNC(_wrap_NamedNodeIterator___le__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, ">=", VALUEFUNC(_wrap_NamedNodeIterator___ge__), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "empty", VALUEFUNC(_wrap_NamedNodeIterator_empty), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "type", VALUEFUNC(_wrap_NamedNodeIterator_type), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "name", VALUEFUNC(_wrap_NamedNodeIterator_name), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "value", VALUEFUNC(_wrap_NamedNodeIterator_value), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_first_attribute", VALUEFUNC(_wrap_NamedNodeIterator_get_first_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_last_attribute", VALUEFUNC(_wrap_NamedNodeIterator_get_last_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_first_child", VALUEFUNC(_wrap_NamedNodeIterator_get_first_child), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_last_child", VALUEFUNC(_wrap_NamedNodeIterator_get_last_child), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_next_sibling", VALUEFUNC(_wrap_NamedNodeIterator_get_next_sibling), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_previous_sibling", VALUEFUNC(_wrap_NamedNodeIterator_get_previous_sibling), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_parent", VALUEFUNC(_wrap_NamedNodeIterator_get_parent), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_root", VALUEFUNC(_wrap_NamedNodeIterator_get_root), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_text", VALUEFUNC(_wrap_NamedNodeIterator_get_text), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_child", VALUEFUNC(_wrap_NamedNodeIterator_get_child), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_attribute", VALUEFUNC(_wrap_NamedNodeIterator_get_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_child_value", VALUEFUNC(_wrap_NamedNodeIterator_get_child_value), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "set_name", VALUEFUNC(_wrap_NamedNodeIterator_set_name), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "set_value", VALUEFUNC(_wrap_NamedNodeIterator_set_value), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "append_attribute", VALUEFUNC(_wrap_NamedNodeIterator_append_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "prepend_attribute", VALUEFUNC(_wrap_NamedNodeIterator_prepend_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "insert_attribute_after", VALUEFUNC(_wrap_NamedNodeIterator_insert_attribute_after), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "insert_attribute_before", VALUEFUNC(_wrap_NamedNodeIterator_insert_attribute_before), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "append_copy", VALUEFUNC(_wrap_NamedNodeIterator_append_copy), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "prepend_copy", VALUEFUNC(_wrap_NamedNodeIterator_prepend_copy), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "insert_copy_after", VALUEFUNC(_wrap_NamedNodeIterator_insert_copy_after), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "insert_copy_before", VALUEFUNC(_wrap_NamedNodeIterator_insert_copy_before), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "append_child", VALUEFUNC(_wrap_NamedNodeIterator_append_child), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "prepend_child", VALUEFUNC(_wrap_NamedNodeIterator_prepend_child), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "insert_child_after", VALUEFUNC(_wrap_NamedNodeIterator_insert_child_after), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "insert_child_before", VALUEFUNC(_wrap_NamedNodeIterator_insert_child_before), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "remove_attribute", VALUEFUNC(_wrap_NamedNodeIterator_remove_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "remove_child", VALUEFUNC(_wrap_NamedNodeIterator_remove_child), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "find_childby_attribute", VALUEFUNC(_wrap_NamedNodeIterator_find_childby_attribute), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "path", VALUEFUNC(_wrap_NamedNodeIterator_path), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "first_element_by_path", VALUEFUNC(_wrap_NamedNodeIterator_first_element_by_path), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "traverse", VALUEFUNC(_wrap_NamedNodeIterator_traverse), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "find_single_node", VALUEFUNC(_wrap_NamedNodeIterator_find_single_node), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "find_nodes", VALUEFUNC(_wrap_NamedNodeIterator_find_nodes), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "print", VALUEFUNC(_wrap_NamedNodeIterator_print), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "begin", VALUEFUNC(_wrap_NamedNodeIterator_begin), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "end", VALUEFUNC(_wrap_NamedNodeIterator_end), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "attributes_begin", VALUEFUNC(_wrap_NamedNodeIterator_attributes_begin), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "attributes_end", VALUEFUNC(_wrap_NamedNodeIterator_attributes_end), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "get_children", VALUEFUNC(_wrap_NamedNodeIterator_get_children), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "attributes", VALUEFUNC(_wrap_NamedNodeIterator_attributes), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "off_set_debug", VALUEFUNC(_wrap_NamedNodeIterator_off_set_debug), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "hash_value", VALUEFUNC(_wrap_NamedNodeIterator_hash_value), -1);
  rb_define_method(SwigClassNamedNodeIterator.klass, "internal_object", VALUEFUNC(_wrap_NamedNodeIterator_internal_object), -1);
  SwigClassNamedNodeIterator.mark = 0;
  SwigClassNamedNodeIterator.destroy = (void (*)(void *)) free_Mezzanine_XML_NamedNodeIterator;
  SwigClassNamedNodeIterator.trackObjects = 0;
  
  SwigClassNodeText.klass = rb_define_class_under(mMezzanineXML, "NodeText", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__NodeText, (void *) &SwigClassNodeText);
  rb_define_alloc_func(SwigClassNodeText.klass, _wrap_NodeText_allocate);
  rb_define_method(SwigClassNodeText.klass, "initialize", VALUEFUNC(_wrap_new_NodeText), -1);
  rb_define_method(SwigClassNodeText.klass, "empty", VALUEFUNC(_wrap_NodeText_empty), -1);
  rb_define_method(SwigClassNodeText.klass, "get_string", VALUEFUNC(_wrap_NodeText_get_string), -1);
  rb_define_method(SwigClassNodeText.klass, "as_string", VALUEFUNC(_wrap_NodeText_as_string), -1);
  rb_define_method(SwigClassNodeText.klass, "as_int", VALUEFUNC(_wrap_NodeText_as_int), -1);
  rb_define_method(SwigClassNodeText.klass, "as_uint", VALUEFUNC(_wrap_NodeText_as_uint), -1);
  rb_define_method(SwigClassNodeText.klass, "as_double", VALUEFUNC(_wrap_NodeText_as_double), -1);
  rb_define_method(SwigClassNodeText.klass, "as_float", VALUEFUNC(_wrap_NodeText_as_float), -1);
  rb_define_method(SwigClassNodeText.klass, "as_real", VALUEFUNC(_wrap_NodeText_as_real), -1);
  rb_define_method(SwigClassNodeText.klass, "as_whole", VALUEFUNC(_wrap_NodeText_as_whole), -1);
  rb_define_method(SwigClassNodeText.klass, "as_integer", VALUEFUNC(_wrap_NodeText_as_integer), -1);
  rb_define_method(SwigClassNodeText.klass, "as_bool", VALUEFUNC(_wrap_NodeText_as_bool), -1);
  rb_define_method(SwigClassNodeText.klass, "set", VALUEFUNC(_wrap_NodeText_set), -1);
  rb_define_method(SwigClassNodeText.klass, "data", VALUEFUNC(_wrap_NodeText_data), -1);
  SwigClassNodeText.mark = 0;
  SwigClassNodeText.destroy = (void (*)(void *)) free_Mezzanine_XML_NodeText;
  SwigClassNodeText.trackObjects = 0;
  
  SwigClassTreeWalker.klass = rb_define_class_under(mMezzanineXML, "TreeWalker", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__TreeWalker, (void *) &SwigClassTreeWalker);
  rb_undef_alloc_func(SwigClassTreeWalker.klass);
  rb_define_method(SwigClassTreeWalker.klass, "on_traversal_begin", VALUEFUNC(_wrap_TreeWalker_on_traversal_begin), -1);
  rb_define_method(SwigClassTreeWalker.klass, "on_each_node", VALUEFUNC(_wrap_TreeWalker_on_each_node), -1);
  rb_define_method(SwigClassTreeWalker.klass, "on_traversal_end", VALUEFUNC(_wrap_TreeWalker_on_traversal_end), -1);
  SwigClassTreeWalker.mark = 0;
  SwigClassTreeWalker.destroy = (void (*)(void *)) free_Mezzanine_XML_TreeWalker;
  SwigClassTreeWalker.trackObjects = 0;
  rb_define_module_function(mMezzanineXML, "as_utf8", VALUEFUNC(_wrap_as_utf8), -1);
  rb_define_module_function(mMezzanineXML, "as_wide", VALUEFUNC(_wrap_as_wide), -1);
  rb_define_module_function(mMezzanineXML, "get_one_tag", VALUEFUNC(_wrap_get_one_tag), -1);
  rb_define_module_function(mMezzanineXML, "pre_parse_class_from_single_tag", VALUEFUNC(_wrap_pre_parse_class_from_single_tag), -1);
  rb_define_module_function(mMezzanineXML, "escape_xml", VALUEFUNC(_wrap_escape_xml), -1);
  
  SwigClassXPathNode.klass = rb_define_class_under(mMezzanineXML, "XPathNode", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XPathNode, (void *) &SwigClassXPathNode);
  rb_define_alloc_func(SwigClassXPathNode.klass, _wrap_XPathNode_allocate);
  rb_define_method(SwigClassXPathNode.klass, "initialize", VALUEFUNC(_wrap_new_XPathNode), -1);
  rb_define_method(SwigClassXPathNode.klass, "get_node", VALUEFUNC(_wrap_XPathNode_get_node), -1);
  rb_define_method(SwigClassXPathNode.klass, "get_attribute", VALUEFUNC(_wrap_XPathNode_get_attribute), -1);
  rb_define_method(SwigClassXPathNode.klass, "get_parent", VALUEFUNC(_wrap_XPathNode_get_parent), -1);
  rb_define_method(SwigClassXPathNode.klass, "==", VALUEFUNC(_wrap_XPathNode___eq__), -1);
  SwigClassXPathNode.mark = 0;
  SwigClassXPathNode.destroy = (void (*)(void *)) free_Mezzanine_XML_XPathNode;
  SwigClassXPathNode.trackObjects = 0;
  
  SwigClassXPathNodeSet.klass = rb_define_class_under(mMezzanineXML, "XPathNodeSet", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, (void *) &SwigClassXPathNodeSet);
  rb_define_alloc_func(SwigClassXPathNodeSet.klass, _wrap_XPathNodeSet_allocate);
  rb_define_method(SwigClassXPathNodeSet.klass, "initialize", VALUEFUNC(_wrap_new_XPathNodeSet), -1);
  rb_define_const(SwigClassXPathNodeSet.klass, "TypeUnsorted", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathNodeSet::TypeUnsorted)));
  rb_define_const(SwigClassXPathNodeSet.klass, "TypeSorted", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathNodeSet::TypeSorted)));
  rb_define_const(SwigClassXPathNodeSet.klass, "TypeSortedReverse", SWIG_From_int(static_cast< int >(Mezzanine::XML::XPathNodeSet::TypeSortedReverse)));
  rb_define_method(SwigClassXPathNodeSet.klass, "type", VALUEFUNC(_wrap_XPathNodeSet_type), -1);
  rb_define_method(SwigClassXPathNodeSet.klass, "size", VALUEFUNC(_wrap_XPathNodeSet_size), -1);
  rb_define_method(SwigClassXPathNodeSet.klass, "begin", VALUEFUNC(_wrap_XPathNodeSet_begin), -1);
  rb_define_method(SwigClassXPathNodeSet.klass, "end", VALUEFUNC(_wrap_XPathNodeSet_end), -1);
  rb_define_method(SwigClassXPathNodeSet.klass, "sort", VALUEFUNC(_wrap_XPathNodeSet_sort), -1);
  rb_define_method(SwigClassXPathNodeSet.klass, "first", VALUEFUNC(_wrap_XPathNodeSet_first), -1);
  rb_define_method(SwigClassXPathNodeSet.klass, "empty", VALUEFUNC(_wrap_XPathNodeSet_empty), -1);
  SwigClassXPathNodeSet.mark = 0;
  SwigClassXPathNodeSet.destroy = (void (*)(void *)) free_Mezzanine_XML_XPathNodeSet;
  SwigClassXPathNodeSet.trackObjects = 0;
  
  SwigClassXPathParseResult.klass = rb_define_class_under(mMezzanineXML, "XPathParseResult", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XPathParseResult, (void *) &SwigClassXPathParseResult);
  rb_define_alloc_func(SwigClassXPathParseResult.klass, _wrap_XPathParseResult_allocate);
  rb_define_method(SwigClassXPathParseResult.klass, "initialize", VALUEFUNC(_wrap_new_XPathParseResult), -1);
  rb_define_method(SwigClassXPathParseResult.klass, "Offset=", VALUEFUNC(_wrap_XPathParseResult_Offset_set), -1);
  rb_define_method(SwigClassXPathParseResult.klass, "Offset", VALUEFUNC(_wrap_XPathParseResult_Offset_get), -1);
  rb_define_method(SwigClassXPathParseResult.klass, "description", VALUEFUNC(_wrap_XPathParseResult_description), -1);
  SwigClassXPathParseResult.mark = 0;
  SwigClassXPathParseResult.destroy = (void (*)(void *)) free_Mezzanine_XML_XPathParseResult;
  SwigClassXPathParseResult.trackObjects = 0;
  
  SwigClassXPathVariable.klass = rb_define_class_under(mMezzanineXML, "XPathVariable", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XPathVariable, (void *) &SwigClassXPathVariable);
  rb_undef_alloc_func(SwigClassXPathVariable.klass);
  rb_define_method(SwigClassXPathVariable.klass, "name", VALUEFUNC(_wrap_XPathVariable_name), -1);
  rb_define_method(SwigClassXPathVariable.klass, "type", VALUEFUNC(_wrap_XPathVariable_type), -1);
  rb_define_method(SwigClassXPathVariable.klass, "get_boolean", VALUEFUNC(_wrap_XPathVariable_get_boolean), -1);
  rb_define_method(SwigClassXPathVariable.klass, "get_number", VALUEFUNC(_wrap_XPathVariable_get_number), -1);
  rb_define_method(SwigClassXPathVariable.klass, "get_string", VALUEFUNC(_wrap_XPathVariable_get_string), -1);
  rb_define_method(SwigClassXPathVariable.klass, "get_node_set", VALUEFUNC(_wrap_XPathVariable_get_node_set), -1);
  rb_define_method(SwigClassXPathVariable.klass, "set", VALUEFUNC(_wrap_XPathVariable_set), -1);
  SwigClassXPathVariable.mark = 0;
  SwigClassXPathVariable.destroy = (void (*)(void *)) free_Mezzanine_XML_XPathVariable;
  SwigClassXPathVariable.trackObjects = 0;
  
  SwigClassXPathVariableSet.klass = rb_define_class_under(mMezzanineXML, "XPathVariableSet", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, (void *) &SwigClassXPathVariableSet);
  rb_define_alloc_func(SwigClassXPathVariableSet.klass, _wrap_XPathVariableSet_allocate);
  rb_define_method(SwigClassXPathVariableSet.klass, "initialize", VALUEFUNC(_wrap_new_XPathVariableSet), -1);
  rb_define_method(SwigClassXPathVariableSet.klass, "add", VALUEFUNC(_wrap_XPathVariableSet_add), -1);
  rb_define_method(SwigClassXPathVariableSet.klass, "set", VALUEFUNC(_wrap_XPathVariableSet_set), -1);
  rb_define_method(SwigClassXPathVariableSet.klass, "get", VALUEFUNC(_wrap_XPathVariableSet_get), -1);
  SwigClassXPathVariableSet.mark = 0;
  SwigClassXPathVariableSet.destroy = (void (*)(void *)) free_Mezzanine_XML_XPathVariableSet;
  SwigClassXPathVariableSet.trackObjects = 0;
  
  SwigClassXPathQuery.klass = rb_define_class_under(mMezzanineXML, "XPathQuery", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__XML__XPathQuery, (void *) &SwigClassXPathQuery);
  rb_define_alloc_func(SwigClassXPathQuery.klass, _wrap_XPathQuery_allocate);
  rb_define_method(SwigClassXPathQuery.klass, "initialize", VALUEFUNC(_wrap_new_XPathQuery), -1);
  rb_define_method(SwigClassXPathQuery.klass, "return_type", VALUEFUNC(_wrap_XPathQuery_return_type), -1);
  rb_define_method(SwigClassXPathQuery.klass, "evaluate_boolean", VALUEFUNC(_wrap_XPathQuery_evaluate_boolean), -1);
  rb_define_method(SwigClassXPathQuery.klass, "evaluate_number", VALUEFUNC(_wrap_XPathQuery_evaluate_number), -1);
  rb_define_method(SwigClassXPathQuery.klass, "evaluate_string", VALUEFUNC(_wrap_XPathQuery_evaluate_string), -1);
  rb_define_method(SwigClassXPathQuery.klass, "evaluate_node_set", VALUEFUNC(_wrap_XPathQuery_evaluate_node_set), -1);
  rb_define_method(SwigClassXPathQuery.klass, "result", VALUEFUNC(_wrap_XPathQuery_result), -1);
  SwigClassXPathQuery.mark = 0;
  SwigClassXPathQuery.destroy = (void (*)(void *)) free_Mezzanine_XML_XPathQuery;
  SwigClassXPathQuery.trackObjects = 0;
}

