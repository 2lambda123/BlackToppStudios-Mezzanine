/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule()	
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void)
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) == Qtrue )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) == Qtrue )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AttachableContainer swig_types[0]
#define SWIGTYPE_p_AttachableIterator swig_types[1]
#define SWIGTYPE_p_ConstAttachableIterator swig_types[2]
#define SWIGTYPE_p_GeometryRayTestResult swig_types[3]
#define SWIGTYPE_p_Mezzanine__ActorBase swig_types[4]
#define SWIGTYPE_p_Mezzanine__AlarmTimer swig_types[5]
#define SWIGTYPE_p_Mezzanine__AttachableBase swig_types[6]
#define SWIGTYPE_p_Mezzanine__AttachableChild swig_types[7]
#define SWIGTYPE_p_Mezzanine__AttachableParent swig_types[8]
#define SWIGTYPE_p_Mezzanine__AttachableParent__AttachableContainer__iterator swig_types[9]
#define SWIGTYPE_p_Mezzanine__AxisAlignedBox swig_types[10]
#define SWIGTYPE_p_Mezzanine__ColourValue swig_types[11]
#define SWIGTYPE_p_Mezzanine__GoalTimer swig_types[12]
#define SWIGTYPE_p_Mezzanine__Graphics__Mesh swig_types[13]
#define SWIGTYPE_p_Mezzanine__Graphics__SceneManager swig_types[14]
#define SWIGTYPE_p_Mezzanine__Matrix3x3 swig_types[15]
#define SWIGTYPE_p_Mezzanine__NonStaticWorldObject swig_types[16]
#define SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings swig_types[17]
#define SWIGTYPE_p_Mezzanine__Physics__CollisionShape swig_types[18]
#define SWIGTYPE_p_Mezzanine__Plane swig_types[19]
#define SWIGTYPE_p_Mezzanine__Quaternion swig_types[20]
#define SWIGTYPE_p_Mezzanine__Ray swig_types[21]
#define SWIGTYPE_p_Mezzanine__RayQueryTool swig_types[22]
#define SWIGTYPE_p_Mezzanine__Sphere swig_types[23]
#define SWIGTYPE_p_Mezzanine__StopWatchTimer swig_types[24]
#define SWIGTYPE_p_Mezzanine__Timer swig_types[25]
#define SWIGTYPE_p_Mezzanine__Transform swig_types[26]
#define SWIGTYPE_p_Mezzanine__Vector2 swig_types[27]
#define SWIGTYPE_p_Mezzanine__Vector3 swig_types[28]
#define SWIGTYPE_p_Mezzanine__World swig_types[29]
#define SWIGTYPE_p_Mezzanine__WorldNode swig_types[30]
#define SWIGTYPE_p_Mezzanine__WorldObject swig_types[31]
#define SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings swig_types[32]
#define SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings swig_types[33]
#define SWIGTYPE_p_Mezzanine__WorldProxy swig_types[34]
#define SWIGTYPE_p_Ogre__ColourValue swig_types[35]
#define SWIGTYPE_p_Ogre__Entity swig_types[36]
#define SWIGTYPE_p_Ogre__Plane swig_types[37]
#define SWIGTYPE_p_Ogre__Quaternion swig_types[38]
#define SWIGTYPE_p_Ogre__Ray swig_types[39]
#define SWIGTYPE_p_Ogre__SceneNode swig_types[40]
#define SWIGTYPE_p_Ogre__Vector2 swig_types[41]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[42]
#define SWIGTYPE_p_Physics__Collision swig_types[43]
#define SWIGTYPE_p_Physics__Collision__CollisionState swig_types[44]
#define SWIGTYPE_p_PlaneRayTestResult swig_types[45]
#define SWIGTYPE_p_RayTestResult swig_types[46]
#define SWIGTYPE_p_SDL_Event swig_types[47]
#define SWIGTYPE_p_WorldObjectPhysicsSettings swig_types[48]
#define SWIGTYPE_p_XML__Node swig_types[49]
#define SWIGTYPE_p_bool swig_types[50]
#define SWIGTYPE_p_btCollisionObject swig_types[51]
#define SWIGTYPE_p_btQuaternion swig_types[52]
#define SWIGTYPE_p_btTransform swig_types[53]
#define SWIGTYPE_p_btVector3 swig_types[54]
#define SWIGTYPE_p_char swig_types[55]
#define SWIGTYPE_p_float swig_types[56]
#define SWIGTYPE_p_int swig_types[57]
#define SWIGTYPE_p_long_long swig_types[58]
#define SWIGTYPE_p_short swig_types[59]
#define SWIGTYPE_p_signed_char swig_types[60]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[61]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[62]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t swig_types[63]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t swig_types[64]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[65]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[66]
#define SWIGTYPE_p_std__string swig_types[67]
#define SWIGTYPE_p_std__stringstream swig_types[68]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[69]
#define SWIGTYPE_p_std__wstring swig_types[70]
#define SWIGTYPE_p_swig__ConstIterator swig_types[71]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[72]
#define SWIGTYPE_p_swig__Iterator swig_types[73]
#define SWIGTYPE_p_unsigned_char swig_types[74]
#define SWIGTYPE_p_unsigned_int swig_types[75]
#define SWIGTYPE_p_unsigned_long swig_types[76]
#define SWIGTYPE_p_unsigned_long_long swig_types[77]
#define SWIGTYPE_p_unsigned_short swig_types[78]
#define SWIGTYPE_p_void swig_types[79]
static swig_type_info *swig_types[81];
static swig_module_info swig_module = {swig_types, 80, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_Mezzanine
#define SWIG_name    "Mezzanine"

static VALUE mMezzanine;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020008 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        using namespace Mezzanine;
        using namespace Mezzanine::Threading;
    

#include <stdexcept>


namespace swig {
  class GC_VALUE {
  protected:
    // Hash of all GC_VALUE's currently in use
    static VALUE _hash;

    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    static void initialize()
    {
      if ( _hash == Qnil ) 
	{ 
	  _hash = rb_hash_new();
	  rb_gc_register_address( &_hash );
	}
    }

    // this function is never called.  Provided for symmetry only.
    static void cleanup()
    {
      rb_gc_unregister_address( &_hash );
    }

    GC_VALUE() : _obj( Qnil )
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      GC_register();
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      GC_register();
    }
    
    ~GC_VALUE() 
    {
      GC_unregister();
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      GC_unregister();
      _obj = item._obj;
      GC_register();
      return *this;
    }

    void GC_register()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
      ++n;
      rb_hash_aset( _hash, _obj, INT2NUM(n) );
    }

    void GC_unregister()
    {
      if ( FIXNUM_P(_obj) || SPECIAL_CONST_P(_obj) || SYMBOL_P(_obj) ) 
	return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if ( BUILTIN_TYPE(_obj) == T_NONE ) return;

      VALUE val = rb_hash_aref( _hash, _obj );
      unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
      --n;
      if ( n )
	rb_hash_aset( _hash, _obj, INT2NUM(n) );
      else
	rb_hash_delete( _hash, _obj );
    }
    
    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_protect_funcall( VALUE p )
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall( args->src, args->id, args->nargs, args->target );
    }


#define GC_VALUE_CMP( op_id, op, cmp, cmpval ) \
    bool op( const GC_VALUE& other ) const \
    { \
      if ( FIXNUM_P(_obj) && FIXNUM_P(other._obj) ) \
      { \
	return _obj cmp other._obj; \
      } \
      bool  res = false; \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      if ( rb_respond_to( _obj, op_id ) == Qtrue ) \
	{ \
	  int status; \
	  OpArgs  args; \
          args.src    = _obj; \
	  args.id     = op_id; \
	  args.nargs  = 1; \
	  args.target = VALUE(other); \
	  ret = rb_protect( PROTECTFUNC(swig_protect_funcall), \
                            VALUE(&args), &status ); \
	} \
      if ( ret == Qnil ) { \
	VALUE a = rb_funcall(         _obj, hash_id, 0 ); \
	VALUE b = rb_funcall( VALUE(other), hash_id, 0 ); \
	res = a cmp b; \
      } \
      else \
	{ \
	  res = RTEST( ret ); \
	} \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return res; \
    }


    GC_VALUE_CMP( eq_id, operator==, ==, == 0 )
    GC_VALUE_CMP( lt_id, operator<,  < , <  0 )
    GC_VALUE_CMP( le_id, operator<=, <=, <= 0 )
    GC_VALUE_CMP( gt_id, operator>,  > , >  0 )
    GC_VALUE_CMP( ge_id, operator>=, >=, >= 0 )
#undef GC_VALUE_CMP

    bool operator!=( const GC_VALUE& other )
    {
      return !(this->operator==(other));
    }

#define GC_VALUE_UNARY( proc_id, op ) \
    GC_VALUE op() const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 0; \
      args.target = Qnil; \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return ret; \
    }

    GC_VALUE_UNARY( pos_id, operator+ )
    GC_VALUE_UNARY( neg_id, operator- )
    GC_VALUE_UNARY( inv_id, operator~ )
#undef GC_VALUE_BINARY

#define GC_VALUE_BINARY( proc_id, op ) \
    GC_VALUE op( const GC_VALUE& other ) const \
    { \
      VALUE ret = Qnil; \
      SWIG_RUBY_THREAD_BEGIN_BLOCK; \
      int status; \
      OpArgs  args; \
      args.src    = _obj; \
      args.id     = proc_id; \
      args.nargs  = 1; \
      args.target = VALUE(other); \
      ret = rb_protect( PROTECTFUNC(swig_protect_funcall), VALUE(&args), \
			&status ); \
      SWIG_RUBY_THREAD_END_BLOCK; \
      return GC_VALUE(ret); \
    }

    GC_VALUE_BINARY( add_id, operator+ );
    GC_VALUE_BINARY( sub_id, operator- );
    GC_VALUE_BINARY( mul_id, operator* );
    GC_VALUE_BINARY( div_id, operator/ );
    GC_VALUE_BINARY( mod_id, operator% );
    
    GC_VALUE_BINARY( and_id, operator& );
    GC_VALUE_BINARY( xor_id, operator^ );
    GC_VALUE_BINARY(  or_id, operator| );

    GC_VALUE_BINARY( lshift_id, operator<< );
    GC_VALUE_BINARY( rshift_id, operator>> );
#undef GC_VALUE_BINARY

  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  VALUE GC_VALUE::_hash = Qnil;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


#include <string>


#include <iostream>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <deque>


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <float.h>


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float (VALUE obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   rb_float_new 


SWIGINTERNINLINE VALUE
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    #if defined(StringValuePtr)
    char *cstr = StringValuePtr(obj); 
    #else
    char *cstr = STR2CSTR(obj);
    #endif
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

static swig_class SwigClassGC_VALUE;


/*
  Document-method: Mezzanine::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Mezzanine::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Mezzanine::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_PrintHello(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  Mezzanine::PrintHello();
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassVector3;

SWIGINTERN VALUE
_wrap_Vector3_X_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","X", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->X = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_X_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Real) ((arg1)->X);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Y_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Y", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->Y = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Y_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Real) ((arg1)->Y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Z_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Z", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->Z = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Z_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Real) ((arg1)->Z);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetAxisValue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetAxisValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetAxisValue", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->GetAxisValue((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Vector3", 1, argv[0] ));
  } 
  temp1 = static_cast< Mezzanine::Real >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Vector3", 2, argv[1] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Vector3", 3, argv[2] ));
  } 
  temp3 = static_cast< Mezzanine::Real >(val3);
  arg3 = &temp3;
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Ogre::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","Mezzanine::Vector3", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","Mezzanine::Vector3", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Ogre::Vector3 * >(argp1);
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Ogre::Vector3 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3__SWIG_3(int argc, VALUE *argv, VALUE self) {
  btVector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "btVector3 const &","Mezzanine::Vector3", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","Mezzanine::Vector3", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< btVector3 * >(argp1);
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((btVector3 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector3__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Vector3", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Vector3", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Vector3 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vector3_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vector3_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Vector3);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vector3__SWIG_5(int argc, VALUE *argv, VALUE self) {
  XML::Node arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XML__Node,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "XML::Node","Mezzanine::Vector3", 1, argv[0] )); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node","Mezzanine::Vector3", 1, argv[0]));
    } else {
      arg1 = *(reinterpret_cast< XML::Node * >(argp1));
    }
  }
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vector3(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ogre__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btVector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3.new", 
    "    Vector3.new()\n"
    "    Vector3.new(Mezzanine::Real const &X, Mezzanine::Real const &Y, Mezzanine::Real const &Z)\n"
    "    Vector3.new(Ogre::Vector3 const &Vec)\n"
    "    Vector3.new(btVector3 const &Vec)\n"
    "    Vector3.new(Mezzanine::Vector3 const &Vec)\n"
    "    Vector3.new(XML::Node OneNode)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Unit_X(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::Unit_X();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Unit_Y(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::Unit_Y();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Unit_Z(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::Unit_Z();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Neg_Unit_X(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::Neg_Unit_X();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Neg_Unit_Y(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::Neg_Unit_Y();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Neg_Unit_Z(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::Neg_Unit_Z();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_UnitOnAxis(int argc, VALUE *argv, VALUE self) {
  Mezzanine::StandardAxis arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::StandardAxis","Mezzanine::Vector3::UnitOnAxis", 1, argv[0] ));
  } 
  arg1 = static_cast< Mezzanine::StandardAxis >(val1);
  result = Mezzanine::Vector3::UnitOnAxis(arg1);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_IsStandardUnitAxis(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::StandardAxis result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","IsStandardUnitAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::StandardAxis)((Mezzanine::Vector3 const *)arg1)->IsStandardUnitAxis();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.-@

  call-seq:
    -@ -> Vector3

Negation operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___neg__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (arg1)->operator -();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.==

  call-seq:
    ==(Vec) -> bool
    ==(Vec) -> bool
    ==(Vec) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___eq____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (bool)((Mezzanine::Vector3 const *)arg1)->operator ==((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btVector3 const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btVector3 * >(argp2);
  result = (bool)((Mezzanine::Vector3 const *)arg1)->operator ==((btVector3 const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector3 * >(argp2);
  result = (bool)((Mezzanine::Vector3 const *)arg1)->operator ==((Ogre::Vector3 const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___eq____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3.__eq__", 
    "    bool Vector3.__eq__(Mezzanine::Vector3 const &Vec)\n"
    "    bool Vector3.__eq__(btVector3 const &Vec)\n"
    "    bool Vector3.__eq__(Ogre::Vector3 const &Vec)\n");
  
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.+

  call-seq:
    +(Vec) -> Vector3
    +(Vec) -> Vector3
    +(Vec) -> Vector3

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.-

  call-seq:
    -(Vec) -> Vector3
    -(Vec) -> Vector3
    -(Vec) -> Vector3

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.+

  call-seq:
    +(Vec) -> Vector3
    +(Vec) -> Vector3
    +(Vec) -> Vector3

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btVector3 const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btVector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((btVector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.-

  call-seq:
    -(Vec) -> Vector3
    -(Vec) -> Vector3
    -(Vec) -> Vector3

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btVector3 const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btVector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((btVector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btVector3 const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btVector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((btVector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___div____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btVector3 const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btVector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((btVector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.+

  call-seq:
    +(Vec) -> Vector3
    +(Vec) -> Vector3
    +(Vec) -> Vector3

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Ogre::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___add____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3.__add__", 
    "    Mezzanine::Vector3 Vector3.__add__(Mezzanine::Vector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__add__(btVector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__add__(Ogre::Vector3 const &Vec)\n");
  
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector3.-

  call-seq:
    -(Vec) -> Vector3
    -(Vec) -> Vector3
    -(Vec) -> Vector3

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector3___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Ogre::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3.__sub__", 
    "    Mezzanine::Vector3 Vector3.__sub__(Mezzanine::Vector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__sub__(btVector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__sub__(Ogre::Vector3 const &Vec)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Ogre::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3.__mul__", 
    "    Mezzanine::Vector3 Vector3.__mul__(Mezzanine::Real const &scalar)\n"
    "    Mezzanine::Vector3 Vector3.__mul__(Mezzanine::Vector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__mul__(btVector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__mul__(Ogre::Vector3 const &Vec)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3___div____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Ogre::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___div____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btVector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___div____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3___div____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector3___div____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector3.__div__", 
    "    Mezzanine::Vector3 Vector3.__div__(Mezzanine::Real const &scalar)\n"
    "    Mezzanine::Vector3 Vector3.__div__(Mezzanine::Vector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__div__(btVector3 const &Vec)\n"
    "    Mezzanine::Vector3 Vector3.__div__(Ogre::Vector3 const &Vec)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_CrossProduct(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","CrossProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","CrossProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","CrossProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->CrossProduct((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_DotProduct(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","DotProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","DotProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","DotProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->DotProduct((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Normalize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Vector3 *) &(arg1)->Normalize();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetNormal(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = ((Mezzanine::Vector3 const *)arg1)->GetNormal();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetDirection(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetDirection", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetDirection", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->GetDirection((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Inverse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Inverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (arg1)->Inverse();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Reflect(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Reflect", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Reflect", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Reflect", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (arg1)->Reflect((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Distance(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Distance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Distance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Distance((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_SquaredDistance(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","SquaredDistance", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SquaredDistance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SquaredDistance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredDistance((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Length(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","Length", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Length();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_SquaredLength(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","SquaredLength", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredLength();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_IsZeroLength(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","IsZeroLength", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (bool)((Mezzanine::Vector3 const *)arg1)->IsZeroLength();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetRotationToAxis__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetRotationToAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetRotationToAxis", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetRotationToAxis", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetRotationToAxis", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetRotationToAxis", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetRotationToAxis__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetRotationToAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetRotationToAxis", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetRotationToAxis", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector3_GetRotationToAxis(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector3_GetRotationToAxis__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Vector3_GetRotationToAxis__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Vector3.GetRotationToAxis", 
    "    Mezzanine::Quaternion Vector3.GetRotationToAxis(Mezzanine::Vector3 const &Axis, Mezzanine::Vector3 const &FallBackAxis)\n"
    "    Mezzanine::Quaternion Vector3.GetRotationToAxis(Mezzanine::Vector3 const &Axis)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Zero(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Zero", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  (arg1)->Zero();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_SetValues(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  Mezzanine::Real temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","SetValues", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Real >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 4, argv[2] ));
  } 
  temp4 = static_cast< Mezzanine::Real >(val4);
  arg4 = &temp4;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Ceil(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Ceil", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Ceil", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Ceil", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Vector3 *) &(arg1)->Ceil((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_Floor(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Floor", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Floor", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Floor", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Vector3 *) &(arg1)->Floor((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetBulletVector3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btVector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetBulletVector3", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = ((Mezzanine::Vector3 const *)arg1)->GetBulletVector3();
  vresult = SWIG_NewPointerObj((new btVector3(static_cast< const btVector3& >(result))), SWIGTYPE_p_btVector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_ExtractBulletVector3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","ExtractBulletVector3", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btVector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btVector3 const &","ExtractBulletVector3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btVector3 const &","ExtractBulletVector3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btVector3 * >(argp2);
  (arg1)->ExtractBulletVector3((btVector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_GetOgreVector3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","GetOgreVector3", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = ((Mezzanine::Vector3 const *)arg1)->GetOgreVector3();
  vresult = SWIG_NewPointerObj((new Ogre::Vector3(static_cast< const Ogre::Vector3& >(result))), SWIGTYPE_p_Ogre__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_ExtractOgreVector3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","ExtractOgreVector3", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector3 const &","ExtractOgreVector3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector3 const &","ExtractOgreVector3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector3 * >(argp2);
  (arg1)->ExtractOgreVector3((Ogre::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::Vector3 const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector3_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector3::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Vector3(Mezzanine::Vector3 *arg1) {
    delete arg1;
}

static swig_class SwigClassPlane;

SWIGINTERN VALUE
_wrap_Plane_Normal_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","Normal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Normal", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  if (arg1) (arg1)->Normal = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_Normal_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","Normal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_Distance_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Distance", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->Distance = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_Distance_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","Distance", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  result = (Mezzanine::Real) ((arg1)->Distance);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Plane__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Plane *)new Mezzanine::Plane();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Plane__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Plane,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const &","Mezzanine::Plane", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Plane const &","Mezzanine::Plane", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Plane const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Plane__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Plane", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Plane", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Plane", 2, argv[1] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Plane__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Plane", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Plane", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Plane", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Plane", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Plane", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Plane", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Plane_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Plane_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Plane);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Plane__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Ogre::Plane *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Ogre__Plane,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Ogre::Plane const &","Mezzanine::Plane", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Plane const &","Mezzanine::Plane", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Ogre::Plane * >(argp1);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Ogre::Plane const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Plane(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs;
  if (argc > 3) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Plane__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Plane__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ogre__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Plane__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Plane__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Plane.new", 
    "    Plane.new()\n"
    "    Plane.new(Mezzanine::Plane const &Other)\n"
    "    Plane.new(Mezzanine::Vector3 const &Norm, Mezzanine::Real const Dist)\n"
    "    Plane.new(Mezzanine::Vector3 const &First, Mezzanine::Vector3 const &Second, Mezzanine::Vector3 const &Third)\n"
    "    Plane.new(Ogre::Plane const &InternalPlane)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Plane(Mezzanine::Plane *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Plane_Define__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","Define", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Define", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Define", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","Define", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::Real >(val3);
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_Define__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","Define", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Define", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Define", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Define", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Define", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Define", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Define", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< Mezzanine::Vector3 * >(argp4);
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Plane_Define(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Plane_Define__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "Plane.Define", 
    "    void Plane.Define(Mezzanine::Vector3 const &Norm, Mezzanine::Real const Dist)\n"
    "    void Plane.Define(Mezzanine::Vector3 const &First, Mezzanine::Vector3 const &Second, Mezzanine::Vector3 const &Third)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_GetSide__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Plane::Side result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","GetSide", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetSide", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetSide", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_GetSide__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::Plane::Side result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","GetSide", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetSide", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetSide", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetSide", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetSide", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Plane_GetSide(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plane_GetSide__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Plane_GetSide__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Plane.GetSide", 
    "    Mezzanine::Plane::Side Plane.GetSide(Mezzanine::Vector3 const &Point)\n"
    "    Mezzanine::Plane::Side Plane.GetSide(Mezzanine::Vector3 const &Center, Mezzanine::Vector3 const &HalfSize)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_GetDistance(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","GetDistance", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","GetDistance", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","GetDistance", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Real)((Mezzanine::Plane const *)arg1)->GetDistance((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_IsOverlapping__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","IsOverlapping", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Sphere,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Sphere const &","IsOverlapping", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Sphere const &","IsOverlapping", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Sphere * >(argp2);
  result = (Mezzanine::Bool)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_IsOverlapping__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","IsOverlapping", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__AxisAlignedBox,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AxisAlignedBox const &","IsOverlapping", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::AxisAlignedBox const &","IsOverlapping", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::AxisAlignedBox * >(argp2);
  result = (Mezzanine::Bool)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_IsOverlapping__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","IsOverlapping", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Plane,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Plane const &","IsOverlapping", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Plane const &","IsOverlapping", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Plane * >(argp2);
  result = (Mezzanine::Bool)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Plane_IsOverlapping(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Sphere, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Plane.IsOverlapping", 
    "    Mezzanine::Bool Plane.IsOverlapping(Mezzanine::Sphere const &ToCheck)\n"
    "    Mezzanine::Bool Plane.IsOverlapping(Mezzanine::AxisAlignedBox const &ToCheck)\n"
    "    Mezzanine::Bool Plane.IsOverlapping(Mezzanine::Plane const &ToCheck)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_Intersects(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","Intersects", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Ray const &","Intersects", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Ray const &","Intersects", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Ray * >(argp2);
  result = ((Mezzanine::Plane const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Plane::RayTestResult(static_cast< const Mezzanine::Plane::RayTestResult& >(result))), SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_ExtractOgrePlane(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","ExtractOgrePlane", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Plane,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Plane const &","ExtractOgrePlane", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Plane const &","ExtractOgrePlane", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Plane * >(argp2);
  (arg1)->ExtractOgrePlane((Ogre::Plane const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_GetOgrePlane(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::Plane result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","GetOgrePlane", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  result = ((Mezzanine::Plane const *)arg1)->GetOgrePlane();
  vresult = SWIG_NewPointerObj((new Ogre::Plane(static_cast< const Ogre::Plane& >(result))), SWIGTYPE_p_Ogre__Plane, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::Plane const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Plane_GetSerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Plane::GetSerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Plane.==

  call-seq:
    ==(Other) -> Mezzanine::Bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Plane___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Plane, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Plane const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Plane * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Plane,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Plane const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Plane const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Plane * >(argp2);
  result = (Mezzanine::Bool)((Mezzanine::Plane const *)arg1)->operator ==((Mezzanine::Plane const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassQuaternion;

SWIGINTERN VALUE
_wrap_Quaternion_X_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","X", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->X = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_X_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Real) ((arg1)->X);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_Y_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Y", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->Y = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_Y_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Real) ((arg1)->Y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_Z_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Z", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->Z = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_Z_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","Z", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Real) ((arg1)->Z);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_W_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","W", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","W", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->W = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_W_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","W", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Real) ((arg1)->W);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  Mezzanine::Real temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Quaternion", 1, argv[0] ));
  } 
  temp1 = static_cast< Mezzanine::Real >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Quaternion", 2, argv[1] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Quaternion", 3, argv[2] ));
  } 
  temp3 = static_cast< Mezzanine::Real >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Quaternion", 4, argv[3] ));
  } 
  temp4 = static_cast< Mezzanine::Real >(val4);
  arg4 = &temp4;
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Quaternion", 1, argv[0] ));
  } 
  temp1 = static_cast< Mezzanine::Real >(val1);
  arg1 = &temp1;
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Matrix3x3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Matrix3x3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Matrix3x3 const &","Mezzanine::Quaternion", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Matrix3x3 const &","Mezzanine::Quaternion", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Matrix3x3 * >(argp1);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Matrix3x3 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Quaternion", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_5(int argc, VALUE *argv, VALUE self) {
  btQuaternion *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_btQuaternion,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "btQuaternion const &","Mezzanine::Quaternion", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btQuaternion const &","Mezzanine::Quaternion", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< btQuaternion * >(argp1);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((btQuaternion const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Ogre::Quaternion *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Ogre__Quaternion,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Ogre::Quaternion const &","Mezzanine::Quaternion", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Quaternion const &","Mezzanine::Quaternion", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Ogre::Quaternion * >(argp1);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Ogre::Quaternion const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_7(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","Mezzanine::Quaternion", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","Mezzanine::Quaternion", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Quaternion const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Quaternion_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Quaternion_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Quaternion);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Quaternion__SWIG_8(int argc, VALUE *argv, VALUE self) {
  XML::Node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "XML::Node const &","Mezzanine::Quaternion", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","Mezzanine::Quaternion", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< XML::Node * >(argp1);
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((XML::Node const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Quaternion(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Matrix3x3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btQuaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ogre__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Quaternion__SWIG_8(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Quaternion__SWIG_4(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "Quaternion.new", 
    "    Quaternion.new()\n"
    "    Quaternion.new(Mezzanine::Real const &X, Mezzanine::Real const &Y, Mezzanine::Real const &Z, Mezzanine::Real const &W)\n"
    "    Quaternion.new(Mezzanine::Real const &Angle, Mezzanine::Vector3 const &Axis)\n"
    "    Quaternion.new(Mezzanine::Matrix3x3 const &Mat)\n"
    "    Quaternion.new(Mezzanine::Vector3 const &AxisX, Mezzanine::Vector3 const &AxisY, Mezzanine::Vector3 const &AxisZ)\n"
    "    Quaternion.new(btQuaternion const &Theirs)\n"
    "    Quaternion.new(Ogre::Quaternion const &Theirs)\n"
    "    Quaternion.new(Mezzanine::Quaternion const &Other)\n"
    "    Quaternion.new(XML::Node const &OneNode)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_SetIdentity(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","SetIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  (arg1)->SetIdentity();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_SetValues(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  Mezzanine::Real temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  Mezzanine::Real temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","SetValues", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Real >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 4, argv[2] ));
  } 
  temp4 = static_cast< Mezzanine::Real >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 5, argv[3] ));
  } 
  temp5 = static_cast< Mezzanine::Real >(val5);
  arg5 = &temp5;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4,(Mezzanine::Real const &)*arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_SetFromAxisAngle(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","SetFromAxisAngle", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetFromAxisAngle", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetFromAxisAngle", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetFromAxisAngle", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  (arg1)->SetFromAxisAngle((Mezzanine::Real const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_SetFromMatrix3x3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Matrix3x3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","SetFromMatrix3x3", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Matrix3x3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Matrix3x3 const &","SetFromMatrix3x3", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Matrix3x3 const &","SetFromMatrix3x3", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Matrix3x3 * >(argp2);
  (arg1)->SetFromMatrix3x3((Mezzanine::Matrix3x3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_SetFromAxes(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","SetFromAxes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetFromAxes", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetFromAxes", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetFromAxes", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetFromAxes", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetFromAxes", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetFromAxes", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< Mezzanine::Vector3 * >(argp4);
  (arg1)->SetFromAxes((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_DotProduct(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","DotProduct", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","DotProduct", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","DotProduct", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->DotProduct((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_Length(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","Length", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->Length();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_LengthSqrd(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","LengthSqrd", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->LengthSqrd();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_Normalize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = (Mezzanine::Quaternion *) &(arg1)->Normalize();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_GetNormalizedCopy(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","GetNormalizedCopy", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = ((Mezzanine::Quaternion const *)arg1)->GetNormalizedCopy();
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_GetInverse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","GetInverse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = ((Mezzanine::Quaternion const *)arg1)->GetInverse();
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_GetBulletQuaternion__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  btQuaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","GetBulletQuaternion", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","GetBulletQuaternion", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion(arg2);
  vresult = SWIG_NewPointerObj((new btQuaternion(static_cast< const btQuaternion& >(result))), SWIGTYPE_p_btQuaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_GetBulletQuaternion__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btQuaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","GetBulletQuaternion", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion();
  vresult = SWIG_NewPointerObj((new btQuaternion(static_cast< const btQuaternion& >(result))), SWIGTYPE_p_btQuaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaternion_GetBulletQuaternion(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Quaternion_GetBulletQuaternion__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Quaternion_GetBulletQuaternion__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Quaternion.GetBulletQuaternion", 
    "    btQuaternion Quaternion.GetBulletQuaternion(bool normalize)\n"
    "    btQuaternion Quaternion.GetBulletQuaternion()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_ExtractBulletQuaternion(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","ExtractBulletQuaternion", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btQuaternion const &","ExtractBulletQuaternion", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btQuaternion const &","ExtractBulletQuaternion", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btQuaternion * >(argp2);
  (arg1)->ExtractBulletQuaternion((btQuaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_GetOgreQuaternion__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  Ogre::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","GetOgreQuaternion", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","GetOgreQuaternion", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion(arg2);
  vresult = SWIG_NewPointerObj((new Ogre::Quaternion(static_cast< const Ogre::Quaternion& >(result))), SWIGTYPE_p_Ogre__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_GetOgreQuaternion__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","GetOgreQuaternion", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion();
  vresult = SWIG_NewPointerObj((new Ogre::Quaternion(static_cast< const Ogre::Quaternion& >(result))), SWIGTYPE_p_Ogre__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaternion_GetOgreQuaternion(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Quaternion_GetOgreQuaternion__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Quaternion_GetOgreQuaternion__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Quaternion.GetOgreQuaternion", 
    "    Ogre::Quaternion Quaternion.GetOgreQuaternion(bool normalize)\n"
    "    Ogre::Quaternion Quaternion.GetOgreQuaternion()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_ExtractOgreQuaternion(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","ExtractOgreQuaternion", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Quaternion const &","ExtractOgreQuaternion", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Quaternion const &","ExtractOgreQuaternion", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Quaternion * >(argp2);
  (arg1)->ExtractOgreQuaternion((Ogre::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___div__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Quaternion.+

  call-seq:
    +(Other) -> Quaternion
    +(Other) -> Quaternion
    +(Other) -> Quaternion

Add operator.
*/
SWIGINTERN VALUE
_wrap_Quaternion___add____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___add____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Quaternion const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Quaternion const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Quaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Ogre::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___add____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btQuaternion const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btQuaternion const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btQuaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((btQuaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaternion___add__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___add____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___add____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btQuaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___add____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Quaternion.__add__", 
    "    Mezzanine::Quaternion Quaternion.__add__(Mezzanine::Quaternion const &Other)\n"
    "    Mezzanine::Quaternion Quaternion.__add__(Ogre::Quaternion const &Other)\n"
    "    Mezzanine::Quaternion Quaternion.__add__(btQuaternion const &Other)\n");
  
  return Qnil;
}



/*
  Document-method: Mezzanine::Quaternion.-

  call-seq:
    -(Other) -> Quaternion
    -(Other) -> Quaternion
    -(Other) -> Quaternion

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Quaternion___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Quaternion const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Quaternion const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Quaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Ogre::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___sub____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btQuaternion const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btQuaternion const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btQuaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((btQuaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaternion___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btQuaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___sub____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Quaternion.__sub__", 
    "    Mezzanine::Quaternion Quaternion.__sub__(Mezzanine::Quaternion const &Other)\n"
    "    Mezzanine::Quaternion Quaternion.__sub__(Ogre::Quaternion const &Other)\n"
    "    Mezzanine::Quaternion Quaternion.__sub__(btQuaternion const &Other)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___mul____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Quaternion const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Quaternion const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Quaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Ogre::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___mul____SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btQuaternion const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btQuaternion const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btQuaternion * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((btQuaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___mul____SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaternion___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btQuaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_3(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_4(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Quaternion___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Quaternion.__mul__", 
    "    Mezzanine::Vector3 Quaternion.__mul__(Mezzanine::Real const &Scalar)\n"
    "    Mezzanine::Vector3 Quaternion.__mul__(Mezzanine::Quaternion const &Other)\n"
    "    Mezzanine::Vector3 Quaternion.__mul__(Ogre::Quaternion const &Other)\n"
    "    Mezzanine::Vector3 Quaternion.__mul__(btQuaternion const &Other)\n"
    "    Mezzanine::Vector3 Quaternion.__mul__(Mezzanine::Vector3 const &Other)\n");
  
  return Qnil;
}



/*
  Document-method: Mezzanine::Quaternion.==

  call-seq:
    ==(Other) -> bool
    ==(Other) -> bool
    ==(Other) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Quaternion___eq____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = (bool)((Mezzanine::Quaternion const *)arg1)->operator ==((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Quaternion const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Quaternion const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Quaternion * >(argp2);
  result = (bool)((Mezzanine::Quaternion const *)arg1)->operator ==((Ogre::Quaternion const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion___eq____SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btQuaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btQuaternion const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btQuaternion const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btQuaternion * >(argp2);
  result = (bool)((Mezzanine::Quaternion const *)arg1)->operator ==((btQuaternion const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Quaternion___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___eq____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_btQuaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Quaternion___eq____SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Quaternion.__eq__", 
    "    bool Quaternion.__eq__(Mezzanine::Quaternion const &Other)\n"
    "    bool Quaternion.__eq__(Ogre::Quaternion const &Other)\n"
    "    bool Quaternion.__eq__(btQuaternion const &Other)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::Quaternion const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Quaternion * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Quaternion_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Quaternion::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Quaternion(Mezzanine::Quaternion *arg1) {
    delete arg1;
}

static swig_class SwigClassRay;

SWIGINTERN VALUE
_wrap_Ray_Origin_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","Origin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Origin", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  if (arg1) (arg1)->Origin = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Origin_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","Origin", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = (Mezzanine::Vector3 *)& ((arg1)->Origin);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Destination_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","Destination", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Destination", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  if (arg1) (arg1)->Destination = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Destination_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","Destination", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = (Mezzanine::Vector3 *)& ((arg1)->Destination);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Ray__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Ray *)new Mezzanine::Ray();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Ray__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Ray,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const &","Mezzanine::Ray", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Ray const &","Mezzanine::Ray", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Ray const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Ray__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Ray", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Ray", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Vector3 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Ray__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Ray", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Ray", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Ray", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Ray", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Ray_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Ray_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Ray);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Ray__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Ogre::Ray *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Ogre__Ray,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Ogre::Ray const &","Mezzanine::Ray", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Ray const &","Mezzanine::Ray", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Ogre::Ray * >(argp1);
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Ogre::Ray const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Ray(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Ray__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ray__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ray__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ogre__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Ray__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Ray__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Ray.new", 
    "    Ray.new()\n"
    "    Ray.new(Mezzanine::Ray const &Other)\n"
    "    Ray.new(Mezzanine::Vector3 const &To)\n"
    "    Ray.new(Mezzanine::Vector3 const &From, Mezzanine::Vector3 const &To)\n"
    "    Ray.new(Ogre::Ray const &InternalRay)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Ray(Mezzanine::Ray *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Ray_Length(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","Length", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::Ray const *)arg1)->Length();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_GetDirection(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","GetDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = ((Mezzanine::Ray const *)arg1)->GetDirection();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_GetNormal(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Ray result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","GetNormal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = ((Mezzanine::Ray const *)arg1)->GetNormal();
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray(static_cast< const Mezzanine::Ray& >(result))), SWIGTYPE_p_Mezzanine__Ray, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Normalize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = (Mezzanine::Ray *) &(arg1)->Normalize();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Intersects__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","Intersects", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Plane,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Plane const &","Intersects", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Plane const &","Intersects", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Plane * >(argp2);
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::Plane const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray::PlaneRayTestResult(static_cast< const Mezzanine::Ray::PlaneRayTestResult& >(result))), SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Intersects__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Ray > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","Intersects", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Sphere,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Sphere const &","Intersects", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Sphere const &","Intersects", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Sphere * >(argp2);
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::Sphere const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray::GeometryRayTestResult(static_cast< const Mezzanine::Ray::GeometryRayTestResult& >(result))), SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_Intersects__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Ray > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","Intersects", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__AxisAlignedBox,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AxisAlignedBox const &","Intersects", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::AxisAlignedBox const &","Intersects", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::AxisAlignedBox * >(argp2);
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::AxisAlignedBox const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray::GeometryRayTestResult(static_cast< const Mezzanine::Ray::GeometryRayTestResult& >(result))), SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Ray_Intersects(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Plane, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Sphere, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Ray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_2(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Ray.Intersects", 
    "    Mezzanine::Ray::GeometryRayTestResult Ray.Intersects(Mezzanine::Plane const &ToCheck)\n"
    "    Mezzanine::Ray::GeometryRayTestResult Ray.Intersects(Mezzanine::Sphere const &ToCheck)\n"
    "    Mezzanine::Ray::GeometryRayTestResult Ray.Intersects(Mezzanine::AxisAlignedBox const &ToCheck)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_ExtractOgreRay(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","ExtractOgreRay", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Ray const &","ExtractOgreRay", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Ray const &","ExtractOgreRay", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Ray * >(argp2);
  (arg1)->ExtractOgreRay((Ogre::Ray const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_GetOgreRay(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::Ray result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","GetOgreRay", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  result = ((Mezzanine::Ray const *)arg1)->GetOgreRay();
  vresult = SWIG_NewPointerObj((new Ogre::Ray(static_cast< const Ogre::Ray& >(result))), SWIGTYPE_p_Ogre__Ray, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::Ray const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray_GetSerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Ray::GetSerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray___mul__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Ray result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator *", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = ((Mezzanine::Ray const *)arg1)->operator *(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray(static_cast< const Mezzanine::Ray& >(result))), SWIGTYPE_p_Mezzanine__Ray, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Ray___div__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Ray result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator /", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = ((Mezzanine::Ray const *)arg1)->operator /(arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray(static_cast< const Mezzanine::Ray& >(result))), SWIGTYPE_p_Mezzanine__Ray, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Ray.==

  call-seq:
    ==(Other) -> Mezzanine::Bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Ray___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Ray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Ray const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Ray * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Ray const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Ray const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Ray * >(argp2);
  result = (Mezzanine::Bool)((Mezzanine::Ray const *)arg1)->operator ==((Mezzanine::Ray const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassRayQueryTool;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_RayQueryTool_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_RayQueryTool_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__RayQueryTool);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_RayQueryTool(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::RayQueryTool *)new Mezzanine::RayQueryTool();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_ClearReturns(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool *","ClearReturns", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  result = (Mezzanine::Bool)(arg1)->ClearReturns();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_LastQueryResultsValid(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool const *","LastQueryResultsValid", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  result = (Mezzanine::Bool)((Mezzanine::RayQueryTool const *)arg1)->LastQueryResultsValid();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_LastQueryResultsOffset(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool const *","LastQueryResultsOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  result = ((Mezzanine::RayQueryTool const *)arg1)->LastQueryResultsOffset();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_LastQueryResultsActorPtr(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ActorBase *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool const *","LastQueryResultsActorPtr", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  result = (Mezzanine::ActorBase *)((Mezzanine::RayQueryTool const *)arg1)->LastQueryResultsActorPtr();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__ActorBase, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_GetFirstActorOnRayByPolygon(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Ray arg2 ;
  Mezzanine::Whole arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool *","GetFirstActorOnRayByPolygon", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Ray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Ray","GetFirstActorOnRayByPolygon", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Ray","GetFirstActorOnRayByPolygon", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Mezzanine::Ray * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetFirstActorOnRayByPolygon", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::Whole >(val3);
  result = (Mezzanine::Bool)(arg1)->GetFirstActorOnRayByPolygon(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_GetFirstActorOnRayByAABB(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Ray arg2 ;
  Mezzanine::Whole arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool *","GetFirstActorOnRayByAABB", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Ray,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Ray","GetFirstActorOnRayByAABB", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Ray","GetFirstActorOnRayByAABB", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Mezzanine::Ray * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetFirstActorOnRayByAABB", 3, argv[1] ));
  } 
  arg3 = static_cast< Mezzanine::Whole >(val3);
  result = (Mezzanine::Bool)(arg1)->GetFirstActorOnRayByAABB(arg2,arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_RayPlaneIntersection(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Plane *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool *","RayPlaneIntersection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Ray,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Ray const &","RayPlaneIntersection", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Ray const &","RayPlaneIntersection", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Ray * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Plane,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Plane const &","RayPlaneIntersection", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Plane const &","RayPlaneIntersection", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Plane * >(argp3);
  result = (Mezzanine::Bool)(arg1)->RayPlaneIntersection((Mezzanine::Ray const &)*arg2,(Mezzanine::Plane const &)*arg3);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_GetMouseRay__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  Mezzanine::Ray result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::RayQueryTool::GetMouseRay", 1, argv[0] ));
  } 
  arg1 = static_cast< Mezzanine::Real >(val1);
  result = Mezzanine::RayQueryTool::GetMouseRay(arg1);
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray(static_cast< const Mezzanine::Ray& >(result))), SWIGTYPE_p_Mezzanine__Ray, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_GetMouseRay__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Ray result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::RayQueryTool::GetMouseRay();
  vresult = SWIG_NewPointerObj((new Mezzanine::Ray(static_cast< const Mezzanine::Ray& >(result))), SWIGTYPE_p_Mezzanine__Ray, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_RayQueryTool_GetMouseRay(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[1];
  int ii;
  
  argc = nargs;
  if (argc > 1) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_RayQueryTool_GetMouseRay__SWIG_1(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_RayQueryTool_GetMouseRay__SWIG_0(nargs, args, self);
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 1, "RayQueryTool.GetMouseRay", 
    "    Mezzanine::Ray RayQueryTool.GetMouseRay(Mezzanine::Real Length)\n"
    "    Mezzanine::Ray RayQueryTool.GetMouseRay()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::RayQueryTool const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__RayQueryTool, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::RayQueryTool *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::RayQueryTool * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_RayQueryTool_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::RayQueryTool::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_RayQueryTool(Mezzanine::RayQueryTool *arg1) {
    delete arg1;
}

static swig_class SwigClassTimer;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Timer_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Timer_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Timer);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Timer(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Timer *)new Mezzanine::Timer();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Timer(Mezzanine::Timer *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Timer_SetCurrentTime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","SetCurrentTime", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetCurrentTime", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  (arg1)->SetCurrentTime(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_SetCurrentTimeInMilliseconds(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","SetCurrentTimeInMilliseconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetCurrentTimeInMilliseconds", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  (arg1)->SetCurrentTimeInMilliseconds(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_GetCurrentTime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","GetCurrentTime", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  result = (Mezzanine::Whole)(arg1)->GetCurrentTime();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_GetCurrentTimeInMilliseconds(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","GetCurrentTimeInMilliseconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  result = (Mezzanine::Whole)(arg1)->GetCurrentTimeInMilliseconds();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_SetInitialTime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","SetInitialTime", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetInitialTime", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  (arg1)->SetInitialTime(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_SetInitialTimeInMilliseconds(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","SetInitialTimeInMilliseconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetInitialTimeInMilliseconds", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  (arg1)->SetInitialTimeInMilliseconds(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_GetInitialTime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer const *","GetInitialTime", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::Timer const *)arg1)->GetInitialTime();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_GetInitialTimeInMilliseconds(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer const *","GetInitialTimeInMilliseconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::Timer const *)arg1)->GetInitialTimeInMilliseconds();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_Start(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","Start", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  (arg1)->Start();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_Stop(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","Stop", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  (arg1)->Stop();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_IsStopped(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","IsStopped", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  result = (Mezzanine::Bool)(arg1)->IsStopped();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_Reset(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer *","Reset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  (arg1)->Reset();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Timer_GetType(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Timer::TimerType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Timer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Timer const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Timer * >(argp1);
  result = (Mezzanine::Timer::TimerType)((Mezzanine::Timer const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassGoalTimer;

SWIGINTERN void
free_Mezzanine_GoalTimer(Mezzanine::GoalTimer *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_GoalTimer_SetAutoReset(int argc, VALUE *argv, VALUE self) {
  Mezzanine::GoalTimer *arg1 = (Mezzanine::GoalTimer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__GoalTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::GoalTimer *","SetAutoReset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::GoalTimer * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetAutoReset", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetAutoReset(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GoalTimer_GetAutoReset(int argc, VALUE *argv, VALUE self) {
  Mezzanine::GoalTimer *arg1 = (Mezzanine::GoalTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__GoalTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::GoalTimer const *","GetAutoReset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::GoalTimer * >(argp1);
  result = (Mezzanine::Bool)((Mezzanine::GoalTimer const *)arg1)->GetAutoReset();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GoalTimer_SetGoalTime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::GoalTimer *arg1 = (Mezzanine::GoalTimer *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__GoalTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::GoalTimer *","SetGoalTime", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::GoalTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetGoalTime", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  (arg1)->SetGoalTime(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GoalTimer_SetGoalTimeInMilliseconds(int argc, VALUE *argv, VALUE self) {
  Mezzanine::GoalTimer *arg1 = (Mezzanine::GoalTimer *) 0 ;
  Mezzanine::Whole arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__GoalTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::GoalTimer *","SetGoalTimeInMilliseconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::GoalTimer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetGoalTimeInMilliseconds", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Whole >(val2);
  (arg1)->SetGoalTimeInMilliseconds(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GoalTimer_GetGoalTime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::GoalTimer *arg1 = (Mezzanine::GoalTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__GoalTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::GoalTimer const *","GetGoalTime", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::GoalTimer * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::GoalTimer const *)arg1)->GetGoalTime();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_GoalTimer_GetGoalTimeInMilliseconds(int argc, VALUE *argv, VALUE self) {
  Mezzanine::GoalTimer *arg1 = (Mezzanine::GoalTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__GoalTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::GoalTimer const *","GetGoalTimeInMilliseconds", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::GoalTimer * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::GoalTimer const *)arg1)->GetGoalTimeInMilliseconds();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassStopWatchTimer;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_StopWatchTimer_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_StopWatchTimer_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__StopWatchTimer);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_StopWatchTimer(int argc, VALUE *argv, VALUE self) {
  Mezzanine::StopWatchTimer *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::StopWatchTimer *)new Mezzanine::StopWatchTimer();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_StopWatchTimer(Mezzanine::StopWatchTimer *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_StopWatchTimer_GetType(int argc, VALUE *argv, VALUE self) {
  Mezzanine::StopWatchTimer *arg1 = (Mezzanine::StopWatchTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Timer::TimerType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__StopWatchTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::StopWatchTimer const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::StopWatchTimer * >(argp1);
  result = (Mezzanine::Timer::TimerType)((Mezzanine::StopWatchTimer const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassAlarmTimer;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_AlarmTimer_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_AlarmTimer_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__AlarmTimer);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_AlarmTimer(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AlarmTimer *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::AlarmTimer *)new Mezzanine::AlarmTimer();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_AlarmTimer(Mezzanine::AlarmTimer *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AlarmTimer_GetType(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AlarmTimer *arg1 = (Mezzanine::AlarmTimer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Timer::TimerType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AlarmTimer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AlarmTimer const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AlarmTimer * >(argp1);
  result = (Mezzanine::Timer::TimerType)((Mezzanine::AlarmTimer const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTransform;

SWIGINTERN VALUE
_wrap_Transform_Location_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","Location", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 *","Location", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  if (arg1) (arg1)->Location = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_Location_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","Location", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  result = (Mezzanine::Vector3 *)& ((arg1)->Location);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_Rotation_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *arg2 = (Mezzanine::Quaternion *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","Rotation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion *","Rotation", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  if (arg1) (arg1)->Rotation = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_Rotation_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","Rotation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  result = (Mezzanine::Quaternion *)& ((arg1)->Rotation);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Quaternion, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Transform__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Transform", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Transform", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","Mezzanine::Transform", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","Mezzanine::Transform", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Quaternion const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Transform__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector3 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Mezzanine::Transform", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Mezzanine::Transform", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector3 * >(argp1);
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Transform__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Transform *)new Mezzanine::Transform();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Transform__SWIG_3(int argc, VALUE *argv, VALUE self) {
  btTransform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_btTransform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "btTransform const &","Mezzanine::Transform", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btTransform const &","Mezzanine::Transform", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< btTransform * >(argp1);
  result = (Mezzanine::Transform *)new Mezzanine::Transform((btTransform const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Transform_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Transform_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Transform);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Transform__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform const &","Mezzanine::Transform", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Transform const &","Mezzanine::Transform", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Transform const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Transform(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_2(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_btTransform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_4(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Transform__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Transform.new", 
    "    Transform.new(Mezzanine::Vector3 const &Vec, Mezzanine::Quaternion const &Quat)\n"
    "    Transform.new(Mezzanine::Vector3 const &Vec)\n"
    "    Transform.new()\n"
    "    Transform.new(btTransform const &Btt)\n"
    "    Transform.new(Mezzanine::Transform const &TheOther)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_SetIdentity(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","SetIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  (arg1)->SetIdentity();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_GetBulletTransform(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btTransform result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform const *","GetBulletTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  result = ((Mezzanine::Transform const *)arg1)->GetBulletTransform();
  vresult = SWIG_NewPointerObj((new btTransform(static_cast< const btTransform& >(result))), SWIGTYPE_p_btTransform, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_ExtractBulletTransform(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","ExtractBulletTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_btTransform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btTransform const &","ExtractBulletTransform", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "btTransform const &","ExtractBulletTransform", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< btTransform * >(argp2);
  (arg1)->ExtractBulletTransform((btTransform const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::Transform const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Transform *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transform_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Transform::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Transform(Mezzanine::Transform *arg1) {
    delete arg1;
}

static swig_class SwigClassVector2;

SWIGINTERN VALUE
_wrap_Vector2_X_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","X", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->X = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_X_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","X", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  result = (Mezzanine::Real) ((arg1)->X);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_Y_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Y", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->Y = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_Y_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","Y", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  result = (Mezzanine::Real) ((arg1)->Y);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector2__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_Vector2__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Vector2", 1, argv[0] ));
  } 
  temp1 = static_cast< Mezzanine::Real >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::Vector2", 2, argv[1] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Vector2_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Vector2_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__Vector2);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Vector2__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Ogre::Vector2 *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Ogre__Vector2,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Ogre::Vector2 const &","Mezzanine::Vector2", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector2 const &","Mezzanine::Vector2", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Ogre::Vector2 * >(argp1);
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Ogre::Vector2 const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_Vector2(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ogre__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Vector2__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "Vector2.new", 
    "    Vector2.new()\n"
    "    Vector2.new(Mezzanine::Real const &x, Mezzanine::Real const &y)\n"
    "    Vector2.new(Ogre::Vector2 const &Vec)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_GetOgreVector2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","GetOgreVector2", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  result = ((Mezzanine::Vector2 const *)arg1)->GetOgreVector2();
  vresult = SWIG_NewPointerObj((new Ogre::Vector2(static_cast< const Ogre::Vector2& >(result))), SWIGTYPE_p_Ogre__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_ExtractOgreVector2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","ExtractOgreVector2", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector2 const &","ExtractOgreVector2", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector2 const &","ExtractOgreVector2", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector2 * >(argp2);
  (arg1)->ExtractOgreVector2((Ogre::Vector2 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_SetIdentity(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","SetIdentity", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  (arg1)->SetIdentity();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_SetValues(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","SetValues", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","SetValues", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Real >(val3);
  arg3 = &temp3;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector2.==

  call-seq:
    ==(Vec2) -> bool
    ==(Vec2) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Vector2___eq____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector2 const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector2 * >(argp2);
  result = (bool)(arg1)->operator ==((Mezzanine::Vector2 const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2___eq____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Ogre__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Vector2 const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::Vector2 const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Ogre::Vector2 * >(argp2);
  result = (bool)(arg1)->operator ==((Ogre::Vector2 const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector2___eq__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector2___eq____SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Ogre__Vector2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector2___eq____SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector2.__eq__", 
    "    bool Vector2.__eq__(Mezzanine::Vector2 const &Vec2)\n"
    "    bool Vector2.__eq__(Ogre::Vector2 const &Vec2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2___mul____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator *", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2___div____SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","operator /", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector2.+

  call-seq:
    +(Vec2) -> Vector2

Add operator.
*/
SWIGINTERN VALUE
_wrap_Vector2___add__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const &","operator +", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector2 const &","operator +", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector2 * >(argp2);
  result = ((Mezzanine::Vector2 const *)arg1)->operator +((Mezzanine::Vector2 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::Vector2.-

  call-seq:
    -(Vec2) -> Vector2

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Vector2___sub__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector2 const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector2 * >(argp2);
  result = ((Mezzanine::Vector2 const *)arg1)->operator -((Mezzanine::Vector2 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2___mul____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","operator *", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const &","operator *", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector2 const &","operator *", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector2 * >(argp2);
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Vector2 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector2___mul__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector2___mul____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector2___mul____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector2.__mul__", 
    "    Mezzanine::Vector2 Vector2.__mul__(Mezzanine::Real const &scalar)\n"
    "    Mezzanine::Vector2 Vector2.__mul__(Mezzanine::Vector2 const &Vec2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2___div____SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","operator /", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector2,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const &","operator /", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector2 const &","operator /", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector2 * >(argp2);
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Vector2 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Vector2___div__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Vector2___div____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__Vector2, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector2___div____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Vector2.__div__", 
    "    Mezzanine::Vector2 Vector2.__div__(Mezzanine::Real const &scalar)\n"
    "    Mezzanine::Vector2 Vector2.__div__(Mezzanine::Vector2 const &Vec2)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_Perpendicular(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector2 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","Perpendicular", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  result = ((Mezzanine::Vector2 const *)arg1)->Perpendicular();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector2(static_cast< const Mezzanine::Vector2& >(result))), SWIGTYPE_p_Mezzanine__Vector2, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_Normalize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","Normalize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  result = (Mezzanine::Vector2 *) &(arg1)->Normalize();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::Vector2 const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__Vector2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::Vector2 *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::Vector2 * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Vector2_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::Vector2::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_Vector2(Mezzanine::Vector2 *arg1) {
    delete arg1;
}

static swig_class SwigClassAttachableBase;

SWIGINTERN void
free_Mezzanine_AttachableBase(Mezzanine::AttachableBase *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AttachableBase_ConvertLocalToGlobal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","ConvertLocalToGlobal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","ConvertLocalToGlobal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","ConvertLocalToGlobal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertLocalToGlobal((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_ConvertGlobalToLocal__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","ConvertGlobalToLocal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","ConvertGlobalToLocal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","ConvertGlobalToLocal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertGlobalToLocal((Mezzanine::Vector3 const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_ConvertLocalToGlobal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","ConvertLocalToGlobal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","ConvertLocalToGlobal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","ConvertLocalToGlobal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertLocalToGlobal((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttachableBase_ConvertLocalToGlobal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AttachableBase_ConvertLocalToGlobal__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AttachableBase_ConvertLocalToGlobal__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "AttachableBase.ConvertLocalToGlobal", 
    "    Mezzanine::Quaternion AttachableBase.ConvertLocalToGlobal(Mezzanine::Vector3 const &Location)\n"
    "    Mezzanine::Quaternion AttachableBase.ConvertLocalToGlobal(Mezzanine::Quaternion const &Orientation)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_ConvertGlobalToLocal__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","ConvertGlobalToLocal", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","ConvertGlobalToLocal", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","ConvertGlobalToLocal", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertGlobalToLocal((Mezzanine::Quaternion const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttachableBase_ConvertGlobalToLocal(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AttachableBase_ConvertGlobalToLocal__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AttachableBase_ConvertGlobalToLocal__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "AttachableBase.ConvertGlobalToLocal", 
    "    Mezzanine::Quaternion AttachableBase.ConvertGlobalToLocal(Mezzanine::Vector3 const &Location)\n"
    "    Mezzanine::Quaternion AttachableBase.ConvertGlobalToLocal(Mezzanine::Quaternion const &Orientation)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_GetName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ConstString *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  result = (Mezzanine::ConstString *) &((Mezzanine::AttachableBase const *)arg1)->GetName();
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_GetType(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::WorldAndSceneObjectType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  result = (Mezzanine::WorldAndSceneObjectType)((Mezzanine::AttachableBase const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_SetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase *","SetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_GetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","GetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  result = ((Mezzanine::AttachableBase const *)arg1)->GetLocation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_SetOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase *","SetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","SetOrientation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","SetOrientation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_GetOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","GetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  result = ((Mezzanine::AttachableBase const *)arg1)->GetOrientation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_SetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase *","SetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetScaling((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableBase_GetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase const *","GetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableBase * >(argp1);
  result = ((Mezzanine::AttachableBase const *)arg1)->GetScaling();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassAttachableParent;

SWIGINTERN void
free_Mezzanine_AttachableParent(Mezzanine::AttachableParent *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AttachableParent_AttachObject(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::AttachableChild *arg2 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent *","AttachObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","AttachObject", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::AttachableChild * >(argp2);
  (arg1)->AttachObject(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent_DetachObject(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::AttachableChild *arg2 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent *","DetachObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","DetachObject", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::AttachableChild * >(argp2);
  (arg1)->DetachObject(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent_DetachAllChildren(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent *","DetachAllChildren", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  (arg1)->DetachAllChildren();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent_GetNumAttached(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent const *","GetNumAttached", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::AttachableParent const *)arg1)->GetNumAttached();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent_GetAttached(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::AttachableChild *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent const *","GetAttached", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetAttached", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = (Mezzanine::AttachableChild *)((Mezzanine::AttachableParent const *)arg1)->GetAttached((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent_BeginChild(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::AttachableParent::AttachableIterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent *","BeginChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  result = (arg1)->BeginChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::AttachableParent::AttachableIterator(static_cast< const Mezzanine::AttachableParent::AttachableIterator& >(result))), SWIGTYPE_p_Mezzanine__AttachableParent__AttachableContainer__iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent_EndChild(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::AttachableParent::AttachableIterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent *","EndChild", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  result = (arg1)->EndChild();
  vresult = SWIG_NewPointerObj((new Mezzanine::AttachableParent::AttachableIterator(static_cast< const Mezzanine::AttachableParent::AttachableIterator& >(result))), SWIGTYPE_p_Mezzanine__AttachableParent__AttachableContainer__iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableParent__RecalculateAllChildTransforms(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableParent *","_RecalculateAllChildTransforms", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableParent * >(argp1);
  (arg1)->_RecalculateAllChildTransforms();
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassAttachableChild;

SWIGINTERN void
free_Mezzanine_AttachableChild(Mezzanine::AttachableChild *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_AttachableChild_GetParent(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::AttachableParent *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild const *","GetParent", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  result = (Mezzanine::AttachableParent *)((Mezzanine::AttachableChild const *)arg1)->GetParent();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__AttachableParent, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild_SetLocalLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","SetLocalLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetLocalLocation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetLocalLocation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetLocalLocation((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild_GetLocalLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild const *","GetLocalLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  result = ((Mezzanine::AttachableChild const *)arg1)->GetLocalLocation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild_SetLocalOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","SetLocalOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","SetLocalOrientation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","SetLocalOrientation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  (arg1)->SetLocalOrientation((Mezzanine::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild_GetLocalOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild const *","GetLocalOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  result = ((Mezzanine::AttachableChild const *)arg1)->GetLocalOrientation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild__RecalculateGlobalTransform__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","_RecalculateGlobalTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","_RecalculateGlobalTransform", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->_RecalculateGlobalTransform(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild__RecalculateGlobalTransform__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","_RecalculateGlobalTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  (arg1)->_RecalculateGlobalTransform();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_AttachableChild__RecalculateGlobalTransform(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__AttachableChild, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AttachableChild__RecalculateGlobalTransform__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__AttachableChild, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AttachableChild__RecalculateGlobalTransform__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "AttachableChild._RecalculateGlobalTransform", 
    "    void AttachableChild._RecalculateGlobalTransform(bool FromParent)\n"
    "    void AttachableChild._RecalculateGlobalTransform()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_AttachableChild__RecalculateLocalTransform(int argc, VALUE *argv, VALUE self) {
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__AttachableChild, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::AttachableChild *","_RecalculateLocalTransform", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::AttachableChild * >(argp1);
  (arg1)->_RecalculateLocalTransform();
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassWorldNode;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_WorldNode_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_WorldNode_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__WorldNode);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_WorldNode(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Graphics::SceneManager *arg2 = (Mezzanine::Graphics::SceneManager *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::WorldNode *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::String const &","Mezzanine::WorldNode", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","Mezzanine::WorldNode", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_Mezzanine__Graphics__SceneManager, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Graphics::SceneManager *","Mezzanine::WorldNode", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Graphics::SceneManager * >(argp2);
  result = (Mezzanine::WorldNode *)new Mezzanine::WorldNode((Mezzanine::String const &)*arg1,arg2);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_WorldNode(Mezzanine::WorldNode *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_WorldNode_GetName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ConstString *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (Mezzanine::ConstString *) &((Mezzanine::WorldNode const *)arg1)->GetName();
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_LookAt__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","LookAt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","LookAt", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","LookAt", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","LookAt", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","LookAt", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","LookAt", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< Mezzanine::Vector3 * >(argp4);
  (arg1)->LookAt((Mezzanine::Vector3 const &)*arg2,(Mezzanine::TransformSpace const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_LookAt__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","LookAt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","LookAt", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","LookAt", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","LookAt", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  (arg1)->LookAt((Mezzanine::Vector3 const &)*arg2,(Mezzanine::TransformSpace const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_LookAt__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","LookAt", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","LookAt", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","LookAt", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->LookAt((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_LookAt(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldNode_LookAt__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldNode_LookAt__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WorldNode_LookAt__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "WorldNode.LookAt", 
    "    void WorldNode.LookAt(Mezzanine::Vector3 const &LookAt, Mezzanine::TransformSpace const &TS, Mezzanine::Vector3 const &LocalDirection)\n"
    "    void WorldNode.LookAt(Mezzanine::Vector3 const &LookAt, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.LookAt(Mezzanine::Vector3 const &LookAt)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetDirection__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetDirection", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetDirection", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","SetDirection", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetDirection", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetDirection", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< Mezzanine::Vector3 * >(argp4);
  (arg1)->SetDirection((Mezzanine::Vector3 const &)*arg2,(Mezzanine::TransformSpace const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetDirection__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetDirection", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetDirection", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","SetDirection", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  (arg1)->SetDirection((Mezzanine::Vector3 const &)*arg2,(Mezzanine::TransformSpace const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetDirection__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetDirection", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetDirection", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetDirection((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_SetDirection(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldNode_SetDirection__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldNode_SetDirection__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WorldNode_SetDirection__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "WorldNode.SetDirection", 
    "    void WorldNode.SetDirection(Mezzanine::Vector3 const &Direction, Mezzanine::TransformSpace const &TS, Mezzanine::Vector3 const &LocalAxis)\n"
    "    void WorldNode.SetDirection(Mezzanine::Vector3 const &Direction, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.SetDirection(Mezzanine::Vector3 const &Direction)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetAutoTracking__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::AttachableBase *arg2 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetAutoTracking", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase *","SetAutoTracking", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::AttachableBase * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetAutoTracking", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetAutoTracking", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetAutoTracking", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetAutoTracking", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< Mezzanine::Vector3 * >(argp4);
  (arg1)->SetAutoTracking(arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetAutoTracking__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::AttachableBase *arg2 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetAutoTracking", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase *","SetAutoTracking", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::AttachableBase * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetAutoTracking", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetAutoTracking", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  (arg1)->SetAutoTracking(arg2,(Mezzanine::Vector3 const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetAutoTracking__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::AttachableBase *arg2 = (Mezzanine::AttachableBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetAutoTracking", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::AttachableBase *","SetAutoTracking", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::AttachableBase * >(argp2);
  (arg1)->SetAutoTracking(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_SetAutoTracking(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldNode_SetAutoTracking__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WorldNode_SetAutoTracking__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WorldNode_SetAutoTracking__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "WorldNode.SetAutoTracking", 
    "    void WorldNode.SetAutoTracking(Mezzanine::AttachableBase *Target, Mezzanine::Vector3 const &LocalDirection, Mezzanine::Vector3 const &Offset)\n"
    "    void WorldNode.SetAutoTracking(Mezzanine::AttachableBase *Target, Mezzanine::Vector3 const &LocalDirection)\n"
    "    void WorldNode.SetAutoTracking(Mezzanine::AttachableBase *Target)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetAutoTrackingTarget(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::AttachableBase *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetAutoTrackingTarget", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (Mezzanine::AttachableBase *)((Mezzanine::WorldNode const *)arg1)->GetAutoTrackingTarget();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__AttachableBase, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetAutoTrackingDirection(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetAutoTrackingDirection", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (Mezzanine::Vector3 *) &((Mezzanine::WorldNode const *)arg1)->GetAutoTrackingDirection();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetAutoTrackingOffset(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetAutoTrackingOffset", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (Mezzanine::Vector3 *) &((Mezzanine::WorldNode const *)arg1)->GetAutoTrackingOffset();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Rotate__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","Rotate", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","Rotate", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","Rotate", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2,(Mezzanine::TransformSpace const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Rotate__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","Rotate", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","Rotate", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Rotate__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::TransformSpace *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 ;
  Mezzanine::TransformSpace temp4 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Rotate", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Rotate", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Rotate", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  ecode4 = SWIG_AsVal_int (argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","Rotate", 4, argv[2] ));
  } else {
    temp4 = static_cast< Mezzanine::TransformSpace >(val4);
    arg4 = &temp4;
  }
  (arg1)->Rotate((Mezzanine::Real const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::TransformSpace const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Rotate__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Rotate", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Rotate", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","Rotate", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","Rotate", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  (arg1)->Rotate((Mezzanine::Real const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_Rotate(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldNode_Rotate__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldNode_Rotate__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WorldNode_Rotate__SWIG_3(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_WorldNode_Rotate__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "WorldNode.Rotate", 
    "    void WorldNode.Rotate(Mezzanine::Quaternion const &Rotation, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.Rotate(Mezzanine::Quaternion const &Rotation)\n"
    "    void WorldNode.Rotate(Mezzanine::Real const &Angle, Mezzanine::Vector3 const &Axis, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.Rotate(Mezzanine::Real const &Angle, Mezzanine::Vector3 const &Axis)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Yaw__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Yaw", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Yaw", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","Yaw", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  (arg1)->Yaw((Mezzanine::Real const &)*arg2,(Mezzanine::TransformSpace const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Yaw__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Yaw", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Yaw", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  (arg1)->Yaw((Mezzanine::Real const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_Yaw(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldNode_Yaw__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldNode_Yaw__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldNode.Yaw", 
    "    void WorldNode.Yaw(Mezzanine::Real const &Angle, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.Yaw(Mezzanine::Real const &Angle)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Pitch__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Pitch", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Pitch", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","Pitch", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  (arg1)->Pitch((Mezzanine::Real const &)*arg2,(Mezzanine::TransformSpace const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Pitch__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Pitch", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Pitch", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  (arg1)->Pitch((Mezzanine::Real const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_Pitch(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldNode_Pitch__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldNode_Pitch__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldNode.Pitch", 
    "    void WorldNode.Pitch(Mezzanine::Real const &Angle, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.Pitch(Mezzanine::Real const &Angle)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Roll__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::TransformSpace *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 ;
  Mezzanine::TransformSpace temp3 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Roll", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Roll", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_int (argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::TransformSpace const &","Roll", 3, argv[1] ));
  } else {
    temp3 = static_cast< Mezzanine::TransformSpace >(val3);
    arg3 = &temp3;
  }
  (arg1)->Roll((Mezzanine::Real const &)*arg2,(Mezzanine::TransformSpace const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_Roll__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","Roll", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Roll", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  (arg1)->Roll((Mezzanine::Real const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_Roll(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldNode_Roll__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldNode_Roll__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldNode.Roll", 
    "    void WorldNode.Roll(Mezzanine::Real const &Angle, Mezzanine::TransformSpace const &TS)\n"
    "    void WorldNode.Roll(Mezzanine::Real const &Angle)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetFixedYawAxis__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  bool arg2 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetFixedYawAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetFixedYawAxis", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetFixedYawAxis", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetFixedYawAxis", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Mezzanine::Vector3 * >(argp3);
  (arg1)->SetFixedYawAxis(arg2,(Mezzanine::Vector3 const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetFixedYawAxis__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetFixedYawAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetFixedYawAxis", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetFixedYawAxis(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldNode_SetFixedYawAxis(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldNode_SetFixedYawAxis__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Mezzanine__Vector3, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WorldNode_SetFixedYawAxis__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldNode.SetFixedYawAxis", 
    "    void WorldNode.SetFixedYawAxis(bool Enable, Mezzanine::Vector3 const &FixedAxis)\n"
    "    void WorldNode.SetFixedYawAxis(bool Enable)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetFixedYawAxisEnabled(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetFixedYawAxisEnabled", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (bool)((Mezzanine::WorldNode const *)arg1)->GetFixedYawAxisEnabled();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetFixedYawAxis(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetFixedYawAxis", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (Mezzanine::Vector3 *) &((Mezzanine::WorldNode const *)arg1)->GetFixedYawAxis();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Vector3, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = ((Mezzanine::WorldNode const *)arg1)->GetLocation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","SetOrientation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","SetOrientation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = ((Mezzanine::WorldNode const *)arg1)->GetOrientation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetScaling((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = ((Mezzanine::WorldNode const *)arg1)->GetScaling();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_GetType(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::WorldAndSceneObjectType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  result = (Mezzanine::WorldAndSceneObjectType)((Mezzanine::WorldNode const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetLocalLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetLocalLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetLocalLocation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetLocalLocation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetLocalLocation((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode_SetLocalOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","SetLocalOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","SetLocalOrientation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","SetLocalOrientation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  (arg1)->SetLocalOrientation((Mezzanine::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldNode__UpdateTracking(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldNode *arg1 = (Mezzanine::WorldNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldNode *","_UpdateTracking", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldNode * >(argp1);
  (arg1)->_UpdateTracking();
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassColourValue;

SWIGINTERN VALUE
_wrap_ColourValue_R_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","R", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","R", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->R = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_R_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","R", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  result = (Mezzanine::Real) ((arg1)->R);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_G_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","G", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","G", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->G = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_G_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","G", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  result = (Mezzanine::Real) ((arg1)->G);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_B_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","B", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","B", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->B = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_B_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","B", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  result = (Mezzanine::Real) ((arg1)->B);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_A_set(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","A", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","A", 2, argv[0] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  if (arg1) (arg1)->A = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_A_get(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","A", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  result = (Mezzanine::Real) ((arg1)->A);
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 1, argv[0] ));
  } 
  arg1 = static_cast< Mezzanine::Real >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 2, argv[1] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 3, argv[2] ));
  } 
  arg3 = static_cast< Mezzanine::Real >(val3);
  ecode4 = SWIG_AsVal_float(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 4, argv[3] ));
  } 
  arg4 = static_cast< Mezzanine::Real >(val4);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2,arg3,arg4);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 1, argv[0] ));
  } 
  arg1 = static_cast< Mezzanine::Real >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 2, argv[1] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  ecode3 = SWIG_AsVal_float(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 3, argv[2] ));
  } 
  arg3 = static_cast< Mezzanine::Real >(val3);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2,arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_2(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 1, argv[0] ));
  } 
  arg1 = static_cast< Mezzanine::Real >(val1);
  ecode2 = SWIG_AsVal_float(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 2, argv[1] ));
  } 
  arg2 = static_cast< Mezzanine::Real >(val2);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_3(int argc, VALUE *argv, VALUE self) {
  Mezzanine::Real arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_float(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "Mezzanine::Real","Mezzanine::ColourValue", 1, argv[0] ));
  } 
  arg1 = static_cast< Mezzanine::Real >(val1);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_4(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_5(int argc, VALUE *argv, VALUE self) {
  Ogre::ColourValue *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Ogre__ColourValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Ogre::ColourValue const &","Mezzanine::ColourValue", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Ogre::ColourValue const &","Mezzanine::ColourValue", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Ogre::ColourValue * >(argp1);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Ogre::ColourValue const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_6(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","Mezzanine::ColourValue", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","Mezzanine::ColourValue", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Mezzanine::ColourValue const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ColourValue_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ColourValue_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__ColourValue);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ColourValue__SWIG_7(int argc, VALUE *argv, VALUE self) {
  XML::Node *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "XML::Node const &","Mezzanine::ColourValue", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","Mezzanine::ColourValue", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< XML::Node * >(argp1);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((XML::Node const &)*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ColourValue(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs;
  if (argc > 4) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ColourValue__SWIG_4(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Ogre__ColourValue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ColourValue__SWIG_5(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ColourValue__SWIG_6(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_XML__Node, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ColourValue__SWIG_7(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_3(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ColourValue__SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ColourValue__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ColourValue__SWIG_0(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ColourValue.new", 
    "    ColourValue.new(Mezzanine::Real Red, Mezzanine::Real Green, Mezzanine::Real Blue, Mezzanine::Real Alpha)\n"
    "    ColourValue.new(Mezzanine::Real Red, Mezzanine::Real Green, Mezzanine::Real Blue)\n"
    "    ColourValue.new(Mezzanine::Real Red, Mezzanine::Real Green)\n"
    "    ColourValue.new(Mezzanine::Real Red)\n"
    "    ColourValue.new()\n"
    "    ColourValue.new(Ogre::ColourValue const &OgreValues)\n"
    "    ColourValue.new(Mezzanine::ColourValue const &OtherColour)\n"
    "    ColourValue.new(XML::Node const &OneNode)\n");
  
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_ColourValue(Mezzanine::ColourValue *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ColourValue_GetOgreColourValue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const *","GetOgreColourValue", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  result = ((Mezzanine::ColourValue const *)arg1)->GetOgreColourValue();
  vresult = SWIG_NewPointerObj((new Ogre::ColourValue(static_cast< const Ogre::ColourValue& >(result))), SWIGTYPE_p_Ogre__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Mezzanine::ColourValue.==

  call-seq:
    ==(Colour) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ColourValue___eq__(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  result = (bool)((Mezzanine::ColourValue const *)arg1)->operator ==((Mezzanine::ColourValue const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Transparent(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Transparent();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_AliceBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::AliceBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_AntiqueWhite(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::AntiqueWhite();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Aqua(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Aqua();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Aquamarine(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Aquamarine();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Azure(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Azure();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Beige(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Beige();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Bisque(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Bisque();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Black(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Black();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Blanchedalmond(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Blanchedalmond();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Blue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Blue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_BlueViolet(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::BlueViolet();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Brown(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Brown();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_BurlyWood(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::BurlyWood();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_CadetBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::CadetBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Chartreuse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Chartreuse();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Chocolate(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Chocolate();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Coral(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Coral();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_CornFlowerBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::CornFlowerBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_CornSilk(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::CornSilk();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Crimson(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Crimson();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Cyan(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Cyan();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkCyan(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkCyan();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkGoldenRod(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkGoldenRod();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkGray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkGray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkKhaki(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkKhaki();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkMagenta(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkMagenta();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkOliveGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkOliveGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkOrange(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkOrange();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkOrchid(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkOrchid();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkRed(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkRed();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkSalmon(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkSalmon();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkSeaGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkSeaGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkSlateBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkSlateBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkSlateGray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkSlateGray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkTurquoise(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkTurquoise();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DarkViolet(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DarkViolet();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DeepPink(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DeepPink();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DeepSkyBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DeepSkyBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DimGray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DimGray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_DodgerBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::DodgerBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_FireBrick(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::FireBrick();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_FloralWhite(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::FloralWhite();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_ForestGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::ForestGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Fuchsia(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Fuchsia();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Gainsboro(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Gainsboro();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_GhostWhite(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::GhostWhite();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Gold(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Gold();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_GoldenRod(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::GoldenRod();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Gray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Gray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Green(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Green();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_GreenYellow(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::GreenYellow();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_HoneyDew(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::HoneyDew();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_HotPink(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::HotPink();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_IndianRed(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::IndianRed();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Indigo(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Indigo();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Ivory(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Ivory();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Khaki(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Khaki();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Lavender(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Lavender();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LavenderBlush(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LavenderBlush();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LawnGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LawnGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LemonChiffon(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LemonChiffon();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightCoral(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightCoral();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightCyan(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightCyan();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightGoldenRodYellow(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightGoldenRodYellow();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightGray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightGray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightPink(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightPink();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightSalmon(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightSalmon();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightSeaGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightSeaGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightSkyBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightSkyBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightSlateGray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightSlateGray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightSteelBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightSteelBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LightYellow(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LightYellow();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Lime(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Lime();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_LimeGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::LimeGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Linen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Linen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Magenta(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Magenta();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Maroon(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Maroon();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumAquamarine(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumAquamarine();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumOrchid(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumOrchid();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumPurple(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumPurple();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumSeaGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumSeaGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumSlateBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumSlateBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumSpringGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumSpringGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumTurquoise(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumTurquoise();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MediumVioletRed(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MediumVioletRed();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MidnightBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MidnightBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MintCream(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MintCream();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_MistyRose(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::MistyRose();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Moccasin(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Moccasin();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_NavajoWhite(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::NavajoWhite();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Navy(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Navy();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_OldLace(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::OldLace();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Olive(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Olive();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_OliveDrab(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::OliveDrab();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Orange(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Orange();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_OrangeRed(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::OrangeRed();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Orchid(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Orchid();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PaleGoldenRod(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PaleGoldenRod();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PaleGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PaleGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PaleTurquoise(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PaleTurquoise();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PaleVioletRed(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PaleVioletRed();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PapayaWhip(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PapayaWhip();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PeachPuff(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PeachPuff();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Peru(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Peru();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Pink(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Pink();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Plum(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Plum();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_PowderBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::PowderBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Purple(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Purple();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Red(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Red();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_RosyBrown(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::RosyBrown();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_RoyalBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::RoyalBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SaddleBrown(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SaddleBrown();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Salmon(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Salmon();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SandyBrown(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SandyBrown();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SeaGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SeaGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SeaShell(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SeaShell();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Sienna(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Sienna();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Silver(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Silver();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SkyBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SkyBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SlateBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SlateBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SlateGray(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SlateGray();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Snow(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Snow();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SpringGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SpringGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SteelBlue(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SteelBlue();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Tan(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Tan();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Teal(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Teal();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Thistle(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Thistle();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Tomato(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Tomato();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Turquoise(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Turquoise();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Violet(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Violet();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Wheat(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Wheat();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_White(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::White();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_WhiteSmoke(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::WhiteSmoke();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_Yellow(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::Yellow();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_YellowGreen(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::YellowGreen();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::ColourValue const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__ColourValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::ColourValue *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::ColourValue * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColourValue_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::ColourValue::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassWorldObjectGraphicsSettings;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_WorldObjectGraphicsSettings_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_WorldObjectGraphicsSettings(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::WorldObjectGraphicsSettings *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","Mezzanine::WorldObjectGraphicsSettings", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_Ogre__Entity, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Ogre::Entity *","Mezzanine::WorldObjectGraphicsSettings", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< Ogre::Entity * >(argp2);
  result = (Mezzanine::WorldObjectGraphicsSettings *)new Mezzanine::WorldObjectGraphicsSettings(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_WorldObjectGraphicsSettings(Mezzanine::WorldObjectGraphicsSettings *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMesh__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::Graphics::Mesh *arg2 = (Mezzanine::Graphics::Mesh *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMesh", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Graphics::Mesh *","SetMesh", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Graphics::Mesh * >(argp2);
  (arg1)->SetMesh(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMesh__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMesh", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetMesh", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetMesh", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetMesh", 3, argv[1] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetMesh", 3, argv[1])); 
    }
    arg3 = ptr;
  }
  (arg1)->SetMesh((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_SetMesh(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_SetMesh__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WorldObjectGraphicsSettings_SetMesh__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldObjectGraphicsSettings.SetMesh", 
    "    void WorldObjectGraphicsSettings.SetMesh(Mezzanine::Graphics::Mesh *ObjectMesh)\n"
    "    void WorldObjectGraphicsSettings.SetMesh(Mezzanine::String const &MeshName, Mezzanine::String const &Group)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMesh(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Graphics::Mesh *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMesh", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = (Mezzanine::Graphics::Mesh *)((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMesh();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterial__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Whole *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  Mezzanine::Whole temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterial", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetMaterial", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetMaterial", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetMaterial", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Whole >(val3);
  arg3 = &temp3;
  (arg1)->SetMaterial((Mezzanine::String const &)*arg2,(Mezzanine::Whole const &)*arg3);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterial__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterial", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","SetMaterial", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","SetMaterial", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->SetMaterial((Mezzanine::String const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_SetMaterial(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_SetMaterial__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldObjectGraphicsSettings_SetMaterial__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldObjectGraphicsSettings.SetMaterial", 
    "    void WorldObjectGraphicsSettings.SetMaterial(Mezzanine::String const &MatName, Mezzanine::Whole const &Submesh)\n"
    "    void WorldObjectGraphicsSettings.SetMaterial(Mezzanine::String const &MatName)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialName__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetMaterialName", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialName((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialName__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_GetMaterialName(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WorldObjectGraphicsSettings_GetMaterialName__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_GetMaterialName__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WorldObjectGraphicsSettings.GetMaterialName", 
    "    Mezzanine::ConstString WorldObjectGraphicsSettings.GetMaterialName(Mezzanine::Whole const &Submesh)\n"
    "    Mezzanine::ConstString WorldObjectGraphicsSettings.GetMaterialName()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_HasMaterialSet__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","HasMaterialSet", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","HasMaterialSet", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->HasMaterialSet((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_HasMaterialSet__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","HasMaterialSet", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = (bool)(arg1)->HasMaterialSet();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_HasMaterialSet(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WorldObjectGraphicsSettings_HasMaterialSet__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_HasMaterialSet__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WorldObjectGraphicsSettings.HasMaterialSet", 
    "    bool WorldObjectGraphicsSettings.HasMaterialSet(Mezzanine::Whole const &Submesh)\n"
    "    bool WorldObjectGraphicsSettings.HasMaterialSet()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetNumSubmeshes(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetNumSubmeshes", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetNumSubmeshes();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_CloneMaterial(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","CloneMaterial", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::String const &","CloneMaterial", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::String const &","CloneMaterial", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  (arg1)->CloneMaterial((Mezzanine::String const &)*arg2);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterialAmbient__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::Whole *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Whole temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterialAmbient", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","SetMaterialAmbient", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","SetMaterialAmbient", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetMaterialAmbient", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Whole >(val3);
  arg3 = &temp3;
  (arg1)->SetMaterialAmbient((Mezzanine::ColourValue const &)*arg2,(Mezzanine::Whole const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterialAmbient__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterialAmbient", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","SetMaterialAmbient", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","SetMaterialAmbient", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  (arg1)->SetMaterialAmbient((Mezzanine::ColourValue const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_SetMaterialAmbient(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_SetMaterialAmbient__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldObjectGraphicsSettings_SetMaterialAmbient__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldObjectGraphicsSettings.SetMaterialAmbient", 
    "    void WorldObjectGraphicsSettings.SetMaterialAmbient(Mezzanine::ColourValue const &Ambient, Mezzanine::Whole const &Submesh)\n"
    "    void WorldObjectGraphicsSettings.SetMaterialAmbient(Mezzanine::ColourValue const &Ambient)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterialSpecular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::Whole *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Whole temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterialSpecular", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","SetMaterialSpecular", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","SetMaterialSpecular", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetMaterialSpecular", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Whole >(val3);
  arg3 = &temp3;
  (arg1)->SetMaterialSpecular((Mezzanine::ColourValue const &)*arg2,(Mezzanine::Whole const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterialSpecular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterialSpecular", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","SetMaterialSpecular", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","SetMaterialSpecular", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  (arg1)->SetMaterialSpecular((Mezzanine::ColourValue const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_SetMaterialSpecular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_SetMaterialSpecular__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldObjectGraphicsSettings_SetMaterialSpecular__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldObjectGraphicsSettings.SetMaterialSpecular", 
    "    void WorldObjectGraphicsSettings.SetMaterialSpecular(Mezzanine::ColourValue const &Specular, Mezzanine::Whole const &Submesh)\n"
    "    void WorldObjectGraphicsSettings.SetMaterialSpecular(Mezzanine::ColourValue const &Specular)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterialDiffuse__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::Whole *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  Mezzanine::Whole temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterialDiffuse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","SetMaterialDiffuse", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","SetMaterialDiffuse", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetMaterialDiffuse", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Whole >(val3);
  arg3 = &temp3;
  (arg1)->SetMaterialDiffuse((Mezzanine::ColourValue const &)*arg2,(Mezzanine::Whole const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SetMaterialDiffuse__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","SetMaterialDiffuse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__ColourValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::ColourValue const &","SetMaterialDiffuse", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::ColourValue const &","SetMaterialDiffuse", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::ColourValue * >(argp2);
  (arg1)->SetMaterialDiffuse((Mezzanine::ColourValue const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_SetMaterialDiffuse(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_SetMaterialDiffuse__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__ColourValue, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldObjectGraphicsSettings_SetMaterialDiffuse__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldObjectGraphicsSettings.SetMaterialDiffuse", 
    "    void WorldObjectGraphicsSettings.SetMaterialDiffuse(Mezzanine::ColourValue const &Diffuse, Mezzanine::Whole const &Submesh)\n"
    "    void WorldObjectGraphicsSettings.SetMaterialDiffuse(Mezzanine::ColourValue const &Diffuse)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialAmbient__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialAmbient", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetMaterialAmbient", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialAmbient((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialAmbient__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialAmbient", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialAmbient();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_GetMaterialAmbient(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WorldObjectGraphicsSettings_GetMaterialAmbient__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_GetMaterialAmbient__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WorldObjectGraphicsSettings.GetMaterialAmbient", 
    "    Mezzanine::ColourValue WorldObjectGraphicsSettings.GetMaterialAmbient(Mezzanine::Whole const &Submesh)\n"
    "    Mezzanine::ColourValue WorldObjectGraphicsSettings.GetMaterialAmbient()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialSpecular__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialSpecular", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetMaterialSpecular", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialSpecular((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialSpecular__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialSpecular", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialSpecular();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_GetMaterialSpecular(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WorldObjectGraphicsSettings_GetMaterialSpecular__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_GetMaterialSpecular__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WorldObjectGraphicsSettings.GetMaterialSpecular", 
    "    Mezzanine::ColourValue WorldObjectGraphicsSettings.GetMaterialSpecular(Mezzanine::Whole const &Submesh)\n"
    "    Mezzanine::ColourValue WorldObjectGraphicsSettings.GetMaterialSpecular()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialDiffuse__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialDiffuse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","GetMaterialDiffuse", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialDiffuse((Mezzanine::Whole const &)*arg2);
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_GetMaterialDiffuse__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ColourValue result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","GetMaterialDiffuse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  result = ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->GetMaterialDiffuse();
  vresult = SWIG_NewPointerObj((new Mezzanine::ColourValue(static_cast< const Mezzanine::ColourValue& >(result))), SWIGTYPE_p_Mezzanine__ColourValue, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectGraphicsSettings_GetMaterialDiffuse(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_WorldObjectGraphicsSettings_GetMaterialDiffuse__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldObjectGraphicsSettings_GetMaterialDiffuse__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "WorldObjectGraphicsSettings.GetMaterialDiffuse", 
    "    Mezzanine::ColourValue WorldObjectGraphicsSettings.GetMaterialDiffuse(Mezzanine::Whole const &Submesh)\n"
    "    Mezzanine::ColourValue WorldObjectGraphicsSettings.GetMaterialDiffuse()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::WorldObjectGraphicsSettings const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectGraphicsSettings *arg1 = (Mezzanine::WorldObjectGraphicsSettings *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectGraphicsSettings *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectGraphicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectGraphicsSettings_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::WorldObjectGraphicsSettings::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassWorldObject;

SWIGINTERN void
free_Mezzanine_WorldObject(Mezzanine::WorldObject *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_WorldObject_SetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","SetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = ((Mezzanine::WorldObject const *)arg1)->GetLocation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_SetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","SetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetScaling((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = ((Mezzanine::WorldObject const *)arg1)->GetScaling();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ConstString *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (Mezzanine::ConstString *) &((Mezzanine::WorldObject const *)arg1)->GetName();
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetType(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::WorldAndSceneObjectType result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetType", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (Mezzanine::WorldAndSceneObjectType)((Mezzanine::WorldObject const *)arg1)->GetType();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_IsStaticOrKinematic(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","IsStaticOrKinematic", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (bool)((Mezzanine::WorldObject const *)arg1)->IsStaticOrKinematic();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_IsInWorld(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","IsInWorld", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (bool)((Mezzanine::WorldObject const *)arg1)->IsInWorld();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetWorld(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::World *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetWorld", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (Mezzanine::World *)((Mezzanine::WorldObject const *)arg1)->GetWorld();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__World, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetGraphicsSettings(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::WorldObjectGraphicsSettings *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetGraphicsSettings", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (Mezzanine::WorldObjectGraphicsSettings *)((Mezzanine::WorldObject const *)arg1)->GetGraphicsSettings();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_GetPhysicsSettings(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  WorldObjectPhysicsSettings *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","GetPhysicsSettings", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (WorldObjectPhysicsSettings *)((Mezzanine::WorldObject const *)arg1)->GetPhysicsSettings();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_WorldObjectPhysicsSettings, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_AddToWorld(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","AddToWorld", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  (arg1)->AddToWorld();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_RemoveFromWorld(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","RemoveFromWorld", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  (arg1)->RemoveFromWorld();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject__Update(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","_Update", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  (arg1)->_Update();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject__NotifyCollisionState(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Physics::Collision *arg2 = (Physics::Collision *) 0 ;
  Physics::Collision::CollisionState *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","_NotifyCollisionState", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Physics__Collision, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Physics::Collision *","_NotifyCollisionState", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Physics::Collision * >(argp2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_Physics__Collision__CollisionState,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "Physics::Collision::CollisionState const &","_NotifyCollisionState", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Physics::Collision::CollisionState const &","_NotifyCollisionState", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< Physics::Collision::CollisionState * >(argp3);
  (arg1)->_NotifyCollisionState(arg2,(Physics::Collision::CollisionState const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject__NotifyProxyDestroyed(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::WorldProxy *arg2 = (Mezzanine::WorldProxy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","_NotifyProxyDestroyed", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__WorldProxy, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::WorldProxy *","_NotifyProxyDestroyed", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::WorldProxy * >(argp2);
  (arg1)->_NotifyProxyDestroyed(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject__GetBasePhysicsObject(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  btCollisionObject *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","_GetBasePhysicsObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (btCollisionObject *)((Mezzanine::WorldObject const *)arg1)->_GetBasePhysicsObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_btCollisionObject, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject__GetGraphicsObject(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::Entity *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","_GetGraphicsObject", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (Ogre::Entity *)((Mezzanine::WorldObject const *)arg1)->_GetGraphicsObject();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ogre__Entity, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject__GetGraphicsNode(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Ogre::SceneNode *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject const *","_GetGraphicsNode", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  result = (Ogre::SceneNode *)((Mezzanine::WorldObject const *)arg1)->_GetGraphicsNode();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Ogre__SceneNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObject_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::WorldObject::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassNonStaticWorldObject;

SWIGINTERN VALUE
_wrap_NonStaticWorldObject_SetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject *","SetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetLocation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_NonStaticWorldObject(Mezzanine::NonStaticWorldObject *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_NonStaticWorldObject_GetLocation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject const *","GetLocation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  result = ((Mezzanine::NonStaticWorldObject const *)arg1)->GetLocation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_SetOrientation__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  Mezzanine::Real temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  Mezzanine::Real temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  Mezzanine::Real temp5 ;
  float val5 ;
  int ecode5 = 0 ;
  
  if ((argc < 4) || (argc > 4)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 4)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject *","SetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetOrientation", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_float(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Real","SetOrientation", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Real >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_float(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), Ruby_Format_TypeError( "", "Mezzanine::Real","SetOrientation", 4, argv[2] ));
  } 
  temp4 = static_cast< Mezzanine::Real >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_float(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), Ruby_Format_TypeError( "", "Mezzanine::Real","SetOrientation", 5, argv[3] ));
  } 
  temp5 = static_cast< Mezzanine::Real >(val5);
  arg5 = &temp5;
  (arg1)->SetOrientation((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4,(Mezzanine::Real const &)*arg5);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_SetOrientation__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject *","SetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Quaternion,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Quaternion const &","SetOrientation", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Quaternion const &","SetOrientation", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Quaternion * >(argp2);
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NonStaticWorldObject_SetOrientation(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[6];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 6) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Mezzanine__Quaternion, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NonStaticWorldObject_SetOrientation__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_NonStaticWorldObject_SetOrientation__SWIG_0(nargs, args, self);
            }
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 6, "NonStaticWorldObject.SetOrientation", 
    "    void NonStaticWorldObject.SetOrientation(Mezzanine::Real const &x, Mezzanine::Real const &y, Mezzanine::Real const &z, Mezzanine::Real const &w)\n"
    "    void NonStaticWorldObject.SetOrientation(Mezzanine::Quaternion const &Rotation)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_GetOrientation(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Quaternion result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject const *","GetOrientation", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  result = ((Mezzanine::NonStaticWorldObject const *)arg1)->GetOrientation();
  vresult = SWIG_NewPointerObj((new Mezzanine::Quaternion(static_cast< const Mezzanine::Quaternion& >(result))), SWIGTYPE_p_Mezzanine__Quaternion, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_SetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject *","SetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Mezzanine__Vector3,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Mezzanine::Vector3 const &","SetScaling", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< Mezzanine::Vector3 * >(argp2);
  (arg1)->SetScaling((Mezzanine::Vector3 const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_GetScaling(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Vector3 result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject const *","GetScaling", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  result = ((Mezzanine::NonStaticWorldObject const *)arg1)->GetScaling();
  vresult = SWIG_NewPointerObj((new Mezzanine::Vector3(static_cast< const Mezzanine::Vector3& >(result))), SWIGTYPE_p_Mezzanine__Vector3, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_GetName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonStaticWorldObject *arg1 = (Mezzanine::NonStaticWorldObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::ConstString *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonStaticWorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonStaticWorldObject const *","GetName", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonStaticWorldObject * >(argp1);
  result = (Mezzanine::ConstString *) &((Mezzanine::NonStaticWorldObject const *)arg1)->GetName();
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonStaticWorldObject_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::NonStaticWorldObject::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassWorldObjectPhysicsSettings;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_WorldObjectPhysicsSettings_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_WorldObjectPhysicsSettings(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::WorldObjectPhysicsSettings *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","Mezzanine::WorldObjectPhysicsSettings", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_btCollisionObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btCollisionObject *","Mezzanine::WorldObjectPhysicsSettings", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< btCollisionObject * >(argp2);
  result = (Mezzanine::WorldObjectPhysicsSettings *)new Mezzanine::WorldObjectPhysicsSettings(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_WorldObjectPhysicsSettings(Mezzanine::WorldObjectPhysicsSettings *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_SetCollisionShape(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings *","SetCollisionShape", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Mezzanine::Physics::CollisionShape *","SetCollisionShape", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< Mezzanine::Physics::CollisionShape * >(argp2);
  (arg1)->SetCollisionShape(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_GetCollisionShape(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","GetCollisionShape", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (Mezzanine::Physics::CollisionShape *)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->GetCollisionShape();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_SetCollisionGroupAndMask(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  Mezzanine::Whole temp3 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings *","SetCollisionGroupAndMask", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetCollisionGroupAndMask", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Whole >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_unsigned_SS_long(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "Mezzanine::Whole","SetCollisionGroupAndMask", 3, argv[1] ));
  } 
  temp3 = static_cast< Mezzanine::Whole >(val3);
  arg3 = &temp3;
  (arg1)->SetCollisionGroupAndMask((Mezzanine::Whole const &)*arg2,(Mezzanine::Whole const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_GetCollisionGroup(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","GetCollisionGroup", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->GetCollisionGroup();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_GetCollisionMask(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Whole result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","GetCollisionMask", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (Mezzanine::Whole)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->GetCollisionMask();
  vresult = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_IsKinematic(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","IsKinematic", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (bool)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->IsKinematic();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_IsStatic(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","IsStatic", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (bool)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->IsStatic();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_IsStaticOrKinematic(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","IsStaticOrKinematic", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (bool)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->IsStaticOrKinematic();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_GetCollisionResponse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","GetCollisionResponse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (bool)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->GetCollisionResponse();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_IsActive(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","IsActive", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (bool)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->IsActive();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_SetActivationState__SWIG_0(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  Mezzanine::Physics::ActivationState *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Mezzanine::Physics::ActivationState temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings *","SetActivationState", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Physics::ActivationState const &","SetActivationState", 2, argv[0] ));
  } else {
    temp2 = static_cast< Mezzanine::Physics::ActivationState >(val2);
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "bool","SetActivationState", 3, argv[1] ));
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->SetActivationState((Mezzanine::Physics::ActivationState const &)*arg2,arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_SetActivationState__SWIG_1(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  Mezzanine::Physics::ActivationState *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  Mezzanine::Physics::ActivationState temp2 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings *","SetActivationState", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_int (argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Physics::ActivationState const &","SetActivationState", 2, argv[0] ));
  } else {
    temp2 = static_cast< Mezzanine::Physics::ActivationState >(val2);
    arg2 = &temp2;
  }
  (arg1)->SetActivationState((Mezzanine::Physics::ActivationState const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_WorldObjectPhysicsSettings_SetActivationState(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WorldObjectPhysicsSettings_SetActivationState__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WorldObjectPhysicsSettings_SetActivationState__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "WorldObjectPhysicsSettings.SetActivationState", 
    "    void WorldObjectPhysicsSettings.SetActivationState(Mezzanine::Physics::ActivationState const &State, bool Force)\n"
    "    void WorldObjectPhysicsSettings.SetActivationState(Mezzanine::Physics::ActivationState const &State)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_GetActivationState(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Physics::ActivationState result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","GetActivationState", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  result = (Mezzanine::Physics::ActivationState)((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->GetActivationState();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::WorldObjectPhysicsSettings const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObjectPhysicsSettings *arg1 = (Mezzanine::WorldObjectPhysicsSettings *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObjectPhysicsSettings *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObjectPhysicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_WorldObjectPhysicsSettings_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::WorldObjectPhysicsSettings::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassNonTriggerPhysicsSettings;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NonTriggerPhysicsSettings_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NonTriggerPhysicsSettings(int argc, VALUE *argv, VALUE self) {
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  btCollisionObject *arg2 = (btCollisionObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  Mezzanine::NonTriggerPhysicsSettings *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_Mezzanine__WorldObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::WorldObject *","Mezzanine::NonTriggerPhysicsSettings", 1, argv[0] )); 
  }
  arg1 = reinterpret_cast< Mezzanine::WorldObject * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2,SWIGTYPE_p_btCollisionObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "btCollisionObject *","Mezzanine::NonTriggerPhysicsSettings", 2, argv[1] )); 
  }
  arg2 = reinterpret_cast< btCollisionObject * >(argp2);
  result = (Mezzanine::NonTriggerPhysicsSettings *)new Mezzanine::NonTriggerPhysicsSettings(arg1,arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_Mezzanine_NonTriggerPhysicsSettings(Mezzanine::NonTriggerPhysicsSettings *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_SetCollisionResponse(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings *","SetCollisionResponse", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SetCollisionResponse", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetCollisionResponse(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_SetFriction(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings *","SetFriction", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetFriction", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  (arg1)->SetFriction((Mezzanine::Real const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_GetFriction(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings const *","GetFriction", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::NonTriggerPhysicsSettings const *)arg1)->GetFriction();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_SetRestitution(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings *","SetRestitution", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  ecode2 = SWIG_AsVal_float(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "Mezzanine::Real","SetRestitution", 2, argv[0] ));
  } 
  temp2 = static_cast< Mezzanine::Real >(val2);
  arg2 = &temp2;
  (arg1)->SetRestitution((Mezzanine::Real const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_GetRestitution(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Mezzanine::Real result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings const *","GetRestitution", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  result = (Mezzanine::Real)((Mezzanine::NonTriggerPhysicsSettings const *)arg1)->GetRestitution();
  vresult = SWIG_From_float(static_cast< float >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_ProtoSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings const *","ProtoSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node &","ProtoSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node &","ProtoSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  ((Mezzanine::NonTriggerPhysicsSettings const *)arg1)->ProtoSerialize(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_ProtoDeSerialize(int argc, VALUE *argv, VALUE self) {
  Mezzanine::NonTriggerPhysicsSettings *arg1 = (Mezzanine::NonTriggerPhysicsSettings *) 0 ;
  XML::Node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "Mezzanine::NonTriggerPhysicsSettings *","ProtoDeSerialize", 1, self )); 
  }
  arg1 = reinterpret_cast< Mezzanine::NonTriggerPhysicsSettings * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_XML__Node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "XML::Node const &","ProtoDeSerialize", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "XML::Node const &","ProtoDeSerialize", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< XML::Node * >(argp2);
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NonTriggerPhysicsSettings_SerializableName(int argc, VALUE *argv, VALUE self) {
  Mezzanine::String result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = Mezzanine::NonTriggerPhysicsSettings::SerializableName();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_Mezzanine__WorldNodeTo_p_Mezzanine__AttachableChild(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableChild *)  ((Mezzanine::WorldNode *) x));
}
static void *_p_Mezzanine__NonTriggerPhysicsSettingsTo_p_Mezzanine__WorldObjectPhysicsSettings(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldObjectPhysicsSettings *)  ((Mezzanine::NonTriggerPhysicsSettings *) x));
}
static void *_p_Mezzanine__AlarmTimerTo_p_Mezzanine__Timer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Timer *) (Mezzanine::GoalTimer *) ((Mezzanine::AlarmTimer *) x));
}
static void *_p_Mezzanine__StopWatchTimerTo_p_Mezzanine__Timer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Timer *) (Mezzanine::GoalTimer *) ((Mezzanine::StopWatchTimer *) x));
}
static void *_p_Mezzanine__GoalTimerTo_p_Mezzanine__Timer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Timer *)  ((Mezzanine::GoalTimer *) x));
}
static void *_p_Mezzanine__WorldNodeTo_p_Mezzanine__AttachableParent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableParent *)  ((Mezzanine::WorldNode *) x));
}
static void *_p_Mezzanine__NonStaticWorldObjectTo_p_Mezzanine__AttachableParent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableParent *)  ((Mezzanine::NonStaticWorldObject *) x));
}
static void *_p_Mezzanine__NonStaticWorldObjectTo_p_Mezzanine__WorldObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldObject *)  ((Mezzanine::NonStaticWorldObject *) x));
}
static void *_p_Mezzanine__WorldNodeTo_p_Mezzanine__AttachableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableBase *) (Mezzanine::AttachableParent *) ((Mezzanine::WorldNode *) x));
}
static void *_p_Mezzanine__NonStaticWorldObjectTo_p_Mezzanine__AttachableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableBase *) (Mezzanine::AttachableParent *) ((Mezzanine::NonStaticWorldObject *) x));
}
static void *_p_Mezzanine__AttachableParentTo_p_Mezzanine__AttachableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableBase *)  ((Mezzanine::AttachableParent *) x));
}
static void *_p_Mezzanine__AttachableChildTo_p_Mezzanine__AttachableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableBase *)  ((Mezzanine::AttachableChild *) x));
}
static void *_p_Mezzanine__AlarmTimerTo_p_Mezzanine__GoalTimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::GoalTimer *)  ((Mezzanine::AlarmTimer *) x));
}
static void *_p_Mezzanine__StopWatchTimerTo_p_Mezzanine__GoalTimer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::GoalTimer *)  ((Mezzanine::StopWatchTimer *) x));
}
static swig_type_info _swigt__p_AttachableContainer = {"_p_AttachableContainer", "AttachableContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AttachableIterator = {"_p_AttachableIterator", "AttachableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstAttachableIterator = {"_p_ConstAttachableIterator", "ConstAttachableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeometryRayTestResult = {"_p_GeometryRayTestResult", "GeometryRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__ActorBase = {"_p_Mezzanine__ActorBase", "Mezzanine::ActorBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__AlarmTimer = {"_p_Mezzanine__AlarmTimer", "Mezzanine::AlarmTimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableBase = {"_p_Mezzanine__AttachableBase", "Mezzanine::AttachableBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableChild = {"_p_Mezzanine__AttachableChild", "Mezzanine::AttachableChild *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableParent = {"_p_Mezzanine__AttachableParent", "Mezzanine::AttachableParent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableParent__AttachableContainer__iterator = {"_p_Mezzanine__AttachableParent__AttachableContainer__iterator", "Mezzanine::AttachableParent::AttachableIterator *|Mezzanine::AttachableParent::AttachableContainer::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__AxisAlignedBox = {"_p_Mezzanine__AxisAlignedBox", "Mezzanine::AxisAlignedBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__ColourValue = {"_p_Mezzanine__ColourValue", "Mezzanine::ColourValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__GoalTimer = {"_p_Mezzanine__GoalTimer", "Mezzanine::GoalTimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__Mesh = {"_p_Mezzanine__Graphics__Mesh", "Mezzanine::Graphics::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__SceneManager = {"_p_Mezzanine__Graphics__SceneManager", "Mezzanine::Graphics::SceneManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Matrix3x3 = {"_p_Mezzanine__Matrix3x3", "Mezzanine::Matrix3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__NonStaticWorldObject = {"_p_Mezzanine__NonStaticWorldObject", "Mezzanine::NonStaticWorldObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__NonTriggerPhysicsSettings = {"_p_Mezzanine__NonTriggerPhysicsSettings", "Mezzanine::NonTriggerPhysicsSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollisionShape = {"_p_Mezzanine__Physics__CollisionShape", "Mezzanine::Physics::CollisionShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Plane = {"_p_Mezzanine__Plane", "Mezzanine::Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Quaternion = {"_p_Mezzanine__Quaternion", "Mezzanine::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Ray = {"_p_Mezzanine__Ray", "Mezzanine::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RayQueryTool = {"_p_Mezzanine__RayQueryTool", "Mezzanine::RayQueryTool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Sphere = {"_p_Mezzanine__Sphere", "Mezzanine::Sphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__StopWatchTimer = {"_p_Mezzanine__StopWatchTimer", "Mezzanine::StopWatchTimer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Timer = {"_p_Mezzanine__Timer", "Mezzanine::Timer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Transform = {"_p_Mezzanine__Transform", "Mezzanine::Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2 = {"_p_Mezzanine__Vector2", "Mezzanine::Vector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3 = {"_p_Mezzanine__Vector3", "Mezzanine::Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__World = {"_p_Mezzanine__World", "Mezzanine::World *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldNode = {"_p_Mezzanine__WorldNode", "Mezzanine::WorldNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldObject = {"_p_Mezzanine__WorldObject", "Mezzanine::WorldObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldObjectGraphicsSettings = {"_p_Mezzanine__WorldObjectGraphicsSettings", "Mezzanine::WorldObjectGraphicsSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldObjectPhysicsSettings = {"_p_Mezzanine__WorldObjectPhysicsSettings", "Mezzanine::WorldObjectPhysicsSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldProxy = {"_p_Mezzanine__WorldProxy", "Mezzanine::WorldProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__ColourValue = {"_p_Ogre__ColourValue", "Ogre::ColourValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Entity = {"_p_Ogre__Entity", "Ogre::Entity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Plane = {"_p_Ogre__Plane", "Ogre::Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Quaternion = {"_p_Ogre__Quaternion", "Ogre::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Ray = {"_p_Ogre__Ray", "Ogre::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__SceneNode = {"_p_Ogre__SceneNode", "Ogre::SceneNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector2 = {"_p_Ogre__Vector2", "Ogre::Vector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Physics__Collision = {"_p_Physics__Collision", "Physics::Collision *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Physics__Collision__CollisionState = {"_p_Physics__Collision__CollisionState", "Physics::Collision::CollisionState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlaneRayTestResult = {"_p_PlaneRayTestResult", "PlaneRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RayTestResult = {"_p_RayTestResult", "RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldObjectPhysicsSettings = {"_p_WorldObjectPhysicsSettings", "WorldObjectPhysicsSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XML__Node = {"_p_XML__Node", "XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "Mezzanine::Bool *|bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionObject = {"_p_btCollisionObject", "btCollisionObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btQuaternion = {"_p_btQuaternion", "btQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTransform = {"_p_btTransform", "btTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Ray_t = {"_p_std__pairT_bool_Mezzanine__Ray_t", "std::pair< bool,Mezzanine::Ray > *|Mezzanine::Ray::GeometryRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Vector3_t = {"_p_std__pairT_bool_Mezzanine__Vector3_t", "Mezzanine::Plane::RayTestResult *|Mezzanine::Ray::PlaneRayTestResult *|std::pair< bool,Mezzanine::Vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AttachableContainer,
  &_swigt__p_AttachableIterator,
  &_swigt__p_ConstAttachableIterator,
  &_swigt__p_GeometryRayTestResult,
  &_swigt__p_Mezzanine__ActorBase,
  &_swigt__p_Mezzanine__AlarmTimer,
  &_swigt__p_Mezzanine__AttachableBase,
  &_swigt__p_Mezzanine__AttachableChild,
  &_swigt__p_Mezzanine__AttachableParent,
  &_swigt__p_Mezzanine__AttachableParent__AttachableContainer__iterator,
  &_swigt__p_Mezzanine__AxisAlignedBox,
  &_swigt__p_Mezzanine__ColourValue,
  &_swigt__p_Mezzanine__GoalTimer,
  &_swigt__p_Mezzanine__Graphics__Mesh,
  &_swigt__p_Mezzanine__Graphics__SceneManager,
  &_swigt__p_Mezzanine__Matrix3x3,
  &_swigt__p_Mezzanine__NonStaticWorldObject,
  &_swigt__p_Mezzanine__NonTriggerPhysicsSettings,
  &_swigt__p_Mezzanine__Physics__CollisionShape,
  &_swigt__p_Mezzanine__Plane,
  &_swigt__p_Mezzanine__Quaternion,
  &_swigt__p_Mezzanine__Ray,
  &_swigt__p_Mezzanine__RayQueryTool,
  &_swigt__p_Mezzanine__Sphere,
  &_swigt__p_Mezzanine__StopWatchTimer,
  &_swigt__p_Mezzanine__Timer,
  &_swigt__p_Mezzanine__Transform,
  &_swigt__p_Mezzanine__Vector2,
  &_swigt__p_Mezzanine__Vector3,
  &_swigt__p_Mezzanine__World,
  &_swigt__p_Mezzanine__WorldNode,
  &_swigt__p_Mezzanine__WorldObject,
  &_swigt__p_Mezzanine__WorldObjectGraphicsSettings,
  &_swigt__p_Mezzanine__WorldObjectPhysicsSettings,
  &_swigt__p_Mezzanine__WorldProxy,
  &_swigt__p_Ogre__ColourValue,
  &_swigt__p_Ogre__Entity,
  &_swigt__p_Ogre__Plane,
  &_swigt__p_Ogre__Quaternion,
  &_swigt__p_Ogre__Ray,
  &_swigt__p_Ogre__SceneNode,
  &_swigt__p_Ogre__Vector2,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_Physics__Collision,
  &_swigt__p_Physics__Collision__CollisionState,
  &_swigt__p_PlaneRayTestResult,
  &_swigt__p_RayTestResult,
  &_swigt__p_SDL_Event,
  &_swigt__p_WorldObjectPhysicsSettings,
  &_swigt__p_XML__Node,
  &_swigt__p_bool,
  &_swigt__p_btCollisionObject,
  &_swigt__p_btQuaternion,
  &_swigt__p_btTransform,
  &_swigt__p_btVector3,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Ray_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Vector3_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__wstring,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AttachableContainer[] = {  {&_swigt__p_AttachableContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttachableIterator[] = {  {&_swigt__p_AttachableIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstAttachableIterator[] = {  {&_swigt__p_ConstAttachableIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeometryRayTestResult[] = {  {&_swigt__p_GeometryRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ActorBase[] = {  {&_swigt__p_Mezzanine__ActorBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AlarmTimer[] = {  {&_swigt__p_Mezzanine__AlarmTimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableBase[] = {  {&_swigt__p_Mezzanine__WorldNode, _p_Mezzanine__WorldNodeTo_p_Mezzanine__AttachableBase, 0, 0},  {&_swigt__p_Mezzanine__NonStaticWorldObject, _p_Mezzanine__NonStaticWorldObjectTo_p_Mezzanine__AttachableBase, 0, 0},  {&_swigt__p_Mezzanine__AttachableBase, 0, 0, 0},  {&_swigt__p_Mezzanine__AttachableParent, _p_Mezzanine__AttachableParentTo_p_Mezzanine__AttachableBase, 0, 0},  {&_swigt__p_Mezzanine__AttachableChild, _p_Mezzanine__AttachableChildTo_p_Mezzanine__AttachableBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableChild[] = {  {&_swigt__p_Mezzanine__WorldNode, _p_Mezzanine__WorldNodeTo_p_Mezzanine__AttachableChild, 0, 0},  {&_swigt__p_Mezzanine__AttachableChild, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableParent[] = {  {&_swigt__p_Mezzanine__WorldNode, _p_Mezzanine__WorldNodeTo_p_Mezzanine__AttachableParent, 0, 0},  {&_swigt__p_Mezzanine__NonStaticWorldObject, _p_Mezzanine__NonStaticWorldObjectTo_p_Mezzanine__AttachableParent, 0, 0},  {&_swigt__p_Mezzanine__AttachableParent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableParent__AttachableContainer__iterator[] = {  {&_swigt__p_Mezzanine__AttachableParent__AttachableContainer__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AxisAlignedBox[] = {  {&_swigt__p_Mezzanine__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ColourValue[] = {  {&_swigt__p_Mezzanine__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__GoalTimer[] = {  {&_swigt__p_Mezzanine__AlarmTimer, _p_Mezzanine__AlarmTimerTo_p_Mezzanine__GoalTimer, 0, 0},  {&_swigt__p_Mezzanine__StopWatchTimer, _p_Mezzanine__StopWatchTimerTo_p_Mezzanine__GoalTimer, 0, 0},  {&_swigt__p_Mezzanine__GoalTimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__Mesh[] = {  {&_swigt__p_Mezzanine__Graphics__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__SceneManager[] = {  {&_swigt__p_Mezzanine__Graphics__SceneManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Matrix3x3[] = {  {&_swigt__p_Mezzanine__Matrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NonStaticWorldObject[] = {  {&_swigt__p_Mezzanine__NonStaticWorldObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NonTriggerPhysicsSettings[] = {  {&_swigt__p_Mezzanine__NonTriggerPhysicsSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__CollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Plane[] = {  {&_swigt__p_Mezzanine__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Quaternion[] = {  {&_swigt__p_Mezzanine__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Ray[] = {  {&_swigt__p_Mezzanine__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RayQueryTool[] = {  {&_swigt__p_Mezzanine__RayQueryTool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Sphere[] = {  {&_swigt__p_Mezzanine__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__StopWatchTimer[] = {  {&_swigt__p_Mezzanine__StopWatchTimer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Timer[] = {  {&_swigt__p_Mezzanine__AlarmTimer, _p_Mezzanine__AlarmTimerTo_p_Mezzanine__Timer, 0, 0},  {&_swigt__p_Mezzanine__StopWatchTimer, _p_Mezzanine__StopWatchTimerTo_p_Mezzanine__Timer, 0, 0},  {&_swigt__p_Mezzanine__GoalTimer, _p_Mezzanine__GoalTimerTo_p_Mezzanine__Timer, 0, 0},  {&_swigt__p_Mezzanine__Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Transform[] = {  {&_swigt__p_Mezzanine__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2[] = {  {&_swigt__p_Mezzanine__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3[] = {  {&_swigt__p_Mezzanine__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__World[] = {  {&_swigt__p_Mezzanine__World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldNode[] = {  {&_swigt__p_Mezzanine__WorldNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldObject[] = {  {&_swigt__p_Mezzanine__WorldObject, 0, 0, 0},  {&_swigt__p_Mezzanine__NonStaticWorldObject, _p_Mezzanine__NonStaticWorldObjectTo_p_Mezzanine__WorldObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldObjectGraphicsSettings[] = {  {&_swigt__p_Mezzanine__WorldObjectGraphicsSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldObjectPhysicsSettings[] = {  {&_swigt__p_Mezzanine__WorldObjectPhysicsSettings, 0, 0, 0},  {&_swigt__p_Mezzanine__NonTriggerPhysicsSettings, _p_Mezzanine__NonTriggerPhysicsSettingsTo_p_Mezzanine__WorldObjectPhysicsSettings, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldProxy[] = {  {&_swigt__p_Mezzanine__WorldProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ColourValue[] = {  {&_swigt__p_Ogre__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Entity[] = {  {&_swigt__p_Ogre__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Plane[] = {  {&_swigt__p_Ogre__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Quaternion[] = {  {&_swigt__p_Ogre__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Ray[] = {  {&_swigt__p_Ogre__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__SceneNode[] = {  {&_swigt__p_Ogre__SceneNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector2[] = {  {&_swigt__p_Ogre__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Physics__Collision[] = {  {&_swigt__p_Physics__Collision, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Physics__Collision__CollisionState[] = {  {&_swigt__p_Physics__Collision__CollisionState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlaneRayTestResult[] = {  {&_swigt__p_PlaneRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RayTestResult[] = {  {&_swigt__p_RayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldObjectPhysicsSettings[] = {  {&_swigt__p_WorldObjectPhysicsSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XML__Node[] = {  {&_swigt__p_XML__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObject[] = {  {&_swigt__p_btCollisionObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuaternion[] = {  {&_swigt__p_btQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransform[] = {  {&_swigt__p_btTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Ray_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Ray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Vector3_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AttachableContainer,
  _swigc__p_AttachableIterator,
  _swigc__p_ConstAttachableIterator,
  _swigc__p_GeometryRayTestResult,
  _swigc__p_Mezzanine__ActorBase,
  _swigc__p_Mezzanine__AlarmTimer,
  _swigc__p_Mezzanine__AttachableBase,
  _swigc__p_Mezzanine__AttachableChild,
  _swigc__p_Mezzanine__AttachableParent,
  _swigc__p_Mezzanine__AttachableParent__AttachableContainer__iterator,
  _swigc__p_Mezzanine__AxisAlignedBox,
  _swigc__p_Mezzanine__ColourValue,
  _swigc__p_Mezzanine__GoalTimer,
  _swigc__p_Mezzanine__Graphics__Mesh,
  _swigc__p_Mezzanine__Graphics__SceneManager,
  _swigc__p_Mezzanine__Matrix3x3,
  _swigc__p_Mezzanine__NonStaticWorldObject,
  _swigc__p_Mezzanine__NonTriggerPhysicsSettings,
  _swigc__p_Mezzanine__Physics__CollisionShape,
  _swigc__p_Mezzanine__Plane,
  _swigc__p_Mezzanine__Quaternion,
  _swigc__p_Mezzanine__Ray,
  _swigc__p_Mezzanine__RayQueryTool,
  _swigc__p_Mezzanine__Sphere,
  _swigc__p_Mezzanine__StopWatchTimer,
  _swigc__p_Mezzanine__Timer,
  _swigc__p_Mezzanine__Transform,
  _swigc__p_Mezzanine__Vector2,
  _swigc__p_Mezzanine__Vector3,
  _swigc__p_Mezzanine__World,
  _swigc__p_Mezzanine__WorldNode,
  _swigc__p_Mezzanine__WorldObject,
  _swigc__p_Mezzanine__WorldObjectGraphicsSettings,
  _swigc__p_Mezzanine__WorldObjectPhysicsSettings,
  _swigc__p_Mezzanine__WorldProxy,
  _swigc__p_Ogre__ColourValue,
  _swigc__p_Ogre__Entity,
  _swigc__p_Ogre__Plane,
  _swigc__p_Ogre__Quaternion,
  _swigc__p_Ogre__Ray,
  _swigc__p_Ogre__SceneNode,
  _swigc__p_Ogre__Vector2,
  _swigc__p_Ogre__Vector3,
  _swigc__p_Physics__Collision,
  _swigc__p_Physics__Collision__CollisionState,
  _swigc__p_PlaneRayTestResult,
  _swigc__p_RayTestResult,
  _swigc__p_SDL_Event,
  _swigc__p_WorldObjectPhysicsSettings,
  _swigc__p_XML__Node,
  _swigc__p_bool,
  _swigc__p_btCollisionObject,
  _swigc__p_btQuaternion,
  _swigc__p_btTransform,
  _swigc__p_btVector3,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__pairT_bool_Mezzanine__Ray_t,
  _swigc__p_std__pairT_bool_Mezzanine__Vector3_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__wstring,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  (void *)clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_Mezzanine(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mMezzanine = rb_define_module("Mezzanine");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mMezzanine, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::GC_VALUE::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mMezzanine, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mMezzanine, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  rb_define_const(mMezzanine, "MEZZ_FRAMESTOTRACK", SWIG_From_int(static_cast< int >(10)));
  rb_define_const(mMezzanine, "MEZZANINE_CORE", SWIG_From_int(static_cast< int >(1)));
  rb_define_const(mMezzanine, "AT_FileSystem", SWIG_From_int(static_cast< int >(Mezzanine::AT_FileSystem)));
  rb_define_const(mMezzanine, "AT_Zip", SWIG_From_int(static_cast< int >(Mezzanine::AT_Zip)));
  rb_define_const(mMezzanine, "AT_Invalid", SWIG_From_int(static_cast< int >(Mezzanine::AT_Invalid)));
  rb_define_const(mMezzanine, "Att_None", SWIG_From_int(static_cast< int >(Mezzanine::Att_None)));
  rb_define_const(mMezzanine, "Att_Linear", SWIG_From_int(static_cast< int >(Mezzanine::Att_Linear)));
  rb_define_const(mMezzanine, "Att_Quadratic", SWIG_From_int(static_cast< int >(Mezzanine::Att_Quadratic)));
  rb_define_const(mMezzanine, "OM_Degree_0", SWIG_From_int(static_cast< int >(Mezzanine::OM_Degree_0)));
  rb_define_const(mMezzanine, "OM_Degree_90", SWIG_From_int(static_cast< int >(Mezzanine::OM_Degree_90)));
  rb_define_const(mMezzanine, "OM_Degree_180", SWIG_From_int(static_cast< int >(Mezzanine::OM_Degree_180)));
  rb_define_const(mMezzanine, "OM_Degree_270", SWIG_From_int(static_cast< int >(Mezzanine::OM_Degree_270)));
  rb_define_const(mMezzanine, "OM_Portrait", SWIG_From_int(static_cast< int >(Mezzanine::OM_Portrait)));
  rb_define_const(mMezzanine, "OM_LandscapeRight", SWIG_From_int(static_cast< int >(Mezzanine::OM_LandscapeRight)));
  rb_define_const(mMezzanine, "OM_LandscapeLeft", SWIG_From_int(static_cast< int >(Mezzanine::OM_LandscapeLeft)));
  rb_define_const(mMezzanine, "PL_Unpaused", SWIG_From_int(static_cast< int >(Mezzanine::PL_Unpaused)));
  rb_define_const(mMezzanine, "PL_PausePhysics", SWIG_From_int(static_cast< int >(Mezzanine::PL_PausePhysics)));
  rb_define_const(mMezzanine, "PL_PauseParticles", SWIG_From_int(static_cast< int >(Mezzanine::PL_PauseParticles)));
  rb_define_const(mMezzanine, "PL_PauseAnimations", SWIG_From_int(static_cast< int >(Mezzanine::PL_PauseAnimations)));
  rb_define_const(mMezzanine, "PL_PauseAll", SWIG_From_int(static_cast< int >(Mezzanine::PL_PauseAll)));
  rb_define_const(mMezzanine, "PT_Audio_First", SWIG_From_int(static_cast< int >(Mezzanine::PT_Audio_First)));
  rb_define_const(mMezzanine, "PT_Audio_Listener", SWIG_From_int(static_cast< int >(Mezzanine::PT_Audio_Listener)));
  rb_define_const(mMezzanine, "PT_Audio_SoundProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Audio_SoundProxy)));
  rb_define_const(mMezzanine, "PT_Audio_Last", SWIG_From_int(static_cast< int >(Mezzanine::PT_Audio_Last)));
  rb_define_const(mMezzanine, "PT_Graphics_First", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_First)));
  rb_define_const(mMezzanine, "PT_Graphics_BillboardSetProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_BillboardSetProxy)));
  rb_define_const(mMezzanine, "PT_Graphics_CameraProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_CameraProxy)));
  rb_define_const(mMezzanine, "PT_Graphics_EntityProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_EntityProxy)));
  rb_define_const(mMezzanine, "PT_Graphics_LightProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_LightProxy)));
  rb_define_const(mMezzanine, "PT_Graphics_ParticleSystemProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_ParticleSystemProxy)));
  rb_define_const(mMezzanine, "PT_Graphics_Last", SWIG_From_int(static_cast< int >(Mezzanine::PT_Graphics_Last)));
  rb_define_const(mMezzanine, "PT_Physics_First", SWIG_From_int(static_cast< int >(Mezzanine::PT_Physics_First)));
  rb_define_const(mMezzanine, "PT_Physics_GhostProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Physics_GhostProxy)));
  rb_define_const(mMezzanine, "PT_Physics_RigidProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Physics_RigidProxy)));
  rb_define_const(mMezzanine, "PT_Physics_SoftProxy", SWIG_From_int(static_cast< int >(Mezzanine::PT_Physics_SoftProxy)));
  rb_define_const(mMezzanine, "PT_Physics_Last", SWIG_From_int(static_cast< int >(Mezzanine::PT_Physics_Last)));
  rb_define_const(mMezzanine, "Axis_Invalid", SWIG_From_int(static_cast< int >(Mezzanine::Axis_Invalid)));
  rb_define_const(mMezzanine, "Axis_X", SWIG_From_int(static_cast< int >(Mezzanine::Axis_X)));
  rb_define_const(mMezzanine, "Axis_Y", SWIG_From_int(static_cast< int >(Mezzanine::Axis_Y)));
  rb_define_const(mMezzanine, "Axis_Z", SWIG_From_int(static_cast< int >(Mezzanine::Axis_Z)));
  rb_define_const(mMezzanine, "TT_Simple", SWIG_From_int(static_cast< int >(Mezzanine::TT_Simple)));
  rb_define_const(mMezzanine, "TT_Spline", SWIG_From_int(static_cast< int >(Mezzanine::TT_Spline)));
  rb_define_const(mMezzanine, "TT_Bezier", SWIG_From_int(static_cast< int >(Mezzanine::TT_Bezier)));
  rb_define_const(mMezzanine, "TS_Local", SWIG_From_int(static_cast< int >(Mezzanine::TS_Local)));
  rb_define_const(mMezzanine, "TS_Parent", SWIG_From_int(static_cast< int >(Mezzanine::TS_Parent)));
  rb_define_const(mMezzanine, "TS_World", SWIG_From_int(static_cast< int >(Mezzanine::TS_World)));
  rb_define_const(mMezzanine, "WSO_ActorFirst", SWIG_From_int(static_cast< int >(Mezzanine::WSO_ActorFirst)));
  rb_define_const(mMezzanine, "WSO_ActorRigid", SWIG_From_int(static_cast< int >(Mezzanine::WSO_ActorRigid)));
  rb_define_const(mMezzanine, "WSO_ActorCharacter", SWIG_From_int(static_cast< int >(Mezzanine::WSO_ActorCharacter)));
  rb_define_const(mMezzanine, "WSO_ActorUnknown", SWIG_From_int(static_cast< int >(Mezzanine::WSO_ActorUnknown)));
  rb_define_const(mMezzanine, "WSO_ActorLast", SWIG_From_int(static_cast< int >(Mezzanine::WSO_ActorLast)));
  rb_define_const(mMezzanine, "WSO_TerrainFirst", SWIG_From_int(static_cast< int >(Mezzanine::WSO_TerrainFirst)));
  rb_define_const(mMezzanine, "WSO_MeshTerrain", SWIG_From_int(static_cast< int >(Mezzanine::WSO_MeshTerrain)));
  rb_define_const(mMezzanine, "WSO_HeightfieldTerrain", SWIG_From_int(static_cast< int >(Mezzanine::WSO_HeightfieldTerrain)));
  rb_define_const(mMezzanine, "WSO_VectorFieldTerrain", SWIG_From_int(static_cast< int >(Mezzanine::WSO_VectorFieldTerrain)));
  rb_define_const(mMezzanine, "WSO_VoxelTerrain", SWIG_From_int(static_cast< int >(Mezzanine::WSO_VoxelTerrain)));
  rb_define_const(mMezzanine, "WSO_MarchingCubeTerrain", SWIG_From_int(static_cast< int >(Mezzanine::WSO_MarchingCubeTerrain)));
  rb_define_const(mMezzanine, "WSO_UnknownTerrain", SWIG_From_int(static_cast< int >(Mezzanine::WSO_UnknownTerrain)));
  rb_define_const(mMezzanine, "WSO_TerrainLast", SWIG_From_int(static_cast< int >(Mezzanine::WSO_TerrainLast)));
  rb_define_const(mMezzanine, "WSO_AEFirst", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEFirst)));
  rb_define_const(mMezzanine, "WSO_AEGravityField", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEGravityField)));
  rb_define_const(mMezzanine, "WSO_AEGravityWell", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEGravityWell)));
  rb_define_const(mMezzanine, "WSO_AEFieldOfForce", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEFieldOfForce)));
  rb_define_const(mMezzanine, "WSO_AEPlaceHolder1", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEPlaceHolder1)));
  rb_define_const(mMezzanine, "WSO_AEPlaceHolder2", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEPlaceHolder2)));
  rb_define_const(mMezzanine, "WSO_AEUnknown", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AEUnknown)));
  rb_define_const(mMezzanine, "WSO_AELast", SWIG_From_int(static_cast< int >(Mezzanine::WSO_AELast)));
  rb_define_const(mMezzanine, "WSO_Camera", SWIG_From_int(static_cast< int >(Mezzanine::WSO_Camera)));
  rb_define_const(mMezzanine, "WSO_Entity", SWIG_From_int(static_cast< int >(Mezzanine::WSO_Entity)));
  rb_define_const(mMezzanine, "WSO_Light", SWIG_From_int(static_cast< int >(Mezzanine::WSO_Light)));
  rb_define_const(mMezzanine, "WSO_ParticleEffect", SWIG_From_int(static_cast< int >(Mezzanine::WSO_ParticleEffect)));
  rb_define_const(mMezzanine, "WSO_WorldNode", SWIG_From_int(static_cast< int >(Mezzanine::WSO_WorldNode)));
  rb_define_module_function(mMezzanine, "PrintHello", VALUEFUNC(_wrap_PrintHello), -1);
  
  SwigClassVector3.klass = rb_define_class_under(mMezzanine, "Vector3", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Vector3, (void *) &SwigClassVector3);
  rb_define_alloc_func(SwigClassVector3.klass, _wrap_Vector3_allocate);
  rb_define_method(SwigClassVector3.klass, "initialize", VALUEFUNC(_wrap_new_Vector3), -1);
  rb_define_method(SwigClassVector3.klass, "X=", VALUEFUNC(_wrap_Vector3_X_set), -1);
  rb_define_method(SwigClassVector3.klass, "X", VALUEFUNC(_wrap_Vector3_X_get), -1);
  rb_define_method(SwigClassVector3.klass, "Y=", VALUEFUNC(_wrap_Vector3_Y_set), -1);
  rb_define_method(SwigClassVector3.klass, "Y", VALUEFUNC(_wrap_Vector3_Y_get), -1);
  rb_define_method(SwigClassVector3.klass, "Z=", VALUEFUNC(_wrap_Vector3_Z_set), -1);
  rb_define_method(SwigClassVector3.klass, "Z", VALUEFUNC(_wrap_Vector3_Z_get), -1);
  rb_define_method(SwigClassVector3.klass, "GetAxisValue", VALUEFUNC(_wrap_Vector3_GetAxisValue), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "Unit_X", VALUEFUNC(_wrap_Vector3_Unit_X), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "Unit_Y", VALUEFUNC(_wrap_Vector3_Unit_Y), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "Unit_Z", VALUEFUNC(_wrap_Vector3_Unit_Z), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "Neg_Unit_X", VALUEFUNC(_wrap_Vector3_Neg_Unit_X), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "Neg_Unit_Y", VALUEFUNC(_wrap_Vector3_Neg_Unit_Y), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "Neg_Unit_Z", VALUEFUNC(_wrap_Vector3_Neg_Unit_Z), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "UnitOnAxis", VALUEFUNC(_wrap_Vector3_UnitOnAxis), -1);
  rb_define_method(SwigClassVector3.klass, "IsStandardUnitAxis", VALUEFUNC(_wrap_Vector3_IsStandardUnitAxis), -1);
  rb_define_method(SwigClassVector3.klass, "-@", VALUEFUNC(_wrap_Vector3___neg__), -1);
  rb_define_method(SwigClassVector3.klass, "==", VALUEFUNC(_wrap_Vector3___eq__), -1);
  rb_define_method(SwigClassVector3.klass, "+", VALUEFUNC(_wrap_Vector3___add__), -1);
  rb_define_method(SwigClassVector3.klass, "-", VALUEFUNC(_wrap_Vector3___sub__), -1);
  rb_define_method(SwigClassVector3.klass, "*", VALUEFUNC(_wrap_Vector3___mul__), -1);
  rb_define_method(SwigClassVector3.klass, "/", VALUEFUNC(_wrap_Vector3___div__), -1);
  rb_define_method(SwigClassVector3.klass, "CrossProduct", VALUEFUNC(_wrap_Vector3_CrossProduct), -1);
  rb_define_method(SwigClassVector3.klass, "DotProduct", VALUEFUNC(_wrap_Vector3_DotProduct), -1);
  rb_define_method(SwigClassVector3.klass, "Normalize", VALUEFUNC(_wrap_Vector3_Normalize), -1);
  rb_define_method(SwigClassVector3.klass, "GetNormal", VALUEFUNC(_wrap_Vector3_GetNormal), -1);
  rb_define_method(SwigClassVector3.klass, "GetDirection", VALUEFUNC(_wrap_Vector3_GetDirection), -1);
  rb_define_method(SwigClassVector3.klass, "Inverse", VALUEFUNC(_wrap_Vector3_Inverse), -1);
  rb_define_method(SwigClassVector3.klass, "Reflect", VALUEFUNC(_wrap_Vector3_Reflect), -1);
  rb_define_method(SwigClassVector3.klass, "Distance", VALUEFUNC(_wrap_Vector3_Distance), -1);
  rb_define_method(SwigClassVector3.klass, "SquaredDistance", VALUEFUNC(_wrap_Vector3_SquaredDistance), -1);
  rb_define_method(SwigClassVector3.klass, "Length", VALUEFUNC(_wrap_Vector3_Length), -1);
  rb_define_method(SwigClassVector3.klass, "SquaredLength", VALUEFUNC(_wrap_Vector3_SquaredLength), -1);
  rb_define_method(SwigClassVector3.klass, "IsZeroLength", VALUEFUNC(_wrap_Vector3_IsZeroLength), -1);
  rb_define_method(SwigClassVector3.klass, "GetRotationToAxis", VALUEFUNC(_wrap_Vector3_GetRotationToAxis), -1);
  rb_define_method(SwigClassVector3.klass, "Zero", VALUEFUNC(_wrap_Vector3_Zero), -1);
  rb_define_method(SwigClassVector3.klass, "SetValues", VALUEFUNC(_wrap_Vector3_SetValues), -1);
  rb_define_method(SwigClassVector3.klass, "Ceil", VALUEFUNC(_wrap_Vector3_Ceil), -1);
  rb_define_method(SwigClassVector3.klass, "Floor", VALUEFUNC(_wrap_Vector3_Floor), -1);
  rb_define_method(SwigClassVector3.klass, "GetBulletVector3", VALUEFUNC(_wrap_Vector3_GetBulletVector3), -1);
  rb_define_method(SwigClassVector3.klass, "ExtractBulletVector3", VALUEFUNC(_wrap_Vector3_ExtractBulletVector3), -1);
  rb_define_method(SwigClassVector3.klass, "GetOgreVector3", VALUEFUNC(_wrap_Vector3_GetOgreVector3), -1);
  rb_define_method(SwigClassVector3.klass, "ExtractOgreVector3", VALUEFUNC(_wrap_Vector3_ExtractOgreVector3), -1);
  rb_define_method(SwigClassVector3.klass, "ProtoSerialize", VALUEFUNC(_wrap_Vector3_ProtoSerialize), -1);
  rb_define_method(SwigClassVector3.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_Vector3_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassVector3.klass, "SerializableName", VALUEFUNC(_wrap_Vector3_SerializableName), -1);
  SwigClassVector3.mark = 0;
  SwigClassVector3.destroy = (void (*)(void *)) free_Mezzanine_Vector3;
  SwigClassVector3.trackObjects = 0;
  
  SwigClassPlane.klass = rb_define_class_under(mMezzanine, "Plane", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Plane, (void *) &SwigClassPlane);
  rb_define_alloc_func(SwigClassPlane.klass, _wrap_Plane_allocate);
  rb_define_method(SwigClassPlane.klass, "initialize", VALUEFUNC(_wrap_new_Plane), -1);
  rb_define_const(SwigClassPlane.klass, "S_None", SWIG_From_int(static_cast< int >(Mezzanine::Plane::S_None)));
  rb_define_const(SwigClassPlane.klass, "S_Positive", SWIG_From_int(static_cast< int >(Mezzanine::Plane::S_Positive)));
  rb_define_const(SwigClassPlane.klass, "S_Negative", SWIG_From_int(static_cast< int >(Mezzanine::Plane::S_Negative)));
  rb_define_const(SwigClassPlane.klass, "S_Both", SWIG_From_int(static_cast< int >(Mezzanine::Plane::S_Both)));
  rb_define_method(SwigClassPlane.klass, "Normal=", VALUEFUNC(_wrap_Plane_Normal_set), -1);
  rb_define_method(SwigClassPlane.klass, "Normal", VALUEFUNC(_wrap_Plane_Normal_get), -1);
  rb_define_method(SwigClassPlane.klass, "Distance=", VALUEFUNC(_wrap_Plane_Distance_set), -1);
  rb_define_method(SwigClassPlane.klass, "Distance", VALUEFUNC(_wrap_Plane_Distance_get), -1);
  rb_define_method(SwigClassPlane.klass, "Define", VALUEFUNC(_wrap_Plane_Define), -1);
  rb_define_method(SwigClassPlane.klass, "GetSide", VALUEFUNC(_wrap_Plane_GetSide), -1);
  rb_define_method(SwigClassPlane.klass, "GetDistance", VALUEFUNC(_wrap_Plane_GetDistance), -1);
  rb_define_method(SwigClassPlane.klass, "IsOverlapping", VALUEFUNC(_wrap_Plane_IsOverlapping), -1);
  rb_define_method(SwigClassPlane.klass, "Intersects", VALUEFUNC(_wrap_Plane_Intersects), -1);
  rb_define_method(SwigClassPlane.klass, "ExtractOgrePlane", VALUEFUNC(_wrap_Plane_ExtractOgrePlane), -1);
  rb_define_method(SwigClassPlane.klass, "GetOgrePlane", VALUEFUNC(_wrap_Plane_GetOgrePlane), -1);
  rb_define_method(SwigClassPlane.klass, "ProtoSerialize", VALUEFUNC(_wrap_Plane_ProtoSerialize), -1);
  rb_define_method(SwigClassPlane.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_Plane_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassPlane.klass, "GetSerializableName", VALUEFUNC(_wrap_Plane_GetSerializableName), -1);
  rb_define_method(SwigClassPlane.klass, "==", VALUEFUNC(_wrap_Plane___eq__), -1);
  SwigClassPlane.mark = 0;
  SwigClassPlane.destroy = (void (*)(void *)) free_Mezzanine_Plane;
  SwigClassPlane.trackObjects = 0;
  
  SwigClassQuaternion.klass = rb_define_class_under(mMezzanine, "Quaternion", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Quaternion, (void *) &SwigClassQuaternion);
  rb_define_alloc_func(SwigClassQuaternion.klass, _wrap_Quaternion_allocate);
  rb_define_method(SwigClassQuaternion.klass, "initialize", VALUEFUNC(_wrap_new_Quaternion), -1);
  rb_define_method(SwigClassQuaternion.klass, "X=", VALUEFUNC(_wrap_Quaternion_X_set), -1);
  rb_define_method(SwigClassQuaternion.klass, "X", VALUEFUNC(_wrap_Quaternion_X_get), -1);
  rb_define_method(SwigClassQuaternion.klass, "Y=", VALUEFUNC(_wrap_Quaternion_Y_set), -1);
  rb_define_method(SwigClassQuaternion.klass, "Y", VALUEFUNC(_wrap_Quaternion_Y_get), -1);
  rb_define_method(SwigClassQuaternion.klass, "Z=", VALUEFUNC(_wrap_Quaternion_Z_set), -1);
  rb_define_method(SwigClassQuaternion.klass, "Z", VALUEFUNC(_wrap_Quaternion_Z_get), -1);
  rb_define_method(SwigClassQuaternion.klass, "W=", VALUEFUNC(_wrap_Quaternion_W_set), -1);
  rb_define_method(SwigClassQuaternion.klass, "W", VALUEFUNC(_wrap_Quaternion_W_get), -1);
  rb_define_method(SwigClassQuaternion.klass, "SetIdentity", VALUEFUNC(_wrap_Quaternion_SetIdentity), -1);
  rb_define_method(SwigClassQuaternion.klass, "SetValues", VALUEFUNC(_wrap_Quaternion_SetValues), -1);
  rb_define_method(SwigClassQuaternion.klass, "SetFromAxisAngle", VALUEFUNC(_wrap_Quaternion_SetFromAxisAngle), -1);
  rb_define_method(SwigClassQuaternion.klass, "SetFromMatrix3x3", VALUEFUNC(_wrap_Quaternion_SetFromMatrix3x3), -1);
  rb_define_method(SwigClassQuaternion.klass, "SetFromAxes", VALUEFUNC(_wrap_Quaternion_SetFromAxes), -1);
  rb_define_method(SwigClassQuaternion.klass, "DotProduct", VALUEFUNC(_wrap_Quaternion_DotProduct), -1);
  rb_define_method(SwigClassQuaternion.klass, "Length", VALUEFUNC(_wrap_Quaternion_Length), -1);
  rb_define_method(SwigClassQuaternion.klass, "LengthSqrd", VALUEFUNC(_wrap_Quaternion_LengthSqrd), -1);
  rb_define_method(SwigClassQuaternion.klass, "Normalize", VALUEFUNC(_wrap_Quaternion_Normalize), -1);
  rb_define_method(SwigClassQuaternion.klass, "GetNormalizedCopy", VALUEFUNC(_wrap_Quaternion_GetNormalizedCopy), -1);
  rb_define_method(SwigClassQuaternion.klass, "GetInverse", VALUEFUNC(_wrap_Quaternion_GetInverse), -1);
  rb_define_method(SwigClassQuaternion.klass, "GetBulletQuaternion", VALUEFUNC(_wrap_Quaternion_GetBulletQuaternion), -1);
  rb_define_method(SwigClassQuaternion.klass, "ExtractBulletQuaternion", VALUEFUNC(_wrap_Quaternion_ExtractBulletQuaternion), -1);
  rb_define_method(SwigClassQuaternion.klass, "GetOgreQuaternion", VALUEFUNC(_wrap_Quaternion_GetOgreQuaternion), -1);
  rb_define_method(SwigClassQuaternion.klass, "ExtractOgreQuaternion", VALUEFUNC(_wrap_Quaternion_ExtractOgreQuaternion), -1);
  rb_define_method(SwigClassQuaternion.klass, "/", VALUEFUNC(_wrap_Quaternion___div__), -1);
  rb_define_method(SwigClassQuaternion.klass, "+", VALUEFUNC(_wrap_Quaternion___add__), -1);
  rb_define_method(SwigClassQuaternion.klass, "-", VALUEFUNC(_wrap_Quaternion___sub__), -1);
  rb_define_method(SwigClassQuaternion.klass, "*", VALUEFUNC(_wrap_Quaternion___mul__), -1);
  rb_define_method(SwigClassQuaternion.klass, "==", VALUEFUNC(_wrap_Quaternion___eq__), -1);
  rb_define_method(SwigClassQuaternion.klass, "ProtoSerialize", VALUEFUNC(_wrap_Quaternion_ProtoSerialize), -1);
  rb_define_method(SwigClassQuaternion.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_Quaternion_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassQuaternion.klass, "SerializableName", VALUEFUNC(_wrap_Quaternion_SerializableName), -1);
  SwigClassQuaternion.mark = 0;
  SwigClassQuaternion.destroy = (void (*)(void *)) free_Mezzanine_Quaternion;
  SwigClassQuaternion.trackObjects = 0;
  
  SwigClassRay.klass = rb_define_class_under(mMezzanine, "Ray", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Ray, (void *) &SwigClassRay);
  rb_define_alloc_func(SwigClassRay.klass, _wrap_Ray_allocate);
  rb_define_method(SwigClassRay.klass, "initialize", VALUEFUNC(_wrap_new_Ray), -1);
  rb_define_method(SwigClassRay.klass, "Origin=", VALUEFUNC(_wrap_Ray_Origin_set), -1);
  rb_define_method(SwigClassRay.klass, "Origin", VALUEFUNC(_wrap_Ray_Origin_get), -1);
  rb_define_method(SwigClassRay.klass, "Destination=", VALUEFUNC(_wrap_Ray_Destination_set), -1);
  rb_define_method(SwigClassRay.klass, "Destination", VALUEFUNC(_wrap_Ray_Destination_get), -1);
  rb_define_method(SwigClassRay.klass, "Length", VALUEFUNC(_wrap_Ray_Length), -1);
  rb_define_method(SwigClassRay.klass, "GetDirection", VALUEFUNC(_wrap_Ray_GetDirection), -1);
  rb_define_method(SwigClassRay.klass, "GetNormal", VALUEFUNC(_wrap_Ray_GetNormal), -1);
  rb_define_method(SwigClassRay.klass, "Normalize", VALUEFUNC(_wrap_Ray_Normalize), -1);
  rb_define_method(SwigClassRay.klass, "Intersects", VALUEFUNC(_wrap_Ray_Intersects), -1);
  rb_define_method(SwigClassRay.klass, "ExtractOgreRay", VALUEFUNC(_wrap_Ray_ExtractOgreRay), -1);
  rb_define_method(SwigClassRay.klass, "GetOgreRay", VALUEFUNC(_wrap_Ray_GetOgreRay), -1);
  rb_define_method(SwigClassRay.klass, "ProtoSerialize", VALUEFUNC(_wrap_Ray_ProtoSerialize), -1);
  rb_define_method(SwigClassRay.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_Ray_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassRay.klass, "GetSerializableName", VALUEFUNC(_wrap_Ray_GetSerializableName), -1);
  rb_define_method(SwigClassRay.klass, "*", VALUEFUNC(_wrap_Ray___mul__), -1);
  rb_define_method(SwigClassRay.klass, "/", VALUEFUNC(_wrap_Ray___div__), -1);
  rb_define_method(SwigClassRay.klass, "==", VALUEFUNC(_wrap_Ray___eq__), -1);
  SwigClassRay.mark = 0;
  SwigClassRay.destroy = (void (*)(void *)) free_Mezzanine_Ray;
  SwigClassRay.trackObjects = 0;
  
  SwigClassRayQueryTool.klass = rb_define_class_under(mMezzanine, "RayQueryTool", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__RayQueryTool, (void *) &SwigClassRayQueryTool);
  rb_define_alloc_func(SwigClassRayQueryTool.klass, _wrap_RayQueryTool_allocate);
  rb_define_method(SwigClassRayQueryTool.klass, "initialize", VALUEFUNC(_wrap_new_RayQueryTool), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "ClearReturns", VALUEFUNC(_wrap_RayQueryTool_ClearReturns), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "LastQueryResultsValid", VALUEFUNC(_wrap_RayQueryTool_LastQueryResultsValid), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "LastQueryResultsOffset", VALUEFUNC(_wrap_RayQueryTool_LastQueryResultsOffset), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "LastQueryResultsActorPtr", VALUEFUNC(_wrap_RayQueryTool_LastQueryResultsActorPtr), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "GetFirstActorOnRayByPolygon", VALUEFUNC(_wrap_RayQueryTool_GetFirstActorOnRayByPolygon), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "GetFirstActorOnRayByAABB", VALUEFUNC(_wrap_RayQueryTool_GetFirstActorOnRayByAABB), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "RayPlaneIntersection", VALUEFUNC(_wrap_RayQueryTool_RayPlaneIntersection), -1);
  rb_define_singleton_method(SwigClassRayQueryTool.klass, "GetMouseRay", VALUEFUNC(_wrap_RayQueryTool_GetMouseRay), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "ProtoSerialize", VALUEFUNC(_wrap_RayQueryTool_ProtoSerialize), -1);
  rb_define_method(SwigClassRayQueryTool.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_RayQueryTool_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassRayQueryTool.klass, "SerializableName", VALUEFUNC(_wrap_RayQueryTool_SerializableName), -1);
  SwigClassRayQueryTool.mark = 0;
  SwigClassRayQueryTool.destroy = (void (*)(void *)) free_Mezzanine_RayQueryTool;
  SwigClassRayQueryTool.trackObjects = 0;
  
  SwigClassTimer.klass = rb_define_class_under(mMezzanine, "Timer", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Timer, (void *) &SwigClassTimer);
  rb_define_alloc_func(SwigClassTimer.klass, _wrap_Timer_allocate);
  rb_define_method(SwigClassTimer.klass, "initialize", VALUEFUNC(_wrap_new_Timer), -1);
  rb_define_const(SwigClassTimer.klass, "Normal", SWIG_From_int(static_cast< int >(Mezzanine::Timer::Normal)));
  rb_define_const(SwigClassTimer.klass, "StopWatch", SWIG_From_int(static_cast< int >(Mezzanine::Timer::StopWatch)));
  rb_define_const(SwigClassTimer.klass, "Alarm", SWIG_From_int(static_cast< int >(Mezzanine::Timer::Alarm)));
  rb_define_method(SwigClassTimer.klass, "SetCurrentTime", VALUEFUNC(_wrap_Timer_SetCurrentTime), -1);
  rb_define_method(SwigClassTimer.klass, "SetCurrentTimeInMilliseconds", VALUEFUNC(_wrap_Timer_SetCurrentTimeInMilliseconds), -1);
  rb_define_method(SwigClassTimer.klass, "GetCurrentTime", VALUEFUNC(_wrap_Timer_GetCurrentTime), -1);
  rb_define_method(SwigClassTimer.klass, "GetCurrentTimeInMilliseconds", VALUEFUNC(_wrap_Timer_GetCurrentTimeInMilliseconds), -1);
  rb_define_method(SwigClassTimer.klass, "SetInitialTime", VALUEFUNC(_wrap_Timer_SetInitialTime), -1);
  rb_define_method(SwigClassTimer.klass, "SetInitialTimeInMilliseconds", VALUEFUNC(_wrap_Timer_SetInitialTimeInMilliseconds), -1);
  rb_define_method(SwigClassTimer.klass, "GetInitialTime", VALUEFUNC(_wrap_Timer_GetInitialTime), -1);
  rb_define_method(SwigClassTimer.klass, "GetInitialTimeInMilliseconds", VALUEFUNC(_wrap_Timer_GetInitialTimeInMilliseconds), -1);
  rb_define_method(SwigClassTimer.klass, "Start", VALUEFUNC(_wrap_Timer_Start), -1);
  rb_define_method(SwigClassTimer.klass, "Stop", VALUEFUNC(_wrap_Timer_Stop), -1);
  rb_define_method(SwigClassTimer.klass, "IsStopped", VALUEFUNC(_wrap_Timer_IsStopped), -1);
  rb_define_method(SwigClassTimer.klass, "Reset", VALUEFUNC(_wrap_Timer_Reset), -1);
  rb_define_method(SwigClassTimer.klass, "GetType", VALUEFUNC(_wrap_Timer_GetType), -1);
  SwigClassTimer.mark = 0;
  SwigClassTimer.destroy = (void (*)(void *)) free_Mezzanine_Timer;
  SwigClassTimer.trackObjects = 0;
  
  SwigClassGoalTimer.klass = rb_define_class_under(mMezzanine, "GoalTimer", ((swig_class *) SWIGTYPE_p_Mezzanine__Timer->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__GoalTimer, (void *) &SwigClassGoalTimer);
  rb_undef_alloc_func(SwigClassGoalTimer.klass);
  rb_define_method(SwigClassGoalTimer.klass, "SetAutoReset", VALUEFUNC(_wrap_GoalTimer_SetAutoReset), -1);
  rb_define_method(SwigClassGoalTimer.klass, "GetAutoReset", VALUEFUNC(_wrap_GoalTimer_GetAutoReset), -1);
  rb_define_method(SwigClassGoalTimer.klass, "SetGoalTime", VALUEFUNC(_wrap_GoalTimer_SetGoalTime), -1);
  rb_define_method(SwigClassGoalTimer.klass, "SetGoalTimeInMilliseconds", VALUEFUNC(_wrap_GoalTimer_SetGoalTimeInMilliseconds), -1);
  rb_define_method(SwigClassGoalTimer.klass, "GetGoalTime", VALUEFUNC(_wrap_GoalTimer_GetGoalTime), -1);
  rb_define_method(SwigClassGoalTimer.klass, "GetGoalTimeInMilliseconds", VALUEFUNC(_wrap_GoalTimer_GetGoalTimeInMilliseconds), -1);
  SwigClassGoalTimer.mark = 0;
  SwigClassGoalTimer.destroy = (void (*)(void *)) free_Mezzanine_GoalTimer;
  SwigClassGoalTimer.trackObjects = 0;
  
  SwigClassStopWatchTimer.klass = rb_define_class_under(mMezzanine, "StopWatchTimer", ((swig_class *) SWIGTYPE_p_Mezzanine__GoalTimer->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__StopWatchTimer, (void *) &SwigClassStopWatchTimer);
  rb_define_alloc_func(SwigClassStopWatchTimer.klass, _wrap_StopWatchTimer_allocate);
  rb_define_method(SwigClassStopWatchTimer.klass, "initialize", VALUEFUNC(_wrap_new_StopWatchTimer), -1);
  rb_define_method(SwigClassStopWatchTimer.klass, "GetType", VALUEFUNC(_wrap_StopWatchTimer_GetType), -1);
  SwigClassStopWatchTimer.mark = 0;
  SwigClassStopWatchTimer.destroy = (void (*)(void *)) free_Mezzanine_StopWatchTimer;
  SwigClassStopWatchTimer.trackObjects = 0;
  
  SwigClassAlarmTimer.klass = rb_define_class_under(mMezzanine, "AlarmTimer", ((swig_class *) SWIGTYPE_p_Mezzanine__GoalTimer->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__AlarmTimer, (void *) &SwigClassAlarmTimer);
  rb_define_alloc_func(SwigClassAlarmTimer.klass, _wrap_AlarmTimer_allocate);
  rb_define_method(SwigClassAlarmTimer.klass, "initialize", VALUEFUNC(_wrap_new_AlarmTimer), -1);
  rb_define_method(SwigClassAlarmTimer.klass, "GetType", VALUEFUNC(_wrap_AlarmTimer_GetType), -1);
  SwigClassAlarmTimer.mark = 0;
  SwigClassAlarmTimer.destroy = (void (*)(void *)) free_Mezzanine_AlarmTimer;
  SwigClassAlarmTimer.trackObjects = 0;
  
  SwigClassTransform.klass = rb_define_class_under(mMezzanine, "Transform", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Transform, (void *) &SwigClassTransform);
  rb_define_alloc_func(SwigClassTransform.klass, _wrap_Transform_allocate);
  rb_define_method(SwigClassTransform.klass, "initialize", VALUEFUNC(_wrap_new_Transform), -1);
  rb_define_method(SwigClassTransform.klass, "Location=", VALUEFUNC(_wrap_Transform_Location_set), -1);
  rb_define_method(SwigClassTransform.klass, "Location", VALUEFUNC(_wrap_Transform_Location_get), -1);
  rb_define_method(SwigClassTransform.klass, "Rotation=", VALUEFUNC(_wrap_Transform_Rotation_set), -1);
  rb_define_method(SwigClassTransform.klass, "Rotation", VALUEFUNC(_wrap_Transform_Rotation_get), -1);
  rb_define_method(SwigClassTransform.klass, "SetIdentity", VALUEFUNC(_wrap_Transform_SetIdentity), -1);
  rb_define_method(SwigClassTransform.klass, "GetBulletTransform", VALUEFUNC(_wrap_Transform_GetBulletTransform), -1);
  rb_define_method(SwigClassTransform.klass, "ExtractBulletTransform", VALUEFUNC(_wrap_Transform_ExtractBulletTransform), -1);
  rb_define_method(SwigClassTransform.klass, "ProtoSerialize", VALUEFUNC(_wrap_Transform_ProtoSerialize), -1);
  rb_define_method(SwigClassTransform.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_Transform_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassTransform.klass, "SerializableName", VALUEFUNC(_wrap_Transform_SerializableName), -1);
  SwigClassTransform.mark = 0;
  SwigClassTransform.destroy = (void (*)(void *)) free_Mezzanine_Transform;
  SwigClassTransform.trackObjects = 0;
  
  SwigClassVector2.klass = rb_define_class_under(mMezzanine, "Vector2", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__Vector2, (void *) &SwigClassVector2);
  rb_define_alloc_func(SwigClassVector2.klass, _wrap_Vector2_allocate);
  rb_define_method(SwigClassVector2.klass, "initialize", VALUEFUNC(_wrap_new_Vector2), -1);
  rb_define_method(SwigClassVector2.klass, "X=", VALUEFUNC(_wrap_Vector2_X_set), -1);
  rb_define_method(SwigClassVector2.klass, "X", VALUEFUNC(_wrap_Vector2_X_get), -1);
  rb_define_method(SwigClassVector2.klass, "Y=", VALUEFUNC(_wrap_Vector2_Y_set), -1);
  rb_define_method(SwigClassVector2.klass, "Y", VALUEFUNC(_wrap_Vector2_Y_get), -1);
  rb_define_method(SwigClassVector2.klass, "GetOgreVector2", VALUEFUNC(_wrap_Vector2_GetOgreVector2), -1);
  rb_define_method(SwigClassVector2.klass, "ExtractOgreVector2", VALUEFUNC(_wrap_Vector2_ExtractOgreVector2), -1);
  rb_define_method(SwigClassVector2.klass, "SetIdentity", VALUEFUNC(_wrap_Vector2_SetIdentity), -1);
  rb_define_method(SwigClassVector2.klass, "SetValues", VALUEFUNC(_wrap_Vector2_SetValues), -1);
  rb_define_method(SwigClassVector2.klass, "==", VALUEFUNC(_wrap_Vector2___eq__), -1);
  rb_define_method(SwigClassVector2.klass, "+", VALUEFUNC(_wrap_Vector2___add__), -1);
  rb_define_method(SwigClassVector2.klass, "-", VALUEFUNC(_wrap_Vector2___sub__), -1);
  rb_define_method(SwigClassVector2.klass, "*", VALUEFUNC(_wrap_Vector2___mul__), -1);
  rb_define_method(SwigClassVector2.klass, "/", VALUEFUNC(_wrap_Vector2___div__), -1);
  rb_define_method(SwigClassVector2.klass, "Perpendicular", VALUEFUNC(_wrap_Vector2_Perpendicular), -1);
  rb_define_method(SwigClassVector2.klass, "Normalize", VALUEFUNC(_wrap_Vector2_Normalize), -1);
  rb_define_method(SwigClassVector2.klass, "ProtoSerialize", VALUEFUNC(_wrap_Vector2_ProtoSerialize), -1);
  rb_define_method(SwigClassVector2.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_Vector2_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassVector2.klass, "SerializableName", VALUEFUNC(_wrap_Vector2_SerializableName), -1);
  SwigClassVector2.mark = 0;
  SwigClassVector2.destroy = (void (*)(void *)) free_Mezzanine_Vector2;
  SwigClassVector2.trackObjects = 0;
  
  SwigClassAttachableBase.klass = rb_define_class_under(mMezzanine, "AttachableBase", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__AttachableBase, (void *) &SwigClassAttachableBase);
  rb_undef_alloc_func(SwigClassAttachableBase.klass);
  rb_define_method(SwigClassAttachableBase.klass, "ConvertLocalToGlobal", VALUEFUNC(_wrap_AttachableBase_ConvertLocalToGlobal), -1);
  rb_define_method(SwigClassAttachableBase.klass, "ConvertGlobalToLocal", VALUEFUNC(_wrap_AttachableBase_ConvertGlobalToLocal), -1);
  rb_define_method(SwigClassAttachableBase.klass, "GetName", VALUEFUNC(_wrap_AttachableBase_GetName), -1);
  rb_define_method(SwigClassAttachableBase.klass, "GetType", VALUEFUNC(_wrap_AttachableBase_GetType), -1);
  rb_define_method(SwigClassAttachableBase.klass, "SetLocation", VALUEFUNC(_wrap_AttachableBase_SetLocation), -1);
  rb_define_method(SwigClassAttachableBase.klass, "GetLocation", VALUEFUNC(_wrap_AttachableBase_GetLocation), -1);
  rb_define_method(SwigClassAttachableBase.klass, "SetOrientation", VALUEFUNC(_wrap_AttachableBase_SetOrientation), -1);
  rb_define_method(SwigClassAttachableBase.klass, "GetOrientation", VALUEFUNC(_wrap_AttachableBase_GetOrientation), -1);
  rb_define_method(SwigClassAttachableBase.klass, "SetScaling", VALUEFUNC(_wrap_AttachableBase_SetScaling), -1);
  rb_define_method(SwigClassAttachableBase.klass, "GetScaling", VALUEFUNC(_wrap_AttachableBase_GetScaling), -1);
  SwigClassAttachableBase.mark = 0;
  SwigClassAttachableBase.destroy = (void (*)(void *)) free_Mezzanine_AttachableBase;
  SwigClassAttachableBase.trackObjects = 0;
  
  SwigClassAttachableParent.klass = rb_define_class_under(mMezzanine, "AttachableParent", ((swig_class *) SWIGTYPE_p_Mezzanine__AttachableBase->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__AttachableParent, (void *) &SwigClassAttachableParent);
  rb_undef_alloc_func(SwigClassAttachableParent.klass);
  rb_define_method(SwigClassAttachableParent.klass, "AttachObject", VALUEFUNC(_wrap_AttachableParent_AttachObject), -1);
  rb_define_method(SwigClassAttachableParent.klass, "DetachObject", VALUEFUNC(_wrap_AttachableParent_DetachObject), -1);
  rb_define_method(SwigClassAttachableParent.klass, "DetachAllChildren", VALUEFUNC(_wrap_AttachableParent_DetachAllChildren), -1);
  rb_define_method(SwigClassAttachableParent.klass, "GetNumAttached", VALUEFUNC(_wrap_AttachableParent_GetNumAttached), -1);
  rb_define_method(SwigClassAttachableParent.klass, "GetAttached", VALUEFUNC(_wrap_AttachableParent_GetAttached), -1);
  rb_define_method(SwigClassAttachableParent.klass, "BeginChild", VALUEFUNC(_wrap_AttachableParent_BeginChild), -1);
  rb_define_method(SwigClassAttachableParent.klass, "EndChild", VALUEFUNC(_wrap_AttachableParent_EndChild), -1);
  rb_define_method(SwigClassAttachableParent.klass, "_RecalculateAllChildTransforms", VALUEFUNC(_wrap_AttachableParent__RecalculateAllChildTransforms), -1);
  SwigClassAttachableParent.mark = 0;
  SwigClassAttachableParent.destroy = (void (*)(void *)) free_Mezzanine_AttachableParent;
  SwigClassAttachableParent.trackObjects = 0;
  
  SwigClassAttachableChild.klass = rb_define_class_under(mMezzanine, "AttachableChild", ((swig_class *) SWIGTYPE_p_Mezzanine__AttachableBase->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__AttachableChild, (void *) &SwigClassAttachableChild);
  rb_undef_alloc_func(SwigClassAttachableChild.klass);
  rb_define_method(SwigClassAttachableChild.klass, "GetParent", VALUEFUNC(_wrap_AttachableChild_GetParent), -1);
  rb_define_method(SwigClassAttachableChild.klass, "SetLocalLocation", VALUEFUNC(_wrap_AttachableChild_SetLocalLocation), -1);
  rb_define_method(SwigClassAttachableChild.klass, "GetLocalLocation", VALUEFUNC(_wrap_AttachableChild_GetLocalLocation), -1);
  rb_define_method(SwigClassAttachableChild.klass, "SetLocalOrientation", VALUEFUNC(_wrap_AttachableChild_SetLocalOrientation), -1);
  rb_define_method(SwigClassAttachableChild.klass, "GetLocalOrientation", VALUEFUNC(_wrap_AttachableChild_GetLocalOrientation), -1);
  rb_define_method(SwigClassAttachableChild.klass, "_RecalculateGlobalTransform", VALUEFUNC(_wrap_AttachableChild__RecalculateGlobalTransform), -1);
  rb_define_method(SwigClassAttachableChild.klass, "_RecalculateLocalTransform", VALUEFUNC(_wrap_AttachableChild__RecalculateLocalTransform), -1);
  SwigClassAttachableChild.mark = 0;
  SwigClassAttachableChild.destroy = (void (*)(void *)) free_Mezzanine_AttachableChild;
  SwigClassAttachableChild.trackObjects = 0;
  
  SwigClassWorldNode.klass = rb_define_class_under(mMezzanine, "WorldNode", ((swig_class *) SWIGTYPE_p_Mezzanine__AttachableParent->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__WorldNode, (void *) &SwigClassWorldNode);
  rb_define_alloc_func(SwigClassWorldNode.klass, _wrap_WorldNode_allocate);
  rb_define_method(SwigClassWorldNode.klass, "initialize", VALUEFUNC(_wrap_new_WorldNode), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetName", VALUEFUNC(_wrap_WorldNode_GetName), -1);
  rb_define_method(SwigClassWorldNode.klass, "LookAt", VALUEFUNC(_wrap_WorldNode_LookAt), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetDirection", VALUEFUNC(_wrap_WorldNode_SetDirection), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetAutoTracking", VALUEFUNC(_wrap_WorldNode_SetAutoTracking), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetAutoTrackingTarget", VALUEFUNC(_wrap_WorldNode_GetAutoTrackingTarget), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetAutoTrackingDirection", VALUEFUNC(_wrap_WorldNode_GetAutoTrackingDirection), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetAutoTrackingOffset", VALUEFUNC(_wrap_WorldNode_GetAutoTrackingOffset), -1);
  rb_define_method(SwigClassWorldNode.klass, "Rotate", VALUEFUNC(_wrap_WorldNode_Rotate), -1);
  rb_define_method(SwigClassWorldNode.klass, "Yaw", VALUEFUNC(_wrap_WorldNode_Yaw), -1);
  rb_define_method(SwigClassWorldNode.klass, "Pitch", VALUEFUNC(_wrap_WorldNode_Pitch), -1);
  rb_define_method(SwigClassWorldNode.klass, "Roll", VALUEFUNC(_wrap_WorldNode_Roll), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetFixedYawAxis", VALUEFUNC(_wrap_WorldNode_SetFixedYawAxis), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetFixedYawAxisEnabled", VALUEFUNC(_wrap_WorldNode_GetFixedYawAxisEnabled), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetFixedYawAxis", VALUEFUNC(_wrap_WorldNode_GetFixedYawAxis), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetLocation", VALUEFUNC(_wrap_WorldNode_SetLocation), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetLocation", VALUEFUNC(_wrap_WorldNode_GetLocation), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetOrientation", VALUEFUNC(_wrap_WorldNode_SetOrientation), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetOrientation", VALUEFUNC(_wrap_WorldNode_GetOrientation), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetScaling", VALUEFUNC(_wrap_WorldNode_SetScaling), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetScaling", VALUEFUNC(_wrap_WorldNode_GetScaling), -1);
  rb_define_method(SwigClassWorldNode.klass, "GetType", VALUEFUNC(_wrap_WorldNode_GetType), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetLocalLocation", VALUEFUNC(_wrap_WorldNode_SetLocalLocation), -1);
  rb_define_method(SwigClassWorldNode.klass, "SetLocalOrientation", VALUEFUNC(_wrap_WorldNode_SetLocalOrientation), -1);
  rb_define_method(SwigClassWorldNode.klass, "_UpdateTracking", VALUEFUNC(_wrap_WorldNode__UpdateTracking), -1);
  SwigClassWorldNode.mark = 0;
  SwigClassWorldNode.destroy = (void (*)(void *)) free_Mezzanine_WorldNode;
  SwigClassWorldNode.trackObjects = 0;
  
  SwigClassColourValue.klass = rb_define_class_under(mMezzanine, "ColourValue", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__ColourValue, (void *) &SwigClassColourValue);
  rb_define_alloc_func(SwigClassColourValue.klass, _wrap_ColourValue_allocate);
  rb_define_method(SwigClassColourValue.klass, "initialize", VALUEFUNC(_wrap_new_ColourValue), -1);
  rb_define_method(SwigClassColourValue.klass, "R=", VALUEFUNC(_wrap_ColourValue_R_set), -1);
  rb_define_method(SwigClassColourValue.klass, "R", VALUEFUNC(_wrap_ColourValue_R_get), -1);
  rb_define_method(SwigClassColourValue.klass, "G=", VALUEFUNC(_wrap_ColourValue_G_set), -1);
  rb_define_method(SwigClassColourValue.klass, "G", VALUEFUNC(_wrap_ColourValue_G_get), -1);
  rb_define_method(SwigClassColourValue.klass, "B=", VALUEFUNC(_wrap_ColourValue_B_set), -1);
  rb_define_method(SwigClassColourValue.klass, "B", VALUEFUNC(_wrap_ColourValue_B_get), -1);
  rb_define_method(SwigClassColourValue.klass, "A=", VALUEFUNC(_wrap_ColourValue_A_set), -1);
  rb_define_method(SwigClassColourValue.klass, "A", VALUEFUNC(_wrap_ColourValue_A_get), -1);
  rb_define_method(SwigClassColourValue.klass, "GetOgreColourValue", VALUEFUNC(_wrap_ColourValue_GetOgreColourValue), -1);
  rb_define_method(SwigClassColourValue.klass, "==", VALUEFUNC(_wrap_ColourValue___eq__), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Transparent", VALUEFUNC(_wrap_ColourValue_Transparent), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "AliceBlue", VALUEFUNC(_wrap_ColourValue_AliceBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "AntiqueWhite", VALUEFUNC(_wrap_ColourValue_AntiqueWhite), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Aqua", VALUEFUNC(_wrap_ColourValue_Aqua), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Aquamarine", VALUEFUNC(_wrap_ColourValue_Aquamarine), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Azure", VALUEFUNC(_wrap_ColourValue_Azure), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Beige", VALUEFUNC(_wrap_ColourValue_Beige), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Bisque", VALUEFUNC(_wrap_ColourValue_Bisque), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Black", VALUEFUNC(_wrap_ColourValue_Black), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Blanchedalmond", VALUEFUNC(_wrap_ColourValue_Blanchedalmond), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Blue", VALUEFUNC(_wrap_ColourValue_Blue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "BlueViolet", VALUEFUNC(_wrap_ColourValue_BlueViolet), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Brown", VALUEFUNC(_wrap_ColourValue_Brown), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "BurlyWood", VALUEFUNC(_wrap_ColourValue_BurlyWood), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "CadetBlue", VALUEFUNC(_wrap_ColourValue_CadetBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Chartreuse", VALUEFUNC(_wrap_ColourValue_Chartreuse), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Chocolate", VALUEFUNC(_wrap_ColourValue_Chocolate), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Coral", VALUEFUNC(_wrap_ColourValue_Coral), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "CornFlowerBlue", VALUEFUNC(_wrap_ColourValue_CornFlowerBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "CornSilk", VALUEFUNC(_wrap_ColourValue_CornSilk), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Crimson", VALUEFUNC(_wrap_ColourValue_Crimson), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Cyan", VALUEFUNC(_wrap_ColourValue_Cyan), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkBlue", VALUEFUNC(_wrap_ColourValue_DarkBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkCyan", VALUEFUNC(_wrap_ColourValue_DarkCyan), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkGoldenRod", VALUEFUNC(_wrap_ColourValue_DarkGoldenRod), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkGray", VALUEFUNC(_wrap_ColourValue_DarkGray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkGreen", VALUEFUNC(_wrap_ColourValue_DarkGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkKhaki", VALUEFUNC(_wrap_ColourValue_DarkKhaki), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkMagenta", VALUEFUNC(_wrap_ColourValue_DarkMagenta), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkOliveGreen", VALUEFUNC(_wrap_ColourValue_DarkOliveGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkOrange", VALUEFUNC(_wrap_ColourValue_DarkOrange), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkOrchid", VALUEFUNC(_wrap_ColourValue_DarkOrchid), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkRed", VALUEFUNC(_wrap_ColourValue_DarkRed), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkSalmon", VALUEFUNC(_wrap_ColourValue_DarkSalmon), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkSeaGreen", VALUEFUNC(_wrap_ColourValue_DarkSeaGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkSlateBlue", VALUEFUNC(_wrap_ColourValue_DarkSlateBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkSlateGray", VALUEFUNC(_wrap_ColourValue_DarkSlateGray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkTurquoise", VALUEFUNC(_wrap_ColourValue_DarkTurquoise), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DarkViolet", VALUEFUNC(_wrap_ColourValue_DarkViolet), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DeepPink", VALUEFUNC(_wrap_ColourValue_DeepPink), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DeepSkyBlue", VALUEFUNC(_wrap_ColourValue_DeepSkyBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DimGray", VALUEFUNC(_wrap_ColourValue_DimGray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "DodgerBlue", VALUEFUNC(_wrap_ColourValue_DodgerBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "FireBrick", VALUEFUNC(_wrap_ColourValue_FireBrick), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "FloralWhite", VALUEFUNC(_wrap_ColourValue_FloralWhite), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "ForestGreen", VALUEFUNC(_wrap_ColourValue_ForestGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Fuchsia", VALUEFUNC(_wrap_ColourValue_Fuchsia), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Gainsboro", VALUEFUNC(_wrap_ColourValue_Gainsboro), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "GhostWhite", VALUEFUNC(_wrap_ColourValue_GhostWhite), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Gold", VALUEFUNC(_wrap_ColourValue_Gold), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "GoldenRod", VALUEFUNC(_wrap_ColourValue_GoldenRod), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Gray", VALUEFUNC(_wrap_ColourValue_Gray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Green", VALUEFUNC(_wrap_ColourValue_Green), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "GreenYellow", VALUEFUNC(_wrap_ColourValue_GreenYellow), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "HoneyDew", VALUEFUNC(_wrap_ColourValue_HoneyDew), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "HotPink", VALUEFUNC(_wrap_ColourValue_HotPink), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "IndianRed", VALUEFUNC(_wrap_ColourValue_IndianRed), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Indigo", VALUEFUNC(_wrap_ColourValue_Indigo), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Ivory", VALUEFUNC(_wrap_ColourValue_Ivory), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Khaki", VALUEFUNC(_wrap_ColourValue_Khaki), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Lavender", VALUEFUNC(_wrap_ColourValue_Lavender), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LavenderBlush", VALUEFUNC(_wrap_ColourValue_LavenderBlush), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LawnGreen", VALUEFUNC(_wrap_ColourValue_LawnGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LemonChiffon", VALUEFUNC(_wrap_ColourValue_LemonChiffon), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightBlue", VALUEFUNC(_wrap_ColourValue_LightBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightCoral", VALUEFUNC(_wrap_ColourValue_LightCoral), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightCyan", VALUEFUNC(_wrap_ColourValue_LightCyan), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightGoldenRodYellow", VALUEFUNC(_wrap_ColourValue_LightGoldenRodYellow), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightGray", VALUEFUNC(_wrap_ColourValue_LightGray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightGreen", VALUEFUNC(_wrap_ColourValue_LightGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightPink", VALUEFUNC(_wrap_ColourValue_LightPink), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightSalmon", VALUEFUNC(_wrap_ColourValue_LightSalmon), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightSeaGreen", VALUEFUNC(_wrap_ColourValue_LightSeaGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightSkyBlue", VALUEFUNC(_wrap_ColourValue_LightSkyBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightSlateGray", VALUEFUNC(_wrap_ColourValue_LightSlateGray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightSteelBlue", VALUEFUNC(_wrap_ColourValue_LightSteelBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LightYellow", VALUEFUNC(_wrap_ColourValue_LightYellow), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Lime", VALUEFUNC(_wrap_ColourValue_Lime), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "LimeGreen", VALUEFUNC(_wrap_ColourValue_LimeGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Linen", VALUEFUNC(_wrap_ColourValue_Linen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Magenta", VALUEFUNC(_wrap_ColourValue_Magenta), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Maroon", VALUEFUNC(_wrap_ColourValue_Maroon), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumAquamarine", VALUEFUNC(_wrap_ColourValue_MediumAquamarine), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumBlue", VALUEFUNC(_wrap_ColourValue_MediumBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumOrchid", VALUEFUNC(_wrap_ColourValue_MediumOrchid), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumPurple", VALUEFUNC(_wrap_ColourValue_MediumPurple), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumSeaGreen", VALUEFUNC(_wrap_ColourValue_MediumSeaGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumSlateBlue", VALUEFUNC(_wrap_ColourValue_MediumSlateBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumSpringGreen", VALUEFUNC(_wrap_ColourValue_MediumSpringGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumTurquoise", VALUEFUNC(_wrap_ColourValue_MediumTurquoise), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MediumVioletRed", VALUEFUNC(_wrap_ColourValue_MediumVioletRed), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MidnightBlue", VALUEFUNC(_wrap_ColourValue_MidnightBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MintCream", VALUEFUNC(_wrap_ColourValue_MintCream), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "MistyRose", VALUEFUNC(_wrap_ColourValue_MistyRose), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Moccasin", VALUEFUNC(_wrap_ColourValue_Moccasin), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "NavajoWhite", VALUEFUNC(_wrap_ColourValue_NavajoWhite), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Navy", VALUEFUNC(_wrap_ColourValue_Navy), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "OldLace", VALUEFUNC(_wrap_ColourValue_OldLace), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Olive", VALUEFUNC(_wrap_ColourValue_Olive), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "OliveDrab", VALUEFUNC(_wrap_ColourValue_OliveDrab), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Orange", VALUEFUNC(_wrap_ColourValue_Orange), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "OrangeRed", VALUEFUNC(_wrap_ColourValue_OrangeRed), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Orchid", VALUEFUNC(_wrap_ColourValue_Orchid), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PaleGoldenRod", VALUEFUNC(_wrap_ColourValue_PaleGoldenRod), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PaleGreen", VALUEFUNC(_wrap_ColourValue_PaleGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PaleTurquoise", VALUEFUNC(_wrap_ColourValue_PaleTurquoise), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PaleVioletRed", VALUEFUNC(_wrap_ColourValue_PaleVioletRed), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PapayaWhip", VALUEFUNC(_wrap_ColourValue_PapayaWhip), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PeachPuff", VALUEFUNC(_wrap_ColourValue_PeachPuff), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Peru", VALUEFUNC(_wrap_ColourValue_Peru), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Pink", VALUEFUNC(_wrap_ColourValue_Pink), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Plum", VALUEFUNC(_wrap_ColourValue_Plum), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "PowderBlue", VALUEFUNC(_wrap_ColourValue_PowderBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Purple", VALUEFUNC(_wrap_ColourValue_Purple), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Red", VALUEFUNC(_wrap_ColourValue_Red), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "RosyBrown", VALUEFUNC(_wrap_ColourValue_RosyBrown), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "RoyalBlue", VALUEFUNC(_wrap_ColourValue_RoyalBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SaddleBrown", VALUEFUNC(_wrap_ColourValue_SaddleBrown), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Salmon", VALUEFUNC(_wrap_ColourValue_Salmon), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SandyBrown", VALUEFUNC(_wrap_ColourValue_SandyBrown), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SeaGreen", VALUEFUNC(_wrap_ColourValue_SeaGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SeaShell", VALUEFUNC(_wrap_ColourValue_SeaShell), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Sienna", VALUEFUNC(_wrap_ColourValue_Sienna), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Silver", VALUEFUNC(_wrap_ColourValue_Silver), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SkyBlue", VALUEFUNC(_wrap_ColourValue_SkyBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SlateBlue", VALUEFUNC(_wrap_ColourValue_SlateBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SlateGray", VALUEFUNC(_wrap_ColourValue_SlateGray), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Snow", VALUEFUNC(_wrap_ColourValue_Snow), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SpringGreen", VALUEFUNC(_wrap_ColourValue_SpringGreen), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SteelBlue", VALUEFUNC(_wrap_ColourValue_SteelBlue), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Tan", VALUEFUNC(_wrap_ColourValue_Tan), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Teal", VALUEFUNC(_wrap_ColourValue_Teal), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Thistle", VALUEFUNC(_wrap_ColourValue_Thistle), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Tomato", VALUEFUNC(_wrap_ColourValue_Tomato), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Turquoise", VALUEFUNC(_wrap_ColourValue_Turquoise), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Violet", VALUEFUNC(_wrap_ColourValue_Violet), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Wheat", VALUEFUNC(_wrap_ColourValue_Wheat), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "White", VALUEFUNC(_wrap_ColourValue_White), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "WhiteSmoke", VALUEFUNC(_wrap_ColourValue_WhiteSmoke), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "Yellow", VALUEFUNC(_wrap_ColourValue_Yellow), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "YellowGreen", VALUEFUNC(_wrap_ColourValue_YellowGreen), -1);
  rb_define_method(SwigClassColourValue.klass, "ProtoSerialize", VALUEFUNC(_wrap_ColourValue_ProtoSerialize), -1);
  rb_define_method(SwigClassColourValue.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_ColourValue_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassColourValue.klass, "SerializableName", VALUEFUNC(_wrap_ColourValue_SerializableName), -1);
  SwigClassColourValue.mark = 0;
  SwigClassColourValue.destroy = (void (*)(void *)) free_Mezzanine_ColourValue;
  SwigClassColourValue.trackObjects = 0;
  
  SwigClassWorldObjectGraphicsSettings.klass = rb_define_class_under(mMezzanine, "WorldObjectGraphicsSettings", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__WorldObjectGraphicsSettings, (void *) &SwigClassWorldObjectGraphicsSettings);
  rb_define_alloc_func(SwigClassWorldObjectGraphicsSettings.klass, _wrap_WorldObjectGraphicsSettings_allocate);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "initialize", VALUEFUNC(_wrap_new_WorldObjectGraphicsSettings), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "SetMesh", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_SetMesh), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "GetMesh", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_GetMesh), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "SetMaterial", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_SetMaterial), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "GetMaterialName", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_GetMaterialName), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "HasMaterialSet", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_HasMaterialSet), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "GetNumSubmeshes", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_GetNumSubmeshes), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "CloneMaterial", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_CloneMaterial), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "SetMaterialAmbient", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_SetMaterialAmbient), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "SetMaterialSpecular", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_SetMaterialSpecular), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "SetMaterialDiffuse", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_SetMaterialDiffuse), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "GetMaterialAmbient", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_GetMaterialAmbient), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "GetMaterialSpecular", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_GetMaterialSpecular), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "GetMaterialDiffuse", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_GetMaterialDiffuse), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "ProtoSerialize", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_ProtoSerialize), -1);
  rb_define_method(SwigClassWorldObjectGraphicsSettings.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassWorldObjectGraphicsSettings.klass, "SerializableName", VALUEFUNC(_wrap_WorldObjectGraphicsSettings_SerializableName), -1);
  SwigClassWorldObjectGraphicsSettings.mark = 0;
  SwigClassWorldObjectGraphicsSettings.destroy = (void (*)(void *)) free_Mezzanine_WorldObjectGraphicsSettings;
  SwigClassWorldObjectGraphicsSettings.trackObjects = 0;
  
  SwigClassWorldObject.klass = rb_define_class_under(mMezzanine, "WorldObject", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__WorldObject, (void *) &SwigClassWorldObject);
  rb_undef_alloc_func(SwigClassWorldObject.klass);
  rb_define_method(SwigClassWorldObject.klass, "SetLocation", VALUEFUNC(_wrap_WorldObject_SetLocation), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetLocation", VALUEFUNC(_wrap_WorldObject_GetLocation), -1);
  rb_define_method(SwigClassWorldObject.klass, "SetScaling", VALUEFUNC(_wrap_WorldObject_SetScaling), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetScaling", VALUEFUNC(_wrap_WorldObject_GetScaling), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetName", VALUEFUNC(_wrap_WorldObject_GetName), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetType", VALUEFUNC(_wrap_WorldObject_GetType), -1);
  rb_define_method(SwigClassWorldObject.klass, "IsStaticOrKinematic", VALUEFUNC(_wrap_WorldObject_IsStaticOrKinematic), -1);
  rb_define_method(SwigClassWorldObject.klass, "IsInWorld", VALUEFUNC(_wrap_WorldObject_IsInWorld), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetWorld", VALUEFUNC(_wrap_WorldObject_GetWorld), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetGraphicsSettings", VALUEFUNC(_wrap_WorldObject_GetGraphicsSettings), -1);
  rb_define_method(SwigClassWorldObject.klass, "GetPhysicsSettings", VALUEFUNC(_wrap_WorldObject_GetPhysicsSettings), -1);
  rb_define_method(SwigClassWorldObject.klass, "AddToWorld", VALUEFUNC(_wrap_WorldObject_AddToWorld), -1);
  rb_define_method(SwigClassWorldObject.klass, "RemoveFromWorld", VALUEFUNC(_wrap_WorldObject_RemoveFromWorld), -1);
  rb_define_method(SwigClassWorldObject.klass, "_Update", VALUEFUNC(_wrap_WorldObject__Update), -1);
  rb_define_method(SwigClassWorldObject.klass, "_NotifyCollisionState", VALUEFUNC(_wrap_WorldObject__NotifyCollisionState), -1);
  rb_define_method(SwigClassWorldObject.klass, "_NotifyProxyDestroyed", VALUEFUNC(_wrap_WorldObject__NotifyProxyDestroyed), -1);
  rb_define_method(SwigClassWorldObject.klass, "_GetBasePhysicsObject", VALUEFUNC(_wrap_WorldObject__GetBasePhysicsObject), -1);
  rb_define_method(SwigClassWorldObject.klass, "_GetGraphicsObject", VALUEFUNC(_wrap_WorldObject__GetGraphicsObject), -1);
  rb_define_method(SwigClassWorldObject.klass, "_GetGraphicsNode", VALUEFUNC(_wrap_WorldObject__GetGraphicsNode), -1);
  rb_define_singleton_method(SwigClassWorldObject.klass, "SerializableName", VALUEFUNC(_wrap_WorldObject_SerializableName), -1);
  SwigClassWorldObject.mark = 0;
  SwigClassWorldObject.destroy = (void (*)(void *)) free_Mezzanine_WorldObject;
  SwigClassWorldObject.trackObjects = 0;
  
  SwigClassNonStaticWorldObject.klass = rb_define_class_under(mMezzanine, "NonStaticWorldObject", ((swig_class *) SWIGTYPE_p_Mezzanine__WorldObject->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__NonStaticWorldObject, (void *) &SwigClassNonStaticWorldObject);
  rb_undef_alloc_func(SwigClassNonStaticWorldObject.klass);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "SetLocation", VALUEFUNC(_wrap_NonStaticWorldObject_SetLocation), -1);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "GetLocation", VALUEFUNC(_wrap_NonStaticWorldObject_GetLocation), -1);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "SetOrientation", VALUEFUNC(_wrap_NonStaticWorldObject_SetOrientation), -1);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "GetOrientation", VALUEFUNC(_wrap_NonStaticWorldObject_GetOrientation), -1);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "SetScaling", VALUEFUNC(_wrap_NonStaticWorldObject_SetScaling), -1);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "GetScaling", VALUEFUNC(_wrap_NonStaticWorldObject_GetScaling), -1);
  rb_define_method(SwigClassNonStaticWorldObject.klass, "GetName", VALUEFUNC(_wrap_NonStaticWorldObject_GetName), -1);
  rb_define_singleton_method(SwigClassNonStaticWorldObject.klass, "SerializableName", VALUEFUNC(_wrap_NonStaticWorldObject_SerializableName), -1);
  SwigClassNonStaticWorldObject.mark = 0;
  SwigClassNonStaticWorldObject.destroy = (void (*)(void *)) free_Mezzanine_NonStaticWorldObject;
  SwigClassNonStaticWorldObject.trackObjects = 0;
  rb_define_const(mMezzanine, "AS_Active", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AS_Active)));
  rb_define_const(mMezzanine, "AS_Island_Sleeping", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AS_Island_Sleeping)));
  rb_define_const(mMezzanine, "AS_Wants_Deactivation", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AS_Wants_Deactivation)));
  rb_define_const(mMezzanine, "AS_DisableDeactivation", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AS_DisableDeactivation)));
  rb_define_const(mMezzanine, "AS_DisableSimulation", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AS_DisableSimulation)));
  rb_define_const(mMezzanine, "AFF_AnisotropicFrictionDisabled", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AFF_AnisotropicFrictionDisabled)));
  rb_define_const(mMezzanine, "AFF_AnisotropicFriction", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AFF_AnisotropicFriction)));
  rb_define_const(mMezzanine, "AFF_AnisotropicRollingFriction", SWIG_From_int(static_cast< int >(Mezzanine::Physics::AFF_AnisotropicRollingFriction)));
  rb_define_const(mMezzanine, "CF_GenericFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_GenericFilter)));
  rb_define_const(mMezzanine, "CF_StaticFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_StaticFilter)));
  rb_define_const(mMezzanine, "CF_KinematicFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_KinematicFilter)));
  rb_define_const(mMezzanine, "CF_DebrisFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_DebrisFilter)));
  rb_define_const(mMezzanine, "CF_SensorFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_SensorFilter)));
  rb_define_const(mMezzanine, "CF_CharacterFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_CharacterFilter)));
  rb_define_const(mMezzanine, "CF_AllFilter", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_AllFilter)));
  rb_define_const(mMezzanine, "CF_UserFilter1", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_UserFilter1)));
  rb_define_const(mMezzanine, "CF_UserFilter2", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_UserFilter2)));
  rb_define_const(mMezzanine, "CF_UserFilter3", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_UserFilter3)));
  rb_define_const(mMezzanine, "CF_UserFilter4", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_UserFilter4)));
  rb_define_const(mMezzanine, "CF_StaticObject", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_StaticObject)));
  rb_define_const(mMezzanine, "CF_KinematicObject", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_KinematicObject)));
  rb_define_const(mMezzanine, "CF_NoContactResponse", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_NoContactResponse)));
  rb_define_const(mMezzanine, "CF_CustomMaterialCallback", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_CustomMaterialCallback)));
  rb_define_const(mMezzanine, "CF_CharacterObject", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_CharacterObject)));
  rb_define_const(mMezzanine, "CF_DisableVisualizeObject", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_DisableVisualizeObject)));
  rb_define_const(mMezzanine, "CF_DisableSPUCollisionProcessing", SWIG_From_int(static_cast< int >(Mezzanine::Physics::CF_DisableSPUCollisionProcessing)));
  rb_define_const(mMezzanine, "DDM_NoDebug", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_NoDebug)));
  rb_define_const(mMezzanine, "DDM_DrawWireframe", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawWireframe)));
  rb_define_const(mMezzanine, "DDM_DrawAABB", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawAABB)));
  rb_define_const(mMezzanine, "DDM_DrawFeaturesText", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawFeaturesText)));
  rb_define_const(mMezzanine, "DDM_DrawContactPoints", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawContactPoints)));
  rb_define_const(mMezzanine, "DDM_NoDeactivation", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_NoDeactivation)));
  rb_define_const(mMezzanine, "DDM_NoHelpText", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_NoHelpText)));
  rb_define_const(mMezzanine, "DDM_DrawText", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawText)));
  rb_define_const(mMezzanine, "DDM_ProfileTimings", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_ProfileTimings)));
  rb_define_const(mMezzanine, "DDM_EnableSatComparison", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_EnableSatComparison)));
  rb_define_const(mMezzanine, "DDM_DisableBulletLCP", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DisableBulletLCP)));
  rb_define_const(mMezzanine, "DDM_EnableCCD", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_EnableCCD)));
  rb_define_const(mMezzanine, "DDM_DrawConstraints", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawConstraints)));
  rb_define_const(mMezzanine, "DDM_DrawConstraintLimits", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawConstraintLimits)));
  rb_define_const(mMezzanine, "DDM_FastWireframe", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_FastWireframe)));
  rb_define_const(mMezzanine, "DDM_DrawNormals", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_DrawNormals)));
  rb_define_const(mMezzanine, "DDM_All", SWIG_From_int(static_cast< int >(Mezzanine::Physics::DDM_All)));
  rb_define_const(mMezzanine, "PT_Rigid", SWIG_From_int(static_cast< int >(Mezzanine::Physics::PT_Rigid)));
  rb_define_const(mMezzanine, "PT_Soft", SWIG_From_int(static_cast< int >(Mezzanine::Physics::PT_Soft)));
  rb_define_const(mMezzanine, "PT_Ghost", SWIG_From_int(static_cast< int >(Mezzanine::Physics::PT_Ghost)));
  
  SwigClassWorldObjectPhysicsSettings.klass = rb_define_class_under(mMezzanine, "WorldObjectPhysicsSettings", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings, (void *) &SwigClassWorldObjectPhysicsSettings);
  rb_define_alloc_func(SwigClassWorldObjectPhysicsSettings.klass, _wrap_WorldObjectPhysicsSettings_allocate);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "initialize", VALUEFUNC(_wrap_new_WorldObjectPhysicsSettings), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "SetCollisionShape", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_SetCollisionShape), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "GetCollisionShape", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_GetCollisionShape), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "SetCollisionGroupAndMask", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_SetCollisionGroupAndMask), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "GetCollisionGroup", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_GetCollisionGroup), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "GetCollisionMask", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_GetCollisionMask), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "IsKinematic", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_IsKinematic), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "IsStatic", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_IsStatic), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "IsStaticOrKinematic", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_IsStaticOrKinematic), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "GetCollisionResponse", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_GetCollisionResponse), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "IsActive", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_IsActive), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "SetActivationState", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_SetActivationState), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "GetActivationState", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_GetActivationState), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "ProtoSerialize", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_ProtoSerialize), -1);
  rb_define_method(SwigClassWorldObjectPhysicsSettings.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassWorldObjectPhysicsSettings.klass, "SerializableName", VALUEFUNC(_wrap_WorldObjectPhysicsSettings_SerializableName), -1);
  SwigClassWorldObjectPhysicsSettings.mark = 0;
  SwigClassWorldObjectPhysicsSettings.destroy = (void (*)(void *)) free_Mezzanine_WorldObjectPhysicsSettings;
  SwigClassWorldObjectPhysicsSettings.trackObjects = 0;
  
  SwigClassNonTriggerPhysicsSettings.klass = rb_define_class_under(mMezzanine, "NonTriggerPhysicsSettings", ((swig_class *) SWIGTYPE_p_Mezzanine__WorldObjectPhysicsSettings->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_Mezzanine__NonTriggerPhysicsSettings, (void *) &SwigClassNonTriggerPhysicsSettings);
  rb_define_alloc_func(SwigClassNonTriggerPhysicsSettings.klass, _wrap_NonTriggerPhysicsSettings_allocate);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "initialize", VALUEFUNC(_wrap_new_NonTriggerPhysicsSettings), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "SetCollisionResponse", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_SetCollisionResponse), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "SetFriction", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_SetFriction), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "GetFriction", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_GetFriction), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "SetRestitution", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_SetRestitution), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "GetRestitution", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_GetRestitution), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "ProtoSerialize", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_ProtoSerialize), -1);
  rb_define_method(SwigClassNonTriggerPhysicsSettings.klass, "ProtoDeSerialize", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_ProtoDeSerialize), -1);
  rb_define_singleton_method(SwigClassNonTriggerPhysicsSettings.klass, "SerializableName", VALUEFUNC(_wrap_NonTriggerPhysicsSettings_SerializableName), -1);
  SwigClassNonTriggerPhysicsSettings.mark = 0;
  SwigClassNonTriggerPhysicsSettings.destroy = (void (*)(void *)) free_Mezzanine_NonTriggerPhysicsSettings;
  SwigClassNonTriggerPhysicsSettings.trackObjects = 0;
}

