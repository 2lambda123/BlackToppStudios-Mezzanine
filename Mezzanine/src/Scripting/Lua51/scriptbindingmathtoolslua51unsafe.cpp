/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ChannelType swig_types[0]
#define SWIGTYPE_p_Mezzanine__ArithmeticException swig_types[1]
#define SWIGTYPE_p_Mezzanine__AxisAlignedBox swig_types[2]
#define SWIGTYPE_p_Mezzanine__DirectoryException swig_types[3]
#define SWIGTYPE_p_Mezzanine__DirectoryNotFoundException swig_types[4]
#define SWIGTYPE_p_Mezzanine__DirectoryPermissionException swig_types[5]
#define SWIGTYPE_p_Mezzanine__DirectoryReadException swig_types[6]
#define SWIGTYPE_p_Mezzanine__DirectoryWriteException swig_types[7]
#define SWIGTYPE_p_Mezzanine__Exception swig_types[8]
#define SWIGTYPE_p_Mezzanine__FileException swig_types[9]
#define SWIGTYPE_p_Mezzanine__FileNotFoundException swig_types[10]
#define SWIGTYPE_p_Mezzanine__FilePermissionException swig_types[11]
#define SWIGTYPE_p_Mezzanine__FileReadException swig_types[12]
#define SWIGTYPE_p_Mezzanine__FileWriteException swig_types[13]
#define SWIGTYPE_p_Mezzanine__IOException swig_types[14]
#define SWIGTYPE_p_Mezzanine__IOReadException swig_types[15]
#define SWIGTYPE_p_Mezzanine__IOWriteException swig_types[16]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException swig_types[17]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityException swig_types[18]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException swig_types[19]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException swig_types[20]
#define SWIGTYPE_p_Mezzanine__InternalException swig_types[21]
#define SWIGTYPE_p_Mezzanine__InvalidAssignment swig_types[22]
#define SWIGTYPE_p_Mezzanine__InvalidStateException swig_types[23]
#define SWIGTYPE_p_Mezzanine__InvalidVersionException swig_types[24]
#define SWIGTYPE_p_Mezzanine__LineSegment2D swig_types[25]
#define SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad swig_types[26]
#define SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection swig_types[27]
#define SWIGTYPE_p_Mezzanine__MemoryManagementException swig_types[28]
#define SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException swig_types[29]
#define SWIGTYPE_p_Mezzanine__NetworkException swig_types[30]
#define SWIGTYPE_p_Mezzanine__NetworkNotFoundException swig_types[31]
#define SWIGTYPE_p_Mezzanine__NetworkPermissionException swig_types[32]
#define SWIGTYPE_p_Mezzanine__NetworkReadException swig_types[33]
#define SWIGTYPE_p_Mezzanine__NetworkURLException swig_types[34]
#define SWIGTYPE_p_Mezzanine__NetworkWriteException swig_types[35]
#define SWIGTYPE_p_Mezzanine__NotImplementedException swig_types[36]
#define SWIGTYPE_p_Mezzanine__OutOfMemoryException swig_types[37]
#define SWIGTYPE_p_Mezzanine__ParametersCastException swig_types[38]
#define SWIGTYPE_p_Mezzanine__ParametersException swig_types[39]
#define SWIGTYPE_p_Mezzanine__ParametersRangeException swig_types[40]
#define SWIGTYPE_p_Mezzanine__Plane swig_types[41]
#define SWIGTYPE_p_Mezzanine__Quaternion swig_types[42]
#define SWIGTYPE_p_Mezzanine__Ray swig_types[43]
#define SWIGTYPE_p_Mezzanine__RenderingAPIException swig_types[44]
#define SWIGTYPE_p_Mezzanine__RuntimeAssertionException swig_types[45]
#define SWIGTYPE_p_Mezzanine__ScriptException swig_types[46]
#define SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException swig_types[47]
#define SWIGTYPE_p_Mezzanine__ScriptLuaException swig_types[48]
#define SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException swig_types[49]
#define SWIGTYPE_p_Mezzanine__ScriptLuaYieldException swig_types[50]
#define SWIGTYPE_p_Mezzanine__Sphere swig_types[51]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorException swig_types[52]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException swig_types[53]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException swig_types[54]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException swig_types[55]
#define SWIGTYPE_p_Mezzanine__Threading__RawFile swig_types[56]
#define SWIGTYPE_p_Mezzanine__Vector2 swig_types[57]
#define SWIGTYPE_p_Mezzanine__Vector2LengthCompare swig_types[58]
#define SWIGTYPE_p_Mezzanine__Vector3 swig_types[59]
#define SWIGTYPE_p_Mezzanine__Vector3LengthCompare swig_types[60]
#define SWIGTYPE_p_Ogre__Plane swig_types[61]
#define SWIGTYPE_p_Ogre__Vector2 swig_types[62]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[63]
#define SWIGTYPE_p_RayTestResult swig_types[64]
#define SWIGTYPE_p_SDL_Event swig_types[65]
#define SWIGTYPE_p_XML__Node swig_types[66]
#define SWIGTYPE_p_bool swig_types[67]
#define SWIGTYPE_p_btVector3 swig_types[68]
#define SWIGTYPE_p_char swig_types[69]
#define SWIGTYPE_p_double swig_types[70]
#define SWIGTYPE_p_float swig_types[71]
#define SWIGTYPE_p_int swig_types[72]
#define SWIGTYPE_p_long_long swig_types[73]
#define SWIGTYPE_p_short swig_types[74]
#define SWIGTYPE_p_signed_char swig_types[75]
#define SWIGTYPE_p_std__exception swig_types[76]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[77]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[78]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__LineSegment2D_t swig_types[79]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__LineSegment3D_t swig_types[80]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t swig_types[81]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector2_t swig_types[82]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t swig_types[83]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[84]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[85]
#define SWIGTYPE_p_std__string swig_types[86]
#define SWIGTYPE_p_std__stringstream swig_types[87]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[88]
#define SWIGTYPE_p_std__wstring swig_types[89]
#define SWIGTYPE_p_unsigned_char swig_types[90]
#define SWIGTYPE_p_unsigned_int swig_types[91]
#define SWIGTYPE_p_unsigned_long swig_types[92]
#define SWIGTYPE_p_unsigned_long_long swig_types[93]
#define SWIGTYPE_p_unsigned_short swig_types[94]
static swig_type_info *swig_types[96];
static swig_module_info swig_module = {swig_types, 95, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "MezzanineMathTools"
#define SWIG_init      luaopen_MezzanineMathTools
#define SWIG_init_user luaopen_MezzanineMathTools_user

#define SWIG_LUACODE   luaopen_MezzanineMathTools_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"
        #include "SDL.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        #ifdef GetExceptionCode
        #undef GetExceptionCode
        #endif

        using namespace Mezzanine;
        //using namespace Mezzanine::Threading;
        //using namespace Mezzanine::Physics;

        // Fix cross module type-usage
        namespace Mezzanine
        {
            namespace Physics
            {
                typedef Mezzanine::Vector3 Vector3;
            }
            namespace Threading
            {

            }
            typedef Threading::RawFile RawFile;
        }
    

#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <deque>
#include <stdexcept>


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        using namespace Mezzanine;
        using namespace Mezzanine::MathTools;
    
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_string_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_string_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_string_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, { "string", swig_std_string_cls_methods, swig_std_string_cls_attributes, swig_std_string_cls_constants }, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_Vector2_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::X",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_X_set",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::X",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_X_get",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Y",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Y_set",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Y",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Y_get",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",0,0)
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",2,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Ogre::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::Vector2()\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Real const &)\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector2::Vector2(Ogre::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_GetOgreVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetOgreVector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::GetOgreVector2",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_GetOgreVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->GetOgreVector2();
  {
    Ogre::Vector2 * resultptr = new Ogre::Vector2((const Ogre::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ExtractOgreVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ExtractOgreVector2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ExtractOgreVector2",1,"Mezzanine::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ExtractOgreVector2",2,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ExtractOgreVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_ExtractOgreVector2",2,SWIGTYPE_p_Ogre__Vector2);
  }
  
  (arg1)->ExtractOgreVector2((Ogre::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Unit_X",0,0)
  result = Mezzanine::Vector2::Unit_X();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Unit_Y",0,0)
  result = Mezzanine::Vector2::Unit_Y();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Neg_Unit_X",0,0)
  result = Mezzanine::Vector2::Neg_Unit_X();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector2::Neg_Unit_Y();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SetIdentity",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SetIdentity",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::SetValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SetValues",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::IsZero",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_IsZero",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator ==((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",2,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator ==((Ogre::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___eq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator ==(Mezzanine::Vector2 const &) const\n"
    "    Mezzanine::Vector2::operator ==(Ogre::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator <=",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator <=",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___le",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___le",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator <=((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator -",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator *",1,"Mezzanine::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator /",1,"Mezzanine::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator +",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator +",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator +((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator -",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator -",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator -((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator *",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator *",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector2::operator *(Mezzanine::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator /",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator /",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector2::operator /(Mezzanine::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::CrossProduct",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::CrossProduct",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->CrossProduct((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::DotProduct",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::DotProduct",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->DotProduct((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Distance",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Distance",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Distance",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Distance",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->Distance((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SquaredDistance",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::SquaredDistance",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->SquaredDistance((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Length",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Length",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SquaredLength",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Perpendicular",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Reflect",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Reflect",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Reflect",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Reflect",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->Reflect((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Normalize",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Normalize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Vector2 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::GetNormal",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_AngleTo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::AngleTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::AngleTo",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::AngleTo",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleTo",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleTo",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->AngleTo((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_AngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::AngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::AngleBetween",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::AngleBetween",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleBetween",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleBetween",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->AngleBetween((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ProtoSerialize",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector2_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Vector2 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ProtoDeSerialize",1,"Mezzanine::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector2_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SerializableName",0,0)
  result = Mezzanine::Vector2::SerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_Vector2_methods[] = {
    {"GetOgreVector2", _wrap_Vector2_GetOgreVector2}, 
    {"ExtractOgreVector2", _wrap_Vector2_ExtractOgreVector2}, 
    {"SetIdentity", _wrap_Vector2_SetIdentity}, 
    {"SetValues", _wrap_Vector2_SetValues}, 
    {"IsZero", _wrap_Vector2_IsZero}, 
    {"__eq", _wrap_Vector2___eq}, 
    {"__le", _wrap_Vector2___le}, 
    {"__unm", _wrap_Vector2___unm}, 
    {"__add", _wrap_Vector2___add}, 
    {"__sub", _wrap_Vector2___sub}, 
    {"__mul", _wrap_Vector2___mul}, 
    {"__div", _wrap_Vector2___div}, 
    {"CrossProduct", _wrap_Vector2_CrossProduct}, 
    {"DotProduct", _wrap_Vector2_DotProduct}, 
    {"Distance", _wrap_Vector2_Distance}, 
    {"SquaredDistance", _wrap_Vector2_SquaredDistance}, 
    {"Length", _wrap_Vector2_Length}, 
    {"SquaredLength", _wrap_Vector2_SquaredLength}, 
    {"Perpendicular", _wrap_Vector2_Perpendicular}, 
    {"Reflect", _wrap_Vector2_Reflect}, 
    {"Normalize", _wrap_Vector2_Normalize}, 
    {"GetNormal", _wrap_Vector2_GetNormal}, 
    {"AngleTo", _wrap_Vector2_AngleTo}, 
    {"AngleBetween", _wrap_Vector2_AngleBetween}, 
    {"ProtoSerialize", _wrap_Vector2_ProtoSerialize}, 
    {"ProtoDeSerialize", _wrap_Vector2_ProtoDeSerialize}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector2_attributes[] = {
    { "X", _wrap_Vector2_X_get, _wrap_Vector2_X_set},
    { "Y", _wrap_Vector2_Y_get, _wrap_Vector2_Y_set},
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector2_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_Vector2_cls_methods[] = {
    {"Unit_X", _wrap_Vector2_Unit_X}, 
    {"Unit_Y", _wrap_Vector2_Unit_Y}, 
    {"Neg_Unit_X", _wrap_Vector2_Neg_Unit_X}, 
    {"Neg_Unit_Y", _wrap_Vector2_Neg_Unit_Y}, 
    {"SerializableName", _wrap_Vector2_SerializableName}, 
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_Vector2_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_Vector2_bases[] = {0};
static const char *swig_Mezzanine_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_Vector2 = { "Vector2", &SWIGTYPE_p_Mezzanine__Vector2,_wrap_new_Vector2, swig_delete_Vector2, swig_Mezzanine_Vector2_methods, swig_Mezzanine_Vector2_attributes, { "Vector2", swig_Mezzanine_Vector2_cls_methods, swig_Mezzanine_Vector2_cls_attributes, swig_Mezzanine_Vector2_cls_constants }, swig_Mezzanine_Vector2_bases, swig_Mezzanine_Vector2_base_names };

static int _wrap_Vector2LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2LengthCompare *arg1 = (Mezzanine::Vector2LengthCompare *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",1,"Mezzanine::Vector2LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",2,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",3,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2LengthCompare,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector2LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2LengthCompare const *)arg1)->operator ()((Mezzanine::Vector2 const &)*arg2,(Mezzanine::Vector2 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2LengthCompare::Vector2LengthCompare",0,0)
  result = (Mezzanine::Vector2LengthCompare *)new Mezzanine::Vector2LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2LengthCompare(void *obj) {
Mezzanine::Vector2LengthCompare *arg1 = (Mezzanine::Vector2LengthCompare *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_Vector2LengthCompare_methods[] = {
    {"__call", _wrap_Vector2LengthCompare___call}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector2LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector2LengthCompare_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_Vector2LengthCompare_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_Vector2LengthCompare_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_Vector2LengthCompare_bases[] = {0};
static const char *swig_Mezzanine_Vector2LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_Vector2LengthCompare = { "Vector2LengthCompare", &SWIGTYPE_p_Mezzanine__Vector2LengthCompare,_wrap_new_Vector2LengthCompare, swig_delete_Vector2LengthCompare, swig_Mezzanine_Vector2LengthCompare_methods, swig_Mezzanine_Vector2LengthCompare_attributes, { "Vector2LengthCompare", swig_Mezzanine_Vector2LengthCompare_cls_methods, swig_Mezzanine_Vector2LengthCompare_cls_attributes, swig_Mezzanine_Vector2LengthCompare_cls_constants }, swig_Mezzanine_Vector2LengthCompare_bases, swig_Mezzanine_Vector2LengthCompare_base_names };

static int _wrap_Exception_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Exception::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::GetExceptionCode",1,"Mezzanine::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::Exception const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_GetExceptionTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::ConstString *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Exception::GetExceptionTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::GetExceptionTypeName",1,"Mezzanine::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_GetExceptionTypeName",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = (Mezzanine::ConstString *) &((Mezzanine::Exception const *)arg1)->GetExceptionTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_GetFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::ConstString *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Exception::GetFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::GetFunction",1,"Mezzanine::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_GetFunction",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = (Mezzanine::ConstString *) &((Mezzanine::Exception const *)arg1)->GetFunction();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_GetFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::ConstString *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Exception::GetFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::GetFile",1,"Mezzanine::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_GetFile",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = (Mezzanine::ConstString *) &((Mezzanine::Exception const *)arg1)->GetFile();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_GetLine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::Whole *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Exception::GetLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::GetLine",1,"Mezzanine::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_GetLine",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = (Mezzanine::Whole *) &((Mezzanine::Exception const *)arg1)->GetLine();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_GetCompleteMessage(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Exception::GetCompleteMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::GetCompleteMessage",1,"Mezzanine::Exception const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_GetCompleteMessage",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = ((Mezzanine::Exception const *)arg1)->GetCompleteMessage();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exception_what(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Exception *arg1 = (Mezzanine::Exception *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Exception::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Exception::what",1,"Mezzanine::Exception *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Exception,0))){
    SWIG_fail_ptr("Exception_what",1,SWIGTYPE_p_Mezzanine__Exception);
  }
  
  result = (arg1)->what();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Exception(void *obj) {
Mezzanine::Exception *arg1 = (Mezzanine::Exception *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_Exception_methods[] = {
    {"GetExceptionCode", _wrap_Exception_GetExceptionCode}, 
    {"GetExceptionTypeName", _wrap_Exception_GetExceptionTypeName}, 
    {"GetFunction", _wrap_Exception_GetFunction}, 
    {"GetFile", _wrap_Exception_GetFile}, 
    {"GetLine", _wrap_Exception_GetLine}, 
    {"GetCompleteMessage", _wrap_Exception_GetCompleteMessage}, 
    {"what", _wrap_Exception_what}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_Exception_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_Exception_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_Exception_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_Exception_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("IO_EXCEPTION", Mezzanine::Exception::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_EXCEPTION", Mezzanine::Exception::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_READ_EXCEPTION", Mezzanine::Exception::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_WRITE_EXCEPTION", Mezzanine::Exception::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::Exception::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_PERMISSION_EXCEPTION", Mezzanine::Exception::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_READ_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_EXCEPTION", Mezzanine::Exception::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_READ_EXCEPTION", Mezzanine::Exception::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_WRITE_EXCEPTION", Mezzanine::Exception::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::Exception::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_URL_EXCEPTION", Mezzanine::Exception::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::Exception::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_WRITE_EXCEPTION", Mezzanine::Exception::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_READ_EXCEPTION", Mezzanine::Exception::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_EXCEPTION", Mezzanine::Exception::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_INVALID_EXCEPTION", Mezzanine::Exception::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::Exception::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::Exception::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_EXCEPTION", Mezzanine::Exception::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::Exception::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::Exception::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION", Mezzanine::Exception::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_EXCEPTION", Mezzanine::Exception::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_CAST_EXCEPTION", Mezzanine::Exception::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_RANGE_EXCEPTION", Mezzanine::Exception::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ARITHMETIC_EXCEPTION", Mezzanine::Exception::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_VERSION_EXCEPTION", Mezzanine::Exception::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_STATE_EXCEPTION", Mezzanine::Exception::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RENDERINGAPI_EXCEPTION", Mezzanine::Exception::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RT_ASSERTION_EXCEPTION", Mezzanine::Exception::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INTERNAL_EXCEPTION", Mezzanine::Exception::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("NOT_IMPLEMENTED_EXCEPTION", Mezzanine::Exception::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_ASSIGNMENT", Mezzanine::Exception::INVALID_ASSIGNMENT)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_Exception_bases[] = {0};
static const char *swig_Mezzanine_Exception_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_Exception = { "Exception", &SWIGTYPE_p_Mezzanine__Exception,0, swig_delete_Exception, swig_Mezzanine_Exception_methods, swig_Mezzanine_Exception_attributes, { "Exception", swig_Mezzanine_Exception_cls_methods, swig_Mezzanine_Exception_cls_attributes, swig_Mezzanine_Exception_cls_constants }, swig_Mezzanine_Exception_bases, swig_Mezzanine_Exception_base_names };

static int _wrap_new_IOException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::IOException::IOException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IOException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOException *arg1 = (Mezzanine::IOException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOException::GetExceptionCode",1,"Mezzanine::IOException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOException,0))){
    SWIG_fail_ptr("IOException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOException(void *obj) {
Mezzanine::IOException *arg1 = (Mezzanine::IOException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_IOException_methods[] = {
    {"GetExceptionCode", _wrap_IOException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_IOException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_IOException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_IOException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_IOException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_IOException_bases[] = {0,0};
static const char *swig_Mezzanine_IOException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_IOException = { "IOException", &SWIGTYPE_p_Mezzanine__IOException,_wrap_new_IOException, swig_delete_IOException, swig_Mezzanine_IOException_methods, swig_Mezzanine_IOException_attributes, { "IOException", swig_Mezzanine_IOException_cls_methods, swig_Mezzanine_IOException_cls_attributes, swig_Mezzanine_IOException_cls_constants }, swig_Mezzanine_IOException_bases, swig_Mezzanine_IOException_base_names };

static int _wrap_new_FileException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::FileException::FileException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileException *arg1 = (Mezzanine::FileException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileException::GetExceptionCode",1,"Mezzanine::FileException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileException,0))){
    SWIG_fail_ptr("FileException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileException(void *obj) {
Mezzanine::FileException *arg1 = (Mezzanine::FileException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_FileException_methods[] = {
    {"GetExceptionCode", _wrap_FileException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_FileException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_FileException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_FileException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_FileException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_FileException_bases[] = {0,0};
static const char *swig_Mezzanine_FileException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_Mezzanine_FileException = { "FileException", &SWIGTYPE_p_Mezzanine__FileException,_wrap_new_FileException, swig_delete_FileException, swig_Mezzanine_FileException_methods, swig_Mezzanine_FileException_attributes, { "FileException", swig_Mezzanine_FileException_cls_methods, swig_Mezzanine_FileException_cls_attributes, swig_Mezzanine_FileException_cls_constants }, swig_Mezzanine_FileException_bases, swig_Mezzanine_FileException_base_names };

static int _wrap_new_FileReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileReadException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::GetExceptionCode",1,"Mezzanine::FileReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileReadException,0))){
    SWIG_fail_ptr("FileReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileReadException(void *obj) {
Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_FileReadException_methods[] = {
    {"GetExceptionCode", _wrap_FileReadException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_FileReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_FileReadException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_FileReadException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_FileReadException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_FileReadException_bases[] = {0,0};
static const char *swig_Mezzanine_FileReadException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_Mezzanine_FileReadException = { "FileReadException", &SWIGTYPE_p_Mezzanine__FileReadException,_wrap_new_FileReadException, swig_delete_FileReadException, swig_Mezzanine_FileReadException_methods, swig_Mezzanine_FileReadException_attributes, { "FileReadException", swig_Mezzanine_FileReadException_cls_methods, swig_Mezzanine_FileReadException_cls_attributes, swig_Mezzanine_FileReadException_cls_constants }, swig_Mezzanine_FileReadException_bases, swig_Mezzanine_FileReadException_base_names };

static int _wrap_new_FileWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileWriteException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::GetExceptionCode",1,"Mezzanine::FileWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileWriteException,0))){
    SWIG_fail_ptr("FileWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileWriteException(void *obj) {
Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_FileWriteException_methods[] = {
    {"GetExceptionCode", _wrap_FileWriteException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_FileWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_FileWriteException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_FileWriteException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_FileWriteException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_FileWriteException_bases[] = {0,0};
static const char *swig_Mezzanine_FileWriteException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_Mezzanine_FileWriteException = { "FileWriteException", &SWIGTYPE_p_Mezzanine__FileWriteException,_wrap_new_FileWriteException, swig_delete_FileWriteException, swig_Mezzanine_FileWriteException_methods, swig_Mezzanine_FileWriteException_attributes, { "FileWriteException", swig_Mezzanine_FileWriteException_cls_methods, swig_Mezzanine_FileWriteException_cls_attributes, swig_Mezzanine_FileWriteException_cls_constants }, swig_Mezzanine_FileWriteException_bases, swig_Mezzanine_FileWriteException_base_names };

static int _wrap_new_FileNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FileNotFoundException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::GetExceptionCode",1,"Mezzanine::FileNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileNotFoundException,0))){
    SWIG_fail_ptr("FileNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileNotFoundException(void *obj) {
Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_FileNotFoundException_methods[] = {
    {"GetExceptionCode", _wrap_FileNotFoundException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_FileNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_FileNotFoundException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_FileNotFoundException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_FileNotFoundException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_FileNotFoundException_bases[] = {0,0};
static const char *swig_Mezzanine_FileNotFoundException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_Mezzanine_FileNotFoundException = { "FileNotFoundException", &SWIGTYPE_p_Mezzanine__FileNotFoundException,_wrap_new_FileNotFoundException, swig_delete_FileNotFoundException, swig_Mezzanine_FileNotFoundException_methods, swig_Mezzanine_FileNotFoundException_attributes, { "FileNotFoundException", swig_Mezzanine_FileNotFoundException_cls_methods, swig_Mezzanine_FileNotFoundException_cls_attributes, swig_Mezzanine_FileNotFoundException_cls_constants }, swig_Mezzanine_FileNotFoundException_bases, swig_Mezzanine_FileNotFoundException_base_names };

static int _wrap_new_FilePermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FilePermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FilePermissionException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FilePermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FilePermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::GetExceptionCode",1,"Mezzanine::FilePermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FilePermissionException,0))){
    SWIG_fail_ptr("FilePermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FilePermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FilePermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilePermissionException(void *obj) {
Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_FilePermissionException_methods[] = {
    {"GetExceptionCode", _wrap_FilePermissionException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_FilePermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_FilePermissionException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_FilePermissionException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_FilePermissionException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_FilePermissionException_bases[] = {0,0};
static const char *swig_Mezzanine_FilePermissionException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_Mezzanine_FilePermissionException = { "FilePermissionException", &SWIGTYPE_p_Mezzanine__FilePermissionException,_wrap_new_FilePermissionException, swig_delete_FilePermissionException, swig_Mezzanine_FilePermissionException_methods, swig_Mezzanine_FilePermissionException_attributes, { "FilePermissionException", swig_Mezzanine_FilePermissionException_cls_methods, swig_Mezzanine_FilePermissionException_cls_attributes, swig_Mezzanine_FilePermissionException_cls_constants }, swig_Mezzanine_FilePermissionException_bases, swig_Mezzanine_FilePermissionException_base_names };

static int _wrap_new_DirectoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DirectoryException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::GetExceptionCode",1,"Mezzanine::DirectoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryException,0))){
    SWIG_fail_ptr("DirectoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryException(void *obj) {
Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_DirectoryException_methods[] = {
    {"GetExceptionCode", _wrap_DirectoryException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_DirectoryException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_DirectoryException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_DirectoryException_bases[] = {0,0};
static const char *swig_Mezzanine_DirectoryException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_Mezzanine_DirectoryException = { "DirectoryException", &SWIGTYPE_p_Mezzanine__DirectoryException,_wrap_new_DirectoryException, swig_delete_DirectoryException, swig_Mezzanine_DirectoryException_methods, swig_Mezzanine_DirectoryException_attributes, { "DirectoryException", swig_Mezzanine_DirectoryException_cls_methods, swig_Mezzanine_DirectoryException_cls_attributes, swig_Mezzanine_DirectoryException_cls_constants }, swig_Mezzanine_DirectoryException_bases, swig_Mezzanine_DirectoryException_base_names };

static int _wrap_new_DirectoryReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DirectoryReadException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::GetExceptionCode",1,"Mezzanine::DirectoryReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryReadException,0))){
    SWIG_fail_ptr("DirectoryReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryReadException(void *obj) {
Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_DirectoryReadException_methods[] = {
    {"GetExceptionCode", _wrap_DirectoryReadException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryReadException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_DirectoryReadException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_DirectoryReadException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_DirectoryReadException_bases[] = {0,0};
static const char *swig_Mezzanine_DirectoryReadException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_Mezzanine_DirectoryReadException = { "DirectoryReadException", &SWIGTYPE_p_Mezzanine__DirectoryReadException,_wrap_new_DirectoryReadException, swig_delete_DirectoryReadException, swig_Mezzanine_DirectoryReadException_methods, swig_Mezzanine_DirectoryReadException_attributes, { "DirectoryReadException", swig_Mezzanine_DirectoryReadException_cls_methods, swig_Mezzanine_DirectoryReadException_cls_attributes, swig_Mezzanine_DirectoryReadException_cls_constants }, swig_Mezzanine_DirectoryReadException_bases, swig_Mezzanine_DirectoryReadException_base_names };

static int _wrap_new_DirectoryWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DirectoryWriteException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::GetExceptionCode",1,"Mezzanine::DirectoryWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryWriteException,0))){
    SWIG_fail_ptr("DirectoryWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryWriteException(void *obj) {
Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_DirectoryWriteException_methods[] = {
    {"GetExceptionCode", _wrap_DirectoryWriteException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryWriteException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_DirectoryWriteException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_DirectoryWriteException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_DirectoryWriteException_bases[] = {0,0};
static const char *swig_Mezzanine_DirectoryWriteException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_Mezzanine_DirectoryWriteException = { "DirectoryWriteException", &SWIGTYPE_p_Mezzanine__DirectoryWriteException,_wrap_new_DirectoryWriteException, swig_delete_DirectoryWriteException, swig_Mezzanine_DirectoryWriteException_methods, swig_Mezzanine_DirectoryWriteException_attributes, { "DirectoryWriteException", swig_Mezzanine_DirectoryWriteException_cls_methods, swig_Mezzanine_DirectoryWriteException_cls_attributes, swig_Mezzanine_DirectoryWriteException_cls_constants }, swig_Mezzanine_DirectoryWriteException_bases, swig_Mezzanine_DirectoryWriteException_base_names };

static int _wrap_new_DirectoryNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DirectoryNotFoundException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,"Mezzanine::DirectoryNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,0))){
    SWIG_fail_ptr("DirectoryNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryNotFoundException(void *obj) {
Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_DirectoryNotFoundException_methods[] = {
    {"GetExceptionCode", _wrap_DirectoryNotFoundException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryNotFoundException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_DirectoryNotFoundException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_DirectoryNotFoundException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_DirectoryNotFoundException_bases[] = {0,0};
static const char *swig_Mezzanine_DirectoryNotFoundException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_Mezzanine_DirectoryNotFoundException = { "DirectoryNotFoundException", &SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,_wrap_new_DirectoryNotFoundException, swig_delete_DirectoryNotFoundException, swig_Mezzanine_DirectoryNotFoundException_methods, swig_Mezzanine_DirectoryNotFoundException_attributes, { "DirectoryNotFoundException", swig_Mezzanine_DirectoryNotFoundException_cls_methods, swig_Mezzanine_DirectoryNotFoundException_cls_attributes, swig_Mezzanine_DirectoryNotFoundException_cls_constants }, swig_Mezzanine_DirectoryNotFoundException_bases, swig_Mezzanine_DirectoryNotFoundException_base_names };

static int _wrap_new_DirectoryPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_DirectoryPermissionException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,"Mezzanine::DirectoryPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,0))){
    SWIG_fail_ptr("DirectoryPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryPermissionException(void *obj) {
Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_DirectoryPermissionException_methods[] = {
    {"GetExceptionCode", _wrap_DirectoryPermissionException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_DirectoryPermissionException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_DirectoryPermissionException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_DirectoryPermissionException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_DirectoryPermissionException_bases[] = {0,0};
static const char *swig_Mezzanine_DirectoryPermissionException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_Mezzanine_DirectoryPermissionException = { "DirectoryPermissionException", &SWIGTYPE_p_Mezzanine__DirectoryPermissionException,_wrap_new_DirectoryPermissionException, swig_delete_DirectoryPermissionException, swig_Mezzanine_DirectoryPermissionException_methods, swig_Mezzanine_DirectoryPermissionException_attributes, { "DirectoryPermissionException", swig_Mezzanine_DirectoryPermissionException_cls_methods, swig_Mezzanine_DirectoryPermissionException_cls_attributes, swig_Mezzanine_DirectoryPermissionException_cls_constants }, swig_Mezzanine_DirectoryPermissionException_bases, swig_Mezzanine_DirectoryPermissionException_base_names };

static int _wrap_new_NetworkException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetworkException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::GetExceptionCode",1,"Mezzanine::NetworkException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkException,0))){
    SWIG_fail_ptr("NetworkException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkException(void *obj) {
Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NetworkException_methods[] = {
    {"GetExceptionCode", _wrap_NetworkException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NetworkException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NetworkException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NetworkException_bases[] = {0,0};
static const char *swig_Mezzanine_NetworkException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_Mezzanine_NetworkException = { "NetworkException", &SWIGTYPE_p_Mezzanine__NetworkException,_wrap_new_NetworkException, swig_delete_NetworkException, swig_Mezzanine_NetworkException_methods, swig_Mezzanine_NetworkException_attributes, { "NetworkException", swig_Mezzanine_NetworkException_cls_methods, swig_Mezzanine_NetworkException_cls_attributes, swig_Mezzanine_NetworkException_cls_constants }, swig_Mezzanine_NetworkException_bases, swig_Mezzanine_NetworkException_base_names };

static int _wrap_new_NetworkReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetworkReadException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::GetExceptionCode",1,"Mezzanine::NetworkReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkReadException,0))){
    SWIG_fail_ptr("NetworkReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkReadException(void *obj) {
Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NetworkReadException_methods[] = {
    {"GetExceptionCode", _wrap_NetworkReadException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkReadException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NetworkReadException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NetworkReadException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NetworkReadException_bases[] = {0,0};
static const char *swig_Mezzanine_NetworkReadException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_Mezzanine_NetworkReadException = { "NetworkReadException", &SWIGTYPE_p_Mezzanine__NetworkReadException,_wrap_new_NetworkReadException, swig_delete_NetworkReadException, swig_Mezzanine_NetworkReadException_methods, swig_Mezzanine_NetworkReadException_attributes, { "NetworkReadException", swig_Mezzanine_NetworkReadException_cls_methods, swig_Mezzanine_NetworkReadException_cls_attributes, swig_Mezzanine_NetworkReadException_cls_constants }, swig_Mezzanine_NetworkReadException_bases, swig_Mezzanine_NetworkReadException_base_names };

static int _wrap_new_NetworkWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetworkWriteException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::GetExceptionCode",1,"Mezzanine::NetworkWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkWriteException,0))){
    SWIG_fail_ptr("NetworkWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkWriteException(void *obj) {
Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NetworkWriteException_methods[] = {
    {"GetExceptionCode", _wrap_NetworkWriteException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkWriteException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NetworkWriteException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NetworkWriteException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NetworkWriteException_bases[] = {0,0};
static const char *swig_Mezzanine_NetworkWriteException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_Mezzanine_NetworkWriteException = { "NetworkWriteException", &SWIGTYPE_p_Mezzanine__NetworkWriteException,_wrap_new_NetworkWriteException, swig_delete_NetworkWriteException, swig_Mezzanine_NetworkWriteException_methods, swig_Mezzanine_NetworkWriteException_attributes, { "NetworkWriteException", swig_Mezzanine_NetworkWriteException_cls_methods, swig_Mezzanine_NetworkWriteException_cls_attributes, swig_Mezzanine_NetworkWriteException_cls_constants }, swig_Mezzanine_NetworkWriteException_bases, swig_Mezzanine_NetworkWriteException_base_names };

static int _wrap_new_NetworkNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetworkNotFoundException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,"Mezzanine::NetworkNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,0))){
    SWIG_fail_ptr("NetworkNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkNotFoundException(void *obj) {
Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NetworkNotFoundException_methods[] = {
    {"GetExceptionCode", _wrap_NetworkNotFoundException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkNotFoundException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NetworkNotFoundException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NetworkNotFoundException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NetworkNotFoundException_bases[] = {0,0};
static const char *swig_Mezzanine_NetworkNotFoundException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_Mezzanine_NetworkNotFoundException = { "NetworkNotFoundException", &SWIGTYPE_p_Mezzanine__NetworkNotFoundException,_wrap_new_NetworkNotFoundException, swig_delete_NetworkNotFoundException, swig_Mezzanine_NetworkNotFoundException_methods, swig_Mezzanine_NetworkNotFoundException_attributes, { "NetworkNotFoundException", swig_Mezzanine_NetworkNotFoundException_cls_methods, swig_Mezzanine_NetworkNotFoundException_cls_attributes, swig_Mezzanine_NetworkNotFoundException_cls_constants }, swig_Mezzanine_NetworkNotFoundException_bases, swig_Mezzanine_NetworkNotFoundException_base_names };

static int _wrap_new_NetworkURLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkURLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetworkURLException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkURLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkURLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::GetExceptionCode",1,"Mezzanine::NetworkURLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkURLException,0))){
    SWIG_fail_ptr("NetworkURLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkURLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkURLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkURLException(void *obj) {
Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NetworkURLException_methods[] = {
    {"GetExceptionCode", _wrap_NetworkURLException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkURLException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkURLException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NetworkURLException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NetworkURLException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NetworkURLException_bases[] = {0,0};
static const char *swig_Mezzanine_NetworkURLException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_Mezzanine_NetworkURLException = { "NetworkURLException", &SWIGTYPE_p_Mezzanine__NetworkURLException,_wrap_new_NetworkURLException, swig_delete_NetworkURLException, swig_Mezzanine_NetworkURLException_methods, swig_Mezzanine_NetworkURLException_attributes, { "NetworkURLException", swig_Mezzanine_NetworkURLException_cls_methods, swig_Mezzanine_NetworkURLException_cls_attributes, swig_Mezzanine_NetworkURLException_cls_constants }, swig_Mezzanine_NetworkURLException_bases, swig_Mezzanine_NetworkURLException_base_names };

static int _wrap_new_NetworkPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NetworkPermissionException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::GetExceptionCode",1,"Mezzanine::NetworkPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkPermissionException,0))){
    SWIG_fail_ptr("NetworkPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkPermissionException(void *obj) {
Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NetworkPermissionException_methods[] = {
    {"GetExceptionCode", _wrap_NetworkPermissionException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NetworkPermissionException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NetworkPermissionException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NetworkPermissionException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NetworkPermissionException_bases[] = {0,0};
static const char *swig_Mezzanine_NetworkPermissionException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_Mezzanine_NetworkPermissionException = { "NetworkPermissionException", &SWIGTYPE_p_Mezzanine__NetworkPermissionException,_wrap_new_NetworkPermissionException, swig_delete_NetworkPermissionException, swig_Mezzanine_NetworkPermissionException_methods, swig_Mezzanine_NetworkPermissionException_attributes, { "NetworkPermissionException", swig_Mezzanine_NetworkPermissionException_cls_methods, swig_Mezzanine_NetworkPermissionException_cls_attributes, swig_Mezzanine_NetworkPermissionException_cls_constants }, swig_Mezzanine_NetworkPermissionException_bases, swig_Mezzanine_NetworkPermissionException_base_names };

static int _wrap_new_IOWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IOWriteException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::GetExceptionCode",1,"Mezzanine::IOWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOWriteException,0))){
    SWIG_fail_ptr("IOWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOWriteException(void *obj) {
Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_IOWriteException_methods[] = {
    {"GetExceptionCode", _wrap_IOWriteException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_IOWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_IOWriteException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_IOWriteException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_IOWriteException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_IOWriteException_bases[] = {0,0};
static const char *swig_Mezzanine_IOWriteException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_Mezzanine_IOWriteException = { "IOWriteException", &SWIGTYPE_p_Mezzanine__IOWriteException,_wrap_new_IOWriteException, swig_delete_IOWriteException, swig_Mezzanine_IOWriteException_methods, swig_Mezzanine_IOWriteException_attributes, { "IOWriteException", swig_Mezzanine_IOWriteException_cls_methods, swig_Mezzanine_IOWriteException_cls_attributes, swig_Mezzanine_IOWriteException_cls_constants }, swig_Mezzanine_IOWriteException_bases, swig_Mezzanine_IOWriteException_base_names };

static int _wrap_new_IOReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_IOReadException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::GetExceptionCode",1,"Mezzanine::IOReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOReadException,0))){
    SWIG_fail_ptr("IOReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOReadException(void *obj) {
Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_IOReadException_methods[] = {
    {"GetExceptionCode", _wrap_IOReadException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_IOReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_IOReadException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_IOReadException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_IOReadException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_IOReadException_bases[] = {0,0};
static const char *swig_Mezzanine_IOReadException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_Mezzanine_IOReadException = { "IOReadException", &SWIGTYPE_p_Mezzanine__IOReadException,_wrap_new_IOReadException, swig_delete_IOReadException, swig_Mezzanine_IOReadException_methods, swig_Mezzanine_IOReadException_attributes, { "IOReadException", swig_Mezzanine_IOReadException_cls_methods, swig_Mezzanine_IOReadException_cls_attributes, swig_Mezzanine_IOReadException_cls_constants }, swig_Mezzanine_IOReadException_bases, swig_Mezzanine_IOReadException_base_names };

static int _wrap_new_InstanceIdentityException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InstanceIdentityException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::GetExceptionCode",1,"Mezzanine::InstanceIdentityException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityException,0))){
    SWIG_fail_ptr("InstanceIdentityException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityException(void *obj) {
Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InstanceIdentityException_methods[] = {
    {"GetExceptionCode", _wrap_InstanceIdentityException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InstanceIdentityException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InstanceIdentityException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InstanceIdentityException_bases[] = {0,0};
static const char *swig_Mezzanine_InstanceIdentityException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_InstanceIdentityException = { "InstanceIdentityException", &SWIGTYPE_p_Mezzanine__InstanceIdentityException,_wrap_new_InstanceIdentityException, swig_delete_InstanceIdentityException, swig_Mezzanine_InstanceIdentityException_methods, swig_Mezzanine_InstanceIdentityException_attributes, { "InstanceIdentityException", swig_Mezzanine_InstanceIdentityException_cls_methods, swig_Mezzanine_InstanceIdentityException_cls_attributes, swig_Mezzanine_InstanceIdentityException_cls_constants }, swig_Mezzanine_InstanceIdentityException_bases, swig_Mezzanine_InstanceIdentityException_base_names };

static int _wrap_new_InstanceIdentityInvalidException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityInvalidException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InstanceIdentityInvalidException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityInvalidException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityInvalidException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,"Mezzanine::InstanceIdentityInvalidException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,0))){
    SWIG_fail_ptr("InstanceIdentityInvalidException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityInvalidException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityInvalidException(void *obj) {
Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InstanceIdentityInvalidException_methods[] = {
    {"GetExceptionCode", _wrap_InstanceIdentityInvalidException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityInvalidException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityInvalidException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InstanceIdentityInvalidException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InstanceIdentityInvalidException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InstanceIdentityInvalidException_bases[] = {0,0};
static const char *swig_Mezzanine_InstanceIdentityInvalidException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_Mezzanine_InstanceIdentityInvalidException = { "InstanceIdentityInvalidException", &SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,_wrap_new_InstanceIdentityInvalidException, swig_delete_InstanceIdentityInvalidException, swig_Mezzanine_InstanceIdentityInvalidException_methods, swig_Mezzanine_InstanceIdentityInvalidException_attributes, { "InstanceIdentityInvalidException", swig_Mezzanine_InstanceIdentityInvalidException_cls_methods, swig_Mezzanine_InstanceIdentityInvalidException_cls_attributes, swig_Mezzanine_InstanceIdentityInvalidException_cls_constants }, swig_Mezzanine_InstanceIdentityInvalidException_bases, swig_Mezzanine_InstanceIdentityInvalidException_base_names };

static int _wrap_new_InstanceIdentityNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InstanceIdentityNotFoundException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,"Mezzanine::InstanceIdentityNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,0))){
    SWIG_fail_ptr("InstanceIdentityNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityNotFoundException(void *obj) {
Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InstanceIdentityNotFoundException_methods[] = {
    {"GetExceptionCode", _wrap_InstanceIdentityNotFoundException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityNotFoundException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InstanceIdentityNotFoundException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InstanceIdentityNotFoundException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InstanceIdentityNotFoundException_bases[] = {0,0};
static const char *swig_Mezzanine_InstanceIdentityNotFoundException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_Mezzanine_InstanceIdentityNotFoundException = { "InstanceIdentityNotFoundException", &SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,_wrap_new_InstanceIdentityNotFoundException, swig_delete_InstanceIdentityNotFoundException, swig_Mezzanine_InstanceIdentityNotFoundException_methods, swig_Mezzanine_InstanceIdentityNotFoundException_attributes, { "InstanceIdentityNotFoundException", swig_Mezzanine_InstanceIdentityNotFoundException_cls_methods, swig_Mezzanine_InstanceIdentityNotFoundException_cls_attributes, swig_Mezzanine_InstanceIdentityNotFoundException_cls_constants }, swig_Mezzanine_InstanceIdentityNotFoundException_bases, swig_Mezzanine_InstanceIdentityNotFoundException_base_names };

static int _wrap_new_InstanceIdentityDuplicateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityDuplicateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InstanceIdentityDuplicateException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityDuplicateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityDuplicateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,"Mezzanine::InstanceIdentityDuplicateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,0))){
    SWIG_fail_ptr("InstanceIdentityDuplicateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityDuplicateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityDuplicateException(void *obj) {
Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InstanceIdentityDuplicateException_methods[] = {
    {"GetExceptionCode", _wrap_InstanceIdentityDuplicateException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityDuplicateException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InstanceIdentityDuplicateException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InstanceIdentityDuplicateException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InstanceIdentityDuplicateException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InstanceIdentityDuplicateException_bases[] = {0,0};
static const char *swig_Mezzanine_InstanceIdentityDuplicateException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_Mezzanine_InstanceIdentityDuplicateException = { "InstanceIdentityDuplicateException", &SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,_wrap_new_InstanceIdentityDuplicateException, swig_delete_InstanceIdentityDuplicateException, swig_Mezzanine_InstanceIdentityDuplicateException_methods, swig_Mezzanine_InstanceIdentityDuplicateException_attributes, { "InstanceIdentityDuplicateException", swig_Mezzanine_InstanceIdentityDuplicateException_cls_methods, swig_Mezzanine_InstanceIdentityDuplicateException_cls_attributes, swig_Mezzanine_InstanceIdentityDuplicateException_cls_constants }, swig_Mezzanine_InstanceIdentityDuplicateException_bases, swig_Mezzanine_InstanceIdentityDuplicateException_base_names };

static int _wrap_new_MemoryManagementException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryManagementException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_MemoryManagementException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryManagementException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryManagementException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::GetExceptionCode",1,"Mezzanine::MemoryManagementException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryManagementException,0))){
    SWIG_fail_ptr("MemoryManagementException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryManagementException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryManagementException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryManagementException(void *obj) {
Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_MemoryManagementException_methods[] = {
    {"GetExceptionCode", _wrap_MemoryManagementException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_MemoryManagementException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_MemoryManagementException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_MemoryManagementException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_MemoryManagementException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_MemoryManagementException_bases[] = {0,0};
static const char *swig_Mezzanine_MemoryManagementException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_MemoryManagementException = { "MemoryManagementException", &SWIGTYPE_p_Mezzanine__MemoryManagementException,_wrap_new_MemoryManagementException, swig_delete_MemoryManagementException, swig_Mezzanine_MemoryManagementException_methods, swig_Mezzanine_MemoryManagementException_attributes, { "MemoryManagementException", swig_Mezzanine_MemoryManagementException_cls_methods, swig_Mezzanine_MemoryManagementException_cls_attributes, swig_Mezzanine_MemoryManagementException_cls_constants }, swig_Mezzanine_MemoryManagementException_bases, swig_Mezzanine_MemoryManagementException_base_names };

static int _wrap_new_OutOfMemoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_OutOfMemoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_OutOfMemoryException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OutOfMemoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OutOfMemoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::GetExceptionCode",1,"Mezzanine::OutOfMemoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__OutOfMemoryException,0))){
    SWIG_fail_ptr("OutOfMemoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__OutOfMemoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::OutOfMemoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OutOfMemoryException(void *obj) {
Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_OutOfMemoryException_methods[] = {
    {"GetExceptionCode", _wrap_OutOfMemoryException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_OutOfMemoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_OutOfMemoryException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_OutOfMemoryException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_OutOfMemoryException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_OutOfMemoryException_bases[] = {0,0};
static const char *swig_Mezzanine_OutOfMemoryException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_Mezzanine_OutOfMemoryException = { "OutOfMemoryException", &SWIGTYPE_p_Mezzanine__OutOfMemoryException,_wrap_new_OutOfMemoryException, swig_delete_OutOfMemoryException, swig_Mezzanine_OutOfMemoryException_methods, swig_Mezzanine_OutOfMemoryException_attributes, { "OutOfMemoryException", swig_Mezzanine_OutOfMemoryException_cls_methods, swig_Mezzanine_OutOfMemoryException_cls_attributes, swig_Mezzanine_OutOfMemoryException_cls_constants }, swig_Mezzanine_OutOfMemoryException_bases, swig_Mezzanine_OutOfMemoryException_base_names };

static int _wrap_new_MemoryOutOfBoundsException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryOutOfBoundsException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_MemoryOutOfBoundsException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryOutOfBoundsException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryOutOfBoundsException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,"Mezzanine::MemoryOutOfBoundsException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,0))){
    SWIG_fail_ptr("MemoryOutOfBoundsException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryOutOfBoundsException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryOutOfBoundsException(void *obj) {
Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_MemoryOutOfBoundsException_methods[] = {
    {"GetExceptionCode", _wrap_MemoryOutOfBoundsException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_MemoryOutOfBoundsException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_MemoryOutOfBoundsException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_MemoryOutOfBoundsException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_MemoryOutOfBoundsException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_MemoryOutOfBoundsException_bases[] = {0,0};
static const char *swig_Mezzanine_MemoryOutOfBoundsException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_Mezzanine_MemoryOutOfBoundsException = { "MemoryOutOfBoundsException", &SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,_wrap_new_MemoryOutOfBoundsException, swig_delete_MemoryOutOfBoundsException, swig_Mezzanine_MemoryOutOfBoundsException_methods, swig_Mezzanine_MemoryOutOfBoundsException_attributes, { "MemoryOutOfBoundsException", swig_Mezzanine_MemoryOutOfBoundsException_cls_methods, swig_Mezzanine_MemoryOutOfBoundsException_cls_attributes, swig_Mezzanine_MemoryOutOfBoundsException_cls_constants }, swig_Mezzanine_MemoryOutOfBoundsException_bases, swig_Mezzanine_MemoryOutOfBoundsException_base_names };

static int _wrap_new_SyntaxErrorException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SyntaxErrorException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::GetExceptionCode",1,"Mezzanine::SyntaxErrorException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorException,0))){
    SWIG_fail_ptr("SyntaxErrorException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorException(void *obj) {
Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_SyntaxErrorException_methods[] = {
    {"GetExceptionCode", _wrap_SyntaxErrorException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_SyntaxErrorException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_SyntaxErrorException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_SyntaxErrorException_bases[] = {0,0};
static const char *swig_Mezzanine_SyntaxErrorException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_SyntaxErrorException = { "SyntaxErrorException", &SWIGTYPE_p_Mezzanine__SyntaxErrorException,_wrap_new_SyntaxErrorException, swig_delete_SyntaxErrorException, swig_Mezzanine_SyntaxErrorException_methods, swig_Mezzanine_SyntaxErrorException_attributes, { "SyntaxErrorException", swig_Mezzanine_SyntaxErrorException_cls_methods, swig_Mezzanine_SyntaxErrorException_cls_attributes, swig_Mezzanine_SyntaxErrorException_cls_constants }, swig_Mezzanine_SyntaxErrorException_bases, swig_Mezzanine_SyntaxErrorException_base_names };

static int _wrap_new_SyntaxErrorXMLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXMLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SyntaxErrorXMLException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXMLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXMLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXMLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,0))){
    SWIG_fail_ptr("SyntaxErrorXMLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXMLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXMLException(void *obj) {
Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_SyntaxErrorXMLException_methods[] = {
    {"GetExceptionCode", _wrap_SyntaxErrorXMLException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorXMLException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorXMLException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_SyntaxErrorXMLException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_SyntaxErrorXMLException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_SyntaxErrorXMLException_bases[] = {0,0};
static const char *swig_Mezzanine_SyntaxErrorXMLException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_Mezzanine_SyntaxErrorXMLException = { "SyntaxErrorXMLException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,_wrap_new_SyntaxErrorXMLException, swig_delete_SyntaxErrorXMLException, swig_Mezzanine_SyntaxErrorXMLException_methods, swig_Mezzanine_SyntaxErrorXMLException_attributes, { "SyntaxErrorXMLException", swig_Mezzanine_SyntaxErrorXMLException_cls_methods, swig_Mezzanine_SyntaxErrorXMLException_cls_attributes, swig_Mezzanine_SyntaxErrorXMLException_cls_constants }, swig_Mezzanine_SyntaxErrorXMLException_bases, swig_Mezzanine_SyntaxErrorXMLException_base_names };

static int _wrap_new_SyntaxErrorXPathException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXPathException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SyntaxErrorXPathException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXPathException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXPathException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXPathException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,0))){
    SWIG_fail_ptr("SyntaxErrorXPathException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXPathException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXPathException(void *obj) {
Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_SyntaxErrorXPathException_methods[] = {
    {"GetExceptionCode", _wrap_SyntaxErrorXPathException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorXPathException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorXPathException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_SyntaxErrorXPathException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_SyntaxErrorXPathException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_SyntaxErrorXPathException_bases[] = {0,0};
static const char *swig_Mezzanine_SyntaxErrorXPathException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_Mezzanine_SyntaxErrorXPathException = { "SyntaxErrorXPathException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,_wrap_new_SyntaxErrorXPathException, swig_delete_SyntaxErrorXPathException, swig_Mezzanine_SyntaxErrorXPathException_methods, swig_Mezzanine_SyntaxErrorXPathException_attributes, { "SyntaxErrorXPathException", swig_Mezzanine_SyntaxErrorXPathException_cls_methods, swig_Mezzanine_SyntaxErrorXPathException_cls_attributes, swig_Mezzanine_SyntaxErrorXPathException_cls_constants }, swig_Mezzanine_SyntaxErrorXPathException_bases, swig_Mezzanine_SyntaxErrorXPathException_base_names };

static int _wrap_new_SyntaxErrorLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_SyntaxErrorLuaException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,"Mezzanine::SyntaxErrorLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,0))){
    SWIG_fail_ptr("SyntaxErrorLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorLuaException(void *obj) {
Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_SyntaxErrorLuaException_methods[] = {
    {"GetExceptionCode", _wrap_SyntaxErrorLuaException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_SyntaxErrorLuaException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_SyntaxErrorLuaException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_SyntaxErrorLuaException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_SyntaxErrorLuaException_bases[] = {0,0};
static const char *swig_Mezzanine_SyntaxErrorLuaException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_Mezzanine_SyntaxErrorLuaException = { "SyntaxErrorLuaException", &SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,_wrap_new_SyntaxErrorLuaException, swig_delete_SyntaxErrorLuaException, swig_Mezzanine_SyntaxErrorLuaException_methods, swig_Mezzanine_SyntaxErrorLuaException_attributes, { "SyntaxErrorLuaException", swig_Mezzanine_SyntaxErrorLuaException_cls_methods, swig_Mezzanine_SyntaxErrorLuaException_cls_attributes, swig_Mezzanine_SyntaxErrorLuaException_cls_constants }, swig_Mezzanine_SyntaxErrorLuaException_bases, swig_Mezzanine_SyntaxErrorLuaException_base_names };

static int _wrap_new_ScriptException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ScriptException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::GetExceptionCode",1,"Mezzanine::ScriptException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptException,0))){
    SWIG_fail_ptr("ScriptException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptException(void *obj) {
Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ScriptException_methods[] = {
    {"GetExceptionCode", _wrap_ScriptException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ScriptException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ScriptException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ScriptException_bases[] = {0,0};
static const char *swig_Mezzanine_ScriptException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_ScriptException = { "ScriptException", &SWIGTYPE_p_Mezzanine__ScriptException,_wrap_new_ScriptException, swig_delete_ScriptException, swig_Mezzanine_ScriptException_methods, swig_Mezzanine_ScriptException_attributes, { "ScriptException", swig_Mezzanine_ScriptException_cls_methods, swig_Mezzanine_ScriptException_cls_attributes, swig_Mezzanine_ScriptException_cls_constants }, swig_Mezzanine_ScriptException_bases, swig_Mezzanine_ScriptException_base_names };

static int _wrap_new_ScriptLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ScriptLuaException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::GetExceptionCode",1,"Mezzanine::ScriptLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaException,0))){
    SWIG_fail_ptr("ScriptLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaException(void *obj) {
Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ScriptLuaException_methods[] = {
    {"GetExceptionCode", _wrap_ScriptLuaException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ScriptLuaException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ScriptLuaException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ScriptLuaException_bases[] = {0,0};
static const char *swig_Mezzanine_ScriptLuaException_base_names[] = {"Mezzanine::ScriptException *",0};
static swig_lua_class _wrap_class_Mezzanine_ScriptLuaException = { "ScriptLuaException", &SWIGTYPE_p_Mezzanine__ScriptLuaException,_wrap_new_ScriptLuaException, swig_delete_ScriptLuaException, swig_Mezzanine_ScriptLuaException_methods, swig_Mezzanine_ScriptLuaException_attributes, { "ScriptLuaException", swig_Mezzanine_ScriptLuaException_cls_methods, swig_Mezzanine_ScriptLuaException_cls_attributes, swig_Mezzanine_ScriptLuaException_cls_constants }, swig_Mezzanine_ScriptLuaException_bases, swig_Mezzanine_ScriptLuaException_base_names };

static int _wrap_new_ScriptLuaYieldException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaYieldException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ScriptLuaYieldException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaYieldException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaYieldException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,"Mezzanine::ScriptLuaYieldException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,0))){
    SWIG_fail_ptr("ScriptLuaYieldException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaYieldException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaYieldException(void *obj) {
Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ScriptLuaYieldException_methods[] = {
    {"GetExceptionCode", _wrap_ScriptLuaYieldException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaYieldException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaYieldException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ScriptLuaYieldException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ScriptLuaYieldException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ScriptLuaYieldException_bases[] = {0,0};
static const char *swig_Mezzanine_ScriptLuaYieldException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_Mezzanine_ScriptLuaYieldException = { "ScriptLuaYieldException", &SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,_wrap_new_ScriptLuaYieldException, swig_delete_ScriptLuaYieldException, swig_Mezzanine_ScriptLuaYieldException_methods, swig_Mezzanine_ScriptLuaYieldException_attributes, { "ScriptLuaYieldException", swig_Mezzanine_ScriptLuaYieldException_cls_methods, swig_Mezzanine_ScriptLuaYieldException_cls_attributes, swig_Mezzanine_ScriptLuaYieldException_cls_constants }, swig_Mezzanine_ScriptLuaYieldException_bases, swig_Mezzanine_ScriptLuaYieldException_base_names };

static int _wrap_new_ScriptLuaRuntimeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaRuntimeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ScriptLuaRuntimeException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaRuntimeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaRuntimeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,"Mezzanine::ScriptLuaRuntimeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,0))){
    SWIG_fail_ptr("ScriptLuaRuntimeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaRuntimeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaRuntimeException(void *obj) {
Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ScriptLuaRuntimeException_methods[] = {
    {"GetExceptionCode", _wrap_ScriptLuaRuntimeException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaRuntimeException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaRuntimeException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ScriptLuaRuntimeException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ScriptLuaRuntimeException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ScriptLuaRuntimeException_bases[] = {0,0};
static const char *swig_Mezzanine_ScriptLuaRuntimeException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_Mezzanine_ScriptLuaRuntimeException = { "ScriptLuaRuntimeException", &SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,_wrap_new_ScriptLuaRuntimeException, swig_delete_ScriptLuaRuntimeException, swig_Mezzanine_ScriptLuaRuntimeException_methods, swig_Mezzanine_ScriptLuaRuntimeException_attributes, { "ScriptLuaRuntimeException", swig_Mezzanine_ScriptLuaRuntimeException_cls_methods, swig_Mezzanine_ScriptLuaRuntimeException_cls_attributes, swig_Mezzanine_ScriptLuaRuntimeException_cls_constants }, swig_Mezzanine_ScriptLuaRuntimeException_bases, swig_Mezzanine_ScriptLuaRuntimeException_base_names };

static int _wrap_new_ScriptLuaErrErrException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaErrErrException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ScriptLuaErrErrException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaErrErrException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaErrErrException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,"Mezzanine::ScriptLuaErrErrException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,0))){
    SWIG_fail_ptr("ScriptLuaErrErrException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaErrErrException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaErrErrException(void *obj) {
Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ScriptLuaErrErrException_methods[] = {
    {"GetExceptionCode", _wrap_ScriptLuaErrErrException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaErrErrException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ScriptLuaErrErrException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ScriptLuaErrErrException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ScriptLuaErrErrException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ScriptLuaErrErrException_bases[] = {0,0};
static const char *swig_Mezzanine_ScriptLuaErrErrException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_Mezzanine_ScriptLuaErrErrException = { "ScriptLuaErrErrException", &SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,_wrap_new_ScriptLuaErrErrException, swig_delete_ScriptLuaErrErrException, swig_Mezzanine_ScriptLuaErrErrException_methods, swig_Mezzanine_ScriptLuaErrErrException_attributes, { "ScriptLuaErrErrException", swig_Mezzanine_ScriptLuaErrErrException_cls_methods, swig_Mezzanine_ScriptLuaErrErrException_cls_attributes, swig_Mezzanine_ScriptLuaErrErrException_cls_constants }, swig_Mezzanine_ScriptLuaErrErrException_bases, swig_Mezzanine_ScriptLuaErrErrException_base_names };

static int _wrap_new_ParametersException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ParametersException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::GetExceptionCode",1,"Mezzanine::ParametersException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersException,0))){
    SWIG_fail_ptr("ParametersException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersException(void *obj) {
Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ParametersException_methods[] = {
    {"GetExceptionCode", _wrap_ParametersException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ParametersException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ParametersException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ParametersException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ParametersException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ParametersException_bases[] = {0,0};
static const char *swig_Mezzanine_ParametersException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_ParametersException = { "ParametersException", &SWIGTYPE_p_Mezzanine__ParametersException,_wrap_new_ParametersException, swig_delete_ParametersException, swig_Mezzanine_ParametersException_methods, swig_Mezzanine_ParametersException_attributes, { "ParametersException", swig_Mezzanine_ParametersException_cls_methods, swig_Mezzanine_ParametersException_cls_attributes, swig_Mezzanine_ParametersException_cls_constants }, swig_Mezzanine_ParametersException_bases, swig_Mezzanine_ParametersException_base_names };

static int _wrap_new_ParametersCastException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersCastException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ParametersCastException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersCastException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersCastException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::GetExceptionCode",1,"Mezzanine::ParametersCastException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersCastException,0))){
    SWIG_fail_ptr("ParametersCastException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersCastException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersCastException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersCastException(void *obj) {
Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ParametersCastException_methods[] = {
    {"GetExceptionCode", _wrap_ParametersCastException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ParametersCastException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ParametersCastException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ParametersCastException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ParametersCastException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ParametersCastException_bases[] = {0,0};
static const char *swig_Mezzanine_ParametersCastException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_Mezzanine_ParametersCastException = { "ParametersCastException", &SWIGTYPE_p_Mezzanine__ParametersCastException,_wrap_new_ParametersCastException, swig_delete_ParametersCastException, swig_Mezzanine_ParametersCastException_methods, swig_Mezzanine_ParametersCastException_attributes, { "ParametersCastException", swig_Mezzanine_ParametersCastException_cls_methods, swig_Mezzanine_ParametersCastException_cls_attributes, swig_Mezzanine_ParametersCastException_cls_constants }, swig_Mezzanine_ParametersCastException_bases, swig_Mezzanine_ParametersCastException_base_names };

static int _wrap_new_ParametersRangeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersRangeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ParametersRangeException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersRangeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersRangeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::GetExceptionCode",1,"Mezzanine::ParametersRangeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersRangeException,0))){
    SWIG_fail_ptr("ParametersRangeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersRangeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersRangeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersRangeException(void *obj) {
Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ParametersRangeException_methods[] = {
    {"GetExceptionCode", _wrap_ParametersRangeException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ParametersRangeException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ParametersRangeException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ParametersRangeException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ParametersRangeException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ParametersRangeException_bases[] = {0,0};
static const char *swig_Mezzanine_ParametersRangeException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_Mezzanine_ParametersRangeException = { "ParametersRangeException", &SWIGTYPE_p_Mezzanine__ParametersRangeException,_wrap_new_ParametersRangeException, swig_delete_ParametersRangeException, swig_Mezzanine_ParametersRangeException_methods, swig_Mezzanine_ParametersRangeException_attributes, { "ParametersRangeException", swig_Mezzanine_ParametersRangeException_cls_methods, swig_Mezzanine_ParametersRangeException_cls_attributes, swig_Mezzanine_ParametersRangeException_cls_constants }, swig_Mezzanine_ParametersRangeException_bases, swig_Mezzanine_ParametersRangeException_base_names };

static int _wrap_new_ArithmeticException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ArithmeticException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ArithmeticException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ArithmeticException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArithmeticException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::GetExceptionCode",1,"Mezzanine::ArithmeticException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ArithmeticException,0))){
    SWIG_fail_ptr("ArithmeticException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ArithmeticException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ArithmeticException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArithmeticException(void *obj) {
Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_ArithmeticException_methods[] = {
    {"GetExceptionCode", _wrap_ArithmeticException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_ArithmeticException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_ArithmeticException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_ArithmeticException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_ArithmeticException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_ArithmeticException_bases[] = {0,0};
static const char *swig_Mezzanine_ArithmeticException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_ArithmeticException = { "ArithmeticException", &SWIGTYPE_p_Mezzanine__ArithmeticException,_wrap_new_ArithmeticException, swig_delete_ArithmeticException, swig_Mezzanine_ArithmeticException_methods, swig_Mezzanine_ArithmeticException_attributes, { "ArithmeticException", swig_Mezzanine_ArithmeticException_cls_methods, swig_Mezzanine_ArithmeticException_cls_attributes, swig_Mezzanine_ArithmeticException_cls_constants }, swig_Mezzanine_ArithmeticException_bases, swig_Mezzanine_ArithmeticException_base_names };

static int _wrap_new_InvalidVersionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidVersionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InvalidVersionException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidVersionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidVersionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::GetExceptionCode",1,"Mezzanine::InvalidVersionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidVersionException,0))){
    SWIG_fail_ptr("InvalidVersionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidVersionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidVersionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidVersionException(void *obj) {
Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InvalidVersionException_methods[] = {
    {"GetExceptionCode", _wrap_InvalidVersionException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InvalidVersionException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InvalidVersionException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InvalidVersionException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InvalidVersionException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InvalidVersionException_bases[] = {0,0};
static const char *swig_Mezzanine_InvalidVersionException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_InvalidVersionException = { "InvalidVersionException", &SWIGTYPE_p_Mezzanine__InvalidVersionException,_wrap_new_InvalidVersionException, swig_delete_InvalidVersionException, swig_Mezzanine_InvalidVersionException_methods, swig_Mezzanine_InvalidVersionException_attributes, { "InvalidVersionException", swig_Mezzanine_InvalidVersionException_cls_methods, swig_Mezzanine_InvalidVersionException_cls_attributes, swig_Mezzanine_InvalidVersionException_cls_constants }, swig_Mezzanine_InvalidVersionException_bases, swig_Mezzanine_InvalidVersionException_base_names };

static int _wrap_new_InvalidStateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidStateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InvalidStateException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidStateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidStateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::GetExceptionCode",1,"Mezzanine::InvalidStateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidStateException,0))){
    SWIG_fail_ptr("InvalidStateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidStateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidStateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidStateException(void *obj) {
Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InvalidStateException_methods[] = {
    {"GetExceptionCode", _wrap_InvalidStateException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InvalidStateException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InvalidStateException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InvalidStateException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InvalidStateException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InvalidStateException_bases[] = {0,0};
static const char *swig_Mezzanine_InvalidStateException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_InvalidStateException = { "InvalidStateException", &SWIGTYPE_p_Mezzanine__InvalidStateException,_wrap_new_InvalidStateException, swig_delete_InvalidStateException, swig_Mezzanine_InvalidStateException_methods, swig_Mezzanine_InvalidStateException_attributes, { "InvalidStateException", swig_Mezzanine_InvalidStateException_cls_methods, swig_Mezzanine_InvalidStateException_cls_attributes, swig_Mezzanine_InvalidStateException_cls_constants }, swig_Mezzanine_InvalidStateException_bases, swig_Mezzanine_InvalidStateException_base_names };

static int _wrap_new_RenderingAPIException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RenderingAPIException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RenderingAPIException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RenderingAPIException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingAPIException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::GetExceptionCode",1,"Mezzanine::RenderingAPIException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RenderingAPIException,0))){
    SWIG_fail_ptr("RenderingAPIException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RenderingAPIException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RenderingAPIException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderingAPIException(void *obj) {
Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_RenderingAPIException_methods[] = {
    {"GetExceptionCode", _wrap_RenderingAPIException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_RenderingAPIException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_RenderingAPIException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_RenderingAPIException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_RenderingAPIException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_RenderingAPIException_bases[] = {0,0};
static const char *swig_Mezzanine_RenderingAPIException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_RenderingAPIException = { "RenderingAPIException", &SWIGTYPE_p_Mezzanine__RenderingAPIException,_wrap_new_RenderingAPIException, swig_delete_RenderingAPIException, swig_Mezzanine_RenderingAPIException_methods, swig_Mezzanine_RenderingAPIException_attributes, { "RenderingAPIException", swig_Mezzanine_RenderingAPIException_cls_methods, swig_Mezzanine_RenderingAPIException_cls_attributes, swig_Mezzanine_RenderingAPIException_cls_constants }, swig_Mezzanine_RenderingAPIException_bases, swig_Mezzanine_RenderingAPIException_base_names };

static int _wrap_new_RuntimeAssertionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RuntimeAssertionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RuntimeAssertionException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RuntimeAssertionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RuntimeAssertionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,"Mezzanine::RuntimeAssertionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,0))){
    SWIG_fail_ptr("RuntimeAssertionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RuntimeAssertionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RuntimeAssertionException(void *obj) {
Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_RuntimeAssertionException_methods[] = {
    {"GetExceptionCode", _wrap_RuntimeAssertionException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_RuntimeAssertionException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_RuntimeAssertionException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_RuntimeAssertionException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_RuntimeAssertionException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_RuntimeAssertionException_bases[] = {0,0};
static const char *swig_Mezzanine_RuntimeAssertionException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_RuntimeAssertionException = { "RuntimeAssertionException", &SWIGTYPE_p_Mezzanine__RuntimeAssertionException,_wrap_new_RuntimeAssertionException, swig_delete_RuntimeAssertionException, swig_Mezzanine_RuntimeAssertionException_methods, swig_Mezzanine_RuntimeAssertionException_attributes, { "RuntimeAssertionException", swig_Mezzanine_RuntimeAssertionException_cls_methods, swig_Mezzanine_RuntimeAssertionException_cls_attributes, swig_Mezzanine_RuntimeAssertionException_cls_constants }, swig_Mezzanine_RuntimeAssertionException_bases, swig_Mezzanine_RuntimeAssertionException_base_names };

static int _wrap_new_InternalException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InternalException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InternalException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InternalException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InternalException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InternalException::GetExceptionCode",1,"Mezzanine::InternalException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InternalException,0))){
    SWIG_fail_ptr("InternalException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InternalException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InternalException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InternalException(void *obj) {
Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InternalException_methods[] = {
    {"GetExceptionCode", _wrap_InternalException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InternalException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InternalException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InternalException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InternalException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InternalException_bases[] = {0,0};
static const char *swig_Mezzanine_InternalException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_InternalException = { "InternalException", &SWIGTYPE_p_Mezzanine__InternalException,_wrap_new_InternalException, swig_delete_InternalException, swig_Mezzanine_InternalException_methods, swig_Mezzanine_InternalException_attributes, { "InternalException", swig_Mezzanine_InternalException_cls_methods, swig_Mezzanine_InternalException_cls_attributes, swig_Mezzanine_InternalException_cls_constants }, swig_Mezzanine_InternalException_bases, swig_Mezzanine_InternalException_base_names };

static int _wrap_new_NotImplementedException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NotImplementedException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_NotImplementedException__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NotImplementedException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NotImplementedException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::GetExceptionCode",1,"Mezzanine::NotImplementedException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NotImplementedException,0))){
    SWIG_fail_ptr("NotImplementedException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NotImplementedException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NotImplementedException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NotImplementedException(void *obj) {
Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_NotImplementedException_methods[] = {
    {"GetExceptionCode", _wrap_NotImplementedException_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_NotImplementedException_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_NotImplementedException_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_NotImplementedException_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_NotImplementedException_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_NotImplementedException_bases[] = {0,0};
static const char *swig_Mezzanine_NotImplementedException_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_NotImplementedException = { "NotImplementedException", &SWIGTYPE_p_Mezzanine__NotImplementedException,_wrap_new_NotImplementedException, swig_delete_NotImplementedException, swig_Mezzanine_NotImplementedException_methods, swig_Mezzanine_NotImplementedException_attributes, { "NotImplementedException", swig_Mezzanine_NotImplementedException_cls_methods, swig_Mezzanine_NotImplementedException_cls_attributes, swig_Mezzanine_NotImplementedException_cls_constants }, swig_Mezzanine_NotImplementedException_bases, swig_Mezzanine_NotImplementedException_base_names };

static int _wrap_new_InvalidAssignment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole *arg5 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Whole temp5 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",5,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  temp5=(Mezzanine::Whole)lua_tonumber(L,5); arg5=&temp5;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::Whole const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidAssignment__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_InvalidAssignment__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidAssignment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidAssignment_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::GetExceptionCode",1,"Mezzanine::InvalidAssignment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidAssignment,0))){
    SWIG_fail_ptr("InvalidAssignment_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidAssignment);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidAssignment const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidAssignment(void *obj) {
Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_InvalidAssignment_methods[] = {
    {"GetExceptionCode", _wrap_InvalidAssignment_GetExceptionCode}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_InvalidAssignment_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_InvalidAssignment_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_InvalidAssignment_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_InvalidAssignment_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_InvalidAssignment_bases[] = {0,0};
static const char *swig_Mezzanine_InvalidAssignment_base_names[] = {"Mezzanine::Exception *",0};
static swig_lua_class _wrap_class_Mezzanine_InvalidAssignment = { "InvalidAssignment", &SWIGTYPE_p_Mezzanine__InvalidAssignment,_wrap_new_InvalidAssignment, swig_delete_InvalidAssignment, swig_Mezzanine_InvalidAssignment_methods, swig_Mezzanine_InvalidAssignment_attributes, { "InvalidAssignment", swig_Mezzanine_InvalidAssignment_cls_methods, swig_Mezzanine_InvalidAssignment_cls_attributes, swig_Mezzanine_InvalidAssignment_cls_constants }, swig_Mezzanine_InvalidAssignment_bases, swig_Mezzanine_InvalidAssignment_base_names };

static int _wrap_SerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::SerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeSerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::DeSerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DeSerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_DeSerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DeSerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAxisValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAxisValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAxisValue",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->GetAxisValue((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",0,0)
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",3,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Ogre::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::Vector3()\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector3::Vector3(Ogre::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(btVector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_X",0,0)
  result = Mezzanine::Vector3::Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Y",0,0)
  result = Mezzanine::Vector3::Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Z",0,0)
  result = Mezzanine::Vector3::Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_X",0,0)
  result = Mezzanine::Vector3::Neg_Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Z",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UnitOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::StandardAxis arg1 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::UnitOnAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::UnitOnAxis",1,"Mezzanine::StandardAxis");
  arg1 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 1);
  result = Mezzanine::Vector3::UnitOnAxis(arg1);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsStandardUnitAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsStandardUnitAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsStandardUnitAxis",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsStandardUnitAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::StandardAxis)((Mezzanine::Vector3 const *)arg1)->IsStandardUnitAxis();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Ogre::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator ==(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator <=((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator +(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator -(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->CrossProduct((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->DotProduct((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Normalize",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Normalize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetNormal",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Permute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Permute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Permute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Permute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Permute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::AntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AntiPermute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->AntiPermute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAntiPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetAntiPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetDirection((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Perpendicular",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsPerpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsPerpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsPerpendicular((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Inverse",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Inverse",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Inverse();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Reflect((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Distance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Distance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Distance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Length",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Length",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZeroLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZeroLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZeroLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZeroLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZeroLength();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3_GetRotationToAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Vector3_GetRotationToAxis__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3_GetRotationToAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Zero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Zero",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Zero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::SetValues",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",4,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SetValues",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZero",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Ceil(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Ceil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Ceil((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Floor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Floor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Floor",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Floor",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Floor((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetBulletVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetBulletVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetBulletVector3();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractBulletVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->ExtractBulletVector3((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetOgreVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetOgreVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetOgreVector3();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractOgreVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->ExtractOgreVector3((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Vector3 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SerializableName",0,0)
  result = Mezzanine::Vector3::SerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___tostring(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::__str__",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___tostring",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (char *)(arg1)->__str__();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_Vector3_methods[] = {
    {"GetAxisValue", _wrap_Vector3_GetAxisValue}, 
    {"IsStandardUnitAxis", _wrap_Vector3_IsStandardUnitAxis}, 
    {"__unm", _wrap_Vector3___unm}, 
    {"__eq", _wrap_Vector3___eq}, 
    {"__le", _wrap_Vector3___le}, 
    {"__add", _wrap_Vector3___add}, 
    {"__sub", _wrap_Vector3___sub}, 
    {"__mul", _wrap_Vector3___mul}, 
    {"__div", _wrap_Vector3___div}, 
    {"CrossProduct", _wrap_Vector3_CrossProduct}, 
    {"DotProduct", _wrap_Vector3_DotProduct}, 
    {"Normalize", _wrap_Vector3_Normalize}, 
    {"GetNormal", _wrap_Vector3_GetNormal}, 
    {"Permute", _wrap_Vector3_Permute}, 
    {"GetPermute", _wrap_Vector3_GetPermute}, 
    {"AntiPermute", _wrap_Vector3_AntiPermute}, 
    {"GetAntiPermute", _wrap_Vector3_GetAntiPermute}, 
    {"GetDirection", _wrap_Vector3_GetDirection}, 
    {"Perpendicular", _wrap_Vector3_Perpendicular}, 
    {"IsPerpendicular", _wrap_Vector3_IsPerpendicular}, 
    {"Inverse", _wrap_Vector3_Inverse}, 
    {"Reflect", _wrap_Vector3_Reflect}, 
    {"Distance", _wrap_Vector3_Distance}, 
    {"SquaredDistance", _wrap_Vector3_SquaredDistance}, 
    {"Length", _wrap_Vector3_Length}, 
    {"SquaredLength", _wrap_Vector3_SquaredLength}, 
    {"IsZeroLength", _wrap_Vector3_IsZeroLength}, 
    {"GetRotationToAxis", _wrap_Vector3_GetRotationToAxis}, 
    {"Zero", _wrap_Vector3_Zero}, 
    {"SetValues", _wrap_Vector3_SetValues}, 
    {"IsZero", _wrap_Vector3_IsZero}, 
    {"Ceil", _wrap_Vector3_Ceil}, 
    {"Floor", _wrap_Vector3_Floor}, 
    {"GetBulletVector3", _wrap_Vector3_GetBulletVector3}, 
    {"ExtractBulletVector3", _wrap_Vector3_ExtractBulletVector3}, 
    {"GetOgreVector3", _wrap_Vector3_GetOgreVector3}, 
    {"ExtractOgreVector3", _wrap_Vector3_ExtractOgreVector3}, 
    {"ProtoSerialize", _wrap_Vector3_ProtoSerialize}, 
    {"ProtoDeSerialize", _wrap_Vector3_ProtoDeSerialize}, 
    {"__tostring", _wrap_Vector3___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector3_attributes[] = {
    { "X", _wrap_Vector3_X_get, _wrap_Vector3_X_set},
    { "Y", _wrap_Vector3_Y_get, _wrap_Vector3_Y_set},
    { "Z", _wrap_Vector3_Z_get, _wrap_Vector3_Z_set},
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector3_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_Vector3_cls_methods[] = {
    {"Unit_X", _wrap_Vector3_Unit_X}, 
    {"Unit_Y", _wrap_Vector3_Unit_Y}, 
    {"Unit_Z", _wrap_Vector3_Unit_Z}, 
    {"Neg_Unit_X", _wrap_Vector3_Neg_Unit_X}, 
    {"Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y}, 
    {"Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z}, 
    {"UnitOnAxis", _wrap_Vector3_UnitOnAxis}, 
    {"SerializableName", _wrap_Vector3_SerializableName}, 
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_Vector3_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_Vector3_bases[] = {0};
static const char *swig_Mezzanine_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_Vector3 = { "Vector3", &SWIGTYPE_p_Mezzanine__Vector3,_wrap_new_Vector3, swig_delete_Vector3, swig_Mezzanine_Vector3_methods, swig_Mezzanine_Vector3_attributes, { "Vector3", swig_Mezzanine_Vector3_cls_methods, swig_Mezzanine_Vector3_cls_attributes, swig_Mezzanine_Vector3_cls_constants }, swig_Mezzanine_Vector3_bases, swig_Mezzanine_Vector3_base_names };

static int _wrap_Vector3LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",1,"Mezzanine::Vector3LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3LengthCompare const *)arg1)->operator ()((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::Vector3LengthCompare",0,0)
  result = (Mezzanine::Vector3LengthCompare *)new Mezzanine::Vector3LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3LengthCompare(void *obj) {
Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_Vector3LengthCompare_methods[] = {
    {"__call", _wrap_Vector3LengthCompare___call}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector3LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_Vector3LengthCompare_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_Vector3LengthCompare_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_Vector3LengthCompare_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_Vector3LengthCompare_bases[] = {0};
static const char *swig_Mezzanine_Vector3LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_Vector3LengthCompare = { "Vector3LengthCompare", &SWIGTYPE_p_Mezzanine__Vector3LengthCompare,_wrap_new_Vector3LengthCompare, swig_delete_Vector3LengthCompare, swig_Mezzanine_Vector3LengthCompare_methods, swig_Mezzanine_Vector3LengthCompare_attributes, { "Vector3LengthCompare", swig_Mezzanine_Vector3LengthCompare_cls_methods, swig_Mezzanine_Vector3LengthCompare_cls_attributes, swig_Mezzanine_Vector3LengthCompare_cls_constants }, swig_Mezzanine_Vector3LengthCompare_bases, swig_Mezzanine_Vector3LengthCompare_base_names };

static int _wrap___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator +(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator +(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator -(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator -(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator *(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator *(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator /(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator /(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Normal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Plane::Normal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Normal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Normal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Distance",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Real) ((arg1)->Distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",0,0)
  result = (Mezzanine::Plane *)new Mezzanine::Plane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Plane",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Ogre__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Ogre::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Plane__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Plane__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Plane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Plane()\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Plane const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Ogre::Plane const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Define__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Plane::Define",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Plane_Define__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_Define'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetSide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane::Side result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane::Side result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::GetSide",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_GetSide__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_GetSide__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_GetSide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetDistance",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Plane const *)arg1)->GetDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOverlap(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Ray result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOverlap((Mezzanine::Plane const &)*arg2);
  {
    Mezzanine::Ray * resultptr = new Mezzanine::Ray((const Mezzanine::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  
  SWIG_check_num_args("Mezzanine::Plane::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Intersects",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Intersects",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Plane_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::Plane::RayTestResult * resultptr = new Mezzanine::Plane::RayTestResult((const Mezzanine::Plane::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ExtractOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ExtractOgrePlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",2,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",2,SWIGTYPE_p_Ogre__Plane);
  }
  
  (arg1)->ExtractOgrePlane((Ogre::Plane const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOgrePlane",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOgrePlane",1,"Mezzanine::Plane const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOgrePlane();
  {
    Ogre::Plane * resultptr = new Ogre::Plane((const Ogre::Plane &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Plane,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Plane const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSerializableName",0,0)
  result = Mezzanine::Plane::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::operator ==",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::operator ==",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->operator ==((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Plane(void *obj) {
Mezzanine::Plane *arg1 = (Mezzanine::Plane *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_Plane_methods[] = {
    {"Define", _wrap_Plane_Define}, 
    {"GetSide", _wrap_Plane_GetSide}, 
    {"GetDistance", _wrap_Plane_GetDistance}, 
    {"GetOverlap", _wrap_Plane_GetOverlap}, 
    {"IsOverlapping", _wrap_Plane_IsOverlapping}, 
    {"Intersects", _wrap_Plane_Intersects}, 
    {"ExtractOgrePlane", _wrap_Plane_ExtractOgrePlane}, 
    {"GetOgrePlane", _wrap_Plane_GetOgrePlane}, 
    {"ProtoSerialize", _wrap_Plane_ProtoSerialize}, 
    {"ProtoDeSerialize", _wrap_Plane_ProtoDeSerialize}, 
    {"__eq", _wrap_Plane___eq}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_Plane_attributes[] = {
    { "Normal", _wrap_Plane_Normal_get, _wrap_Plane_Normal_set},
    { "Distance", _wrap_Plane_Distance_get, _wrap_Plane_Distance_set},
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_Plane_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_Plane_cls_methods[] = {
    {"GetSerializableName", _wrap_Plane_GetSerializableName}, 
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_Plane_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("S_None", Mezzanine::Plane::S_None)},
    {SWIG_LUA_CONSTTAB_INT("S_Positive", Mezzanine::Plane::S_Positive)},
    {SWIG_LUA_CONSTTAB_INT("S_Negative", Mezzanine::Plane::S_Negative)},
    {SWIG_LUA_CONSTTAB_INT("S_Both", Mezzanine::Plane::S_Both)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_Plane_bases[] = {0};
static const char *swig_Mezzanine_Plane_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_Plane = { "Plane", &SWIGTYPE_p_Mezzanine__Plane,_wrap_new_Plane, swig_delete_Plane, swig_Mezzanine_Plane_methods, swig_Mezzanine_Plane_attributes, { "Plane", swig_Mezzanine_Plane_cls_methods, swig_Mezzanine_Plane_cls_attributes, swig_Mezzanine_Plane_cls_constants }, swig_Mezzanine_Plane_bases, swig_Mezzanine_Plane_base_names };

static int _wrap_PointPointInterection_IntersectionCount_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::IntersectionCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::IntersectionCount",1,"Mezzanine::MathTools::PointPointInterection *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::IntersectionCount",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,0))){
    SWIG_fail_ptr("PointPointInterection_IntersectionCount_set",1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  if (arg1) (arg1)->IntersectionCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointPointInterection_IntersectionCount_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::IntersectionCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::IntersectionCount",1,"Mezzanine::MathTools::PointPointInterection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,0))){
    SWIG_fail_ptr("PointPointInterection_IntersectionCount_get",1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection);
  }
  
  result = (Mezzanine::Whole) ((arg1)->IntersectionCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointPointInterection_FirstIntersection_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::FirstIntersection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::FirstIntersection",1,"Mezzanine::MathTools::PointPointInterection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::FirstIntersection",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,0))){
    SWIG_fail_ptr("PointPointInterection_FirstIntersection_set",1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PointPointInterection_FirstIntersection_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->FirstIntersection = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointPointInterection_FirstIntersection_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::FirstIntersection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::FirstIntersection",1,"Mezzanine::MathTools::PointPointInterection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,0))){
    SWIG_fail_ptr("PointPointInterection_FirstIntersection_get",1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->FirstIntersection);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointPointInterection_SecondIntersection_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::SecondIntersection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::SecondIntersection",1,"Mezzanine::MathTools::PointPointInterection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::SecondIntersection",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,0))){
    SWIG_fail_ptr("PointPointInterection_SecondIntersection_set",1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PointPointInterection_SecondIntersection_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->SecondIntersection = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PointPointInterection_SecondIntersection_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::SecondIntersection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::SecondIntersection",1,"Mezzanine::MathTools::PointPointInterection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,0))){
    SWIG_fail_ptr("PointPointInterection_SecondIntersection_get",1,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->SecondIntersection);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointPointInterection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::Vector3 arg2 ;
  Mezzanine::Vector3 arg3 ;
  Mezzanine::Vector3 *argp2 ;
  Mezzanine::Vector3 *argp3 ;
  Mezzanine::MathTools::PointPointInterection *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::PointPointInterection",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::PointPointInterection",1,"Mezzanine::Whole");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::PointPointInterection",2,"Mezzanine::Vector3");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::PointPointInterection",3,"Mezzanine::Vector3");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_PointPointInterection",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_PointPointInterection",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  arg3 = *argp3;
  
  result = (Mezzanine::MathTools::PointPointInterection *)new Mezzanine::MathTools::PointPointInterection(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointPointInterection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::Vector3 arg2 ;
  Mezzanine::Vector3 *argp2 ;
  Mezzanine::MathTools::PointPointInterection *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::PointPointInterection",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::PointPointInterection",1,"Mezzanine::Whole");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::PointPointInterection",2,"Mezzanine::Vector3");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_PointPointInterection",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  arg2 = *argp2;
  
  result = (Mezzanine::MathTools::PointPointInterection *)new Mezzanine::MathTools::PointPointInterection(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointPointInterection__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::MathTools::PointPointInterection *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::PointPointInterection",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::PointPointInterection::PointPointInterection",1,"Mezzanine::Whole");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole)lua_tonumber(L, 1);
  result = (Mezzanine::MathTools::PointPointInterection *)new Mezzanine::MathTools::PointPointInterection(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointPointInterection__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::PointPointInterection *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::PointPointInterection::PointPointInterection",0,0)
  result = (Mezzanine::MathTools::PointPointInterection *)new Mezzanine::MathTools::PointPointInterection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PointPointInterection(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_PointPointInterection__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_PointPointInterection__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PointPointInterection__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_PointPointInterection__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PointPointInterection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MathTools::PointPointInterection::PointPointInterection(Mezzanine::Whole,Mezzanine::Vector3,Mezzanine::Vector3)\n"
    "    Mezzanine::MathTools::PointPointInterection::PointPointInterection(Mezzanine::Whole,Mezzanine::Vector3)\n"
    "    Mezzanine::MathTools::PointPointInterection::PointPointInterection(Mezzanine::Whole)\n"
    "    Mezzanine::MathTools::PointPointInterection::PointPointInterection()\n");
  lua_error(L);return 0;
}


static void swig_delete_PointPointInterection(void *obj) {
Mezzanine::MathTools::PointPointInterection *arg1 = (Mezzanine::MathTools::PointPointInterection *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_MathTools_PointPointInterection_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_MathTools_PointPointInterection_attributes[] = {
    { "IntersectionCount", _wrap_PointPointInterection_IntersectionCount_get, _wrap_PointPointInterection_IntersectionCount_set},
    { "FirstIntersection", _wrap_PointPointInterection_FirstIntersection_get, _wrap_PointPointInterection_FirstIntersection_set},
    { "SecondIntersection", _wrap_PointPointInterection_SecondIntersection_get, _wrap_PointPointInterection_SecondIntersection_set},
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_MathTools_PointPointInterection_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_MathTools_PointPointInterection_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_MathTools_PointPointInterection_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_MathTools_PointPointInterection_bases[] = {0};
static const char *swig_Mezzanine_MathTools_PointPointInterection_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_MathTools_PointPointInterection = { "PointPointInterection", &SWIGTYPE_p_Mezzanine__MathTools__PointPointInterection,_wrap_new_PointPointInterection, swig_delete_PointPointInterection, swig_Mezzanine_MathTools_PointPointInterection_methods, swig_Mezzanine_MathTools_PointPointInterection_attributes, { "PointPointInterection", swig_Mezzanine_MathTools_PointPointInterection_cls_methods, swig_Mezzanine_MathTools_PointPointInterection_cls_attributes, swig_Mezzanine_MathTools_PointPointInterection_cls_constants }, swig_Mezzanine_MathTools_PointPointInterection_bases, swig_Mezzanine_MathTools_PointPointInterection_base_names };

static int _wrap_Intersects__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::LineSegment2D *arg1 = 0 ;
  Mezzanine::LineSegment2D *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector2 > > result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Intersects",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",1,"Mezzanine::LineSegment2D const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",2,"Mezzanine::LineSegment2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__LineSegment2D,0))){
    SWIG_fail_ptr("Intersects",1,SWIGTYPE_p_Mezzanine__LineSegment2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__LineSegment2D,0))){
    SWIG_fail_ptr("Intersects",2,SWIGTYPE_p_Mezzanine__LineSegment2D);
  }
  
  result = Mezzanine::MathTools::Intersects((Mezzanine::LineSegment2D const &)*arg1,(Mezzanine::LineSegment2D const &)*arg2);
  {
    Mezzanine::MathTools::Point2DTestResult * resultptr = new Mezzanine::MathTools::Point2DTestResult((const Mezzanine::MathTools::Point2DTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector2_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsInside__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::IsInside",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::IsInside",1,"Mezzanine::AxisAlignedBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::IsInside",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("IsInside",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::IsInside((Mezzanine::AxisAlignedBox const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsInside__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::IsInside",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::IsInside",1,"Mezzanine::Sphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::IsInside",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("IsInside",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::IsInside((Mezzanine::Sphere const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsInside(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IsInside__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_IsInside__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IsInside'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MathTools::IsInside(Mezzanine::AxisAlignedBox const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::MathTools::IsInside(Mezzanine::Sphere const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Overlap__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Overlap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",1,"Mezzanine::AxisAlignedBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Overlap",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Overlap",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::Overlap((Mezzanine::AxisAlignedBox const &)*arg1,(Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overlap__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Overlap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",1,"Mezzanine::AxisAlignedBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Overlap",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Overlap",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::Overlap((Mezzanine::AxisAlignedBox const &)*arg1,(Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overlap__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Overlap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",1,"Mezzanine::Plane const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Overlap",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Overlap",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::Overlap((Mezzanine::Plane const &)*arg1,(Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overlap__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Overlap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",1,"Mezzanine::AxisAlignedBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Overlap",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Overlap",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::Overlap((Mezzanine::AxisAlignedBox const &)*arg1,(Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overlap__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Overlap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",1,"Mezzanine::Sphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Overlap",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Overlap",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::Overlap((Mezzanine::Sphere const &)*arg1,(Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overlap__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Overlap",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",1,"Mezzanine::Plane const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Overlap",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Overlap",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Overlap",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)Mezzanine::MathTools::Overlap((Mezzanine::Plane const &)*arg1,(Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Overlap(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Overlap__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Overlap__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Overlap__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Overlap__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Overlap__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Overlap__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Overlap'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MathTools::Overlap(Mezzanine::AxisAlignedBox const &,Mezzanine::Sphere const &)\n"
    "    Mezzanine::MathTools::Overlap(Mezzanine::AxisAlignedBox const &,Mezzanine::Plane const &)\n"
    "    Mezzanine::MathTools::Overlap(Mezzanine::Plane const &,Mezzanine::Sphere const &)\n"
    "    Mezzanine::MathTools::Overlap(Mezzanine::AxisAlignedBox const &,Mezzanine::AxisAlignedBox const &)\n"
    "    Mezzanine::MathTools::Overlap(Mezzanine::Sphere const &,Mezzanine::Sphere const &)\n"
    "    Mezzanine::MathTools::Overlap(Mezzanine::Plane const &,Mezzanine::Plane const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Intersects__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Intersects",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",1,"Mezzanine::Plane const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Intersects",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = Mezzanine::MathTools::Intersects((Mezzanine::Plane const &)*arg1,(Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::MathTools::Point3DTestResult * resultptr = new Mezzanine::MathTools::Point3DTestResult((const Mezzanine::MathTools::Point3DTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intersects__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Ray > > result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Intersects",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",1,"Mezzanine::AxisAlignedBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Intersects",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = Mezzanine::MathTools::Intersects((Mezzanine::AxisAlignedBox const &)*arg1,(Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::MathTools::GeometryRayTestResult * resultptr = new Mezzanine::MathTools::GeometryRayTestResult((const Mezzanine::MathTools::GeometryRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intersects__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Ray > > result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Intersects",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",1,"Mezzanine::Sphere const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Intersects",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = Mezzanine::MathTools::Intersects((Mezzanine::Sphere const &)*arg1,(Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::MathTools::GeometryRayTestResult * resultptr = new Mezzanine::MathTools::GeometryRayTestResult((const Mezzanine::MathTools::GeometryRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Intersects(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__LineSegment2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__LineSegment2D, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Intersects__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Intersects__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Intersects__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Intersects__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Intersects'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MathTools::Intersects(Mezzanine::LineSegment2D const &,Mezzanine::LineSegment2D const &)\n"
    "    Mezzanine::MathTools::Intersects(Mezzanine::Plane const &,Mezzanine::Ray const &)\n"
    "    Mezzanine::MathTools::Intersects(Mezzanine::AxisAlignedBox const &,Mezzanine::Ray const &)\n"
    "    Mezzanine::MathTools::Intersects(Mezzanine::Sphere const &,Mezzanine::Ray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Ceil(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Ceil",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Ceil",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Real)Mezzanine::MathTools::Ceil(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Floor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Floor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Floor",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Real)Mezzanine::MathTools::Floor(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Pow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Pow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Pow",1,"Mezzanine::Real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Pow",2,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Real)Mezzanine::MathTools::Pow(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Exp(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Exp",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Exp",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Real)Mezzanine::MathTools::Exp(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sqrt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Sqrt",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Sqrt",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Real)Mezzanine::MathTools::Sqrt(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Abs(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Abs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Abs",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Real)Mezzanine::MathTools::Abs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Mod",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Mod",1,"Mezzanine::Real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::Mod",2,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Real)Mezzanine::MathTools::Mod(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WithinTolerance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::WithinTolerance",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::WithinTolerance",1,"Mezzanine::Real const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::WithinTolerance",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::MathTools::WithinTolerance",3,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)Mezzanine::MathTools::WithinTolerance(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WrappedModulo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Integer arg1 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::MathTools::WrappedModulo",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::WrappedModulo",1,"Mezzanine::Integer const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::WrappedModulo",2,"Mezzanine::Integer const");
  arg1 = (Mezzanine::Integer const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Integer const)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)Mezzanine::MathTools::WrappedModulo(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetPi(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::GetPi",0,0)
  result = (Mezzanine::Real)Mezzanine::MathTools::GetPi();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTwoPi(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::GetTwoPi",0,0)
  result = (Mezzanine::Real)Mezzanine::MathTools::GetTwoPi();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetHalfPi(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::GetHalfPi",0,0)
  result = (Mezzanine::Real)Mezzanine::MathTools::GetHalfPi();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetQuarterPi(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::GetQuarterPi",0,0)
  result = (Mezzanine::Real)Mezzanine::MathTools::GetQuarterPi();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetRadToDegMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::GetRadToDegMultiplier",0,0)
  result = (Mezzanine::Real)Mezzanine::MathTools::GetRadToDegMultiplier();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetDegToRadMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::GetDegToRadMultiplier",0,0)
  result = (Mezzanine::Real)Mezzanine::MathTools::GetDegToRadMultiplier();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_AlignedOn_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::StandardAxis arg2 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::AlignedOn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AlignedOn",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AlignedOn",2,"Mezzanine::StandardAxis");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_AlignedOn_set",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  arg2 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->AlignedOn = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_AlignedOn_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::AlignedOn",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AlignedOn",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_AlignedOn_get",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  result = (Mezzanine::StandardAxis) ((arg1)->AlignedOn);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_DistanceFromOrigin_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::DistanceFromOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DistanceFromOrigin",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DistanceFromOrigin",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_DistanceFromOrigin_set",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->DistanceFromOrigin = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_DistanceFromOrigin_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::DistanceFromOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DistanceFromOrigin",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_DistanceFromOrigin_get",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  result = (Mezzanine::Real) ((arg1)->DistanceFromOrigin);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_MinExtents_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Vector2 *arg2 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::MinExtents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::MinExtents",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::MinExtents",2,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_MinExtents_set",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("AxisAlignedQuad_MinExtents_set",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  if (arg1) (arg1)->MinExtents = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_MinExtents_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::MinExtents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::MinExtents",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_MinExtents_get",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  result = (Mezzanine::Vector2 *)& ((arg1)->MinExtents);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_MaxExtents_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Vector2 *arg2 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::MaxExtents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::MaxExtents",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::MaxExtents",2,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_MaxExtents_set",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("AxisAlignedQuad_MaxExtents_set",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  if (arg1) (arg1)->MaxExtents = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_MaxExtents_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::MaxExtents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::MaxExtents",1,"Mezzanine::MathTools::AxisAlignedQuad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_MaxExtents_get",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  result = (Mezzanine::Vector2 *)& ((arg1)->MaxExtents);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_DropAxisToCreateVector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::StandardAxis arg2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",2,"Mezzanine::StandardAxis const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedQuad_DropAxisToCreateVector2",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::StandardAxis const)(int)lua_tonumber(L, 2);
  result = Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2((Mezzanine::Vector3 const &)*arg1,arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_DropAxisToCreateVector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::StandardAxis arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",1,"Mezzanine::Vector2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",2,"Mezzanine::StandardAxis const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("AxisAlignedQuad_DropAxisToCreateVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::StandardAxis const)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  result = Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2((Mezzanine::Vector2 const &)*arg1,arg2,arg3);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad_DropAxisToCreateVector2(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AxisAlignedQuad_DropAxisToCreateVector2__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AxisAlignedQuad_DropAxisToCreateVector2__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AxisAlignedQuad_DropAxisToCreateVector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2(Mezzanine::Vector3 const &,Mezzanine::StandardAxis const)\n"
    "    Mezzanine::MathTools::AxisAlignedQuad::DropAxisToCreateVector2(Mezzanine::Vector2 const &,Mezzanine::StandardAxis const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_new_AxisAlignedQuad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::StandardAxis arg1 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::MathTools::AxisAlignedQuad *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",1,"Mezzanine::StandardAxis const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",3,"Mezzanine::Vector3 const &");
  arg1 = (Mezzanine::StandardAxis const)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedQuad",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedQuad",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::MathTools::AxisAlignedQuad *)new Mezzanine::MathTools::AxisAlignedQuad(arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedQuad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::StandardAxis arg1 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::MathTools::AxisAlignedQuad *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",1,"Mezzanine::StandardAxis const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad",2,"Mezzanine::Vector3 const &");
  arg1 = (Mezzanine::StandardAxis const)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedQuad",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::MathTools::AxisAlignedQuad *)new Mezzanine::MathTools::AxisAlignedQuad(arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedQuad(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AxisAlignedQuad__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_AxisAlignedQuad__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AxisAlignedQuad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad(Mezzanine::StandardAxis const,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::MathTools::AxisAlignedQuad::AxisAlignedQuad(Mezzanine::StandardAxis const,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedQuad_OverlapsWith(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::OverlapsWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::OverlapsWith",1,"Mezzanine::MathTools::AxisAlignedQuad const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::OverlapsWith",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad_OverlapsWith",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedQuad_OverlapsWith",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::MathTools::AxisAlignedQuad const *)arg1)->OverlapsWith((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedQuad___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) 0 ;
  Mezzanine::MathTools::AxisAlignedQuad *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::MathTools::AxisAlignedQuad::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::operator ==",1,"Mezzanine::MathTools::AxisAlignedQuad const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::MathTools::AxisAlignedQuad::operator ==",2,"Mezzanine::MathTools::AxisAlignedQuad const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad___eq",1,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,0))){
    SWIG_fail_ptr("AxisAlignedQuad___eq",2,SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::MathTools::AxisAlignedQuad const *)arg1)->operator ==((Mezzanine::MathTools::AxisAlignedQuad const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AxisAlignedQuad(void *obj) {
Mezzanine::MathTools::AxisAlignedQuad *arg1 = (Mezzanine::MathTools::AxisAlignedQuad *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_MathTools_AxisAlignedQuad_methods[] = {
    {"OverlapsWith", _wrap_AxisAlignedQuad_OverlapsWith}, 
    {"__eq", _wrap_AxisAlignedQuad___eq}, 
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_MathTools_AxisAlignedQuad_attributes[] = {
    { "AlignedOn", _wrap_AxisAlignedQuad_AlignedOn_get, _wrap_AxisAlignedQuad_AlignedOn_set},
    { "DistanceFromOrigin", _wrap_AxisAlignedQuad_DistanceFromOrigin_get, _wrap_AxisAlignedQuad_DistanceFromOrigin_set},
    { "MinExtents", _wrap_AxisAlignedQuad_MinExtents_get, _wrap_AxisAlignedQuad_MinExtents_set},
    { "MaxExtents", _wrap_AxisAlignedQuad_MaxExtents_get, _wrap_AxisAlignedQuad_MaxExtents_set},
    {0,0,0}
};
static swig_lua_attribute swig_Mezzanine_MathTools_AxisAlignedQuad_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Mezzanine_MathTools_AxisAlignedQuad_cls_methods[] = {
    {"DropAxisToCreateVector2", _wrap_AxisAlignedQuad_DropAxisToCreateVector2}, 
    {0,0}
};
static swig_lua_const_info swig_Mezzanine_MathTools_AxisAlignedQuad_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_Mezzanine_MathTools_AxisAlignedQuad_bases[] = {0};
static const char *swig_Mezzanine_MathTools_AxisAlignedQuad_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_MathTools_AxisAlignedQuad = { "AxisAlignedQuad", &SWIGTYPE_p_Mezzanine__MathTools__AxisAlignedQuad,_wrap_new_AxisAlignedQuad, swig_delete_AxisAlignedQuad, swig_Mezzanine_MathTools_AxisAlignedQuad_methods, swig_Mezzanine_MathTools_AxisAlignedQuad_attributes, { "AxisAlignedQuad", swig_Mezzanine_MathTools_AxisAlignedQuad_cls_methods, swig_Mezzanine_MathTools_AxisAlignedQuad_cls_attributes, swig_Mezzanine_MathTools_AxisAlignedQuad_cls_constants }, swig_Mezzanine_MathTools_AxisAlignedQuad_bases, swig_Mezzanine_MathTools_AxisAlignedQuad_base_names };

static int _wrap_Cos(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Cos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Cos",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::Cos((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Sin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Sin",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::Sin((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Tan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::Tan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::Tan",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::Tan((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ACos(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::ACos",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::ACos",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::ACos((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ASin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::ASin",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::ASin",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::ASin((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ATan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::ATan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::ATan",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::ATan((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DegreesToRadians(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::DegreesToRadians",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::DegreesToRadians",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::DegreesToRadians((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RadiansToDegrees(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::MathTools::RadiansToDegrees",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::MathTools::RadiansToDegrees",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::MathTools::RadiansToDegrees((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "Vector2_Unit_X", _wrap_Vector2_Unit_X},
    { "Vector2_Unit_Y", _wrap_Vector2_Unit_Y},
    { "Vector2_Neg_Unit_X", _wrap_Vector2_Neg_Unit_X},
    { "Vector2_Neg_Unit_Y", _wrap_Vector2_Neg_Unit_Y},
    { "Vector2_SerializableName", _wrap_Vector2_SerializableName},
    { "SerializeError",_wrap_SerializeError},
    { "DeSerializeError",_wrap_DeSerializeError},
    { "Vector3_Unit_X", _wrap_Vector3_Unit_X},
    { "Vector3_Unit_Y", _wrap_Vector3_Unit_Y},
    { "Vector3_Unit_Z", _wrap_Vector3_Unit_Z},
    { "Vector3_Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Vector3_Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Vector3_Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "Vector3_UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "Vector3_SerializableName", _wrap_Vector3_SerializableName},
    { "__add",_wrap___add},
    { "__sub",_wrap___sub},
    { "__mul",_wrap___mul},
    { "__div",_wrap___div},
    { "Plane_GetSerializableName", _wrap_Plane_GetSerializableName},
    { "IsInside",_wrap_IsInside},
    { "Overlap",_wrap_Overlap},
    { "Intersects",_wrap_Intersects},
    { "Ceil", _wrap_Ceil},
    { "Floor", _wrap_Floor},
    { "Pow", _wrap_Pow},
    { "Exp", _wrap_Exp},
    { "Sqrt", _wrap_Sqrt},
    { "Abs", _wrap_Abs},
    { "Mod", _wrap_Mod},
    { "WithinTolerance", _wrap_WithinTolerance},
    { "WrappedModulo", _wrap_WrappedModulo},
    { "GetPi", _wrap_GetPi},
    { "GetTwoPi", _wrap_GetTwoPi},
    { "GetHalfPi", _wrap_GetHalfPi},
    { "GetQuarterPi", _wrap_GetQuarterPi},
    { "GetRadToDegMultiplier", _wrap_GetRadToDegMultiplier},
    { "GetDegToRadMultiplier", _wrap_GetDegToRadMultiplier},
    { "AxisAlignedQuad_DropAxisToCreateVector2",_wrap_AxisAlignedQuad_DropAxisToCreateVector2},
    { "Cos", _wrap_Cos},
    { "Sin", _wrap_Sin},
    { "Tan", _wrap_Tan},
    { "ACos", _wrap_ACos},
    { "ASin", _wrap_ASin},
    { "ATan", _wrap_ATan},
    { "DegreesToRadians", _wrap_DegreesToRadians},
    { "RadiansToDegrees", _wrap_RadiansToDegrees},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("MEZZ_FRAMESTOTRACK", 10)},
    {SWIG_LUA_CONSTTAB_INT("MEZZANINE_CORE", 1)},
    {SWIG_LUA_CONSTTAB_INT("AT_FileSystem", Mezzanine::AT_FileSystem)},
    {SWIG_LUA_CONSTTAB_INT("AT_Zip", Mezzanine::AT_Zip)},
    {SWIG_LUA_CONSTTAB_INT("AT_Invalid", Mezzanine::AT_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("Att_None", Mezzanine::Att_None)},
    {SWIG_LUA_CONSTTAB_INT("Att_Linear", Mezzanine::Att_Linear)},
    {SWIG_LUA_CONSTTAB_INT("Att_Quadratic", Mezzanine::Att_Quadratic)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_0", Mezzanine::OM_Degree_0)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_90", Mezzanine::OM_Degree_90)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_180", Mezzanine::OM_Degree_180)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_270", Mezzanine::OM_Degree_270)},
    {SWIG_LUA_CONSTTAB_INT("OM_Portrait", Mezzanine::OM_Portrait)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeRight", Mezzanine::OM_LandscapeRight)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeLeft", Mezzanine::OM_LandscapeLeft)},
    {SWIG_LUA_CONSTTAB_INT("PL_Unpaused", Mezzanine::PL_Unpaused)},
    {SWIG_LUA_CONSTTAB_INT("PL_PausePhysics", Mezzanine::PL_PausePhysics)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseParticles", Mezzanine::PL_PauseParticles)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAnimations", Mezzanine::PL_PauseAnimations)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAll", Mezzanine::PL_PauseAll)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_First", Mezzanine::PT_Audio_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_Listener", Mezzanine::PT_Audio_Listener)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_SoundProxy", Mezzanine::PT_Audio_SoundProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_Last", Mezzanine::PT_Audio_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_First", Mezzanine::PT_Graphics_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_BillboardSetProxy", Mezzanine::PT_Graphics_BillboardSetProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_CameraProxy", Mezzanine::PT_Graphics_CameraProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_EntityProxy", Mezzanine::PT_Graphics_EntityProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_LightProxy", Mezzanine::PT_Graphics_LightProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_ParticleSystemProxy", Mezzanine::PT_Graphics_ParticleSystemProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_Last", Mezzanine::PT_Graphics_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_First", Mezzanine::PT_Physics_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_GhostProxy", Mezzanine::PT_Physics_GhostProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_RigidProxy", Mezzanine::PT_Physics_RigidProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_SoftProxy", Mezzanine::PT_Physics_SoftProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_Last", Mezzanine::PT_Physics_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_All_Proxies", Mezzanine::PT_Audio_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_All_Proxies", Mezzanine::PT_Graphics_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_All_Proxies", Mezzanine::PT_Physics_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Invalid", Mezzanine::Axis_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("Axis_X", Mezzanine::Axis_X)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Min", Mezzanine::Axis_Min)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Y", Mezzanine::Axis_Y)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Z", Mezzanine::Axis_Z)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Max", Mezzanine::Axis_Max)},
    {SWIG_LUA_CONSTTAB_INT("TT_Simple", Mezzanine::TT_Simple)},
    {SWIG_LUA_CONSTTAB_INT("TT_Spline", Mezzanine::TT_Spline)},
    {SWIG_LUA_CONSTTAB_INT("TT_Bezier", Mezzanine::TT_Bezier)},
    {SWIG_LUA_CONSTTAB_INT("TS_Local", Mezzanine::TS_Local)},
    {SWIG_LUA_CONSTTAB_INT("TS_Parent", Mezzanine::TS_Parent)},
    {SWIG_LUA_CONSTTAB_INT("TS_World", Mezzanine::TS_World)},
    {SWIG_LUA_CONSTTAB_INT("WO_TerrainFirst", Mezzanine::WO_TerrainFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_MeshTerrain", Mezzanine::WO_MeshTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_HeightfieldTerrain", Mezzanine::WO_HeightfieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_VectorFieldTerrain", Mezzanine::WO_VectorFieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_VoxelTerrain", Mezzanine::WO_VoxelTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_MarchingCubeTerrain", Mezzanine::WO_MarchingCubeTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_UnknownTerrain", Mezzanine::WO_UnknownTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_TerrainLast", Mezzanine::WO_TerrainLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisFirst", Mezzanine::WO_DebrisFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisRigid", Mezzanine::WO_DebrisRigid)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisSoft", Mezzanine::WO_DebrisSoft)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisUnknown", Mezzanine::WO_DebrisUnknown)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisLast", Mezzanine::WO_DebrisLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectFirst", Mezzanine::WO_AreaEffectFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectGravityField", Mezzanine::WO_AreaEffectGravityField)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectGravityWell", Mezzanine::WO_AreaEffectGravityWell)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectFieldOfForce", Mezzanine::WO_AreaEffectFieldOfForce)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectPlaceHolder1", Mezzanine::WO_AreaEffectPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectPlaceHolder2", Mezzanine::WO_AreaEffectPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectUnknown", Mezzanine::WO_AreaEffectUnknown)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectLast", Mezzanine::WO_AreaEffectLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorFirst", Mezzanine::WO_ActorFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder1", Mezzanine::WO_ActorPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder2", Mezzanine::WO_ActorPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder3", Mezzanine::WO_ActorPlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorLast", Mezzanine::WO_ActorLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehicleFirst", Mezzanine::WO_VehicleFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder1", Mezzanine::WO_VehiclePlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder2", Mezzanine::WO_VehiclePlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder3", Mezzanine::WO_VehiclePlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder4", Mezzanine::WO_VehiclePlaceHolder4)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder5", Mezzanine::WO_VehiclePlaceHolder5)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehicleLast", Mezzanine::WO_VehicleLast)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_EXCEPTION", Mezzanine::Exception::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_FILE_EXCEPTION", Mezzanine::Exception::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_FILE_READ_EXCEPTION", Mezzanine::Exception::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_FILE_WRITE_EXCEPTION", Mezzanine::Exception::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::Exception::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_FILE_PERMISSION_EXCEPTION", Mezzanine::Exception::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_DIRECTORY_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_DIRECTORY_READ_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::Exception::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_NETWORK_EXCEPTION", Mezzanine::Exception::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_NETWORK_READ_EXCEPTION", Mezzanine::Exception::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_NETWORK_WRITE_EXCEPTION", Mezzanine::Exception::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::Exception::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_NETWORK_URL_EXCEPTION", Mezzanine::Exception::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::Exception::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_WRITE_EXCEPTION", Mezzanine::Exception::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_IO_READ_EXCEPTION", Mezzanine::Exception::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_II_EXCEPTION", Mezzanine::Exception::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_II_IDENTITY_INVALID_EXCEPTION", Mezzanine::Exception::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::Exception::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::Exception::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_MM_EXCEPTION", Mezzanine::Exception::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::Exception::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::Exception::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SYNTAX_ERROR_EXCEPTION", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::Exception::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SCRIPT_EXCEPTION", Mezzanine::Exception::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SCRIPT_EXCEPTION_LUA", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("Exception_SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::Exception::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("Exception_PARAMETERS_EXCEPTION", Mezzanine::Exception::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_PARAMETERS_CAST_EXCEPTION", Mezzanine::Exception::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_PARAMETERS_RANGE_EXCEPTION", Mezzanine::Exception::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_ARITHMETIC_EXCEPTION", Mezzanine::Exception::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_INVALID_VERSION_EXCEPTION", Mezzanine::Exception::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_INVALID_STATE_EXCEPTION", Mezzanine::Exception::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_RENDERINGAPI_EXCEPTION", Mezzanine::Exception::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_RT_ASSERTION_EXCEPTION", Mezzanine::Exception::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_INTERNAL_EXCEPTION", Mezzanine::Exception::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_NOT_IMPLEMENTED_EXCEPTION", Mezzanine::Exception::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("Exception_INVALID_ASSIGNMENT", Mezzanine::Exception::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("IOException_ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileException_ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileReadException_ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileWriteException_ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileNotFoundException_ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FilePermissionException_ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryException_ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryReadException_ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryWriteException_ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryNotFoundException_ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryPermissionException_ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkException_ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkReadException_ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkWriteException_ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkNotFoundException_ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkURLException_ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkPermissionException_ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOWriteException_ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOReadException_ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityException_ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityInvalidException_ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityNotFoundException_ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityDuplicateException_ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryManagementException_ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("OutOfMemoryException_ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryOutOfBoundsException_ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorException_ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXMLException_ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXPathException_ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorLuaException_ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptException_ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaException_ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaYieldException_ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaRuntimeException_ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaErrErrException_ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersException_ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersCastException_ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersRangeException_ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ArithmeticException_ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidVersionException_ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidStateException_ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RenderingAPIException_ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RuntimeAssertionException_ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InternalException_ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NotImplementedException_ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidAssignment_ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneError", Mezzanine::CastNoneError)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneReturnZero", Mezzanine::CastNoneReturnZero)},
    {SWIG_LUA_CONSTTAB_INT("CastImplicit", Mezzanine::CastImplicit)},
    {SWIG_LUA_CONSTTAB_INT("CastStatic", Mezzanine::CastStatic)},
    {SWIG_LUA_CONSTTAB_INT("CastDynamic", Mezzanine::CastDynamic)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_None", Mezzanine::Plane::S_None)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Positive", Mezzanine::Plane::S_Positive)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Negative", Mezzanine::Plane::S_Negative)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Both", Mezzanine::Plane::S_Both)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *)  ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__Exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Exception *)  ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__ExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Mezzanine::Exception *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::Exception *) ((Mezzanine::NotImplementedException *) x));
}
static swig_type_info _swigt__p_ChannelType = {"_p_ChannelType", "ChannelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__ArithmeticException = {"_p_Mezzanine__ArithmeticException", "Mezzanine::ArithmeticException *", 0, 0, (void*)&_wrap_class_Mezzanine_ArithmeticException, 0};
static swig_type_info _swigt__p_Mezzanine__AxisAlignedBox = {"_p_Mezzanine__AxisAlignedBox", "Mezzanine::AxisAlignedBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryException = {"_p_Mezzanine__DirectoryException", "Mezzanine::DirectoryException *", 0, 0, (void*)&_wrap_class_Mezzanine_DirectoryException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryNotFoundException = {"_p_Mezzanine__DirectoryNotFoundException", "Mezzanine::DirectoryNotFoundException *", 0, 0, (void*)&_wrap_class_Mezzanine_DirectoryNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryPermissionException = {"_p_Mezzanine__DirectoryPermissionException", "Mezzanine::DirectoryPermissionException *", 0, 0, (void*)&_wrap_class_Mezzanine_DirectoryPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryReadException = {"_p_Mezzanine__DirectoryReadException", "Mezzanine::DirectoryReadException *", 0, 0, (void*)&_wrap_class_Mezzanine_DirectoryReadException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryWriteException = {"_p_Mezzanine__DirectoryWriteException", "Mezzanine::DirectoryWriteException *", 0, 0, (void*)&_wrap_class_Mezzanine_DirectoryWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__Exception = {"_p_Mezzanine__Exception", "Mezzanine::Exception *", 0, 0, (void*)&_wrap_class_Mezzanine_Exception, 0};
static swig_type_info _swigt__p_Mezzanine__FileException = {"_p_Mezzanine__FileException", "Mezzanine::FileException *", 0, 0, (void*)&_wrap_class_Mezzanine_FileException, 0};
static swig_type_info _swigt__p_Mezzanine__FileNotFoundException = {"_p_Mezzanine__FileNotFoundException", "Mezzanine::FileNotFoundException *", 0, 0, (void*)&_wrap_class_Mezzanine_FileNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__FilePermissionException = {"_p_Mezzanine__FilePermissionException", "Mezzanine::FilePermissionException *", 0, 0, (void*)&_wrap_class_Mezzanine_FilePermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__FileReadException = {"_p_Mezzanine__FileReadException", "Mezzanine::FileReadException *", 0, 0, (void*)&_wrap_class_Mezzanine_FileReadException, 0};
static swig_type_info _swigt__p_Mezzanine__FileWriteException = {"_p_Mezzanine__FileWriteException", "Mezzanine::FileWriteException *", 0, 0, (void*)&_wrap_class_Mezzanine_FileWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__IOException = {"_p_Mezzanine__IOException", "Mezzanine::IOException *", 0, 0, (void*)&_wrap_class_Mezzanine_IOException, 0};
static swig_type_info _swigt__p_Mezzanine__IOReadException = {"_p_Mezzanine__IOReadException", "Mezzanine::IOReadException *", 0, 0, (void*)&_wrap_class_Mezzanine_IOReadException, 0};
static swig_type_info _swigt__p_Mezzanine__IOWriteException = {"_p_Mezzanine__IOWriteException", "Mezzanine::IOWriteException *", 0, 0, (void*)&_wrap_class_Mezzanine_IOWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityDuplicateException = {"_p_Mezzanine__InstanceIdentityDuplicateException", "Mezzanine::InstanceIdentityDuplicateException *", 0, 0, (void*)&_wrap_class_Mezzanine_InstanceIdentityDuplicateException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityException = {"_p_Mezzanine__InstanceIdentityException", "Mezzanine::InstanceIdentityException *", 0, 0, (void*)&_wrap_class_Mezzanine_InstanceIdentityException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityInvalidException = {"_p_Mezzanine__InstanceIdentityInvalidException", "Mezzanine::InstanceIdentityInvalidException *", 0, 0, (void*)&_wrap_class_Mezzanine_InstanceIdentityInvalidException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityNotFoundException = {"_p_Mezzanine__InstanceIdentityNotFoundException", "Mezzanine::InstanceIdentityNotFoundException *", 0, 0, (void*)&_wrap_class_Mezzanine_InstanceIdentityNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__InternalException = {"_p_Mezzanine__InternalException", "Mezzanine::InternalException *", 0, 0, (void*)&_wrap_class_Mezzanine_InternalException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidAssignment = {"_p_Mezzanine__InvalidAssignment", "Mezzanine::InvalidAssignment *", 0, 0, (void*)&_wrap_class_Mezzanine_InvalidAssignment, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidStateException = {"_p_Mezzanine__InvalidStateException", "Mezzanine::InvalidStateException *", 0, 0, (void*)&_wrap_class_Mezzanine_InvalidStateException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidVersionException = {"_p_Mezzanine__InvalidVersionException", "Mezzanine::InvalidVersionException *", 0, 0, (void*)&_wrap_class_Mezzanine_InvalidVersionException, 0};
static swig_type_info _swigt__p_Mezzanine__LineSegment2D = {"_p_Mezzanine__LineSegment2D", "Mezzanine::LineSegment2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__MathTools__AxisAlignedQuad = {"_p_Mezzanine__MathTools__AxisAlignedQuad", "Mezzanine::MathTools::AxisAlignedQuad *", 0, 0, (void*)&_wrap_class_Mezzanine_MathTools_AxisAlignedQuad, 0};
static swig_type_info _swigt__p_Mezzanine__MathTools__PointPointInterection = {"_p_Mezzanine__MathTools__PointPointInterection", "Mezzanine::MathTools::PointPointInterection *", 0, 0, (void*)&_wrap_class_Mezzanine_MathTools_PointPointInterection, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryManagementException = {"_p_Mezzanine__MemoryManagementException", "Mezzanine::MemoryManagementException *", 0, 0, (void*)&_wrap_class_Mezzanine_MemoryManagementException, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryOutOfBoundsException = {"_p_Mezzanine__MemoryOutOfBoundsException", "Mezzanine::MemoryOutOfBoundsException *", 0, 0, (void*)&_wrap_class_Mezzanine_MemoryOutOfBoundsException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkException = {"_p_Mezzanine__NetworkException", "Mezzanine::NetworkException *", 0, 0, (void*)&_wrap_class_Mezzanine_NetworkException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkNotFoundException = {"_p_Mezzanine__NetworkNotFoundException", "Mezzanine::NetworkNotFoundException *", 0, 0, (void*)&_wrap_class_Mezzanine_NetworkNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkPermissionException = {"_p_Mezzanine__NetworkPermissionException", "Mezzanine::NetworkPermissionException *", 0, 0, (void*)&_wrap_class_Mezzanine_NetworkPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkReadException = {"_p_Mezzanine__NetworkReadException", "Mezzanine::NetworkReadException *", 0, 0, (void*)&_wrap_class_Mezzanine_NetworkReadException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkURLException = {"_p_Mezzanine__NetworkURLException", "Mezzanine::NetworkURLException *", 0, 0, (void*)&_wrap_class_Mezzanine_NetworkURLException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkWriteException = {"_p_Mezzanine__NetworkWriteException", "Mezzanine::NetworkWriteException *", 0, 0, (void*)&_wrap_class_Mezzanine_NetworkWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__NotImplementedException = {"_p_Mezzanine__NotImplementedException", "Mezzanine::NotImplementedException *", 0, 0, (void*)&_wrap_class_Mezzanine_NotImplementedException, 0};
static swig_type_info _swigt__p_Mezzanine__OutOfMemoryException = {"_p_Mezzanine__OutOfMemoryException", "Mezzanine::OutOfMemoryException *", 0, 0, (void*)&_wrap_class_Mezzanine_OutOfMemoryException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersCastException = {"_p_Mezzanine__ParametersCastException", "Mezzanine::ParametersCastException *", 0, 0, (void*)&_wrap_class_Mezzanine_ParametersCastException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersException = {"_p_Mezzanine__ParametersException", "Mezzanine::ParametersException *", 0, 0, (void*)&_wrap_class_Mezzanine_ParametersException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersRangeException = {"_p_Mezzanine__ParametersRangeException", "Mezzanine::ParametersRangeException *", 0, 0, (void*)&_wrap_class_Mezzanine_ParametersRangeException, 0};
static swig_type_info _swigt__p_Mezzanine__Plane = {"_p_Mezzanine__Plane", "Mezzanine::Plane *", 0, 0, (void*)&_wrap_class_Mezzanine_Plane, 0};
static swig_type_info _swigt__p_Mezzanine__Quaternion = {"_p_Mezzanine__Quaternion", "Mezzanine::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Ray = {"_p_Mezzanine__Ray", "Mezzanine::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RenderingAPIException = {"_p_Mezzanine__RenderingAPIException", "Mezzanine::RenderingAPIException *", 0, 0, (void*)&_wrap_class_Mezzanine_RenderingAPIException, 0};
static swig_type_info _swigt__p_Mezzanine__RuntimeAssertionException = {"_p_Mezzanine__RuntimeAssertionException", "Mezzanine::RuntimeAssertionException *", 0, 0, (void*)&_wrap_class_Mezzanine_RuntimeAssertionException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptException = {"_p_Mezzanine__ScriptException", "Mezzanine::ScriptException *", 0, 0, (void*)&_wrap_class_Mezzanine_ScriptException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaErrErrException = {"_p_Mezzanine__ScriptLuaErrErrException", "Mezzanine::ScriptLuaErrErrException *", 0, 0, (void*)&_wrap_class_Mezzanine_ScriptLuaErrErrException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaException = {"_p_Mezzanine__ScriptLuaException", "Mezzanine::ScriptLuaException *", 0, 0, (void*)&_wrap_class_Mezzanine_ScriptLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaRuntimeException = {"_p_Mezzanine__ScriptLuaRuntimeException", "Mezzanine::ScriptLuaRuntimeException *", 0, 0, (void*)&_wrap_class_Mezzanine_ScriptLuaRuntimeException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaYieldException = {"_p_Mezzanine__ScriptLuaYieldException", "Mezzanine::ScriptLuaYieldException *", 0, 0, (void*)&_wrap_class_Mezzanine_ScriptLuaYieldException, 0};
static swig_type_info _swigt__p_Mezzanine__Sphere = {"_p_Mezzanine__Sphere", "Mezzanine::Sphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorException = {"_p_Mezzanine__SyntaxErrorException", "Mezzanine::SyntaxErrorException *", 0, 0, (void*)&_wrap_class_Mezzanine_SyntaxErrorException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorLuaException = {"_p_Mezzanine__SyntaxErrorLuaException", "Mezzanine::SyntaxErrorLuaException *", 0, 0, (void*)&_wrap_class_Mezzanine_SyntaxErrorLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXMLException = {"_p_Mezzanine__SyntaxErrorXMLException", "Mezzanine::SyntaxErrorXMLException *", 0, 0, (void*)&_wrap_class_Mezzanine_SyntaxErrorXMLException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXPathException = {"_p_Mezzanine__SyntaxErrorXPathException", "Mezzanine::SyntaxErrorXPathException *", 0, 0, (void*)&_wrap_class_Mezzanine_SyntaxErrorXPathException, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__RawFile = {"_p_Mezzanine__Threading__RawFile", "Mezzanine::Threading::RawFile *|Mezzanine::RawFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2 = {"_p_Mezzanine__Vector2", "Mezzanine::Vector2 *", 0, 0, (void*)&_wrap_class_Mezzanine_Vector2, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2LengthCompare = {"_p_Mezzanine__Vector2LengthCompare", "Mezzanine::Vector2LengthCompare *", 0, 0, (void*)&_wrap_class_Mezzanine_Vector2LengthCompare, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3 = {"_p_Mezzanine__Vector3", "Mezzanine::Vector3 *|Mezzanine::Physics::Vector3 *", 0, 0, (void*)&_wrap_class_Mezzanine_Vector3, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3LengthCompare = {"_p_Mezzanine__Vector3LengthCompare", "Mezzanine::Vector3LengthCompare *", 0, 0, (void*)&_wrap_class_Mezzanine_Vector3LengthCompare, 0};
static swig_type_info _swigt__p_Ogre__Plane = {"_p_Ogre__Plane", "Ogre::Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector2 = {"_p_Ogre__Vector2", "Ogre::Vector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RayTestResult = {"_p_RayTestResult", "RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XML__Node = {"_p_XML__Node", "XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Mezzanine::Boole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Mezzanine::PreciseReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__LineSegment2D_t = {"_p_std__pairT_bool_Mezzanine__LineSegment2D_t", "Mezzanine::MathTools::Line2DTestResult *|std::pair< bool,Mezzanine::LineSegment2D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__LineSegment3D_t = {"_p_std__pairT_bool_Mezzanine__LineSegment3D_t", "std::pair< bool,Mezzanine::LineSegment3D > *|Mezzanine::MathTools::Line3DTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Ray_t = {"_p_std__pairT_bool_Mezzanine__Ray_t", "std::pair< bool,Mezzanine::Ray > *|Mezzanine::MathTools::GeometryRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Vector2_t = {"_p_std__pairT_bool_Mezzanine__Vector2_t", "Mezzanine::MathTools::Point2DTestResult *|std::pair< bool,Mezzanine::Vector2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Vector3_t = {"_p_std__pairT_bool_Mezzanine__Vector3_t", "Mezzanine::Plane::RayTestResult *|Mezzanine::MathTools::Point3DTestResult *|std::pair< bool,Mezzanine::Vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ChannelType,
  &_swigt__p_Mezzanine__ArithmeticException,
  &_swigt__p_Mezzanine__AxisAlignedBox,
  &_swigt__p_Mezzanine__DirectoryException,
  &_swigt__p_Mezzanine__DirectoryNotFoundException,
  &_swigt__p_Mezzanine__DirectoryPermissionException,
  &_swigt__p_Mezzanine__DirectoryReadException,
  &_swigt__p_Mezzanine__DirectoryWriteException,
  &_swigt__p_Mezzanine__Exception,
  &_swigt__p_Mezzanine__FileException,
  &_swigt__p_Mezzanine__FileNotFoundException,
  &_swigt__p_Mezzanine__FilePermissionException,
  &_swigt__p_Mezzanine__FileReadException,
  &_swigt__p_Mezzanine__FileWriteException,
  &_swigt__p_Mezzanine__IOException,
  &_swigt__p_Mezzanine__IOReadException,
  &_swigt__p_Mezzanine__IOWriteException,
  &_swigt__p_Mezzanine__InstanceIdentityDuplicateException,
  &_swigt__p_Mezzanine__InstanceIdentityException,
  &_swigt__p_Mezzanine__InstanceIdentityInvalidException,
  &_swigt__p_Mezzanine__InstanceIdentityNotFoundException,
  &_swigt__p_Mezzanine__InternalException,
  &_swigt__p_Mezzanine__InvalidAssignment,
  &_swigt__p_Mezzanine__InvalidStateException,
  &_swigt__p_Mezzanine__InvalidVersionException,
  &_swigt__p_Mezzanine__LineSegment2D,
  &_swigt__p_Mezzanine__MathTools__AxisAlignedQuad,
  &_swigt__p_Mezzanine__MathTools__PointPointInterection,
  &_swigt__p_Mezzanine__MemoryManagementException,
  &_swigt__p_Mezzanine__MemoryOutOfBoundsException,
  &_swigt__p_Mezzanine__NetworkException,
  &_swigt__p_Mezzanine__NetworkNotFoundException,
  &_swigt__p_Mezzanine__NetworkPermissionException,
  &_swigt__p_Mezzanine__NetworkReadException,
  &_swigt__p_Mezzanine__NetworkURLException,
  &_swigt__p_Mezzanine__NetworkWriteException,
  &_swigt__p_Mezzanine__NotImplementedException,
  &_swigt__p_Mezzanine__OutOfMemoryException,
  &_swigt__p_Mezzanine__ParametersCastException,
  &_swigt__p_Mezzanine__ParametersException,
  &_swigt__p_Mezzanine__ParametersRangeException,
  &_swigt__p_Mezzanine__Plane,
  &_swigt__p_Mezzanine__Quaternion,
  &_swigt__p_Mezzanine__Ray,
  &_swigt__p_Mezzanine__RenderingAPIException,
  &_swigt__p_Mezzanine__RuntimeAssertionException,
  &_swigt__p_Mezzanine__ScriptException,
  &_swigt__p_Mezzanine__ScriptLuaErrErrException,
  &_swigt__p_Mezzanine__ScriptLuaException,
  &_swigt__p_Mezzanine__ScriptLuaRuntimeException,
  &_swigt__p_Mezzanine__ScriptLuaYieldException,
  &_swigt__p_Mezzanine__Sphere,
  &_swigt__p_Mezzanine__SyntaxErrorException,
  &_swigt__p_Mezzanine__SyntaxErrorLuaException,
  &_swigt__p_Mezzanine__SyntaxErrorXMLException,
  &_swigt__p_Mezzanine__SyntaxErrorXPathException,
  &_swigt__p_Mezzanine__Threading__RawFile,
  &_swigt__p_Mezzanine__Vector2,
  &_swigt__p_Mezzanine__Vector2LengthCompare,
  &_swigt__p_Mezzanine__Vector3,
  &_swigt__p_Mezzanine__Vector3LengthCompare,
  &_swigt__p_Ogre__Plane,
  &_swigt__p_Ogre__Vector2,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_RayTestResult,
  &_swigt__p_SDL_Event,
  &_swigt__p_XML__Node,
  &_swigt__p_bool,
  &_swigt__p_btVector3,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__exception,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__pairT_bool_Mezzanine__LineSegment2D_t,
  &_swigt__p_std__pairT_bool_Mezzanine__LineSegment3D_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Ray_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Vector2_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Vector3_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_ChannelType[] = {  {&_swigt__p_ChannelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ArithmeticException[] = {  {&_swigt__p_Mezzanine__ArithmeticException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AxisAlignedBox[] = {  {&_swigt__p_Mezzanine__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryException[] = {  {&_swigt__p_Mezzanine__DirectoryException, 0, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryNotFoundException[] = {  {&_swigt__p_Mezzanine__DirectoryNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryPermissionException[] = {  {&_swigt__p_Mezzanine__DirectoryPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryReadException[] = {  {&_swigt__p_Mezzanine__DirectoryReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryWriteException[] = {  {&_swigt__p_Mezzanine__DirectoryWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Exception[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__Exception, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_Mezzanine__Exception, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__Exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileException[] = {  {&_swigt__p_Mezzanine__FileException, 0, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileNotFoundException[] = {  {&_swigt__p_Mezzanine__FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FilePermissionException[] = {  {&_swigt__p_Mezzanine__FilePermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileReadException[] = {  {&_swigt__p_Mezzanine__FileReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileWriteException[] = {  {&_swigt__p_Mezzanine__FileWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOReadException[] = {  {&_swigt__p_Mezzanine__IOReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOWriteException[] = {  {&_swigt__p_Mezzanine__IOWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityDuplicateException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityException, 0, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityInvalidException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityNotFoundException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InternalException[] = {  {&_swigt__p_Mezzanine__InternalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidAssignment[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidStateException[] = {  {&_swigt__p_Mezzanine__InvalidStateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidVersionException[] = {  {&_swigt__p_Mezzanine__InvalidVersionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__LineSegment2D[] = {  {&_swigt__p_Mezzanine__LineSegment2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MathTools__AxisAlignedQuad[] = {  {&_swigt__p_Mezzanine__MathTools__AxisAlignedQuad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MathTools__PointPointInterection[] = {  {&_swigt__p_Mezzanine__MathTools__PointPointInterection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryManagementException[] = {  {&_swigt__p_Mezzanine__MemoryManagementException, 0, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryOutOfBoundsException[] = {  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkException[] = {  {&_swigt__p_Mezzanine__NetworkException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkNotFoundException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkPermissionException[] = {  {&_swigt__p_Mezzanine__NetworkPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkReadException[] = {  {&_swigt__p_Mezzanine__NetworkReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkURLException[] = {  {&_swigt__p_Mezzanine__NetworkURLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkWriteException[] = {  {&_swigt__p_Mezzanine__NetworkWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NotImplementedException[] = {  {&_swigt__p_Mezzanine__NotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__OutOfMemoryException[] = {  {&_swigt__p_Mezzanine__OutOfMemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersCastException[] = {  {&_swigt__p_Mezzanine__ParametersCastException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersException[] = {  {&_swigt__p_Mezzanine__ParametersException, 0, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersRangeException[] = {  {&_swigt__p_Mezzanine__ParametersRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Plane[] = {  {&_swigt__p_Mezzanine__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Quaternion[] = {  {&_swigt__p_Mezzanine__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Ray[] = {  {&_swigt__p_Mezzanine__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RenderingAPIException[] = {  {&_swigt__p_Mezzanine__RenderingAPIException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RuntimeAssertionException[] = {  {&_swigt__p_Mezzanine__RuntimeAssertionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptException[] = {  {&_swigt__p_Mezzanine__ScriptException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaErrErrException[] = {  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaException[] = {  {&_swigt__p_Mezzanine__ScriptLuaException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaRuntimeException[] = {  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaYieldException[] = {  {&_swigt__p_Mezzanine__ScriptLuaYieldException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Sphere[] = {  {&_swigt__p_Mezzanine__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorException, 0, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorLuaException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXMLException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXPathException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__RawFile[] = {  {&_swigt__p_Mezzanine__Threading__RawFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2[] = {  {&_swigt__p_Mezzanine__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector2LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3[] = {  {&_swigt__p_Mezzanine__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector3LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Plane[] = {  {&_swigt__p_Ogre__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector2[] = {  {&_swigt__p_Ogre__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RayTestResult[] = {  {&_swigt__p_RayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XML__Node[] = {  {&_swigt__p_XML__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__Exception, _p_Mezzanine__ExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__LineSegment2D_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__LineSegment2D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__LineSegment3D_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__LineSegment3D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Ray_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Ray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Vector2_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Vector2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Vector3_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ChannelType,
  _swigc__p_Mezzanine__ArithmeticException,
  _swigc__p_Mezzanine__AxisAlignedBox,
  _swigc__p_Mezzanine__DirectoryException,
  _swigc__p_Mezzanine__DirectoryNotFoundException,
  _swigc__p_Mezzanine__DirectoryPermissionException,
  _swigc__p_Mezzanine__DirectoryReadException,
  _swigc__p_Mezzanine__DirectoryWriteException,
  _swigc__p_Mezzanine__Exception,
  _swigc__p_Mezzanine__FileException,
  _swigc__p_Mezzanine__FileNotFoundException,
  _swigc__p_Mezzanine__FilePermissionException,
  _swigc__p_Mezzanine__FileReadException,
  _swigc__p_Mezzanine__FileWriteException,
  _swigc__p_Mezzanine__IOException,
  _swigc__p_Mezzanine__IOReadException,
  _swigc__p_Mezzanine__IOWriteException,
  _swigc__p_Mezzanine__InstanceIdentityDuplicateException,
  _swigc__p_Mezzanine__InstanceIdentityException,
  _swigc__p_Mezzanine__InstanceIdentityInvalidException,
  _swigc__p_Mezzanine__InstanceIdentityNotFoundException,
  _swigc__p_Mezzanine__InternalException,
  _swigc__p_Mezzanine__InvalidAssignment,
  _swigc__p_Mezzanine__InvalidStateException,
  _swigc__p_Mezzanine__InvalidVersionException,
  _swigc__p_Mezzanine__LineSegment2D,
  _swigc__p_Mezzanine__MathTools__AxisAlignedQuad,
  _swigc__p_Mezzanine__MathTools__PointPointInterection,
  _swigc__p_Mezzanine__MemoryManagementException,
  _swigc__p_Mezzanine__MemoryOutOfBoundsException,
  _swigc__p_Mezzanine__NetworkException,
  _swigc__p_Mezzanine__NetworkNotFoundException,
  _swigc__p_Mezzanine__NetworkPermissionException,
  _swigc__p_Mezzanine__NetworkReadException,
  _swigc__p_Mezzanine__NetworkURLException,
  _swigc__p_Mezzanine__NetworkWriteException,
  _swigc__p_Mezzanine__NotImplementedException,
  _swigc__p_Mezzanine__OutOfMemoryException,
  _swigc__p_Mezzanine__ParametersCastException,
  _swigc__p_Mezzanine__ParametersException,
  _swigc__p_Mezzanine__ParametersRangeException,
  _swigc__p_Mezzanine__Plane,
  _swigc__p_Mezzanine__Quaternion,
  _swigc__p_Mezzanine__Ray,
  _swigc__p_Mezzanine__RenderingAPIException,
  _swigc__p_Mezzanine__RuntimeAssertionException,
  _swigc__p_Mezzanine__ScriptException,
  _swigc__p_Mezzanine__ScriptLuaErrErrException,
  _swigc__p_Mezzanine__ScriptLuaException,
  _swigc__p_Mezzanine__ScriptLuaRuntimeException,
  _swigc__p_Mezzanine__ScriptLuaYieldException,
  _swigc__p_Mezzanine__Sphere,
  _swigc__p_Mezzanine__SyntaxErrorException,
  _swigc__p_Mezzanine__SyntaxErrorLuaException,
  _swigc__p_Mezzanine__SyntaxErrorXMLException,
  _swigc__p_Mezzanine__SyntaxErrorXPathException,
  _swigc__p_Mezzanine__Threading__RawFile,
  _swigc__p_Mezzanine__Vector2,
  _swigc__p_Mezzanine__Vector2LengthCompare,
  _swigc__p_Mezzanine__Vector3,
  _swigc__p_Mezzanine__Vector3LengthCompare,
  _swigc__p_Ogre__Plane,
  _swigc__p_Ogre__Vector2,
  _swigc__p_Ogre__Vector3,
  _swigc__p_RayTestResult,
  _swigc__p_SDL_Event,
  _swigc__p_XML__Node,
  _swigc__p_bool,
  _swigc__p_btVector3,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__exception,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__pairT_bool_Mezzanine__LineSegment2D_t,
  _swigc__p_std__pairT_bool_Mezzanine__LineSegment3D_t,
  _swigc__p_std__pairT_bool_Mezzanine__Ray_t,
  _swigc__p_std__pairT_bool_Mezzanine__Vector2_t,
  _swigc__p_std__pairT_bool_Mezzanine__Vector3_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

