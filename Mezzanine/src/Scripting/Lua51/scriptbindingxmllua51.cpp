/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA)
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long long userData = (unsigned long long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);

  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);

  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Mezzanine__XML__Attribute swig_types[0]
#define SWIGTYPE_p_Mezzanine__XML__AttributeIterator swig_types[1]
#define SWIGTYPE_p_Mezzanine__XML__AttributeStruct swig_types[2]
#define SWIGTYPE_p_Mezzanine__XML__Document swig_types[3]
#define SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator swig_types[4]
#define SWIGTYPE_p_Mezzanine__XML__Node swig_types[5]
#define SWIGTYPE_p_Mezzanine__XML__NodeIterator swig_types[6]
#define SWIGTYPE_p_Mezzanine__XML__NodeStruct swig_types[7]
#define SWIGTYPE_p_Mezzanine__XML__NodeText swig_types[8]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t swig_types[9]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t swig_types[10]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t swig_types[11]
#define SWIGTYPE_p_Mezzanine__XML__ParseResult swig_types[12]
#define SWIGTYPE_p_Mezzanine__XML__TreeWalker swig_types[13]
#define SWIGTYPE_p_Mezzanine__XML__XPathNode swig_types[14]
#define SWIGTYPE_p_Mezzanine__XML__XPathNodeSet swig_types[15]
#define SWIGTYPE_p_Mezzanine__XML__XPathParseResult swig_types[16]
#define SWIGTYPE_p_Mezzanine__XML__XPathQuery swig_types[17]
#define SWIGTYPE_p_Mezzanine__XML__XPathVariable swig_types[18]
#define SWIGTYPE_p_Mezzanine__XML__XPathVariableSet swig_types[19]
#define SWIGTYPE_p_SDL_Event swig_types[20]
#define SWIGTYPE_p_attribute_iterator swig_types[21]
#define SWIGTYPE_p_bool swig_types[22]
#define SWIGTYPE_p_char swig_types[23]
#define SWIGTYPE_p_difference_type swig_types[24]
#define SWIGTYPE_p_double swig_types[25]
#define SWIGTYPE_p_f_p_void__void swig_types[26]
#define SWIGTYPE_p_f_size_t__p_void swig_types[27]
#define SWIGTYPE_p_float swig_types[28]
#define SWIGTYPE_p_int swig_types[29]
#define SWIGTYPE_p_iterator swig_types[30]
#define SWIGTYPE_p_iterator_category swig_types[31]
#define SWIGTYPE_p_long_long swig_types[32]
#define SWIGTYPE_p_ptrdiff_t swig_types[33]
#define SWIGTYPE_p_short swig_types[34]
#define SWIGTYPE_p_signed_char swig_types[35]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[36]
#define SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t swig_types[37]
#define SWIGTYPE_p_std__istream swig_types[38]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[39]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[40]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[41]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[42]
#define SWIGTYPE_p_std__string swig_types[43]
#define SWIGTYPE_p_std__stringstream swig_types[44]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[45]
#define SWIGTYPE_p_std__wstring swig_types[46]
#define SWIGTYPE_p_unsigned_char swig_types[47]
#define SWIGTYPE_p_unsigned_int swig_types[48]
#define SWIGTYPE_p_unsigned_long swig_types[49]
#define SWIGTYPE_p_unsigned_long_long swig_types[50]
#define SWIGTYPE_p_unsigned_short swig_types[51]
#define SWIGTYPE_p_value_type swig_types[52]
#define SWIGTYPE_p_wchar_t swig_types[53]
static swig_type_info *swig_types[55];
static swig_module_info swig_module = {swig_types, 54, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "MezzanineXMLSafe"
#define SWIG_init      luaopen_MezzanineXMLSafe
#define SWIG_init_user luaopen_MezzanineXMLSafe_user

#define SWIG_LUACODE   luaopen_MezzanineXMLSafe_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"
        #include "SDL.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        #ifdef GetExceptionCode
        #undef GetExceptionCode
        #endif

        using namespace Mezzanine;
        using namespace Mezzanine::Threading;


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <deque>
#include <stdexcept>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;

  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;

  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;

  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }

  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;

  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }

  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;

  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }

  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;

  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }

  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;

  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }

  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;

  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }

  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size},
    {"length", _wrap_string_length},
    {"empty", _wrap_string_empty},
    {"c_str", _wrap_string_c_str},
    {"data", _wrap_string_data},
    {"assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_Attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Attribute",0,0)
  result = (Mezzanine::XML::Attribute *)new Mezzanine::XML::Attribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeStruct *arg1 = (Mezzanine::XML::AttributeStruct *) 0 ;
  Mezzanine::XML::Attribute *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Attribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Attribute",1,"Mezzanine::XML::AttributeStruct *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeStruct,0))){
    SWIG_fail_ptr("new_Attribute",1,SWIGTYPE_p_Mezzanine__XML__AttributeStruct);
  }

  result = (Mezzanine::XML::Attribute *)new Mezzanine::XML::Attribute(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Attribute__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeStruct, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Attribute__SWIG_1(L);
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::Attribute()\n"
    "    Mezzanine::XML::Attribute::Attribute(Mezzanine::XML::AttributeStruct *)\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___lt",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___lt",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator <((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___le",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___le",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator <=((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Empty",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_Empty",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Name",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_Name",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Value",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_Value",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::Attribute const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsString",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->AsString((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsString",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->AsString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsString__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsString(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Attribute::AsString() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  int arg2 ;
  int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",2,"int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInt",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((Mezzanine::XML::Attribute const *)arg1)->AsInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInt",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (int)((Mezzanine::XML::Attribute const *)arg1)->AsInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsInt__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInt(int) const\n"
    "    Mezzanine::XML::Attribute::AsInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsUint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  unsigned int arg2 ;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",2,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsUint",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((Mezzanine::XML::Attribute const *)arg1)->AsUint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsUint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsUint",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (unsigned int)((Mezzanine::XML::Attribute const *)arg1)->AsUint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsUint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsUint__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsUint__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsUint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsUint(unsigned int) const\n"
    "    Mezzanine::XML::Attribute::AsUint() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  double arg2 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",2,"double");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Mezzanine::XML::Attribute const *)arg1)->AsDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (double)((Mezzanine::XML::Attribute const *)arg1)->AsDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsDouble__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsDouble__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsDouble(double) const\n"
    "    Mezzanine::XML::Attribute::AsDouble() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  float arg2 ;
  float result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",2,"float");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((Mezzanine::XML::Attribute const *)arg1)->AsFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  float result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (float)((Mezzanine::XML::Attribute const *)arg1)->AsFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsFloat__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsFloat(float) const\n"
    "    Mezzanine::XML::Attribute::AsFloat() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",2,"Mezzanine::Real");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsReal",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::XML::Attribute const *)arg1)->AsReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Real result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsReal",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::Real)((Mezzanine::XML::Attribute const *)arg1)->AsReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsReal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsReal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsReal__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsReal(Mezzanine::Real) const\n"
    "    Mezzanine::XML::Attribute::AsReal() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsWhole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",2,"Mezzanine::Whole");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)((Mezzanine::XML::Attribute const *)arg1)->AsWhole(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsWhole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Whole result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::Whole)((Mezzanine::XML::Attribute const *)arg1)->AsWhole();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsWhole(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsWhole__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsWhole__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsWhole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsWhole(Mezzanine::Whole) const\n"
    "    Mezzanine::XML::Attribute::AsWhole() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsInteger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",2,"Mezzanine::Integer");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)((Mezzanine::XML::Attribute const *)arg1)->AsInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInteger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Integer result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::Integer)((Mezzanine::XML::Attribute const *)arg1)->AsInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInteger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsInteger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsInteger__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsInteger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInteger(Mezzanine::Integer) const\n"
    "    Mezzanine::XML::Attribute::AsInteger() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool arg2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",2,"bool");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsBool",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->AsBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsBool",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->AsBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsBool__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Attribute_AsBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsBool(bool) const\n"
    "    Mezzanine::XML::Attribute::AsBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",1,"Mezzanine::XML::Attribute *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_SetName",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",1,"Mezzanine::XML::Attribute *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_SetValue",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->SetValue((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_GetNextAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::GetNextAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetNextAttribute",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_GetNextAttribute",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = ((Mezzanine::XML::Attribute const *)arg1)->GetNextAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_GetPreviousAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::GetPreviousAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetPreviousAttribute",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_GetPreviousAttribute",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = ((Mezzanine::XML::Attribute const *)arg1)->GetPreviousAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::HashValue",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_HashValue",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = ((Mezzanine::XML::Attribute const *)arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::AttributeStruct *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::InternalObject",1,"Mezzanine::XML::Attribute const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (Mezzanine::XML::AttributeStruct *)((Mezzanine::XML::Attribute const *)arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeStruct,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Attribute(void *obj) {
Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_Attribute_methods[] = {
    {"__lt", _wrap_Attribute___lt},
    {"__le", _wrap_Attribute___le},
    {"Empty", _wrap_Attribute_Empty},
    {"Name", _wrap_Attribute_Name},
    {"Value", _wrap_Attribute_Value},
    {"AsString", _wrap_Attribute_AsString},
    {"AsInt", _wrap_Attribute_AsInt},
    {"AsUint", _wrap_Attribute_AsUint},
    {"AsDouble", _wrap_Attribute_AsDouble},
    {"AsFloat", _wrap_Attribute_AsFloat},
    {"AsReal", _wrap_Attribute_AsReal},
    {"AsWhole", _wrap_Attribute_AsWhole},
    {"AsInteger", _wrap_Attribute_AsInteger},
    {"AsBool", _wrap_Attribute_AsBool},
    {"SetName", _wrap_Attribute_SetName},
    {"SetValue", _wrap_Attribute_SetValue},
    {"GetNextAttribute", _wrap_Attribute_GetNextAttribute},
    {"GetPreviousAttribute", _wrap_Attribute_GetPreviousAttribute},
    {"HashValue", _wrap_Attribute_HashValue},
    {"InternalObject", _wrap_Attribute_InternalObject},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_Attribute_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_Attribute_bases[] = {0};
static const char *swig_Mezzanine_XML_Attribute_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_Attribute = { "Attribute", &SWIGTYPE_p_Mezzanine__XML__Attribute,_wrap_new_Attribute, swig_delete_Attribute, swig_Mezzanine_XML_Attribute_methods, swig_Mezzanine_XML_Attribute_attributes, swig_Mezzanine_XML_Attribute_bases, swig_Mezzanine_XML_Attribute_base_names };

static int _wrap_ParseMinimal_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseMinimal",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseMinimal;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParsePi_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParsePi",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParsePi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseComments_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseComments",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseComments;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseCdata_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseCdata",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseCdata;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWsPcdata_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseWsPcdata",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWsPcdata;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseEscapes_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseEscapes",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseEscapes;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseEol_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseEol",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseEol;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWconvAttribute_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseWconvAttribute",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWconvAttribute;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWnormAttribute_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseWnormAttribute",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWnormAttribute;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseDeclaration_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseDeclaration",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseDeclaration;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseDocType_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseDocType",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseDocType;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWsPcdata_single_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseWsPcdata_single",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWsPcdata_single;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseDefault",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseDefault;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseFull_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::ParseFull",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseFull;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatIndent_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatIndent",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatIndent;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatWriteBom_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatWriteBom",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatWriteBom;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatRaw_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatRaw",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatRaw;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatNoDeclaration_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatNoDeclaration",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatNoDeclaration;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatNoEscapes_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatNoEscapes",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatNoEscapes;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatSaveFileText_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatSaveFileText",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatSaveFileText;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::FormatDefault",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatDefault;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Node",0,0)
  result = (Mezzanine::XML::Node *)new Mezzanine::XML::Node();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeStruct *arg1 = (Mezzanine::XML::NodeStruct *) 0 ;
  Mezzanine::XML::Node *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Node",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Node",1,"Mezzanine::XML::NodeStruct *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0))){
    SWIG_fail_ptr("new_Node",1,SWIGTYPE_p_Mezzanine__XML__NodeStruct);
  }

  result = (Mezzanine::XML::Node *)new Mezzanine::XML::Node(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Node__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Node__SWIG_1(L);
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Node'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Node()\n"
    "    Mezzanine::XML::Node::Node(Mezzanine::XML::NodeStruct *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___lt",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___lt",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___le",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___le",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Empty",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Empty",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)((Mezzanine::XML::Node const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType result;

  SWIG_check_num_args("Mezzanine::XML::Node::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Type",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Type",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::XML::NodeType)((Mezzanine::XML::Node const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Name",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Name",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Value",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Value",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetFirstAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstAttribute",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetFirstAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetFirstAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetLastAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetLastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastAttribute",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetLastAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetLastAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetFirstChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstChild",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetFirstChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetFirstChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetLastChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetLastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastChild",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetLastChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetLastChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetNextSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetNextSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetPreviousSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetPreviousSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetParent",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetParent",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetRoot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetRoot",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetRoot",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetRoot();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeText result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetText",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetText",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetText();
  {
    Mezzanine::XML::NodeText * resultptr = new Mezzanine::XML::NodeText((const Mezzanine::XML::NodeText &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",1,"Mezzanine::XML::Node const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((Mezzanine::XML::Node const *)arg1)->GetChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetNextSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetNextSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetNextSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetNextSibling__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_GetNextSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetNextSibling() const\n"
    "    Mezzanine::XML::Node::GetNextSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_GetPreviousSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetPreviousSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetPreviousSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetPreviousSibling__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_GetPreviousSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetPreviousSibling() const\n"
    "    Mezzanine::XML::Node::GetPreviousSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_GetChildValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->GetChildValue();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetChildValue__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetChildValue__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_GetChildValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildValue() const\n"
    "    Mezzanine::XML::Node::GetChildValue(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_SetName",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_SetValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertAttributeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertAttributeAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertAttributeAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertAttributeBefore(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertAttributeBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertAttributeBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::XML::NodeType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (arg1)->AppendChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::Node *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->AppendChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::XML::NodeType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (arg1)->PrependChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::Node *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->PrependChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->AppendChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_AppendChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_AppendChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_AppendChild__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_AppendChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::AppendChild()\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_PrependChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->PrependChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_PrependChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_PrependChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_PrependChild__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_PrependChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::PrependChild()\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertChildAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildAfter__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_InsertChildAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertChildBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildBefore__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_InsertChildBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_AppendCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_AppendCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_AppendCopy__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_AppendCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_PrependCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_PrependCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_PrependCopy__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_PrependCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertCopyAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyAfter__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_InsertCopyAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertCopyBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyBefore__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_InsertCopyBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_RemoveAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_RemoveAttribute",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)(arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_RemoveAttribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_RemoveAttribute__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_RemoveAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_RemoveChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveChild",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_RemoveChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_RemoveChild__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_RemoveChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_FindChildbyAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",4,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  arg4 = (Mezzanine::Char8 *)lua_tostring(L, 4);
  result = ((Mezzanine::XML::Node const *)arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindChildbyAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = ((Mezzanine::XML::Node const *)arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindChildbyAttribute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_FindChildbyAttribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Node_FindChildbyAttribute__SWIG_0(L);
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_FindChildbyAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 arg2 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::Node::Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Path",2,"Mezzanine::Char8");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Path",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (lua_tostring(L, 2))[0];
  result = ((Mezzanine::XML::Node const *)arg1)->Path(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::Node::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Path",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->Path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_Path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Node_Path__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Path(Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::Path() const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_FirstElementByPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",3,"Mezzanine::Char8");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = ((Mezzanine::XML::Node const *)arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FirstElementByPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FirstElementByPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_FirstElementByPath__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Node_FirstElementByPath__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_FirstElementByPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *,Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_Traverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::Traverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",2,"Mezzanine::XML::TreeWalker &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Traverse",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("Node_Traverse",2,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }

  result = (bool)(arg1)->Traverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",3,"Mezzanine::XML::XPathVariableSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("Node_FindSingleNode",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::XML::XPathQuery const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("Node_FindSingleNode",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_FindSingleNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_FindSingleNode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_FindSingleNode__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_FindSingleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_FindNodes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",3,"Mezzanine::XML::XPathVariableSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("Node_FindNodes",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindNodes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindNodes__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::XML::XPathQuery const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("Node_FindNodes",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindNodes(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_FindNodes__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_FindNodes__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_FindNodes__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_FindNodes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::begin",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_begin",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->begin();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::end",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_end",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->end();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_attributes_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes_begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_begin",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_attributes_begin",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->attributes_begin();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_attributes_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_end",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_attributes_end",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->attributes_end();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildren__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->GetChildren();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildren__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildren(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetChildren__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetChildren__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Node_GetChildren'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildren() const\n"
    "    Mezzanine::XML::Node::GetChildren(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_attributes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_attributes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->attributes();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_OffSetDebug(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  ptrdiff_t result;

  SWIG_check_num_args("Mezzanine::XML::Node::OffSetDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::OffSetDebug",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_OffSetDebug",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->OffSetDebug();
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::Node::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::HashValue",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_HashValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = ((Mezzanine::XML::Node const *)arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InternalObject",1,"Mezzanine::XML::Node const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::XML::NodeStruct *)((Mezzanine::XML::Node const *)arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Node(void *obj) {
Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_Node_methods[] = {
    {"__lt", _wrap_Node___lt},
    {"__le", _wrap_Node___le},
    {"Empty", _wrap_Node_Empty},
    {"Type", _wrap_Node_Type},
    {"Name", _wrap_Node_Name},
    {"Value", _wrap_Node_Value},
    {"GetFirstAttribute", _wrap_Node_GetFirstAttribute},
    {"GetLastAttribute", _wrap_Node_GetLastAttribute},
    {"GetFirstChild", _wrap_Node_GetFirstChild},
    {"GetLastChild", _wrap_Node_GetLastChild},
    {"GetParent", _wrap_Node_GetParent},
    {"GetRoot", _wrap_Node_GetRoot},
    {"GetText", _wrap_Node_GetText},
    {"GetChild", _wrap_Node_GetChild},
    {"GetAttribute", _wrap_Node_GetAttribute},
    {"GetNextSibling", _wrap_Node_GetNextSibling},
    {"GetPreviousSibling", _wrap_Node_GetPreviousSibling},
    {"GetChildValue", _wrap_Node_GetChildValue},
    {"SetName", _wrap_Node_SetName},
    {"SetValue", _wrap_Node_SetValue},
    {"AppendAttribute", _wrap_Node_AppendAttribute},
    {"PrependAttribute", _wrap_Node_PrependAttribute},
    {"InsertAttributeAfter", _wrap_Node_InsertAttributeAfter},
    {"InsertAttributeBefore", _wrap_Node_InsertAttributeBefore},
    {"AppendChild", _wrap_Node_AppendChild},
    {"PrependChild", _wrap_Node_PrependChild},
    {"InsertChildAfter", _wrap_Node_InsertChildAfter},
    {"InsertChildBefore", _wrap_Node_InsertChildBefore},
    {"AppendCopy", _wrap_Node_AppendCopy},
    {"PrependCopy", _wrap_Node_PrependCopy},
    {"InsertCopyAfter", _wrap_Node_InsertCopyAfter},
    {"InsertCopyBefore", _wrap_Node_InsertCopyBefore},
    {"RemoveAttribute", _wrap_Node_RemoveAttribute},
    {"RemoveChild", _wrap_Node_RemoveChild},
    {"FindChildbyAttribute", _wrap_Node_FindChildbyAttribute},
    {"Path", _wrap_Node_Path},
    {"FirstElementByPath", _wrap_Node_FirstElementByPath},
    {"Traverse", _wrap_Node_Traverse},
    {"FindSingleNode", _wrap_Node_FindSingleNode},
    {"FindNodes", _wrap_Node_FindNodes},
    {"begin", _wrap_Node_begin},
    {"end", _wrap_Node_end},
    {"attributes_begin", _wrap_Node_attributes_begin},
    {"attributes_end", _wrap_Node_attributes_end},
    {"GetChildren", _wrap_Node_GetChildren},
    {"attributes", _wrap_Node_attributes},
    {"OffSetDebug", _wrap_Node_OffSetDebug},
    {"HashValue", _wrap_Node_HashValue},
    {"InternalObject", _wrap_Node_InternalObject},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_Node_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_Node_bases[] = {0};
static const char *swig_Mezzanine_XML_Node_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_Node = { "Node", &SWIGTYPE_p_Mezzanine__XML__Node,_wrap_new_Node, swig_delete_Node, swig_Mezzanine_XML_Node_methods, swig_Mezzanine_XML_Node_attributes, swig_Mezzanine_XML_Node_bases, swig_Mezzanine_XML_Node_base_names };

static int _wrap_new_AttributeIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::AttributeIterator",0,0)
  result = (Mezzanine::XML::AttributeIterator *)new Mezzanine::XML::AttributeIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttributeIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::AttributeIterator *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::AttributeIterator",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::AttributeIterator",1,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::AttributeIterator",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("new_AttributeIterator",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_AttributeIterator",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::XML::AttributeIterator *)new Mezzanine::XML::AttributeIterator((Mezzanine::XML::Attribute const &)*arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttributeIterator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AttributeIterator__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AttributeIterator__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AttributeIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::AttributeIterator::AttributeIterator()\n"
    "    Mezzanine::XML::AttributeIterator::AttributeIterator(Mezzanine::XML::Attribute const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::AttributeIterator *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator ==",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator ==",2,"Mezzanine::XML::AttributeIterator const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___eq",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___eq",2,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (bool)((Mezzanine::XML::AttributeIterator const *)arg1)->operator ==((Mezzanine::XML::AttributeIterator const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___ref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::operator *",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator *",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___ref__",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::XML::Attribute *) &((Mezzanine::XML::AttributeIterator const *)arg1)->operator *();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___deref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator ->",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___deref__",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::XML::Attribute *)((Mezzanine::XML::AttributeIterator const *)arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___lt",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("AttributeIterator___lt",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)(*arg1)->operator <((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___le",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("AttributeIterator___le",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Empty",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_Empty",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (bool)(*arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Name",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_Name",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Value",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_Value",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::AttributeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsString",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)(*arg1)->AsString((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsString",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->AsString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsString__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsString(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Attribute::AsString() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  int arg2 ;
  int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",2,"int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInt",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(*arg1)->AsInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInt",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (int)(*arg1)->AsInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsInt__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInt(int) const\n"
    "    Mezzanine::XML::Attribute::AsInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsUint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  unsigned int arg2 ;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",2,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsUint",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(*arg1)->AsUint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsUint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsUint",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (unsigned int)(*arg1)->AsUint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsUint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsUint__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsUint__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsUint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsUint(unsigned int) const\n"
    "    Mezzanine::XML::Attribute::AsUint() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  double arg2 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",2,"double");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(*arg1)->AsDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (double)(*arg1)->AsDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsDouble__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsDouble__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsDouble(double) const\n"
    "    Mezzanine::XML::Attribute::AsDouble() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  float arg2 ;
  float result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",2,"float");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(*arg1)->AsFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  float result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (float)(*arg1)->AsFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsFloat__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsFloat(float) const\n"
    "    Mezzanine::XML::Attribute::AsFloat() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",2,"Mezzanine::Real");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsReal",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::Real)(*arg1)->AsReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Real result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsReal",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::Real)(*arg1)->AsReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsReal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsReal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsReal__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsReal(Mezzanine::Real) const\n"
    "    Mezzanine::XML::Attribute::AsReal() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsWhole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",2,"Mezzanine::Whole");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)(*arg1)->AsWhole(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsWhole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Whole result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::Whole)(*arg1)->AsWhole();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsWhole(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsWhole__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsWhole__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsWhole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsWhole(Mezzanine::Whole) const\n"
    "    Mezzanine::XML::Attribute::AsWhole() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsInteger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",2,"Mezzanine::Integer");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)(*arg1)->AsInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInteger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Integer result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::Integer)(*arg1)->AsInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInteger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsInteger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsInteger__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsInteger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInteger(Mezzanine::Integer) const\n"
    "    Mezzanine::XML::Attribute::AsInteger() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool arg2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",2,"bool");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsBool",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(*arg1)->AsBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsBool",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (bool)(*arg1)->AsBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsBool__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsBool(bool) const\n"
    "    Mezzanine::XML::Attribute::AsBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",1,"Mezzanine::XML::AttributeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_SetName",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",1,"Mezzanine::XML::AttributeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_SetValue",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetValue((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_GetNextAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::GetNextAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetNextAttribute",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_GetNextAttribute",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (*arg1)->GetNextAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_GetPreviousAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::GetPreviousAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetPreviousAttribute",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_GetPreviousAttribute",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (*arg1)->GetPreviousAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::Attribute::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::HashValue",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_HashValue",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (*arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::AttributeStruct *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Attribute::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::InternalObject",1,"Mezzanine::XML::AttributeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }

  result = (Mezzanine::XML::AttributeStruct *)(*arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeStruct,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttributeIterator(void *obj) {
Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_AttributeIterator_methods[] = {
    {"__eq", _wrap_AttributeIterator___eq},
    {"__ref__", _wrap_AttributeIterator___ref__},
    {"__deref__", _wrap_AttributeIterator___deref__},
    {"__lt", _wrap_AttributeIterator___lt},
    {"__le", _wrap_AttributeIterator___le},
    {"Empty", _wrap_AttributeIterator_Empty},
    {"Name", _wrap_AttributeIterator_Name},
    {"Value", _wrap_AttributeIterator_Value},
    {"AsString", _wrap_AttributeIterator_AsString},
    {"AsInt", _wrap_AttributeIterator_AsInt},
    {"AsUint", _wrap_AttributeIterator_AsUint},
    {"AsDouble", _wrap_AttributeIterator_AsDouble},
    {"AsFloat", _wrap_AttributeIterator_AsFloat},
    {"AsReal", _wrap_AttributeIterator_AsReal},
    {"AsWhole", _wrap_AttributeIterator_AsWhole},
    {"AsInteger", _wrap_AttributeIterator_AsInteger},
    {"AsBool", _wrap_AttributeIterator_AsBool},
    {"SetName", _wrap_AttributeIterator_SetName},
    {"SetValue", _wrap_AttributeIterator_SetValue},
    {"GetNextAttribute", _wrap_AttributeIterator_GetNextAttribute},
    {"GetPreviousAttribute", _wrap_AttributeIterator_GetPreviousAttribute},
    {"HashValue", _wrap_AttributeIterator_HashValue},
    {"InternalObject", _wrap_AttributeIterator_InternalObject},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_AttributeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_AttributeIterator_bases[] = {0};
static const char *swig_Mezzanine_XML_AttributeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_AttributeIterator = { "AttributeIterator", &SWIGTYPE_p_Mezzanine__XML__AttributeIterator,_wrap_new_AttributeIterator, swig_delete_AttributeIterator, swig_Mezzanine_XML_AttributeIterator_methods, swig_Mezzanine_XML_AttributeIterator_attributes, swig_Mezzanine_XML_AttributeIterator_bases, swig_Mezzanine_XML_AttributeIterator_base_names };

static int _wrap_ParseResult_Status_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::ParseStatus arg2 ;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::Status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Status",1,"Mezzanine::XML::ParseResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Status",2,"Mezzanine::XML::ParseStatus");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Status_set",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }

  arg2 = (Mezzanine::XML::ParseStatus)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Status = arg2;

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Status_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::ParseStatus result;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::Status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Status",1,"Mezzanine::XML::ParseResult *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Status_get",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }

  result = (Mezzanine::XML::ParseStatus) ((arg1)->Status);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  ptrdiff_t arg2 ;
  ptrdiff_t *argp2 ;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::Offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Offset",1,"Mezzanine::XML::ParseResult *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Offset",2,"ptrdiff_t");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Offset_set",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ptrdiff_t,0))){
    SWIG_fail_ptr("ParseResult_Offset_set",2,SWIGTYPE_p_ptrdiff_t);
  }
  arg2 = *argp2;

  if (arg1) (arg1)->Offset = arg2;

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  ptrdiff_t result;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::Offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Offset",1,"Mezzanine::XML::ParseResult *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Offset_get",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }

  result =  ((arg1)->Offset);
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_DocumentEncoding_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::Encoding arg2 ;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::DocumentEncoding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::DocumentEncoding",1,"Mezzanine::XML::ParseResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::ParseResult::DocumentEncoding",2,"Mezzanine::XML::Encoding");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_DocumentEncoding_set",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }

  arg2 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DocumentEncoding = arg2;

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_DocumentEncoding_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::Encoding result;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::DocumentEncoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::DocumentEncoding",1,"Mezzanine::XML::ParseResult *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_DocumentEncoding_get",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }

  result = (Mezzanine::XML::Encoding) ((arg1)->DocumentEncoding);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParseResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::ParseResult",0,0)
  result = (Mezzanine::XML::ParseResult *)new Mezzanine::XML::ParseResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Description(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  char *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::ParseResult::Description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Description",1,"Mezzanine::XML::ParseResult const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Description",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }

  result = (char *)((Mezzanine::XML::ParseResult const *)arg1)->Description();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParseResult(void *obj) {
Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_ParseResult_methods[] = {
    {"Description", _wrap_ParseResult_Description},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_ParseResult_attributes[] = {
    { "Status", _wrap_ParseResult_Status_get, _wrap_ParseResult_Status_set},
    { "Offset", _wrap_ParseResult_Offset_get, _wrap_ParseResult_Offset_set},
    { "DocumentEncoding", _wrap_ParseResult_DocumentEncoding_get, _wrap_ParseResult_DocumentEncoding_set},
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_ParseResult_bases[] = {0};
static const char *swig_Mezzanine_XML_ParseResult_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_ParseResult = { "ParseResult", &SWIGTYPE_p_Mezzanine__XML__ParseResult,_wrap_new_ParseResult, swig_delete_ParseResult, swig_Mezzanine_XML_ParseResult_methods, swig_Mezzanine_XML_ParseResult_attributes, swig_Mezzanine_XML_ParseResult_bases, swig_Mezzanine_XML_ParseResult_base_names };

static int _wrap_new_Document(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Document::Document",0,0)
  result = (Mezzanine::XML::Document *)new Mezzanine::XML::Document();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Document,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;

  SWIG_check_num_args("Mezzanine::XML::Document::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Reset",1,"Mezzanine::XML::Document *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Reset",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  (arg1)->Reset();

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Document *arg2 = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Document::Reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Reset",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Reset",2,"Mezzanine::XML::Document const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Reset",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Reset",2,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  (arg1)->Reset((Mezzanine::XML::Document const &)*arg2);

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Document_Reset__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Reset__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_Reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::Reset()\n"
    "    Mezzanine::XML::Document::Reset(Mezzanine::XML::Document const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_Load__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::Load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Load",3,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->Load((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::Load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (arg1)->Load((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_Load__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Load__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_Load'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::Load(Mezzanine::Char8 const *,unsigned int)\n"
    "    Mezzanine::XML::Document::Load(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBuffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",5,"Mezzanine::XML::Encoding");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBuffer",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3,arg4,arg5);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",4,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBuffer",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",3,"size_t");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBuffer",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBuffer(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadBuffer__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadBuffer__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_LoadBuffer__SWIG_0(L);
            }
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_LoadBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadBuffer(void const *,size_t,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadBuffer(void const *,size_t,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadBuffer(void const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadBufferInplace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplace",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",5,"Mezzanine::XML::Encoding");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplace",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (arg1)->LoadBufferInplace(arg2,arg3,arg4,arg5);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",4,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplace",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (arg1)->LoadBufferInplace(arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplace__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",3,"size_t");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplace",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->LoadBufferInplace(arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplace(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadBufferInplace__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadBufferInplace__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_LoadBufferInplace__SWIG_0(L);
            }
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_LoadBufferInplace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadBufferInplace(void *,size_t,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadBufferInplace(void *,size_t,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadBufferInplace(void *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadBufferInplaceOwn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplaceOwn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",5,"Mezzanine::XML::Encoding");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplaceOwn",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplaceOwn");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3,arg4,arg5);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplaceOwn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplaceOwn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",4,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplaceOwn",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplaceOwn");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplaceOwn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::ParseResult result;

  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,"size_t");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplaceOwn",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplaceOwn");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplaceOwn(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadBufferInplaceOwn__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadBufferInplaceOwn__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_LoadBufferInplaceOwn__SWIG_0(L);
            }
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'Document_LoadBufferInplaceOwn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadBufferInplaceOwn(void *,size_t,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadBufferInplaceOwn(void *,size_t,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadBufferInplaceOwn(void *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_DocumentElement(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Document::DocumentElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::DocumentElement",1,"Mezzanine::XML::Document const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_DocumentElement",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }

  result = ((Mezzanine::XML::Document const *)arg1)->DocumentElement();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Document(void *obj) {
Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_Document_methods[] = {
    {"Reset", _wrap_Document_Reset},
    {"Load", _wrap_Document_Load},
    {"LoadBuffer", _wrap_Document_LoadBuffer},
    {"LoadBufferInplace", _wrap_Document_LoadBufferInplace},
    {"LoadBufferInplaceOwn", _wrap_Document_LoadBufferInplaceOwn},
    {"DocumentElement", _wrap_Document_DocumentElement},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_Document_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_Document_bases[] = {0,0};
static const char *swig_Mezzanine_XML_Document_base_names[] = {"Mezzanine::XML::Node *",0};
static swig_lua_class _wrap_class_Mezzanine_XML_Document = { "Document", &SWIGTYPE_p_Mezzanine__XML__Document,_wrap_new_Document, swig_delete_Document, swig_Mezzanine_XML_Document_methods, swig_Mezzanine_XML_Document_attributes, swig_Mezzanine_XML_Document_bases, swig_Mezzanine_XML_Document_base_names };

static int _wrap_SetMemoryManagementFunctions(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AllocationFunction arg1 = (Mezzanine::XML::AllocationFunction) 0 ;
  Mezzanine::XML::DeAllocationFunction arg2 = (Mezzanine::XML::DeAllocationFunction) 0 ;

  SWIG_check_num_args("Mezzanine::XML::SetMemoryManagementFunctions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::SetMemoryManagementFunctions",1,"Mezzanine::XML::AllocationFunction");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::SetMemoryManagementFunctions",2,"Mezzanine::XML::DeAllocationFunction");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_size_t__p_void,0))){
    SWIG_fail_ptr("SetMemoryManagementFunctions",1,SWIGTYPE_p_f_size_t__p_void);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("SetMemoryManagementFunctions",2,SWIGTYPE_p_f_p_void__void);
  }

  Mezzanine::XML::SetMemoryManagementFunctions(arg1,arg2);

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMemoryAllocationFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AllocationFunction result;

  SWIG_check_num_args("Mezzanine::XML::GetMemoryAllocationFunction",0,0)
  result = (Mezzanine::XML::AllocationFunction)Mezzanine::XML::GetMemoryAllocationFunction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_size_t__p_void,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMemoryDeallocationFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::DeAllocationFunction result;

  SWIG_check_num_args("Mezzanine::XML::GetMemoryDeallocationFunction",0,0)
  result = (Mezzanine::XML::DeAllocationFunction)Mezzanine::XML::GetMemoryDeallocationFunction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__void,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeIterator::NodeIterator",0,0)
  result = (Mezzanine::XML::NodeIterator *)new Mezzanine::XML::NodeIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::XML::NodeIterator *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeIterator::NodeIterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::NodeIterator",1,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_NodeIterator",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::XML::NodeIterator *)new Mezzanine::XML::NodeIterator((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NodeIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeIterator__SWIG_1(L);
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_NodeIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeIterator::NodeIterator()\n"
    "    Mezzanine::XML::NodeIterator::NodeIterator(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeIterator *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::NodeIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator ==",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator ==",2,"Mezzanine::XML::NodeIterator const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___eq",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___eq",2,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (bool)((Mezzanine::XML::NodeIterator const *)arg1)->operator ==((Mezzanine::XML::NodeIterator const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___ref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeIterator::operator *",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator *",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___ref__",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::XML::Node *) &((Mezzanine::XML::NodeIterator const *)arg1)->operator *();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___deref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeIterator::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator ->",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___deref__",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::XML::Node *)((Mezzanine::XML::NodeIterator const *)arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___lt",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator___lt",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(*arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___le",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator___le",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Empty",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Empty",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (bool)(*arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType result;

  SWIG_check_num_args("Mezzanine::XML::Node::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Type",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Type",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::XML::NodeType)(*arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Name",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Name",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Value",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Value",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetFirstAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstAttribute",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetFirstAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetFirstAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetLastAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetLastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastAttribute",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetLastAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetLastAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetFirstChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstChild",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetFirstChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetFirstChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetLastChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetLastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastChild",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetLastChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetLastChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetNextSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetNextSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetNextSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetNextSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetNextSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetNextSibling__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetNextSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetNextSibling() const\n"
    "    Mezzanine::XML::Node::GetNextSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_GetPreviousSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetPreviousSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetPreviousSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetPreviousSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetPreviousSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetPreviousSibling__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetPreviousSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetPreviousSibling() const\n"
    "    Mezzanine::XML::Node::GetPreviousSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetParent",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetParent",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetRoot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetRoot",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetRoot",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetRoot();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeText result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetText",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetText",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetText();
  {
    Mezzanine::XML::NodeText * resultptr = new Mezzanine::XML::NodeText((const Mezzanine::XML::NodeText &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->GetChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetChildValue__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetChildValue__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetChildValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildValue() const\n"
    "    Mezzanine::XML::Node::GetChildValue(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_SetName",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_SetValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertAttributeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertAttributeBefore(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_AppendCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_AppendCopy__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_AppendCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_PrependCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_PrependCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_PrependCopy__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_PrependCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertCopyAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyAfter__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertCopyAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertCopyBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyBefore__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertCopyBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_AppendChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::XML::NodeType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->AppendChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NodeIterator *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->AppendChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_AppendChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_AppendChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_AppendChild__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_AppendChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::AppendChild()\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_PrependChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::XML::NodeType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->PrependChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NodeIterator *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->PrependChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->PrependChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_PrependChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_PrependChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_PrependChild__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_PrependChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::PrependChild()\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertChildAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildAfter__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertChildAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertChildBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildBefore__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertChildBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_RemoveAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_RemoveAttribute",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveAttribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveAttribute__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_RemoveAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_RemoveChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_RemoveChild",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(*arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveChild__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_RemoveChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_FindChildbyAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",4,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  arg4 = (Mezzanine::Char8 *)lua_tostring(L, 4);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindChildbyAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindChildbyAttribute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeIterator_FindChildbyAttribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_NodeIterator_FindChildbyAttribute__SWIG_0(L);
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_FindChildbyAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 arg2 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::Node::Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Path",2,"Mezzanine::Char8");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (lua_tostring(L, 2))[0];
  result = (*arg1)->Path(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::Node::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->Path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_Path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_NodeIterator_Path__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Path(Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::Path() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_FirstElementByPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",3,"Mezzanine::Char8");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FirstElementByPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FirstElementByPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_FirstElementByPath__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_NodeIterator_FirstElementByPath__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_FirstElementByPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *,Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_Traverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::Traverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",2,"Mezzanine::XML::TreeWalker &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Traverse",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("NodeIterator_Traverse",2,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }

  result = (bool)(*arg1)->Traverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",3,"Mezzanine::XML::XPathVariableSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::XML::XPathQuery const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = (*arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_FindSingleNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_FindSingleNode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_FindSingleNode__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_FindSingleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_FindNodes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",3,"Mezzanine::XML::XPathVariableSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindNodes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindNodes__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::XML::XPathQuery const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = (*arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindNodes(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_FindNodes__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_FindNodes__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_FindNodes__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_FindNodes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::begin",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_begin",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->begin();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::end",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_end",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->end();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_attributes_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes_begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_begin",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_attributes_begin",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->attributes_begin();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_attributes_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_end",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_attributes_end",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->attributes_end();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildren__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->GetChildren();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildren__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildren(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetChildren__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetChildren__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetChildren'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildren() const\n"
    "    Mezzanine::XML::Node::GetChildren(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_attributes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_attributes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->attributes();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_OffSetDebug(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  ptrdiff_t result;

  SWIG_check_num_args("Mezzanine::XML::Node::OffSetDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::OffSetDebug",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_OffSetDebug",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->OffSetDebug();
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::Node::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::HashValue",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_HashValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (*arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InternalObject",1,"Mezzanine::XML::NodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }

  result = (Mezzanine::XML::NodeStruct *)(*arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NodeIterator(void *obj) {
Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_NodeIterator_methods[] = {
    {"__eq", _wrap_NodeIterator___eq},
    {"__ref__", _wrap_NodeIterator___ref__},
    {"__deref__", _wrap_NodeIterator___deref__},
    {"__lt", _wrap_NodeIterator___lt},
    {"__le", _wrap_NodeIterator___le},
    {"Empty", _wrap_NodeIterator_Empty},
    {"Type", _wrap_NodeIterator_Type},
    {"Name", _wrap_NodeIterator_Name},
    {"Value", _wrap_NodeIterator_Value},
    {"GetFirstAttribute", _wrap_NodeIterator_GetFirstAttribute},
    {"GetLastAttribute", _wrap_NodeIterator_GetLastAttribute},
    {"GetFirstChild", _wrap_NodeIterator_GetFirstChild},
    {"GetLastChild", _wrap_NodeIterator_GetLastChild},
    {"GetNextSibling", _wrap_NodeIterator_GetNextSibling},
    {"GetPreviousSibling", _wrap_NodeIterator_GetPreviousSibling},
    {"GetParent", _wrap_NodeIterator_GetParent},
    {"GetRoot", _wrap_NodeIterator_GetRoot},
    {"GetText", _wrap_NodeIterator_GetText},
    {"GetChild", _wrap_NodeIterator_GetChild},
    {"GetAttribute", _wrap_NodeIterator_GetAttribute},
    {"GetChildValue", _wrap_NodeIterator_GetChildValue},
    {"SetName", _wrap_NodeIterator_SetName},
    {"SetValue", _wrap_NodeIterator_SetValue},
    {"AppendAttribute", _wrap_NodeIterator_AppendAttribute},
    {"PrependAttribute", _wrap_NodeIterator_PrependAttribute},
    {"InsertAttributeAfter", _wrap_NodeIterator_InsertAttributeAfter},
    {"InsertAttributeBefore", _wrap_NodeIterator_InsertAttributeBefore},
    {"AppendCopy", _wrap_NodeIterator_AppendCopy},
    {"PrependCopy", _wrap_NodeIterator_PrependCopy},
    {"InsertCopyAfter", _wrap_NodeIterator_InsertCopyAfter},
    {"InsertCopyBefore", _wrap_NodeIterator_InsertCopyBefore},
    {"AppendChild", _wrap_NodeIterator_AppendChild},
    {"PrependChild", _wrap_NodeIterator_PrependChild},
    {"InsertChildAfter", _wrap_NodeIterator_InsertChildAfter},
    {"InsertChildBefore", _wrap_NodeIterator_InsertChildBefore},
    {"RemoveAttribute", _wrap_NodeIterator_RemoveAttribute},
    {"RemoveChild", _wrap_NodeIterator_RemoveChild},
    {"FindChildbyAttribute", _wrap_NodeIterator_FindChildbyAttribute},
    {"Path", _wrap_NodeIterator_Path},
    {"FirstElementByPath", _wrap_NodeIterator_FirstElementByPath},
    {"Traverse", _wrap_NodeIterator_Traverse},
    {"FindSingleNode", _wrap_NodeIterator_FindSingleNode},
    {"FindNodes", _wrap_NodeIterator_FindNodes},
    {"begin", _wrap_NodeIterator_begin},
    {"end", _wrap_NodeIterator_end},
    {"attributes_begin", _wrap_NodeIterator_attributes_begin},
    {"attributes_end", _wrap_NodeIterator_attributes_end},
    {"GetChildren", _wrap_NodeIterator_GetChildren},
    {"attributes", _wrap_NodeIterator_attributes},
    {"OffSetDebug", _wrap_NodeIterator_OffSetDebug},
    {"HashValue", _wrap_NodeIterator_HashValue},
    {"InternalObject", _wrap_NodeIterator_InternalObject},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_NodeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_NodeIterator_bases[] = {0};
static const char *swig_Mezzanine_XML_NodeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_NodeIterator = { "NodeIterator", &SWIGTYPE_p_Mezzanine__XML__NodeIterator,_wrap_new_NodeIterator, swig_delete_NodeIterator, swig_Mezzanine_XML_NodeIterator_methods, swig_Mezzanine_XML_NodeIterator_attributes, swig_Mezzanine_XML_NodeIterator_bases, swig_Mezzanine_XML_NodeIterator_base_names };

static int _wrap_new_NamedNodeIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",0,0)
  result = (Mezzanine::XML::NamedNodeIterator *)new Mezzanine::XML::NamedNodeIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NamedNodeIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::NamedNodeIterator *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",1,"Mezzanine::XML::Node const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_NamedNodeIterator",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::XML::NamedNodeIterator *)new Mezzanine::XML::NamedNodeIterator((Mezzanine::XML::Node const &)*arg1,(Mezzanine::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NamedNodeIterator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NamedNodeIterator__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NamedNodeIterator__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_NamedNodeIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NamedNodeIterator::NamedNodeIterator()\n"
    "    Mezzanine::XML::NamedNodeIterator::NamedNodeIterator(Mezzanine::XML::Node const &,Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NamedNodeIterator *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator ==",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator ==",2,"Mezzanine::XML::NamedNodeIterator const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___eq",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___eq",2,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (bool)((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator ==((Mezzanine::XML::NamedNodeIterator const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___ref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::operator *",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator *",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___ref__",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::XML::Node *) &((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator *();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___deref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator ->",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___deref__",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::XML::Node *)((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___lt",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator___lt",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(*arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___le",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator___le",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Empty",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Empty",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (bool)(*arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType result;

  SWIG_check_num_args("Mezzanine::XML::Node::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Type",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Type",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::XML::NodeType)(*arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Name",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Name",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Value",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Value",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetFirstAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetFirstAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetFirstAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetLastAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetLastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetLastAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetLastAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetFirstChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstChild",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetFirstChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetFirstChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetLastChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetLastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastChild",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetLastChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetLastChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetNextSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetNextSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetNextSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetNextSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetNextSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetNextSibling__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetNextSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetNextSibling() const\n"
    "    Mezzanine::XML::Node::GetNextSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetPreviousSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetPreviousSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetPreviousSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetPreviousSibling() const\n"
    "    Mezzanine::XML::Node::GetPreviousSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetParent",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetParent",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetRoot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetRoot",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetRoot",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetRoot();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeText result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetText",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetText",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetText();
  {
    Mezzanine::XML::NodeText * resultptr = new Mezzanine::XML::NodeText((const Mezzanine::XML::NodeText &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->GetChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetChildValue__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetChildValue__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetChildValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildValue() const\n"
    "    Mezzanine::XML::Node::GetChildValue(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_SetName",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_SetValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertAttributeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertAttributeBefore(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendCopy__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_AppendCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_PrependCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependCopy__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_PrependCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertCopyAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertCopyBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_AppendChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::XML::NodeType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->AppendChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NamedNodeIterator *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->AppendChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_AppendChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendChild__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_AppendChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::AppendChild()\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_PrependChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::XML::NodeType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->PrependChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NamedNodeIterator *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->PrependChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::String const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->PrependChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_PrependChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependChild__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_PrependChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::PrependChild()\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertChildAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildAfter__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertChildAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertChildBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (*arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildBefore__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertChildBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_RemoveAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::XML::Attribute const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveAttribute",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }

  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveAttribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveAttribute__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_RemoveAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_RemoveChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveChild",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(*arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveChild__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_RemoveChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",4,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  arg4 = (Mezzanine::Char8 *)lua_tostring(L, 4);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindChildbyAttribute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_0(L);
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FindChildbyAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 arg2 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::Node::Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Path",2,"Mezzanine::Char8");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (lua_tostring(L, 2))[0];
  result = (*arg1)->Path(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::Node::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->Path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_Path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_Path__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Path(Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::Path() const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_FirstElementByPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",3,"Mezzanine::Char8");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FirstElementByPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FirstElementByPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FirstElementByPath__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FirstElementByPath__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FirstElementByPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *,Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_Traverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::Node::Traverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",2,"Mezzanine::XML::TreeWalker &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Traverse",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("NamedNodeIterator_Traverse",2,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }

  result = (bool)(*arg1)->Traverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",3,"Mezzanine::XML::XPathVariableSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::XML::XPathQuery const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = (*arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindSingleNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindSingleNode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FindSingleNode__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FindSingleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_FindNodes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",3,"Mezzanine::XML::XPathVariableSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindNodes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindNodes__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::XML::XPathQuery const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = (*arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindNodes(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindNodes__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindNodes__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FindNodes__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FindNodes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::begin",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_begin",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->begin();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::end",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_end",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->end();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_attributes_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes_begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_begin",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_attributes_begin",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->attributes_begin();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_attributes_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_end",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_attributes_end",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->attributes_end();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildren__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->GetChildren();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildren__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildren(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetChildren__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetChildren__SWIG_1(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetChildren'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildren() const\n"
    "    Mezzanine::XML::Node::GetChildren(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_attributes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;

  SWIG_check_num_args("Mezzanine::XML::Node::attributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_attributes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->attributes();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_OffSetDebug(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  ptrdiff_t result;

  SWIG_check_num_args("Mezzanine::XML::Node::OffSetDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::OffSetDebug",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_OffSetDebug",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->OffSetDebug();
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::Node::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::HashValue",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_HashValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (*arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::Node::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InternalObject",1,"Mezzanine::XML::NamedNodeIterator const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }

  result = (Mezzanine::XML::NodeStruct *)(*arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NamedNodeIterator(void *obj) {
Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_NamedNodeIterator_methods[] = {
    {"__eq", _wrap_NamedNodeIterator___eq},
    {"__ref__", _wrap_NamedNodeIterator___ref__},
    {"__deref__", _wrap_NamedNodeIterator___deref__},
    {"__lt", _wrap_NamedNodeIterator___lt},
    {"__le", _wrap_NamedNodeIterator___le},
    {"Empty", _wrap_NamedNodeIterator_Empty},
    {"Type", _wrap_NamedNodeIterator_Type},
    {"Name", _wrap_NamedNodeIterator_Name},
    {"Value", _wrap_NamedNodeIterator_Value},
    {"GetFirstAttribute", _wrap_NamedNodeIterator_GetFirstAttribute},
    {"GetLastAttribute", _wrap_NamedNodeIterator_GetLastAttribute},
    {"GetFirstChild", _wrap_NamedNodeIterator_GetFirstChild},
    {"GetLastChild", _wrap_NamedNodeIterator_GetLastChild},
    {"GetNextSibling", _wrap_NamedNodeIterator_GetNextSibling},
    {"GetPreviousSibling", _wrap_NamedNodeIterator_GetPreviousSibling},
    {"GetParent", _wrap_NamedNodeIterator_GetParent},
    {"GetRoot", _wrap_NamedNodeIterator_GetRoot},
    {"GetText", _wrap_NamedNodeIterator_GetText},
    {"GetChild", _wrap_NamedNodeIterator_GetChild},
    {"GetAttribute", _wrap_NamedNodeIterator_GetAttribute},
    {"GetChildValue", _wrap_NamedNodeIterator_GetChildValue},
    {"SetName", _wrap_NamedNodeIterator_SetName},
    {"SetValue", _wrap_NamedNodeIterator_SetValue},
    {"AppendAttribute", _wrap_NamedNodeIterator_AppendAttribute},
    {"PrependAttribute", _wrap_NamedNodeIterator_PrependAttribute},
    {"InsertAttributeAfter", _wrap_NamedNodeIterator_InsertAttributeAfter},
    {"InsertAttributeBefore", _wrap_NamedNodeIterator_InsertAttributeBefore},
    {"AppendCopy", _wrap_NamedNodeIterator_AppendCopy},
    {"PrependCopy", _wrap_NamedNodeIterator_PrependCopy},
    {"InsertCopyAfter", _wrap_NamedNodeIterator_InsertCopyAfter},
    {"InsertCopyBefore", _wrap_NamedNodeIterator_InsertCopyBefore},
    {"AppendChild", _wrap_NamedNodeIterator_AppendChild},
    {"PrependChild", _wrap_NamedNodeIterator_PrependChild},
    {"InsertChildAfter", _wrap_NamedNodeIterator_InsertChildAfter},
    {"InsertChildBefore", _wrap_NamedNodeIterator_InsertChildBefore},
    {"RemoveAttribute", _wrap_NamedNodeIterator_RemoveAttribute},
    {"RemoveChild", _wrap_NamedNodeIterator_RemoveChild},
    {"FindChildbyAttribute", _wrap_NamedNodeIterator_FindChildbyAttribute},
    {"Path", _wrap_NamedNodeIterator_Path},
    {"FirstElementByPath", _wrap_NamedNodeIterator_FirstElementByPath},
    {"Traverse", _wrap_NamedNodeIterator_Traverse},
    {"FindSingleNode", _wrap_NamedNodeIterator_FindSingleNode},
    {"FindNodes", _wrap_NamedNodeIterator_FindNodes},
    {"begin", _wrap_NamedNodeIterator_begin},
    {"end", _wrap_NamedNodeIterator_end},
    {"attributes_begin", _wrap_NamedNodeIterator_attributes_begin},
    {"attributes_end", _wrap_NamedNodeIterator_attributes_end},
    {"GetChildren", _wrap_NamedNodeIterator_GetChildren},
    {"attributes", _wrap_NamedNodeIterator_attributes},
    {"OffSetDebug", _wrap_NamedNodeIterator_OffSetDebug},
    {"HashValue", _wrap_NamedNodeIterator_HashValue},
    {"InternalObject", _wrap_NamedNodeIterator_InternalObject},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_NamedNodeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_NamedNodeIterator_bases[] = {0};
static const char *swig_Mezzanine_XML_NamedNodeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_NamedNodeIterator = { "NamedNodeIterator", &SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,_wrap_new_NamedNodeIterator, swig_delete_NamedNodeIterator, swig_Mezzanine_XML_NamedNodeIterator_methods, swig_Mezzanine_XML_NamedNodeIterator_attributes, swig_Mezzanine_XML_NamedNodeIterator_bases, swig_Mezzanine_XML_NamedNodeIterator_base_names };

static int _wrap_new_NodeText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeText::NodeText",0,0)
  result = (Mezzanine::XML::NodeText *)new Mezzanine::XML::NodeText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::Empty",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_Empty",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_GetString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeText::GetString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::GetString",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_GetString",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->GetString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsString",1,"Mezzanine::XML::NodeText const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsString",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsString",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->AsString((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsString",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsString",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->AsString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsString__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsString(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::NodeText::AsString() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  int arg2 ;
  int result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInt",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInt",2,"int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInt",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((Mezzanine::XML::NodeText const *)arg1)->AsInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  int result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInt",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInt",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (int)((Mezzanine::XML::NodeText const *)arg1)->AsInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsInt__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsInt(int) const\n"
    "    Mezzanine::XML::NodeText::AsInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsUint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  unsigned int arg2 ;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsUint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsUint",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsUint",2,"unsigned int");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsUint",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((Mezzanine::XML::NodeText const *)arg1)->AsUint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsUint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  unsigned int result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsUint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsUint",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsUint",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (unsigned int)((Mezzanine::XML::NodeText const *)arg1)->AsUint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsUint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsUint__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsUint__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsUint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsUint(unsigned int) const\n"
    "    Mezzanine::XML::NodeText::AsUint() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  double arg2 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsDouble",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsDouble",2,"double");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Mezzanine::XML::NodeText const *)arg1)->AsDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsDouble",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (double)((Mezzanine::XML::NodeText const *)arg1)->AsDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsDouble__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsDouble__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsDouble(double) const\n"
    "    Mezzanine::XML::NodeText::AsDouble() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  float arg2 ;
  float result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsFloat",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsFloat",2,"float");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((Mezzanine::XML::NodeText const *)arg1)->AsFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  float result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsFloat",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (float)((Mezzanine::XML::NodeText const *)arg1)->AsFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsFloat__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsFloat(float) const\n"
    "    Mezzanine::XML::NodeText::AsFloat() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsReal",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsReal",2,"Mezzanine::Real");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsReal",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::XML::NodeText const *)arg1)->AsReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Real result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsReal",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsReal",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (Mezzanine::Real)((Mezzanine::XML::NodeText const *)arg1)->AsReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsReal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsReal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsReal__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsReal(Mezzanine::Real) const\n"
    "    Mezzanine::XML::NodeText::AsReal() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsWhole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsWhole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsWhole",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsWhole",2,"Mezzanine::Whole");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)((Mezzanine::XML::NodeText const *)arg1)->AsWhole(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsWhole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Whole result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsWhole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsWhole",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (Mezzanine::Whole)((Mezzanine::XML::NodeText const *)arg1)->AsWhole();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsWhole(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsWhole__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsWhole__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsWhole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsWhole(Mezzanine::Whole) const\n"
    "    Mezzanine::XML::NodeText::AsWhole() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsInteger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInteger",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInteger",2,"Mezzanine::Integer");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)((Mezzanine::XML::NodeText const *)arg1)->AsInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInteger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Integer result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInteger",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (Mezzanine::Integer)((Mezzanine::XML::NodeText const *)arg1)->AsInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInteger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsInteger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsInteger__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsInteger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsInteger(Mezzanine::Integer) const\n"
    "    Mezzanine::XML::NodeText::AsInteger() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool arg2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsBool",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsBool",2,"bool");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsBool",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->AsBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::AsBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsBool",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsBool",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->AsBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsBool__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'NodeText_AsBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsBool(bool) const\n"
    "    Mezzanine::XML::NodeText::AsBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_Set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::Set",1,"Mezzanine::XML::NodeText *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::Set",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_Set",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_data(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::NodeText::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::data",1,"Mezzanine::XML::NodeText const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_data",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }

  result = ((Mezzanine::XML::NodeText const *)arg1)->data();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NodeText(void *obj) {
Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_NodeText_methods[] = {
    {"Empty", _wrap_NodeText_Empty},
    {"GetString", _wrap_NodeText_GetString},
    {"AsString", _wrap_NodeText_AsString},
    {"AsInt", _wrap_NodeText_AsInt},
    {"AsUint", _wrap_NodeText_AsUint},
    {"AsDouble", _wrap_NodeText_AsDouble},
    {"AsFloat", _wrap_NodeText_AsFloat},
    {"AsReal", _wrap_NodeText_AsReal},
    {"AsWhole", _wrap_NodeText_AsWhole},
    {"AsInteger", _wrap_NodeText_AsInteger},
    {"AsBool", _wrap_NodeText_AsBool},
    {"Set", _wrap_NodeText_Set},
    {"data", _wrap_NodeText_data},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_NodeText_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_NodeText_bases[] = {0};
static const char *swig_Mezzanine_XML_NodeText_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_NodeText = { "NodeText", &SWIGTYPE_p_Mezzanine__XML__NodeText,_wrap_new_NodeText, swig_delete_NodeText, swig_Mezzanine_XML_NodeText_methods, swig_Mezzanine_XML_NodeText_attributes, swig_Mezzanine_XML_NodeText_bases, swig_Mezzanine_XML_NodeText_base_names };

static int _wrap_TreeWalker_OnTraversalBegin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::TreeWalker::OnTraversalBegin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalBegin",1,"Mezzanine::XML::TreeWalker *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalBegin",2,"Mezzanine::XML::Node &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalBegin",1,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalBegin",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(arg1)->OnTraversalBegin(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeWalker_OnEachNode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::TreeWalker::OnEachNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnEachNode",1,"Mezzanine::XML::TreeWalker *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnEachNode",2,"Mezzanine::XML::Node &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("TreeWalker_OnEachNode",1,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("TreeWalker_OnEachNode",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(arg1)->OnEachNode(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeWalker_OnTraversalEnd(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::TreeWalker::OnTraversalEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalEnd",1,"Mezzanine::XML::TreeWalker *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalEnd",2,"Mezzanine::XML::Node &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalEnd",1,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalEnd",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (bool)(arg1)->OnTraversalEnd(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TreeWalker(void *obj) {
Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_TreeWalker_methods[] = {
    {"OnTraversalBegin", _wrap_TreeWalker_OnTraversalBegin},
    {"OnEachNode", _wrap_TreeWalker_OnEachNode},
    {"OnTraversalEnd", _wrap_TreeWalker_OnTraversalEnd},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_TreeWalker_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_TreeWalker_bases[] = {0};
static const char *swig_Mezzanine_XML_TreeWalker_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_TreeWalker = { "TreeWalker", &SWIGTYPE_p_Mezzanine__XML__TreeWalker,0, swig_delete_TreeWalker, swig_Mezzanine_XML_TreeWalker_methods, swig_Mezzanine_XML_TreeWalker_attributes, swig_Mezzanine_XML_TreeWalker_bases, swig_Mezzanine_XML_TreeWalker_base_names };

static int _wrap_AsUtf8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  wchar_t *arg1 = (wchar_t *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;

  SWIG_check_num_args("Mezzanine::XML::AsUtf8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AsUtf8",1,"wchar_t const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("AsUtf8",1,SWIGTYPE_p_wchar_t);
  }

  result = Mezzanine::XML::AsUtf8((wchar_t const *)arg1);
  {
    std::basic_string< char,std::char_traits< char >,std::allocator< char > > * resultptr = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >((const std::basic_string< char,std::char_traits< char >,std::allocator< char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsUtf8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > *arg1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;

  SWIG_check_num_args("Mezzanine::XML::AsUtf8",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::AsUtf8",1,"std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,0))){
    SWIG_fail_ptr("AsUtf8",1,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t);
  }

  result = Mezzanine::XML::AsUtf8((std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &)*arg1);
  {
    std::basic_string< char,std::char_traits< char >,std::allocator< char > > * resultptr = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >((const std::basic_string< char,std::char_traits< char >,std::allocator< char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsUtf8(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AsUtf8__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AsUtf8__SWIG_1(L);
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AsUtf8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::AsUtf8(wchar_t const *)\n"
    "    Mezzanine::XML::AsUtf8(std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AsWide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > result;

  SWIG_check_num_args("Mezzanine::XML::AsWide",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::XML::AsWide",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = Mezzanine::XML::AsWide((char const *)arg1);
  {
    std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > * resultptr = new std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >((const std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsWide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > result;

  SWIG_check_num_args("Mezzanine::XML::AsWide",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::AsWide",1,"std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,0))){
    SWIG_fail_ptr("AsWide",1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t);
  }

  result = Mezzanine::XML::AsWide((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
  {
    std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > * resultptr = new std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >((const std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsWide(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AsWide__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_AsWide__SWIG_0(L);
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'AsWide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::AsWide(char const *)\n"
    "    Mezzanine::XML::AsWide(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GetOneTag(lua_State* L) {
  int SWIG_arg = 0;
  std::istream *arg1 = 0 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::GetOneTag",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::GetOneTag",1,"std::istream &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__istream,0))){
    SWIG_fail_ptr("GetOneTag",1,SWIGTYPE_p_std__istream);
  }

  result = Mezzanine::XML::GetOneTag(*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreParseClassFromSingleTag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::XML::Document *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::PreParseClassFromSingleTag",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",3,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (Mezzanine::XML::Document *)Mezzanine::XML::PreParseClassFromSingleTag((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Document,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreParseClassFromSingleTag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Document *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::PreParseClassFromSingleTag",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::XML::Document *)Mezzanine::XML::PreParseClassFromSingleTag((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Document,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreParseClassFromSingleTag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PreParseClassFromSingleTag__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_PreParseClassFromSingleTag__SWIG_0(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'PreParseClassFromSingleTag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::PreParseClassFromSingleTag(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &)\n"
    "    Mezzanine::XML::PreParseClassFromSingleTag(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EscapeXML(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::EscapeXML",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::XML::EscapeXML",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::XML::EscapeXML((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::XPathNode",0,0)
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::XML::XPathNode *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::XPathNode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::XPathNode",1,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_XPathNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::XPathNode *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::XPathNode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::XPathNode",1,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNode::XPathNode",2,"Mezzanine::XML::Node const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("new_XPathNode",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_XPathNode",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }

  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode((Mezzanine::XML::Attribute const &)*arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_XPathNode__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_XPathNode__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_XPathNode__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_XPathNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathNode::XPathNode()\n"
    "    Mezzanine::XML::XPathNode::XPathNode(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::XPathNode::XPathNode(Mezzanine::XML::Attribute const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathNode_GetNode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::GetNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::GetNode",1,"Mezzanine::XML::XPathNode const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode_GetNode",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetNode();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNode_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::Attribute result;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::GetAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::GetAttribute",1,"Mezzanine::XML::XPathNode const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNode_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::Node result;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::GetParent",1,"Mezzanine::XML::XPathNode const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode_GetParent",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNode___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathNode::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::operator ==",1,"Mezzanine::XML::XPathNode const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNode::operator ==",2,"Mezzanine::XML::XPathNode const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode___eq",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode___eq",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = (bool)((Mezzanine::XML::XPathNode const *)arg1)->operator ==((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathNode(void *obj) {
Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_XPathNode_methods[] = {
    {"GetNode", _wrap_XPathNode_GetNode},
    {"GetAttribute", _wrap_XPathNode_GetAttribute},
    {"GetParent", _wrap_XPathNode_GetParent},
    {"__eq", _wrap_XPathNode___eq},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_XPathNode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_XPathNode_bases[] = {0};
static const char *swig_Mezzanine_XML_XPathNode_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_XPathNode = { "XPathNode", &SWIGTYPE_p_Mezzanine__XML__XPathNode,_wrap_new_XPathNode, swig_delete_XPathNode, swig_Mezzanine_XML_XPathNode_methods, swig_Mezzanine_XML_XPathNode_attributes, swig_Mezzanine_XML_XPathNode_bases, swig_Mezzanine_XML_XPathNode_base_names };

static int _wrap_new_XPathNodeSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",0,0)
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet::const_iterator arg1 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator arg2 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::CollectionType arg3 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,"Mezzanine::XML::XPathNodeSet::const_iterator");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",2,"Mezzanine::XML::XPathNodeSet::const_iterator");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",3,"Mezzanine::XML::XPathNodeSet::CollectionType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  arg3 = (Mezzanine::XML::XPathNodeSet::CollectionType)(int)lua_tonumber(L, 3);
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet::const_iterator arg1 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator arg2 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,"Mezzanine::XML::XPathNodeSet::const_iterator");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",2,"Mezzanine::XML::XPathNodeSet::const_iterator");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,"Mezzanine::XML::XPathNodeSet const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("new_XPathNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet((Mezzanine::XML::XPathNodeSet const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_XPathNodeSet__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_XPathNodeSet__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_XPathNodeSet__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_XPathNodeSet__SWIG_1(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_XPathNodeSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet()\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet(Mezzanine::XML::XPathNodeSet::const_iterator,Mezzanine::XML::XPathNodeSet::const_iterator,Mezzanine::XML::XPathNodeSet::CollectionType)\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet(Mezzanine::XML::XPathNodeSet::const_iterator,Mezzanine::XML::XPathNodeSet::const_iterator)\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet(Mezzanine::XML::XPathNodeSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathNodeSet_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNodeSet::CollectionType result;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::Type",1,"Mezzanine::XML::XPathNodeSet const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_Type",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (Mezzanine::XML::XPathNodeSet::CollectionType)((Mezzanine::XML::XPathNodeSet const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_size(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::size",1,"Mezzanine::XML::XPathNodeSet const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_size",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = ((Mezzanine::XML::XPathNodeSet const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator result;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::begin",1,"Mezzanine::XML::XPathNodeSet const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_begin",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (Mezzanine::XML::XPathNodeSet::const_iterator)((Mezzanine::XML::XPathNodeSet const *)arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator result;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::end",1,"Mezzanine::XML::XPathNodeSet const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_end",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (Mezzanine::XML::XPathNodeSet::const_iterator)((Mezzanine::XML::XPathNodeSet const *)arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_sort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  bool arg2 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::sort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::sort",1,"Mezzanine::XML::XPathNodeSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::sort",2,"bool");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_sort",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->sort(arg2);

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_sort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::sort",1,"Mezzanine::XML::XPathNodeSet *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_sort",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  (arg1)->sort();

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_sort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_XPathNodeSet_sort__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathNodeSet_sort__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'XPathNodeSet_sort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathNodeSet::sort(bool)\n"
    "    Mezzanine::XML::XPathNodeSet::sort()\n");
  lua_error(L);return 0;
}


static int _wrap_XPathNodeSet_first(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNode result;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::first",1,"Mezzanine::XML::XPathNodeSet const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_first",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = ((Mezzanine::XML::XPathNodeSet const *)arg1)->first();
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::Empty",1,"Mezzanine::XML::XPathNodeSet const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_Empty",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (bool)((Mezzanine::XML::XPathNodeSet const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathNodeSet(void *obj) {
Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_XPathNodeSet_methods[] = {
    {"Type", _wrap_XPathNodeSet_Type},
    {"size", _wrap_XPathNodeSet_size},
    {"begin", _wrap_XPathNodeSet_begin},
    {"end", _wrap_XPathNodeSet_end},
    {"sort", _wrap_XPathNodeSet_sort},
    {"first", _wrap_XPathNodeSet_first},
    {"Empty", _wrap_XPathNodeSet_Empty},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_XPathNodeSet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_XPathNodeSet_bases[] = {0};
static const char *swig_Mezzanine_XML_XPathNodeSet_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_XPathNodeSet = { "XPathNodeSet", &SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,_wrap_new_XPathNodeSet, swig_delete_XPathNodeSet, swig_Mezzanine_XML_XPathNodeSet_methods, swig_Mezzanine_XML_XPathNodeSet_attributes, swig_Mezzanine_XML_XPathNodeSet_bases, swig_Mezzanine_XML_XPathNodeSet_base_names };

static int _wrap_XPathParseResult_Offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  ptrdiff_t arg2 ;
  ptrdiff_t *argp2 ;

  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::Offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Offset",1,"Mezzanine::XML::XPathParseResult *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Offset",2,"ptrdiff_t");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0))){
    SWIG_fail_ptr("XPathParseResult_Offset_set",1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ptrdiff_t,0))){
    SWIG_fail_ptr("XPathParseResult_Offset_set",2,SWIGTYPE_p_ptrdiff_t);
  }
  arg2 = *argp2;

  if (arg1) (arg1)->Offset = arg2;

  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathParseResult_Offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  ptrdiff_t result;

  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::Offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Offset",1,"Mezzanine::XML::XPathParseResult *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0))){
    SWIG_fail_ptr("XPathParseResult_Offset_get",1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
  }

  result =  ((arg1)->Offset);
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathParseResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::XPathParseResult",0,0)
  result = (Mezzanine::XML::XPathParseResult *)new Mezzanine::XML::XPathParseResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathParseResult_Description(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  char *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::Description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Description",1,"Mezzanine::XML::XPathParseResult const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0))){
    SWIG_fail_ptr("XPathParseResult_Description",1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
  }

  result = (char *)((Mezzanine::XML::XPathParseResult const *)arg1)->Description();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathParseResult(void *obj) {
Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_XPathParseResult_methods[] = {
    {"Description", _wrap_XPathParseResult_Description},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_XPathParseResult_attributes[] = {
    { "Offset", _wrap_XPathParseResult_Offset_get, _wrap_XPathParseResult_Offset_set},
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_XPathParseResult_bases[] = {0};
static const char *swig_Mezzanine_XML_XPathParseResult_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_XPathParseResult = { "XPathParseResult", &SWIGTYPE_p_Mezzanine__XML__XPathParseResult,_wrap_new_XPathParseResult, swig_delete_XPathParseResult, swig_Mezzanine_XML_XPathParseResult_methods, swig_Mezzanine_XML_XPathParseResult_attributes, swig_Mezzanine_XML_XPathParseResult_bases, swig_Mezzanine_XML_XPathParseResult_base_names };

static int _wrap_XPathVariable_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Name",1,"Mezzanine::XML::XPathVariable const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Name",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::XPathVariable const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathValueType result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Type",1,"Mezzanine::XML::XPathVariable const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Type",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  result = (Mezzanine::XML::XPathValueType)((Mezzanine::XML::XPathVariable const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetBoolean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetBoolean",1,"Mezzanine::XML::XPathVariable const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetBoolean",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  result = (bool)((Mezzanine::XML::XPathVariable const *)arg1)->GetBoolean();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetNumber(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetNumber",1,"Mezzanine::XML::XPathVariable const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetNumber",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  result = (double)((Mezzanine::XML::XPathVariable const *)arg1)->GetNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetString",1,"Mezzanine::XML::XPathVariable const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetString",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  result = (Mezzanine::Char8 *)((Mezzanine::XML::XPathVariable const *)arg1)->GetString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetNodeSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetNodeSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetNodeSet",1,"Mezzanine::XML::XPathVariable const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  result = (Mezzanine::XML::XPathNodeSet *) &((Mezzanine::XML::XPathVariable const *)arg1)->GetNodeSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  bool arg2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"bool");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->Set(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  double arg2 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"double");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->Set(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathNodeSet *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"Mezzanine::XML::XPathNodeSet const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathVariable_Set",2,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (bool)(arg1)->Set((Mezzanine::XML::XPathNodeSet const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_2(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'XPathVariable_Set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathVariable::Set(bool)\n"
    "    Mezzanine::XML::XPathVariable::Set(double)\n"
    "    Mezzanine::XML::XPathVariable::Set(Mezzanine::Char8 const *)\n"
    "    Mezzanine::XML::XPathVariable::Set(Mezzanine::XML::XPathNodeSet const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_XPathVariable(void *obj) {
Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_XPathVariable_methods[] = {
    {"Name", _wrap_XPathVariable_Name},
    {"Type", _wrap_XPathVariable_Type},
    {"GetBoolean", _wrap_XPathVariable_GetBoolean},
    {"GetNumber", _wrap_XPathVariable_GetNumber},
    {"GetString", _wrap_XPathVariable_GetString},
    {"GetNodeSet", _wrap_XPathVariable_GetNodeSet},
    {"Set", _wrap_XPathVariable_Set},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_XPathVariable_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_XPathVariable_bases[] = {0};
static const char *swig_Mezzanine_XML_XPathVariable_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_XPathVariable = { "XPathVariable", &SWIGTYPE_p_Mezzanine__XML__XPathVariable,0, swig_delete_XPathVariable, swig_Mezzanine_XML_XPathVariable_methods, swig_Mezzanine_XML_XPathVariable_attributes, swig_Mezzanine_XML_XPathVariable_bases, swig_Mezzanine_XML_XPathVariable_base_names };

static int _wrap_new_XPathVariableSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::XPathVariableSet",0,0)
  result = (Mezzanine::XML::XPathVariableSet *)new Mezzanine::XML::XPathVariableSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathValueType arg3 ;
  Mezzanine::XML::XPathVariable *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Add",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Add",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Add",2,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Add",3,"Mezzanine::XML::XPathValueType");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Add",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::XML::XPathValueType)(int)lua_tonumber(L, 3);
  result = (Mezzanine::XML::XPathVariable *)(arg1)->Add((Mezzanine::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool arg3 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"bool");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  double arg3 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"double");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet *arg3 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"Mezzanine::XML::XPathNodeSet const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",3,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }

  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::XPathNodeSet const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };

  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_2(L);
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'XPathVariableSet_Set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,bool)\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,double)\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,Mezzanine::Char8 const *)\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,Mezzanine::XML::XPathNodeSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathVariableSet_Get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariable *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Get",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Get",2,"Mezzanine::Char8 const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Get",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::XML::XPathVariable *)(arg1)->Get((Mezzanine::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathVariableSet(void *obj) {
Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_XPathVariableSet_methods[] = {
    {"Add", _wrap_XPathVariableSet_Add},
    {"Set", _wrap_XPathVariableSet_Set},
    {"Get", _wrap_XPathVariableSet_Get},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_XPathVariableSet_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_XPathVariableSet_bases[] = {0};
static const char *swig_Mezzanine_XML_XPathVariableSet_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_XPathVariableSet = { "XPathVariableSet", &SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,_wrap_new_XPathVariableSet, swig_delete_XPathVariableSet, swig_Mezzanine_XML_XPathVariableSet_methods, swig_Mezzanine_XML_XPathVariableSet_attributes, swig_Mezzanine_XML_XPathVariableSet_bases, swig_Mezzanine_XML_XPathVariableSet_base_names };

static int _wrap_new_XPathQuery__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 *arg1 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg2 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathQuery *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::XPathQuery",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::XPathQuery",1,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::XPathQuery",2,"Mezzanine::XML::XPathVariableSet *");
  arg1 = (Mezzanine::Char8 *)lua_tostring(L, 1);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("new_XPathQuery",2,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }

  result = (Mezzanine::XML::XPathQuery *)new Mezzanine::XML::XPathQuery((Mezzanine::Char8 const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathQuery,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathQuery__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 *arg1 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathQuery *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::XPathQuery",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::XPathQuery",1,"Mezzanine::Char8 const *");
  arg1 = (Mezzanine::Char8 *)lua_tostring(L, 1);
  result = (Mezzanine::XML::XPathQuery *)new Mezzanine::XML::XPathQuery((Mezzanine::Char8 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathQuery,1); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathQuery(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };

  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_XPathQuery__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_XPathQuery__SWIG_0(L);
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'new_XPathQuery'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathQuery::XPathQuery(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *)\n"
    "    Mezzanine::XML::XPathQuery::XPathQuery(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathQuery_ReturnType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathValueType result;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::ReturnType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::ReturnType",1,"Mezzanine::XML::XPathQuery const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_ReturnType",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = (Mezzanine::XML::XPathValueType)((Mezzanine::XML::XPathQuery const *)arg1)->ReturnType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateBoolean(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  bool result;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateBoolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateBoolean",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateBoolean",2,"Mezzanine::XML::XPathNode const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateBoolean",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateBoolean",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = (bool)((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateBoolean((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateNumber(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  double result;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNumber",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNumber",2,"Mezzanine::XML::XPathNode const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNumber",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNumber",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = (double)((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateNumber((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  Mezzanine::String result;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",2,"Mezzanine::XML::XPathNode const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateString((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::XPathNode *arg4 = 0 ;
  size_t result;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",1,"Mezzanine::XML::XPathQuery const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",2,"Mezzanine::Char8 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",4,"Mezzanine::XML::XPathNode const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",4,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateString(arg2,arg3,(Mezzanine::XML::XPathNode const &)*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };

  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_XPathQuery_EvaluateString__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_XPathQuery_EvaluateString__SWIG_1(L);
          }
        }
      }
    }
  }

  lua_pushstring(L,"Wrong arguments for overloaded function 'XPathQuery_EvaluateString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathQuery::EvaluateString(Mezzanine::XML::XPathNode const &) const\n"
    "    Mezzanine::XML::XPathQuery::EvaluateString(Mezzanine::Char8 *,size_t,Mezzanine::XML::XPathNode const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_XPathQuery_EvaluateNodeSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateNodeSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNodeSet",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNodeSet",2,"Mezzanine::XML::XPathNode const &");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }


  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNodeSet",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }

  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateNodeSet((Mezzanine::XML::XPathNode const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_Result(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathParseResult *result = 0 ;

  SWIG_check_num_args("Mezzanine::XML::XPathQuery::Result",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::Result",1,"Mezzanine::XML::XPathQuery const *");

  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_Result",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }

  result = (Mezzanine::XML::XPathParseResult *) &((Mezzanine::XML::XPathQuery const *)arg1)->Result();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0); SWIG_arg++;
  return SWIG_arg;

  if(0) SWIG_fail;

fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathQuery(void *obj) {
Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) obj;
delete arg1;
}
static swig_lua_method swig_Mezzanine_XML_XPathQuery_methods[] = {
    {"ReturnType", _wrap_XPathQuery_ReturnType},
    {"EvaluateBoolean", _wrap_XPathQuery_EvaluateBoolean},
    {"EvaluateNumber", _wrap_XPathQuery_EvaluateNumber},
    {"EvaluateString", _wrap_XPathQuery_EvaluateString},
    {"EvaluateNodeSet", _wrap_XPathQuery_EvaluateNodeSet},
    {"Result", _wrap_XPathQuery_Result},
    {0,0}
};
static swig_lua_attribute swig_Mezzanine_XML_XPathQuery_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_Mezzanine_XML_XPathQuery_bases[] = {0};
static const char *swig_Mezzanine_XML_XPathQuery_base_names[] = {0};
static swig_lua_class _wrap_class_Mezzanine_XML_XPathQuery = { "XPathQuery", &SWIGTYPE_p_Mezzanine__XML__XPathQuery,_wrap_new_XPathQuery, swig_delete_XPathQuery, swig_Mezzanine_XML_XPathQuery_methods, swig_Mezzanine_XML_XPathQuery_attributes, swig_Mezzanine_XML_XPathQuery_bases, swig_Mezzanine_XML_XPathQuery_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "SetMemoryManagementFunctions", _wrap_SetMemoryManagementFunctions},
    { "GetMemoryAllocationFunction", _wrap_GetMemoryAllocationFunction},
    { "GetMemoryDeallocationFunction", _wrap_GetMemoryDeallocationFunction},
    { "AsUtf8",_wrap_AsUtf8},
    { "AsWide",_wrap_AsWide},
    { "GetOneTag", _wrap_GetOneTag},
    { "PreParseClassFromSingleTag",_wrap_PreParseClassFromSingleTag},
    { "EscapeXML", _wrap_EscapeXML},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "ParseMinimal", _wrap_ParseMinimal_get, SWIG_Lua_set_immutable },
    { "ParsePi", _wrap_ParsePi_get, SWIG_Lua_set_immutable },
    { "ParseComments", _wrap_ParseComments_get, SWIG_Lua_set_immutable },
    { "ParseCdata", _wrap_ParseCdata_get, SWIG_Lua_set_immutable },
    { "ParseWsPcdata", _wrap_ParseWsPcdata_get, SWIG_Lua_set_immutable },
    { "ParseEscapes", _wrap_ParseEscapes_get, SWIG_Lua_set_immutable },
    { "ParseEol", _wrap_ParseEol_get, SWIG_Lua_set_immutable },
    { "ParseWconvAttribute", _wrap_ParseWconvAttribute_get, SWIG_Lua_set_immutable },
    { "ParseWnormAttribute", _wrap_ParseWnormAttribute_get, SWIG_Lua_set_immutable },
    { "ParseDeclaration", _wrap_ParseDeclaration_get, SWIG_Lua_set_immutable },
    { "ParseDocType", _wrap_ParseDocType_get, SWIG_Lua_set_immutable },
    { "ParseWsPcdata_single", _wrap_ParseWsPcdata_single_get, SWIG_Lua_set_immutable },
    { "ParseDefault", _wrap_ParseDefault_get, SWIG_Lua_set_immutable },
    { "ParseFull", _wrap_ParseFull_get, SWIG_Lua_set_immutable },
    { "FormatIndent", _wrap_FormatIndent_get, SWIG_Lua_set_immutable },
    { "FormatWriteBom", _wrap_FormatWriteBom_get, SWIG_Lua_set_immutable },
    { "FormatRaw", _wrap_FormatRaw_get, SWIG_Lua_set_immutable },
    { "FormatNoDeclaration", _wrap_FormatNoDeclaration_get, SWIG_Lua_set_immutable },
    { "FormatNoEscapes", _wrap_FormatNoEscapes_get, SWIG_Lua_set_immutable },
    { "FormatSaveFileText", _wrap_FormatSaveFileText_get, SWIG_Lua_set_immutable },
    { "FormatDefault", _wrap_FormatDefault_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("XML_VERSION", 100)},
    {SWIG_LUA_CONSTTAB_INT("MEZZANINE_CORE", 1)},
    {SWIG_LUA_CONSTTAB_INT("MEZZ_FRAMESTOTRACK", 10)},
    {SWIG_LUA_CONSTTAB_INT("EncodingAuto", Mezzanine::XML::EncodingAuto)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF8", Mezzanine::XML::EncodingUTF8)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF16LE", Mezzanine::XML::EncodingUTF16LE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF16BE", Mezzanine::XML::EncodingUTF16BE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF16", Mezzanine::XML::EncodingUTF16)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF32LE", Mezzanine::XML::EncodingUTF32LE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF32BE", Mezzanine::XML::EncodingUTF32BE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF32", Mezzanine::XML::EncodingUTF32)},
    {SWIG_LUA_CONSTTAB_INT("Encodingwchar_t", Mezzanine::XML::Encodingwchar_t)},
    {SWIG_LUA_CONSTTAB_INT("EncodingLatin1", Mezzanine::XML::EncodingLatin1)},
    {SWIG_LUA_CONSTTAB_INT("NodeNull", Mezzanine::XML::NodeNull)},
    {SWIG_LUA_CONSTTAB_INT("NodeDocument", Mezzanine::XML::NodeDocument)},
    {SWIG_LUA_CONSTTAB_INT("NodeElement", Mezzanine::XML::NodeElement)},
    {SWIG_LUA_CONSTTAB_INT("NodePcdata", Mezzanine::XML::NodePcdata)},
    {SWIG_LUA_CONSTTAB_INT("NodeCdata", Mezzanine::XML::NodeCdata)},
    {SWIG_LUA_CONSTTAB_INT("NodeComment", Mezzanine::XML::NodeComment)},
    {SWIG_LUA_CONSTTAB_INT("NodePi", Mezzanine::XML::NodePi)},
    {SWIG_LUA_CONSTTAB_INT("NodeDeclaration", Mezzanine::XML::NodeDeclaration)},
    {SWIG_LUA_CONSTTAB_INT("NodeDocType", Mezzanine::XML::NodeDocType)},
    {SWIG_LUA_CONSTTAB_INT("StatusOk", Mezzanine::XML::StatusOk)},
    {SWIG_LUA_CONSTTAB_INT("StatusFileNotFound", Mezzanine::XML::StatusFileNotFound)},
    {SWIG_LUA_CONSTTAB_INT("StatusIOError", Mezzanine::XML::StatusIOError)},
    {SWIG_LUA_CONSTTAB_INT("StatusOutOfMemory", Mezzanine::XML::StatusOutOfMemory)},
    {SWIG_LUA_CONSTTAB_INT("StatusInternalError", Mezzanine::XML::StatusInternalError)},
    {SWIG_LUA_CONSTTAB_INT("StatusUnrecognizedTag", Mezzanine::XML::StatusUnrecognizedTag)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadProcessingInstruction", Mezzanine::XML::StatusBadProcessingInstruction)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadComment", Mezzanine::XML::StatusBadComment)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadCdata", Mezzanine::XML::StatusBadCdata)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadDocType", Mezzanine::XML::StatusBadDocType)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadPcdata", Mezzanine::XML::StatusBadPcdata)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadStartElement", Mezzanine::XML::StatusBadStartElement)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadAttribute", Mezzanine::XML::StatusBadAttribute)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadEndElement", Mezzanine::XML::StatusBadEndElement)},
    {SWIG_LUA_CONSTTAB_INT("StatusEndElementMismatch", Mezzanine::XML::StatusEndElementMismatch)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeNone", Mezzanine::XML::XPathTypeNone)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeNodeSet", Mezzanine::XML::XPathTypeNodeSet)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeNumber", Mezzanine::XML::XPathTypeNumber)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeString", Mezzanine::XML::XPathTypeString)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeBoolean", Mezzanine::XML::XPathTypeBoolean)},
    {SWIG_LUA_CONSTTAB_INT("XPathNodeSet_TypeUnsorted", Mezzanine::XML::XPathNodeSet::TypeUnsorted)},
    {SWIG_LUA_CONSTTAB_INT("XPathNodeSet_TypeSorted", Mezzanine::XML::XPathNodeSet::TypeSorted)},
    {SWIG_LUA_CONSTTAB_INT("XPathNodeSet_TypeSortedReverse", Mezzanine::XML::XPathNodeSet::TypeSortedReverse)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Mezzanine__XML__DocumentTo_p_Mezzanine__XML__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Node *)  ((Mezzanine::XML::Document *) x));
}
static swig_type_info _swigt__p_Mezzanine__XML__Attribute = {"_p_Mezzanine__XML__Attribute", "Mezzanine::XML::Attribute *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_Attribute, 0};
static swig_type_info _swigt__p_Mezzanine__XML__AttributeIterator = {"_p_Mezzanine__XML__AttributeIterator", "Mezzanine::XML::AttributeIterator *|Mezzanine::XML::Node::attribute_iterator *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_AttributeIterator, 0};
static swig_type_info _swigt__p_Mezzanine__XML__AttributeStruct = {"_p_Mezzanine__XML__AttributeStruct", "Mezzanine::XML::AttributeStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Document = {"_p_Mezzanine__XML__Document", "Mezzanine::XML::Document *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_Document, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NamedNodeIterator = {"_p_Mezzanine__XML__NamedNodeIterator", "Mezzanine::XML::NamedNodeIterator *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_NamedNodeIterator, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Node = {"_p_Mezzanine__XML__Node", "Mezzanine::XML::Node *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_Node, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeIterator = {"_p_Mezzanine__XML__NodeIterator", "Mezzanine::XML::NodeIterator *|Mezzanine::XML::Node::iterator *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_NodeIterator, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeStruct = {"_p_Mezzanine__XML__NodeStruct", "Mezzanine::XML::NodeStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeText = {"_p_Mezzanine__XML__NodeText", "Mezzanine::XML::NodeText *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_NodeText, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ParseResult = {"_p_Mezzanine__XML__ParseResult", "Mezzanine::XML::ParseResult *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_ParseResult, 0};
static swig_type_info _swigt__p_Mezzanine__XML__TreeWalker = {"_p_Mezzanine__XML__TreeWalker", "Mezzanine::XML::TreeWalker *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_TreeWalker, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathNode = {"_p_Mezzanine__XML__XPathNode", "Mezzanine::XML::XPathNodeSet::const_iterator|Mezzanine::XML::XPathNode *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_XPathNode, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathNodeSet = {"_p_Mezzanine__XML__XPathNodeSet", "Mezzanine::XML::XPathNodeSet *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_XPathNodeSet, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathParseResult = {"_p_Mezzanine__XML__XPathParseResult", "Mezzanine::XML::XPathParseResult *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_XPathParseResult, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathQuery = {"_p_Mezzanine__XML__XPathQuery", "Mezzanine::XML::XPathQuery *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_XPathQuery, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathVariable = {"_p_Mezzanine__XML__XPathVariable", "Mezzanine::XML::XPathVariable *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_XPathVariable, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathVariableSet = {"_p_Mezzanine__XML__XPathVariableSet", "Mezzanine::XML::XPathVariableSet *", 0, 0, (void*)&_wrap_class_Mezzanine_XML_XPathVariableSet, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_attribute_iterator = {"_p_attribute_iterator", "attribute_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Mezzanine::Boolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Mezzanine::PreciseReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "Mezzanine::XML::DeAllocationFunction|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t__p_void = {"_p_f_size_t__p_void", "void *(*)(size_t)|Mezzanine::XML::AllocationFunction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_category = {"_p_iterator_category", "iterator_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptrdiff_t = {"_p_ptrdiff_t", "ptrdiff_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t = {"_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t", "std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Mezzanine__XML__Attribute,
  &_swigt__p_Mezzanine__XML__AttributeIterator,
  &_swigt__p_Mezzanine__XML__AttributeStruct,
  &_swigt__p_Mezzanine__XML__Document,
  &_swigt__p_Mezzanine__XML__NamedNodeIterator,
  &_swigt__p_Mezzanine__XML__Node,
  &_swigt__p_Mezzanine__XML__NodeIterator,
  &_swigt__p_Mezzanine__XML__NodeStruct,
  &_swigt__p_Mezzanine__XML__NodeText,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,
  &_swigt__p_Mezzanine__XML__ParseResult,
  &_swigt__p_Mezzanine__XML__TreeWalker,
  &_swigt__p_Mezzanine__XML__XPathNode,
  &_swigt__p_Mezzanine__XML__XPathNodeSet,
  &_swigt__p_Mezzanine__XML__XPathParseResult,
  &_swigt__p_Mezzanine__XML__XPathQuery,
  &_swigt__p_Mezzanine__XML__XPathVariable,
  &_swigt__p_Mezzanine__XML__XPathVariableSet,
  &_swigt__p_SDL_Event,
  &_swigt__p_attribute_iterator,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_size_t__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_iterator_category,
  &_swigt__p_long_long,
  &_swigt__p_ptrdiff_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_Mezzanine__XML__Attribute[] = {  {&_swigt__p_Mezzanine__XML__Attribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__AttributeIterator[] = {  {&_swigt__p_Mezzanine__XML__AttributeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__AttributeStruct[] = {  {&_swigt__p_Mezzanine__XML__AttributeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Document[] = {  {&_swigt__p_Mezzanine__XML__Document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NamedNodeIterator[] = {  {&_swigt__p_Mezzanine__XML__NamedNodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Node[] = {  {&_swigt__p_Mezzanine__XML__Node, 0, 0, 0},  {&_swigt__p_Mezzanine__XML__Document, _p_Mezzanine__XML__DocumentTo_p_Mezzanine__XML__Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeIterator[] = {  {&_swigt__p_Mezzanine__XML__NodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeStruct[] = {  {&_swigt__p_Mezzanine__XML__NodeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeText[] = {  {&_swigt__p_Mezzanine__XML__NodeText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ParseResult[] = {  {&_swigt__p_Mezzanine__XML__ParseResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__TreeWalker[] = {  {&_swigt__p_Mezzanine__XML__TreeWalker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathNode[] = {  {&_swigt__p_Mezzanine__XML__XPathNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathNodeSet[] = {  {&_swigt__p_Mezzanine__XML__XPathNodeSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathParseResult[] = {  {&_swigt__p_Mezzanine__XML__XPathParseResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathQuery[] = {  {&_swigt__p_Mezzanine__XML__XPathQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathVariable[] = {  {&_swigt__p_Mezzanine__XML__XPathVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathVariableSet[] = {  {&_swigt__p_Mezzanine__XML__XPathVariableSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_attribute_iterator[] = {  {&_swigt__p_attribute_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t__p_void[] = {  {&_swigt__p_f_size_t__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_category[] = {  {&_swigt__p_iterator_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptrdiff_t[] = {  {&_swigt__p_ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Mezzanine__XML__Attribute,
  _swigc__p_Mezzanine__XML__AttributeIterator,
  _swigc__p_Mezzanine__XML__AttributeStruct,
  _swigc__p_Mezzanine__XML__Document,
  _swigc__p_Mezzanine__XML__NamedNodeIterator,
  _swigc__p_Mezzanine__XML__Node,
  _swigc__p_Mezzanine__XML__NodeIterator,
  _swigc__p_Mezzanine__XML__NodeStruct,
  _swigc__p_Mezzanine__XML__NodeText,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,
  _swigc__p_Mezzanine__XML__ParseResult,
  _swigc__p_Mezzanine__XML__TreeWalker,
  _swigc__p_Mezzanine__XML__XPathNode,
  _swigc__p_Mezzanine__XML__XPathNodeSet,
  _swigc__p_Mezzanine__XML__XPathParseResult,
  _swigc__p_Mezzanine__XML__XPathQuery,
  _swigc__p_Mezzanine__XML__XPathVariable,
  _swigc__p_Mezzanine__XML__XPathVariableSet,
  _swigc__p_SDL_Event,
  _swigc__p_attribute_iterator,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_p_void__void,
  _swigc__p_f_size_t__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_iterator_category,
  _swigc__p_long_long,
  _swigc__p_ptrdiff_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,
  _swigc__p_std__istream,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );

#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

