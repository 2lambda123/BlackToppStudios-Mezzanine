/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN int SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN int SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN int SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN int  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AxisAlignedBox swig_types[0]
#define SWIGTYPE_p_AxisList swig_types[1]
#define SWIGTYPE_p_ChannelType swig_types[2]
#define SWIGTYPE_p_CollidablePair swig_types[3]
#define SWIGTYPE_p_CollisionContainer swig_types[4]
#define SWIGTYPE_p_CollisionIterator swig_types[5]
#define SWIGTYPE_p_CollisionMap swig_types[6]
#define SWIGTYPE_p_CollisionMapIterator swig_types[7]
#define SWIGTYPE_p_CollisionSortPair swig_types[8]
#define SWIGTYPE_p_ConstCollisionIterator swig_types[9]
#define SWIGTYPE_p_ConstCollisionMapIterator swig_types[10]
#define SWIGTYPE_p_ConstConstraintIterator swig_types[11]
#define SWIGTYPE_p_ConstProxyIterator swig_types[12]
#define SWIGTYPE_p_ConstShapeMapIterator swig_types[13]
#define SWIGTYPE_p_ConstShapeVectorIterator swig_types[14]
#define SWIGTYPE_p_ConstWorldTriggerIterator swig_types[15]
#define SWIGTYPE_p_Constraint swig_types[16]
#define SWIGTYPE_p_ConstraintContainer swig_types[17]
#define SWIGTYPE_p_ConstraintIterator swig_types[18]
#define SWIGTYPE_p_EntresolManager swig_types[19]
#define SWIGTYPE_p_ManagerBase__ManagerType swig_types[20]
#define SWIGTYPE_p_ManagerConstructionInfo swig_types[21]
#define SWIGTYPE_p_Mezzanine__ArithmeticException swig_types[22]
#define SWIGTYPE_p_Mezzanine__AxisAlignedBox swig_types[23]
#define SWIGTYPE_p_Mezzanine__DirectoryException swig_types[24]
#define SWIGTYPE_p_Mezzanine__DirectoryNotFoundException swig_types[25]
#define SWIGTYPE_p_Mezzanine__DirectoryPermissionException swig_types[26]
#define SWIGTYPE_p_Mezzanine__DirectoryReadException swig_types[27]
#define SWIGTYPE_p_Mezzanine__DirectoryWriteException swig_types[28]
#define SWIGTYPE_p_Mezzanine__ExceptionBase swig_types[29]
#define SWIGTYPE_p_Mezzanine__FileException swig_types[30]
#define SWIGTYPE_p_Mezzanine__FileNotFoundException swig_types[31]
#define SWIGTYPE_p_Mezzanine__FilePermissionException swig_types[32]
#define SWIGTYPE_p_Mezzanine__FileReadException swig_types[33]
#define SWIGTYPE_p_Mezzanine__FileWriteException swig_types[34]
#define SWIGTYPE_p_Mezzanine__Graphics__Mesh swig_types[35]
#define SWIGTYPE_p_Mezzanine__IOException swig_types[36]
#define SWIGTYPE_p_Mezzanine__IOReadException swig_types[37]
#define SWIGTYPE_p_Mezzanine__IOWriteException swig_types[38]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException swig_types[39]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityException swig_types[40]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException swig_types[41]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException swig_types[42]
#define SWIGTYPE_p_Mezzanine__InternalException swig_types[43]
#define SWIGTYPE_p_Mezzanine__InvalidAssignment swig_types[44]
#define SWIGTYPE_p_Mezzanine__InvalidStateException swig_types[45]
#define SWIGTYPE_p_Mezzanine__InvalidVersionException swig_types[46]
#define SWIGTYPE_p_Mezzanine__Matrix3x3 swig_types[47]
#define SWIGTYPE_p_Mezzanine__MemoryManagementException swig_types[48]
#define SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException swig_types[49]
#define SWIGTYPE_p_Mezzanine__NetworkException swig_types[50]
#define SWIGTYPE_p_Mezzanine__NetworkNotFoundException swig_types[51]
#define SWIGTYPE_p_Mezzanine__NetworkPermissionException swig_types[52]
#define SWIGTYPE_p_Mezzanine__NetworkReadException swig_types[53]
#define SWIGTYPE_p_Mezzanine__NetworkURLException swig_types[54]
#define SWIGTYPE_p_Mezzanine__NetworkWriteException swig_types[55]
#define SWIGTYPE_p_Mezzanine__NotImplementedException swig_types[56]
#define SWIGTYPE_p_Mezzanine__OutOfMemoryException swig_types[57]
#define SWIGTYPE_p_Mezzanine__ParametersCastException swig_types[58]
#define SWIGTYPE_p_Mezzanine__ParametersException swig_types[59]
#define SWIGTYPE_p_Mezzanine__ParametersRangeException swig_types[60]
#define SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape swig_types[61]
#define SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape swig_types[62]
#define SWIGTYPE_p_Mezzanine__Physics__CollidablePair swig_types[63]
#define SWIGTYPE_p_Mezzanine__Physics__CollidableProxy swig_types[64]
#define SWIGTYPE_p_Mezzanine__Physics__Collision swig_types[65]
#define SWIGTYPE_p_Mezzanine__Physics__CollisionShape swig_types[66]
#define SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer swig_types[67]
#define SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager swig_types[68]
#define SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape swig_types[69]
#define SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape swig_types[70]
#define SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint swig_types[71]
#define SWIGTYPE_p_Mezzanine__Physics__Constraint swig_types[72]
#define SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape swig_types[73]
#define SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape swig_types[74]
#define SWIGTYPE_p_Mezzanine__Physics__DebugDrawWorkUnit swig_types[75]
#define SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory swig_types[76]
#define SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory swig_types[77]
#define SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint swig_types[78]
#define SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape swig_types[79]
#define SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape swig_types[80]
#define SWIGTYPE_p_Mezzanine__Physics__GearConstraint swig_types[81]
#define SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint swig_types[82]
#define SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint swig_types[83]
#define SWIGTYPE_p_Mezzanine__Physics__GhostProxy swig_types[84]
#define SWIGTYPE_p_Mezzanine__Physics__HeightfieldCollisionShape swig_types[85]
#define SWIGTYPE_p_Mezzanine__Physics__Hinge2Constraint swig_types[86]
#define SWIGTYPE_p_Mezzanine__Physics__HingeConstraint swig_types[87]
#define SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo swig_types[88]
#define SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape swig_types[89]
#define SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape swig_types[90]
#define SWIGTYPE_p_Mezzanine__Physics__PhysicsManager swig_types[91]
#define SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape swig_types[92]
#define SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint swig_types[93]
#define SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape swig_types[94]
#define SWIGTYPE_p_Mezzanine__Physics__RigidProxy swig_types[95]
#define SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit swig_types[96]
#define SWIGTYPE_p_Mezzanine__Physics__SimulationWorkUnit swig_types[97]
#define SWIGTYPE_p_Mezzanine__Physics__SliderConstraint swig_types[98]
#define SWIGTYPE_p_Mezzanine__Physics__SoftCollisionShape swig_types[99]
#define SWIGTYPE_p_Mezzanine__Physics__SoftProxy swig_types[100]
#define SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape swig_types[101]
#define SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape swig_types[102]
#define SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo swig_types[103]
#define SWIGTYPE_p_Mezzanine__Physics__StickyData swig_types[104]
#define SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint swig_types[105]
#define SWIGTYPE_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit swig_types[106]
#define SWIGTYPE_p_Mezzanine__Plane swig_types[107]
#define SWIGTYPE_p_Mezzanine__Quaternion swig_types[108]
#define SWIGTYPE_p_Mezzanine__Ray swig_types[109]
#define SWIGTYPE_p_Mezzanine__RenderingAPIException swig_types[110]
#define SWIGTYPE_p_Mezzanine__RuntimeAssertionException swig_types[111]
#define SWIGTYPE_p_Mezzanine__ScriptException swig_types[112]
#define SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException swig_types[113]
#define SWIGTYPE_p_Mezzanine__ScriptLuaException swig_types[114]
#define SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException swig_types[115]
#define SWIGTYPE_p_Mezzanine__ScriptLuaYieldException swig_types[116]
#define SWIGTYPE_p_Mezzanine__Sphere swig_types[117]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorException swig_types[118]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException swig_types[119]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException swig_types[120]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException swig_types[121]
#define SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type swig_types[122]
#define SWIGTYPE_p_Mezzanine__Threading__DefaultWorkUnit swig_types[123]
#define SWIGTYPE_p_Mezzanine__Threading__RawFile swig_types[124]
#define SWIGTYPE_p_Mezzanine__Transform swig_types[125]
#define SWIGTYPE_p_Mezzanine__TransformableChildObject swig_types[126]
#define SWIGTYPE_p_Mezzanine__TransformableObject swig_types[127]
#define SWIGTYPE_p_Mezzanine__Vector3 swig_types[128]
#define SWIGTYPE_p_Mezzanine__Vector3LengthCompare swig_types[129]
#define SWIGTYPE_p_Mezzanine__World swig_types[130]
#define SWIGTYPE_p_Mezzanine__WorldManager swig_types[131]
#define SWIGTYPE_p_Mezzanine__WorldObject swig_types[132]
#define SWIGTYPE_p_Mezzanine__WorldProxy swig_types[133]
#define SWIGTYPE_p_Mezzanine__WorldTrigger swig_types[134]
#define SWIGTYPE_p_Ogre__Plane swig_types[135]
#define SWIGTYPE_p_Ogre__Quaternion swig_types[136]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[137]
#define SWIGTYPE_p_ParamList swig_types[138]
#define SWIGTYPE_p_ProxyContainer swig_types[139]
#define SWIGTYPE_p_ProxyIterator swig_types[140]
#define SWIGTYPE_p_RayTestResult swig_types[141]
#define SWIGTYPE_p_SDL_Event swig_types[142]
#define SWIGTYPE_p_ShapeMap swig_types[143]
#define SWIGTYPE_p_ShapeMapIterator swig_types[144]
#define SWIGTYPE_p_ShapeVector swig_types[145]
#define SWIGTYPE_p_ShapeVectorIterator swig_types[146]
#define SWIGTYPE_p_StandardAxis swig_types[147]
#define SWIGTYPE_p_Transform swig_types[148]
#define SWIGTYPE_p_WorldManager swig_types[149]
#define SWIGTYPE_p_WorldTriggerContainer swig_types[150]
#define SWIGTYPE_p_WorldTriggerIterator swig_types[151]
#define SWIGTYPE_p_XML__Node swig_types[152]
#define SWIGTYPE_p_bool swig_types[153]
#define SWIGTYPE_p_btBoxShape swig_types[154]
#define SWIGTYPE_p_btBvhTriangleMeshShape swig_types[155]
#define SWIGTYPE_p_btCapsuleShape swig_types[156]
#define SWIGTYPE_p_btCollisionObject swig_types[157]
#define SWIGTYPE_p_btCollisionShape swig_types[158]
#define SWIGTYPE_p_btCompoundShape swig_types[159]
#define SWIGTYPE_p_btConcaveShape swig_types[160]
#define SWIGTYPE_p_btConeShape swig_types[161]
#define SWIGTYPE_p_btConvexHullShape swig_types[162]
#define SWIGTYPE_p_btConvexInternalShape swig_types[163]
#define SWIGTYPE_p_btCylinderShape swig_types[164]
#define SWIGTYPE_p_btGImpactMeshShape swig_types[165]
#define SWIGTYPE_p_btHeightfieldTerrainShape swig_types[166]
#define SWIGTYPE_p_btMultiSphereShape swig_types[167]
#define SWIGTYPE_p_btPairCachingGhostObject swig_types[168]
#define SWIGTYPE_p_btQuaternion swig_types[169]
#define SWIGTYPE_p_btRigidBody swig_types[170]
#define SWIGTYPE_p_btSoftBody swig_types[171]
#define SWIGTYPE_p_btSoftBodyCollisionShape swig_types[172]
#define SWIGTYPE_p_btSphereShape swig_types[173]
#define SWIGTYPE_p_btStaticPlaneShape swig_types[174]
#define SWIGTYPE_p_btTransform swig_types[175]
#define SWIGTYPE_p_btTypedConstraint swig_types[176]
#define SWIGTYPE_p_btVector3 swig_types[177]
#define SWIGTYPE_p_char swig_types[178]
#define SWIGTYPE_p_double swig_types[179]
#define SWIGTYPE_p_float swig_types[180]
#define SWIGTYPE_p_int swig_types[181]
#define SWIGTYPE_p_long_long swig_types[182]
#define SWIGTYPE_p_short swig_types[183]
#define SWIGTYPE_p_signed_char swig_types[184]
#define SWIGTYPE_p_std__exception swig_types[185]
#define SWIGTYPE_p_std__istream swig_types[186]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[187]
#define SWIGTYPE_p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator swig_types[188]
#define SWIGTYPE_p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator swig_types[189]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[190]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t swig_types[191]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[192]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[193]
#define SWIGTYPE_p_std__string swig_types[194]
#define SWIGTYPE_p_std__stringstream swig_types[195]
#define SWIGTYPE_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t swig_types[196]
#define SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t swig_types[197]
#define SWIGTYPE_p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t swig_types[198]
#define SWIGTYPE_p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t swig_types[199]
#define SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t swig_types[200]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[201]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[202]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[203]
#define SWIGTYPE_p_std__wstring swig_types[204]
#define SWIGTYPE_p_unsigned_char swig_types[205]
#define SWIGTYPE_p_unsigned_int swig_types[206]
#define SWIGTYPE_p_unsigned_long swig_types[207]
#define SWIGTYPE_p_unsigned_long_long swig_types[208]
#define SWIGTYPE_p_unsigned_short swig_types[209]
static swig_type_info *swig_types[211];
static swig_module_info swig_module = {swig_types, 210, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "MezzaninePhysicsSafe"
#define SWIG_init      luaopen_MezzaninePhysicsSafe
#define SWIG_init_user luaopen_MezzaninePhysicsSafe_user

#define SWIG_LUACODE   luaopen_MezzaninePhysicsSafe_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"
        #include "SDL.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        #ifdef GetExceptionCode
        #undef GetExceptionCode
        #endif

        using namespace Mezzanine;
        //using namespace Mezzanine::Threading;
        //using namespace Mezzanine::Physics;

        // Fix cross module type-usage
        namespace Mezzanine
        {
            namespace Physics
            {
                typedef Mezzanine::Vector3 Vector3;
            }
            namespace Threading
            {

            }
            typedef Threading::RawFile RawFile;
        }
    

#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <deque>
#include <stdexcept>


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        using namespace Mezzanine;
        using namespace Mezzanine::Physics;
    
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_SimulationWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SimulationWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SimulationWorkUnit::SimulationWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SimulationWorkUnit::SimulationWorkUnit",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SimulationWorkUnit",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SimulationWorkUnit *)new Mezzanine::Physics::SimulationWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SimulationWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SimulationWorkUnit *arg1 = (Mezzanine::Physics::SimulationWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SimulationWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SimulationWorkUnit::DoWork",1,"Mezzanine::Physics::SimulationWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SimulationWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SimulationWorkUnit,0))){
    SWIG_fail_ptr("SimulationWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__Physics__SimulationWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("SimulationWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimulationWorkUnit(void *obj) {
Mezzanine::Physics::SimulationWorkUnit *arg1 = (Mezzanine::Physics::SimulationWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimulationWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimulationWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimulationWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimulationWorkUnit_methods[]= {
    { "DoWork", _wrap_SimulationWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_SimulationWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimulationWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimulationWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimulationWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimulationWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimulationWorkUnit_Sf_SwigStatic = {
    "SimulationWorkUnit",
    swig_SimulationWorkUnit_Sf_SwigStatic_methods,
    swig_SimulationWorkUnit_Sf_SwigStatic_attributes,
    swig_SimulationWorkUnit_Sf_SwigStatic_constants,
    swig_SimulationWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimulationWorkUnit_bases[] = {0};
static const char *swig_SimulationWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_SimulationWorkUnit = { "SimulationWorkUnit", "SimulationWorkUnit", &SWIGTYPE_p_Mezzanine__Physics__SimulationWorkUnit,_proxy__wrap_new_SimulationWorkUnit, swig_delete_SimulationWorkUnit, swig_SimulationWorkUnit_methods, swig_SimulationWorkUnit_attributes, &swig_SimulationWorkUnit_Sf_SwigStatic, swig_SimulationWorkUnit_meta, swig_SimulationWorkUnit_bases, swig_SimulationWorkUnit_base_names };

static int _wrap_new_SimulationMonopolyWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SimulationMonopolyWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SimulationMonopolyWorkUnit::SimulationMonopolyWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SimulationMonopolyWorkUnit::SimulationMonopolyWorkUnit",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SimulationMonopolyWorkUnit",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SimulationMonopolyWorkUnit *)new Mezzanine::Physics::SimulationMonopolyWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationMonopolyWorkUnit_UseThreads(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SimulationMonopolyWorkUnit *arg1 = (Mezzanine::Physics::SimulationMonopolyWorkUnit *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SimulationMonopolyWorkUnit::UseThreads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SimulationMonopolyWorkUnit::UseThreads",1,"Mezzanine::Physics::SimulationMonopolyWorkUnit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SimulationMonopolyWorkUnit::UseThreads",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit,0))){
    SWIG_fail_ptr("SimulationMonopolyWorkUnit_UseThreads",1,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->UseThreads((Mezzanine::Whole const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationMonopolyWorkUnit_UsingThreadCount(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SimulationMonopolyWorkUnit *arg1 = (Mezzanine::Physics::SimulationMonopolyWorkUnit *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::SimulationMonopolyWorkUnit::UsingThreadCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SimulationMonopolyWorkUnit::UsingThreadCount",1,"Mezzanine::Physics::SimulationMonopolyWorkUnit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit,0))){
    SWIG_fail_ptr("SimulationMonopolyWorkUnit_UsingThreadCount",1,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit);
  }
  
  result = (Mezzanine::Whole)(arg1)->UsingThreadCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SimulationMonopolyWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SimulationMonopolyWorkUnit *arg1 = (Mezzanine::Physics::SimulationMonopolyWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SimulationMonopolyWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SimulationMonopolyWorkUnit::DoWork",1,"Mezzanine::Physics::SimulationMonopolyWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SimulationMonopolyWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit,0))){
    SWIG_fail_ptr("SimulationMonopolyWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("SimulationMonopolyWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SimulationMonopolyWorkUnit(void *obj) {
Mezzanine::Physics::SimulationMonopolyWorkUnit *arg1 = (Mezzanine::Physics::SimulationMonopolyWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_SimulationMonopolyWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SimulationMonopolyWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SimulationMonopolyWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SimulationMonopolyWorkUnit_methods[]= {
    { "UseThreads", _wrap_SimulationMonopolyWorkUnit_UseThreads},
    { "UsingThreadCount", _wrap_SimulationMonopolyWorkUnit_UsingThreadCount},
    { "DoWork", _wrap_SimulationMonopolyWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_SimulationMonopolyWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SimulationMonopolyWorkUnit_Sf_SwigStatic = {
    "SimulationMonopolyWorkUnit",
    swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_methods,
    swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_attributes,
    swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_constants,
    swig_SimulationMonopolyWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SimulationMonopolyWorkUnit_bases[] = {0};
static const char *swig_SimulationMonopolyWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_SimulationMonopolyWorkUnit = { "SimulationMonopolyWorkUnit", "SimulationMonopolyWorkUnit", &SWIGTYPE_p_Mezzanine__Physics__SimulationMonopolyWorkUnit,_proxy__wrap_new_SimulationMonopolyWorkUnit, swig_delete_SimulationMonopolyWorkUnit, swig_SimulationMonopolyWorkUnit_methods, swig_SimulationMonopolyWorkUnit_attributes, &swig_SimulationMonopolyWorkUnit_Sf_SwigStatic, swig_SimulationMonopolyWorkUnit_meta, swig_SimulationMonopolyWorkUnit_bases, swig_SimulationMonopolyWorkUnit_base_names };

static int _wrap_new_WorldTriggerUpdateWorkUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::WorldTriggerUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::WorldTriggerUpdateWorkUnit::WorldTriggerUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::WorldTriggerUpdateWorkUnit::WorldTriggerUpdateWorkUnit",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_WorldTriggerUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::WorldTriggerUpdateWorkUnit *)new Mezzanine::Physics::WorldTriggerUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WorldTriggerUpdateWorkUnit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WorldTriggerUpdateWorkUnit__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_WorldTriggerUpdateWorkUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::WorldTriggerUpdateWorkUnit::WorldTriggerUpdateWorkUnit(Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldTriggerUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::WorldTriggerUpdateWorkUnit *arg1 = (Mezzanine::Physics::WorldTriggerUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::WorldTriggerUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::WorldTriggerUpdateWorkUnit::DoWork",1,"Mezzanine::Physics::WorldTriggerUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::WorldTriggerUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit,0))){
    SWIG_fail_ptr("WorldTriggerUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("WorldTriggerUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldTriggerUpdateWorkUnit(void *obj) {
Mezzanine::Physics::WorldTriggerUpdateWorkUnit *arg1 = (Mezzanine::Physics::WorldTriggerUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_WorldTriggerUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WorldTriggerUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WorldTriggerUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldTriggerUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_WorldTriggerUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_WorldTriggerUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic = {
    "WorldTriggerUpdateWorkUnit",
    swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldTriggerUpdateWorkUnit_bases[] = {0};
static const char *swig_WorldTriggerUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_WorldTriggerUpdateWorkUnit = { "WorldTriggerUpdateWorkUnit", "WorldTriggerUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit,_proxy__wrap_new_WorldTriggerUpdateWorkUnit, swig_delete_WorldTriggerUpdateWorkUnit, swig_WorldTriggerUpdateWorkUnit_methods, swig_WorldTriggerUpdateWorkUnit_attributes, &swig_WorldTriggerUpdateWorkUnit_Sf_SwigStatic, swig_WorldTriggerUpdateWorkUnit_meta, swig_WorldTriggerUpdateWorkUnit_bases, swig_WorldTriggerUpdateWorkUnit_base_names };

static int _wrap_new_DebugDrawWorkUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::DebugDrawWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DebugDrawWorkUnit::DebugDrawWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DebugDrawWorkUnit::DebugDrawWorkUnit",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_DebugDrawWorkUnit",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::DebugDrawWorkUnit *)new Mezzanine::Physics::DebugDrawWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DebugDrawWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebugDrawWorkUnit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DebugDrawWorkUnit__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DebugDrawWorkUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::DebugDrawWorkUnit::DebugDrawWorkUnit(Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_DebugDrawWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DebugDrawWorkUnit *arg1 = (Mezzanine::Physics::DebugDrawWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DebugDrawWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DebugDrawWorkUnit::DoWork",1,"Mezzanine::Physics::DebugDrawWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DebugDrawWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DebugDrawWorkUnit,0))){
    SWIG_fail_ptr("DebugDrawWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__Physics__DebugDrawWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("DebugDrawWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebugDrawWorkUnit(void *obj) {
Mezzanine::Physics::DebugDrawWorkUnit *arg1 = (Mezzanine::Physics::DebugDrawWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_DebugDrawWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DebugDrawWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DebugDrawWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DebugDrawWorkUnit_methods[]= {
    { "DoWork", _wrap_DebugDrawWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_DebugDrawWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DebugDrawWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DebugDrawWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DebugDrawWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DebugDrawWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DebugDrawWorkUnit_Sf_SwigStatic = {
    "DebugDrawWorkUnit",
    swig_DebugDrawWorkUnit_Sf_SwigStatic_methods,
    swig_DebugDrawWorkUnit_Sf_SwigStatic_attributes,
    swig_DebugDrawWorkUnit_Sf_SwigStatic_constants,
    swig_DebugDrawWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DebugDrawWorkUnit_bases[] = {0};
static const char *swig_DebugDrawWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_DebugDrawWorkUnit = { "DebugDrawWorkUnit", "DebugDrawWorkUnit", &SWIGTYPE_p_Mezzanine__Physics__DebugDrawWorkUnit,_proxy__wrap_new_DebugDrawWorkUnit, swig_delete_DebugDrawWorkUnit, swig_DebugDrawWorkUnit_methods, swig_DebugDrawWorkUnit_attributes, &swig_DebugDrawWorkUnit_Sf_SwigStatic, swig_DebugDrawWorkUnit_meta, swig_DebugDrawWorkUnit_bases, swig_DebugDrawWorkUnit_base_names };

static int _wrap_PhysicsManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::Physics::PhysicsManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::InterfaceType",0,0)
  result = (ManagerBase::ManagerType)Mezzanine::Physics::PhysicsManager::InterfaceType;
  {
    ManagerBase::ManagerType * resultptr = new ManagerBase::ManagerType((const ManagerBase::ManagerType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ManagerBase__ManagerType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Physics::PhysicsManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::PhysicsManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PhysicsManager",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_PhysicsManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Physics::PhysicsManager *)new Mezzanine::Physics::PhysicsManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  ManagerConstructionInfo *arg2 = 0 ;
  Mezzanine::Physics::PhysicsManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::PhysicsManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PhysicsManager",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PhysicsManager",2,"ManagerConstructionInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_PhysicsManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ManagerConstructionInfo,0))){
    SWIG_fail_ptr("new_PhysicsManager",2,SWIGTYPE_p_ManagerConstructionInfo);
  }
  
  result = (Mezzanine::Physics::PhysicsManager *)new Mezzanine::Physics::PhysicsManager(arg1,(ManagerConstructionInfo const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsManager__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::PhysicsManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::PhysicsManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PhysicsManager",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PhysicsManager",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_PhysicsManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_PhysicsManager",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::PhysicsManager *)new Mezzanine::Physics::PhysicsManager(arg1,(XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PhysicsManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PhysicsManager__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ManagerConstructionInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PhysicsManager__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PhysicsManager__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PhysicsManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::PhysicsManager(Mezzanine::World *)\n"
    "    Mezzanine::Physics::PhysicsManager::PhysicsManager(Mezzanine::World *,ManagerConstructionInfo const &)\n"
    "    Mezzanine::Physics::PhysicsManager::PhysicsManager(Mezzanine::World *,XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_PauseSimulation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::PauseSimulation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PauseSimulation",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::PauseSimulation",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_PauseSimulation",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->PauseSimulation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_SimulationIsPaused(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::SimulationIsPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SimulationIsPaused",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_SimulationIsPaused",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Boole)(arg1)->SimulationIsPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetTimeMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetTimeMultiplier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetTimeMultiplier",1,"Mezzanine::Physics::PhysicsManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetTimeMultiplier",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::PhysicsManager const *)arg1)->GetTimeMultiplier();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_SetTimeMultiplier(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::SetTimeMultiplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetTimeMultiplier",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetTimeMultiplier",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_SetTimeMultiplier",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetTimeMultiplier((Mezzanine::Real const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_SetWorldGravity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::SetWorldGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetWorldGravity",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetWorldGravity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_SetWorldGravity",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_SetWorldGravity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetWorldGravity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetWorldGravity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetWorldGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldGravity",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetWorldGravity",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (arg1)->GetWorldGravity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_SetWorldSoftGravity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::SetWorldSoftGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetWorldSoftGravity",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetWorldSoftGravity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_SetWorldSoftGravity",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_SetWorldSoftGravity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetWorldSoftGravity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetWorldSoftGravity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetWorldSoftGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldSoftGravity",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetWorldSoftGravity",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (arg1)->GetWorldSoftGravity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGhostProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGhostProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)(arg1)->CreateGhostProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGhostProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",2,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",3,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGhostProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGhostProxy",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::Physics::GhostProxy *)(arg1)->CreateGhostProxy(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGhostProxy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGhostProxy",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGhostProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGhostProxy",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)(arg1)->CreateGhostProxy((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGhostProxy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PhysicsManager_CreateGhostProxy__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateGhostProxy__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_PhysicsManager_CreateGhostProxy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateGhostProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGhostProxy()\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGhostProxy(Mezzanine::Physics::CollisionShape *,Mezzanine::Boole const)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGhostProxy(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateRigidProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateRigidProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::RigidProxy *)(arg1)->CreateRigidProxy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateRigidProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",2,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",3,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",4,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateRigidProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("PhysicsManager_CreateRigidProxy",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::Physics::RigidProxy *)(arg1)->CreateRigidProxy(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateRigidProxy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateRigidProxy",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateRigidProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateRigidProxy",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::RigidProxy *)(arg1)->CreateRigidProxy((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateRigidProxy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateRigidProxy__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateRigidProxy__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_PhysicsManager_CreateRigidProxy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateRigidProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateRigidProxy(Mezzanine::Real const)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateRigidProxy(Mezzanine::Real const,Mezzanine::Physics::CollisionShape *,Mezzanine::Boole const)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateRigidProxy(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateSoftProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Physics::SoftProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateSoftProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSoftProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSoftProxy",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSoftProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::SoftProxy *)(arg1)->CreateSoftProxy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateSoftProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::SoftProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateSoftProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSoftProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSoftProxy",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSoftProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSoftProxy",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::SoftProxy *)(arg1)->CreateSoftProxy((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateSoftProxy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateSoftProxy__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateSoftProxy__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateSoftProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateSoftProxy(Mezzanine::Real const)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateSoftProxy(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_GetProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxy",1,"Mezzanine::Physics::PhysicsManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxy",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::CollidableProxy *)((Mezzanine::Physics::PhysicsManager const *)arg1)->GetProxy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::ProxyType arg2 ;
  Mezzanine::UInt32 arg3 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetProxy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxy",1,"Mezzanine::Physics::PhysicsManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxy",2,"Mezzanine::ProxyType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxy",3,"Mezzanine::UInt32");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  arg2 = (Mezzanine::ProxyType const)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::UInt32)lua_tonumber(L, 3);
  result = (Mezzanine::Physics::CollidableProxy *)((Mezzanine::Physics::PhysicsManager const *)arg1)->GetProxy(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetProxy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsManager_GetProxy__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_PhysicsManager_GetProxy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_GetProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::GetProxy(Mezzanine::UInt32 const) const\n"
    "    Mezzanine::Physics::PhysicsManager::GetProxy(Mezzanine::ProxyType const,Mezzanine::UInt32) const\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_GetProxyByID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetProxyByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxyByID",1,"Mezzanine::Physics::PhysicsManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetProxyByID",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetProxyByID",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::CollidableProxy *)((Mezzanine::Physics::PhysicsManager const *)arg1)->GetProxyByID(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetNumProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetNumProxies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetNumProxies",1,"Mezzanine::Physics::PhysicsManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetNumProxies",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::Physics::PhysicsManager const *)arg1)->GetNumProxies();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DestroyProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DestroyProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyProxy",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyProxy",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->DestroyProxy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DestroyAllProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DestroyAllProxies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyAllProxies",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyAllProxies",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->DestroyAllProxies();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateConeTwistConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::ConeTwistConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::ConeTwistConstraint *)(arg1)->CreateConeTwistConstraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateConeTwistConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg3 = 0 ;
  Mezzanine::Physics::ConeTwistConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",3,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",3,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::ConeTwistConstraint *)(arg1)->CreateConeTwistConstraint(arg2,(Transform const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateConeTwistConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::ConeTwistConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateConeTwistConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::ConeTwistConstraint *)(arg1)->CreateConeTwistConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateConeTwistConstraint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateConeTwistConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsManager_CreateConeTwistConstraint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateConeTwistConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateConeTwistConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint(Mezzanine::Physics::RigidProxy *,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateConeTwistConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateGearConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::GearConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",5,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::GearConstraint *)(arg1)->CreateGearConstraint(arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGearConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Real arg6 ;
  Mezzanine::Physics::GearConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",6,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg6 = (Mezzanine::Real const)lua_tonumber(L, 6);
  result = (Mezzanine::Physics::GearConstraint *)(arg1)->CreateGearConstraint(arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGearConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::GearConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGearConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGearConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::GearConstraint *)(arg1)->CreateGearConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGearConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateGearConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateGearConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_PhysicsManager_CreateGearConstraint__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateGearConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGearConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGearConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGearConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateGeneric6DofConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::Generic6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::Generic6DofConstraint *)(arg1)->CreateGeneric6DofConstraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGeneric6DofConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg3 = 0 ;
  Mezzanine::Physics::Generic6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",3,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",3,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::Generic6DofConstraint *)(arg1)->CreateGeneric6DofConstraint(arg2,(Transform const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGeneric6DofConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::Generic6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::Generic6DofConstraint *)(arg1)->CreateGeneric6DofConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGeneric6DofConstraint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateGeneric6DofConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsManager_CreateGeneric6DofConstraint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateGeneric6DofConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateGeneric6DofConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint(Mezzanine::Physics::RigidProxy *,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGeneric6DofConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateGeneric6DofSpringConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::Generic6DofSpringConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::Generic6DofSpringConstraint *)(arg1)->CreateGeneric6DofSpringConstraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGeneric6DofSpringConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::Generic6DofSpringConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateGeneric6DofSpringConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::Generic6DofSpringConstraint *)(arg1)->CreateGeneric6DofSpringConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateGeneric6DofSpringConstraint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateGeneric6DofSpringConstraint__SWIG_1(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateGeneric6DofSpringConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateGeneric6DofSpringConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateGeneric6DofSpringConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateHingeConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::Vector3 *arg6 = 0 ;
  Mezzanine::Physics::Vector3 *arg7 = 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",6,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",7,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",6,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",7,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)(arg1)->CreateHingeConstraint(arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,(Mezzanine::Physics::Vector3 const &)*arg6,(Mezzanine::Physics::Vector3 const &)*arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHingeConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)(arg1)->CreateHingeConstraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHingeConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",3,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",4,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)(arg1)->CreateHingeConstraint(arg2,(Mezzanine::Physics::Vector3 const &)*arg3,(Mezzanine::Physics::Vector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHingeConstraint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg3 = 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",3,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",3,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)(arg1)->CreateHingeConstraint(arg2,(Transform const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHingeConstraint__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHingeConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHingeConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)(arg1)->CreateHingeConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHingeConstraint(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateHingeConstraint__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsManager_CreateHingeConstraint__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_PhysicsManager_CreateHingeConstraint__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateHingeConstraint__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_PhysicsManager_CreateHingeConstraint__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateHingeConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHingeConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHingeConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHingeConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHingeConstraint(Mezzanine::Physics::RigidProxy *,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHingeConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateHinge2Constraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::Vector3 *arg6 = 0 ;
  Mezzanine::Physics::Hinge2Constraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",6,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",6,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::Hinge2Constraint *)(arg1)->CreateHinge2Constraint(arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,(Mezzanine::Physics::Vector3 const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Hinge2Constraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHinge2Constraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::Hinge2Constraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::Hinge2Constraint *)(arg1)->CreateHinge2Constraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Hinge2Constraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHinge2Constraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::Hinge2Constraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateHinge2Constraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::Hinge2Constraint *)(arg1)->CreateHinge2Constraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Hinge2Constraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateHinge2Constraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateHinge2Constraint__SWIG_2(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateHinge2Constraint__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_PhysicsManager_CreateHinge2Constraint__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateHinge2Constraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateHinge2Constraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreatePoint2PointConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::Point2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",5,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::Point2PointConstraint *)(arg1)->CreatePoint2PointConstraint(arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreatePoint2PointConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  Mezzanine::Physics::Point2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",3,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::Point2PointConstraint *)(arg1)->CreatePoint2PointConstraint(arg2,(Mezzanine::Physics::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreatePoint2PointConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::Point2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreatePoint2PointConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::Point2PointConstraint *)(arg1)->CreatePoint2PointConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreatePoint2PointConstraint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreatePoint2PointConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsManager_CreatePoint2PointConstraint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreatePoint2PointConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreatePoint2PointConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreatePoint2PointConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateSliderConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::SliderConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::SliderConstraint *)(arg1)->CreateSliderConstraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateSliderConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg3 = 0 ;
  Mezzanine::Physics::SliderConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",3,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",3,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::SliderConstraint *)(arg1)->CreateSliderConstraint(arg2,(Transform const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateSliderConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::SliderConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateSliderConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateSliderConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::SliderConstraint *)(arg1)->CreateSliderConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateSliderConstraint(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateSliderConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsManager_CreateSliderConstraint__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateSliderConstraint__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateSliderConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateSliderConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateSliderConstraint(Mezzanine::Physics::RigidProxy *,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateSliderConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_CreateUniversalConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::Vector3 *arg6 = 0 ;
  Mezzanine::Physics::UniversalConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",6,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",6,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::UniversalConstraint *)(arg1)->CreateUniversalConstraint(arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,(Mezzanine::Physics::Vector3 const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateUniversalConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Transform *arg4 = 0 ;
  Transform *arg5 = 0 ;
  Mezzanine::Physics::UniversalConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",4,"Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",5,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",4,SWIGTYPE_p_Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",5,SWIGTYPE_p_Transform);
  }
  
  result = (Mezzanine::Physics::UniversalConstraint *)(arg1)->CreateUniversalConstraint(arg2,arg3,(Transform const &)*arg4,(Transform const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateUniversalConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::UniversalConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PhysicsManager_CreateUniversalConstraint",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::UniversalConstraint *)(arg1)->CreateUniversalConstraint((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_CreateUniversalConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_CreateUniversalConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_PhysicsManager_CreateUniversalConstraint__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_PhysicsManager_CreateUniversalConstraint__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_CreateUniversalConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint(Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Transform const &,Transform const &)\n"
    "    Mezzanine::Physics::PhysicsManager::CreateUniversalConstraint(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_GetConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Constraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetConstraint",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Constraint *)(arg1)->GetConstraint((Mezzanine::Whole const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Constraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetNumConstraints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetNumConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetNumConstraints",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetNumConstraints",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetNumConstraints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DestroyConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Constraint *arg2 = (Constraint *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DestroyConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyConstraint",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyConstraint",2,"Constraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyConstraint",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Constraint,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyConstraint",2,SWIGTYPE_p_Constraint);
  }
  
  (arg1)->DestroyConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DestroyAllConstraints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DestroyAllConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyAllConstraints",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyAllConstraints",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->DestroyAllConstraints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_AddWorldTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::WorldTrigger *arg2 = (Mezzanine::WorldTrigger *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::AddWorldTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::AddWorldTrigger",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::AddWorldTrigger",2,"Mezzanine::WorldTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_AddWorldTrigger",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldTrigger,0))){
    SWIG_fail_ptr("PhysicsManager_AddWorldTrigger",2,SWIGTYPE_p_Mezzanine__WorldTrigger);
  }
  
  (arg1)->AddWorldTrigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetWorldTrigger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldTrigger *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetWorldTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldTrigger",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldTrigger",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetWorldTrigger",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::WorldTrigger *)(arg1)->GetWorldTrigger((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldTrigger,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetWorldTrigger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::WorldTrigger *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetWorldTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldTrigger",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldTrigger",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetWorldTrigger",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::WorldTrigger *)(arg1)->GetWorldTrigger((Mezzanine::Whole const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldTrigger,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetWorldTrigger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsManager_GetWorldTrigger__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PhysicsManager_GetWorldTrigger__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_GetWorldTrigger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::GetWorldTrigger(Mezzanine::String const &)\n"
    "    Mezzanine::Physics::PhysicsManager::GetWorldTrigger(Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_GetNumWorldTriggers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetNumWorldTriggers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetNumWorldTriggers",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetNumWorldTriggers",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetNumWorldTriggers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_RemoveWorldTrigger(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::WorldTrigger *arg2 = (Mezzanine::WorldTrigger *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::RemoveWorldTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::RemoveWorldTrigger",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::RemoveWorldTrigger",2,"Mezzanine::WorldTrigger *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_RemoveWorldTrigger",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldTrigger,0))){
    SWIG_fail_ptr("PhysicsManager_RemoveWorldTrigger",2,SWIGTYPE_p_Mezzanine__WorldTrigger);
  }
  
  (arg1)->RemoveWorldTrigger(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DestroyAllWorldTriggers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DestroyAllWorldTriggers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyAllWorldTriggers",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyAllWorldTriggers",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->DestroyAllWorldTriggers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetCollision__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg3 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Collision *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetCollision",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetCollision",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetCollision",2,"Mezzanine::Physics::CollidableProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetCollision",3,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetCollision",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("PhysicsManager_GetCollision",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("PhysicsManager_GetCollision",3,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Physics::Collision *)(arg1)->GetCollision(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Collision,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetCollision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  CollidablePair *arg2 = (CollidablePair *) 0 ;
  Mezzanine::Physics::Collision *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetCollision",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetCollision",2,"CollidablePair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetCollision",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CollidablePair,0))){
    SWIG_fail_ptr("PhysicsManager_GetCollision",2,SWIGTYPE_p_CollidablePair);
  }
  
  result = (Mezzanine::Physics::Collision *)(arg1)->GetCollision(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Collision,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetCollision(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CollidablePair, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_GetCollision__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_PhysicsManager_GetCollision__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_GetCollision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::GetCollision(Mezzanine::Physics::CollidableProxy *,Mezzanine::Physics::CollidableProxy *)\n"
    "    Mezzanine::Physics::PhysicsManager::GetCollision(CollidablePair *)\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_GetNumCollisions(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetNumCollisions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetNumCollisions",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetNumCollisions",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetNumCollisions();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_RemoveCollision(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Collision *arg2 = (Mezzanine::Physics::Collision *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::RemoveCollision",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::RemoveCollision",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::RemoveCollision",2,"Mezzanine::Physics::Collision *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_RemoveCollision",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("PhysicsManager_RemoveCollision",2,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  (arg1)->RemoveCollision(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_RemoveCollisionsContainingProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::RemoveCollisionsContainingProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::RemoveCollisionsContainingProxy",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::RemoveCollisionsContainingProxy",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_RemoveCollisionsContainingProxy",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("PhysicsManager_RemoveCollisionsContainingProxy",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->RemoveCollisionsContainingProxy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DestroyAllCollisions(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DestroyAllCollisions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DestroyAllCollisions",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DestroyAllCollisions",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->DestroyAllCollisions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_BeginCollision(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  SwigValueWrapper< std::map< CollidablePair,Mezzanine::Physics::Collision * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::BeginCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::BeginCollision",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_BeginCollision",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (arg1)->BeginCollision();
  {
    Mezzanine::Physics::PhysicsManager::CollisionMapIterator * resultptr = new Mezzanine::Physics::PhysicsManager::CollisionMapIterator((const Mezzanine::Physics::PhysicsManager::CollisionMapIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_EndCollision(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  SwigValueWrapper< std::map< CollidablePair,Mezzanine::Physics::Collision * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::EndCollision",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::EndCollision",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_EndCollision",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (arg1)->EndCollision();
  {
    Mezzanine::Physics::PhysicsManager::CollisionMapIterator * resultptr = new Mezzanine::Physics::PhysicsManager::CollisionMapIterator((const Mezzanine::Physics::PhysicsManager::CollisionMapIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_SetDebugRenderingMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Integer arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::SetDebugRenderingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetDebugRenderingMode",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetDebugRenderingMode",2,"Mezzanine::Integer const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_SetDebugRenderingMode",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  arg2 = (Mezzanine::Integer const)lua_tonumber(L, 2);
  (arg1)->SetDebugRenderingMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetDebugRenderingMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetDebugRenderingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetDebugRenderingMode",1,"Mezzanine::Physics::PhysicsManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetDebugRenderingMode",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Integer)((Mezzanine::Physics::PhysicsManager const *)arg1)->GetDebugRenderingMode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_ResetPhysicsWorld__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  ManagerConstructionInfo *arg2 = (ManagerConstructionInfo *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld",1,"Mezzanine::Physics::PhysicsManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld",2,"ManagerConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_ResetPhysicsWorld",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ManagerConstructionInfo,0))){
    SWIG_fail_ptr("PhysicsManager_ResetPhysicsWorld",2,SWIGTYPE_p_ManagerConstructionInfo);
  }
  
  (arg1)->ResetPhysicsWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_ResetPhysicsWorld__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_ResetPhysicsWorld",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->ResetPhysicsWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_ResetPhysicsWorld(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PhysicsManager_ResetPhysicsWorld__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ManagerConstructionInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_PhysicsManager_ResetPhysicsWorld__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PhysicsManager_ResetPhysicsWorld'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld(ManagerConstructionInfo *)\n"
    "    Mezzanine::Physics::PhysicsManager::ResetPhysicsWorld()\n");
  lua_error(L);return 0;
}


static int _wrap_PhysicsManager_ClearPhysicsMetaData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::ClearPhysicsMetaData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::ClearPhysicsMetaData",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_ClearPhysicsMetaData",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->ClearPhysicsMetaData();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_SetSimulationSubstepModifier(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::SetSimulationSubstepModifier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetSimulationSubstepModifier",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::SetSimulationSubstepModifier",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_SetSimulationSubstepModifier",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetSimulationSubstepModifier((Mezzanine::Whole const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::Pause",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_Pause",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_MainLoopInitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::MainLoopInitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::MainLoopInitialize",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_MainLoopInitialize",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->MainLoopInitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::Initialize",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_Initialize",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::Deinitialize",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_DoPerFrameWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::DoPerFrameWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DoPerFrameWork",1,"Mezzanine::Physics::PhysicsManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::DoPerFrameWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_DoPerFrameWork",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("PhysicsManager_DoPerFrameWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoPerFrameWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetSimulationWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Threading::DefaultWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetSimulationWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetSimulationWork",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetSimulationWork",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Threading::DefaultWorkUnit *)(arg1)->GetSimulationWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Threading__DefaultWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetWorldTriggerUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::WorldTriggerUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetWorldTriggerUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetWorldTriggerUpdateWork",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetWorldTriggerUpdateWork",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::WorldTriggerUpdateWorkUnit *)(arg1)->GetWorldTriggerUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetDebugDrawWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::DebugDrawWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetDebugDrawWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetDebugDrawWork",1,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetDebugDrawWork",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::DebugDrawWorkUnit *)(arg1)->GetDebugDrawWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DebugDrawWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetInterfaceType",1,"Mezzanine::Physics::PhysicsManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = ((Mezzanine::Physics::PhysicsManager const *)arg1)->GetInterfaceType();
  {
    ManagerBase::ManagerType * resultptr = new ManagerBase::ManagerType((const ManagerBase::ManagerType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ManagerBase__ManagerType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PhysicsManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::PhysicsManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PhysicsManager::GetImplementationTypeName",1,"Mezzanine::Physics::PhysicsManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("PhysicsManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = ((Mezzanine::Physics::PhysicsManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PhysicsManager(void *obj) {
Mezzanine::Physics::PhysicsManager *arg1 = (Mezzanine::Physics::PhysicsManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_PhysicsManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PhysicsManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PhysicsManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PhysicsManager_methods[]= {
    { "PauseSimulation", _wrap_PhysicsManager_PauseSimulation},
    { "SimulationIsPaused", _wrap_PhysicsManager_SimulationIsPaused},
    { "GetTimeMultiplier", _wrap_PhysicsManager_GetTimeMultiplier},
    { "SetTimeMultiplier", _wrap_PhysicsManager_SetTimeMultiplier},
    { "SetWorldGravity", _wrap_PhysicsManager_SetWorldGravity},
    { "GetWorldGravity", _wrap_PhysicsManager_GetWorldGravity},
    { "SetWorldSoftGravity", _wrap_PhysicsManager_SetWorldSoftGravity},
    { "GetWorldSoftGravity", _wrap_PhysicsManager_GetWorldSoftGravity},
    { "CreateGhostProxy", _wrap_PhysicsManager_CreateGhostProxy},
    { "CreateRigidProxy", _wrap_PhysicsManager_CreateRigidProxy},
    { "CreateSoftProxy", _wrap_PhysicsManager_CreateSoftProxy},
    { "GetProxy", _wrap_PhysicsManager_GetProxy},
    { "GetProxyByID", _wrap_PhysicsManager_GetProxyByID},
    { "GetNumProxies", _wrap_PhysicsManager_GetNumProxies},
    { "DestroyProxy", _wrap_PhysicsManager_DestroyProxy},
    { "DestroyAllProxies", _wrap_PhysicsManager_DestroyAllProxies},
    { "CreateConeTwistConstraint", _wrap_PhysicsManager_CreateConeTwistConstraint},
    { "CreateGearConstraint", _wrap_PhysicsManager_CreateGearConstraint},
    { "CreateGeneric6DofConstraint", _wrap_PhysicsManager_CreateGeneric6DofConstraint},
    { "CreateGeneric6DofSpringConstraint", _wrap_PhysicsManager_CreateGeneric6DofSpringConstraint},
    { "CreateHingeConstraint", _wrap_PhysicsManager_CreateHingeConstraint},
    { "CreateHinge2Constraint", _wrap_PhysicsManager_CreateHinge2Constraint},
    { "CreatePoint2PointConstraint", _wrap_PhysicsManager_CreatePoint2PointConstraint},
    { "CreateSliderConstraint", _wrap_PhysicsManager_CreateSliderConstraint},
    { "CreateUniversalConstraint", _wrap_PhysicsManager_CreateUniversalConstraint},
    { "GetConstraint", _wrap_PhysicsManager_GetConstraint},
    { "GetNumConstraints", _wrap_PhysicsManager_GetNumConstraints},
    { "DestroyConstraint", _wrap_PhysicsManager_DestroyConstraint},
    { "DestroyAllConstraints", _wrap_PhysicsManager_DestroyAllConstraints},
    { "AddWorldTrigger", _wrap_PhysicsManager_AddWorldTrigger},
    { "GetWorldTrigger", _wrap_PhysicsManager_GetWorldTrigger},
    { "GetNumWorldTriggers", _wrap_PhysicsManager_GetNumWorldTriggers},
    { "RemoveWorldTrigger", _wrap_PhysicsManager_RemoveWorldTrigger},
    { "DestroyAllWorldTriggers", _wrap_PhysicsManager_DestroyAllWorldTriggers},
    { "GetCollision", _wrap_PhysicsManager_GetCollision},
    { "GetNumCollisions", _wrap_PhysicsManager_GetNumCollisions},
    { "RemoveCollision", _wrap_PhysicsManager_RemoveCollision},
    { "RemoveCollisionsContainingProxy", _wrap_PhysicsManager_RemoveCollisionsContainingProxy},
    { "DestroyAllCollisions", _wrap_PhysicsManager_DestroyAllCollisions},
    { "BeginCollision", _wrap_PhysicsManager_BeginCollision},
    { "EndCollision", _wrap_PhysicsManager_EndCollision},
    { "SetDebugRenderingMode", _wrap_PhysicsManager_SetDebugRenderingMode},
    { "GetDebugRenderingMode", _wrap_PhysicsManager_GetDebugRenderingMode},
    { "ResetPhysicsWorld", _wrap_PhysicsManager_ResetPhysicsWorld},
    { "ClearPhysicsMetaData", _wrap_PhysicsManager_ClearPhysicsMetaData},
    { "SetSimulationSubstepModifier", _wrap_PhysicsManager_SetSimulationSubstepModifier},
    { "Pause", _wrap_PhysicsManager_Pause},
    { "MainLoopInitialize", _wrap_PhysicsManager_MainLoopInitialize},
    { "Initialize", _wrap_PhysicsManager_Initialize},
    { "Deinitialize", _wrap_PhysicsManager_Deinitialize},
    { "DoPerFrameWork", _wrap_PhysicsManager_DoPerFrameWork},
    { "GetSimulationWork", _wrap_PhysicsManager_GetSimulationWork},
    { "GetWorldTriggerUpdateWork", _wrap_PhysicsManager_GetWorldTriggerUpdateWork},
    { "GetDebugDrawWork", _wrap_PhysicsManager_GetDebugDrawWork},
    { "GetInterfaceType", _wrap_PhysicsManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_PhysicsManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_PhysicsManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PhysicsManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_PhysicsManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_PhysicsManager_InterfaceType_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_PhysicsManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PhysicsManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PhysicsManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PhysicsManager_Sf_SwigStatic = {
    "PhysicsManager",
    swig_PhysicsManager_Sf_SwigStatic_methods,
    swig_PhysicsManager_Sf_SwigStatic_attributes,
    swig_PhysicsManager_Sf_SwigStatic_constants,
    swig_PhysicsManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PhysicsManager_bases[] = {0};
static const char *swig_PhysicsManager_base_names[] = {0};
static swig_lua_class _wrap_class_PhysicsManager = { "PhysicsManager", "PhysicsManager", &SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,_proxy__wrap_new_PhysicsManager, swig_delete_PhysicsManager, swig_PhysicsManager_methods, swig_PhysicsManager_attributes, &swig_PhysicsManager_Sf_SwigStatic, swig_PhysicsManager_meta, swig_PhysicsManager_bases, swig_PhysicsManager_base_names };

static int _wrap_new_DefaultPhysicsManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultPhysicsManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultPhysicsManagerFactory::DefaultPhysicsManagerFactory",0,0)
  result = (Mezzanine::Physics::DefaultPhysicsManagerFactory *)new Mezzanine::Physics::DefaultPhysicsManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultPhysicsManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultPhysicsManagerFactory *arg1 = (Mezzanine::Physics::DefaultPhysicsManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultPhysicsManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::GetManagerImplName",1,"Mezzanine::Physics::DefaultPhysicsManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory);
  }
  
  result = ((Mezzanine::Physics::DefaultPhysicsManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultPhysicsManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultPhysicsManagerFactory *arg1 = (Mezzanine::Physics::DefaultPhysicsManagerFactory *) 0 ;
  ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultPhysicsManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::GetManagerType",1,"Mezzanine::Physics::DefaultPhysicsManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory);
  }
  
  result = ((Mezzanine::Physics::DefaultPhysicsManagerFactory const *)arg1)->GetManagerType();
  {
    ManagerBase::ManagerType * resultptr = new ManagerBase::ManagerType((const ManagerBase::ManagerType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ManagerBase__ManagerType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultPhysicsManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultPhysicsManagerFactory *arg1 = (Mezzanine::Physics::DefaultPhysicsManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",1,"Mezzanine::Physics::DefaultPhysicsManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultPhysicsManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultPhysicsManagerFactory *arg1 = (Mezzanine::Physics::DefaultPhysicsManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  XML::Node *arg3 = 0 ;
  WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",1,"Mezzanine::Physics::DefaultPhysicsManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager",3,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_CreateManager",3,SWIGTYPE_p_XML__Node);
  }
  
  result = (WorldManager *)(arg1)->CreateManager(arg2,(XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultPhysicsManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultPhysicsManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultPhysicsManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultPhysicsManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::Physics::DefaultPhysicsManagerFactory::CreateManager(Mezzanine::World *,XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultPhysicsManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultPhysicsManagerFactory *arg1 = (Mezzanine::Physics::DefaultPhysicsManagerFactory *) 0 ;
  WorldManager *arg2 = (WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultPhysicsManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::DestroyManager",1,"Mezzanine::Physics::DefaultPhysicsManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::DefaultPhysicsManagerFactory::DestroyManager",2,"WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_WorldManager,0))){
    SWIG_fail_ptr("DefaultPhysicsManagerFactory_DestroyManager",2,SWIGTYPE_p_WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultPhysicsManagerFactory(void *obj) {
Mezzanine::Physics::DefaultPhysicsManagerFactory *arg1 = (Mezzanine::Physics::DefaultPhysicsManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultPhysicsManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultPhysicsManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultPhysicsManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultPhysicsManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultPhysicsManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultPhysicsManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultPhysicsManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultPhysicsManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultPhysicsManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultPhysicsManagerFactory_Sf_SwigStatic = {
    "DefaultPhysicsManagerFactory",
    swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultPhysicsManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultPhysicsManagerFactory_bases[] = {0};
static const char *swig_DefaultPhysicsManagerFactory_base_names[] = {0};
static swig_lua_class _wrap_class_DefaultPhysicsManagerFactory = { "DefaultPhysicsManagerFactory", "DefaultPhysicsManagerFactory", &SWIGTYPE_p_Mezzanine__Physics__DefaultPhysicsManagerFactory,_proxy__wrap_new_DefaultPhysicsManagerFactory, swig_delete_DefaultPhysicsManagerFactory, swig_DefaultPhysicsManagerFactory_methods, swig_DefaultPhysicsManagerFactory_attributes, &swig_DefaultPhysicsManagerFactory_Sf_SwigStatic, swig_DefaultPhysicsManagerFactory_meta, swig_DefaultPhysicsManagerFactory_bases, swig_DefaultPhysicsManagerFactory_base_names };

static int _wrap_CollisionShape_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::GetName",1,"Mezzanine::Physics::CollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_GetName",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::Physics::CollisionShape const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::GetType",1,"Mezzanine::Physics::CollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::CollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_SetMargin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::SetMargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::SetMargin",1,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::SetMargin",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_SetMargin",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetMargin((Mezzanine::Real const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_GetMargin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::GetMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::GetMargin",1,"Mezzanine::Physics::CollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_GetMargin",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CollisionShape const *)arg1)->GetMargin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_SetScaling(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::SetScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::SetScaling",1,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::SetScaling",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_SetScaling",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollisionShape_SetScaling",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScaling((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_GetScaling(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::GetScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::GetScaling",1,"Mezzanine::Physics::CollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_GetScaling",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = ((Mezzanine::Physics::CollisionShape const *)arg1)->GetScaling();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::ProtoSerialize",1,"Mezzanine::Physics::CollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::CollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::CollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape__SetShapeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::_SetShapeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::_SetShapeName",1,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::_SetShapeName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape__SetShapeName",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->_SetShapeName((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShape__GetInternalShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) 0 ;
  btCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShape::_GetInternalShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShape::_GetInternalShape",1,"Mezzanine::Physics::CollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShape__GetInternalShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (btCollisionShape *)((Mezzanine::Physics::CollisionShape const *)arg1)->_GetInternalShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionShape(void *obj) {
Mezzanine::Physics::CollisionShape *arg1 = (Mezzanine::Physics::CollisionShape *) obj;
delete arg1;
}
static swig_lua_attribute swig_CollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionShape_methods[]= {
    { "GetName", _wrap_CollisionShape_GetName},
    { "GetType", _wrap_CollisionShape_GetType},
    { "SetMargin", _wrap_CollisionShape_SetMargin},
    { "GetMargin", _wrap_CollisionShape_GetMargin},
    { "SetScaling", _wrap_CollisionShape_SetScaling},
    { "GetScaling", _wrap_CollisionShape_GetScaling},
    { "ProtoSerialize", _wrap_CollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_CollisionShape_ProtoDeSerialize},
    { "_SetShapeName", _wrap_CollisionShape__SetShapeName},
    { "_GetInternalShape", _wrap_CollisionShape__GetInternalShape},
    {0,0}
};
static swig_lua_method swig_CollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionShape_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ST_Box", Mezzanine::Physics::CollisionShape::ST_Box)},
    {SWIG_LUA_CONSTTAB_INT("ST_Capsule", Mezzanine::Physics::CollisionShape::ST_Capsule)},
    {SWIG_LUA_CONSTTAB_INT("ST_Compound", Mezzanine::Physics::CollisionShape::ST_Compound)},
    {SWIG_LUA_CONSTTAB_INT("ST_Cone", Mezzanine::Physics::CollisionShape::ST_Cone)},
    {SWIG_LUA_CONSTTAB_INT("ST_ConvexHull", Mezzanine::Physics::CollisionShape::ST_ConvexHull)},
    {SWIG_LUA_CONSTTAB_INT("ST_Cylinder", Mezzanine::Physics::CollisionShape::ST_Cylinder)},
    {SWIG_LUA_CONSTTAB_INT("ST_MultiSphere", Mezzanine::Physics::CollisionShape::ST_MultiSphere)},
    {SWIG_LUA_CONSTTAB_INT("ST_Sphere", Mezzanine::Physics::CollisionShape::ST_Sphere)},
    {SWIG_LUA_CONSTTAB_INT("ST_DynamicTriMesh", Mezzanine::Physics::CollisionShape::ST_DynamicTriMesh)},
    {SWIG_LUA_CONSTTAB_INT("ST_Heightfield", Mezzanine::Physics::CollisionShape::ST_Heightfield)},
    {SWIG_LUA_CONSTTAB_INT("ST_Plane", Mezzanine::Physics::CollisionShape::ST_Plane)},
    {SWIG_LUA_CONSTTAB_INT("ST_Soft", Mezzanine::Physics::CollisionShape::ST_Soft)},
    {SWIG_LUA_CONSTTAB_INT("ST_StaticTriMesh", Mezzanine::Physics::CollisionShape::ST_StaticTriMesh)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_CollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_CollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionShape_Sf_SwigStatic = {
    "CollisionShape",
    swig_CollisionShape_Sf_SwigStatic_methods,
    swig_CollisionShape_Sf_SwigStatic_attributes,
    swig_CollisionShape_Sf_SwigStatic_constants,
    swig_CollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionShape_bases[] = {0};
static const char *swig_CollisionShape_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionShape = { "CollisionShape", "CollisionShape", &SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0, swig_delete_CollisionShape, swig_CollisionShape_methods, swig_CollisionShape_attributes, &swig_CollisionShape_Sf_SwigStatic, swig_CollisionShape_meta, swig_CollisionShape_bases, swig_CollisionShape_base_names };

static int _wrap_CreateShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape::ShapeType arg1 ;
  Mezzanine::String *arg2 = 0 ;
  btCollisionShape *arg3 = (btCollisionShape *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CreateShape",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::CreateShape",1,"Mezzanine::Physics::CollisionShape::ShapeType");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CreateShape",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CreateShape",3,"btCollisionShape *");
  arg1 = (Mezzanine::Physics::CollisionShape::ShapeType)(int)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_btCollisionShape,0))){
    SWIG_fail_ptr("CreateShape",3,SWIGTYPE_p_btCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape *)Mezzanine::Physics::CreateShape(arg1,(std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CreateShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::CreateShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CreateShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::CollisionShape *)Mezzanine::Physics::CreateShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CreateShape(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_CreateShape__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_btCollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CreateShape__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CreateShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CreateShape(Mezzanine::Physics::CollisionShape::ShapeType,Mezzanine::String const &,btCollisionShape *)\n"
    "    Mezzanine::Physics::CreateShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalShapeTypeToShapeType(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::InternalShapeTypeToShapeType",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::InternalShapeTypeToShapeType",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (Mezzanine::Physics::CollisionShape::ShapeType)Mezzanine::Physics::InternalShapeTypeToShapeType(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ShapeTypeToString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShape::ShapeType arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::ShapeTypeToString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::ShapeTypeToString",1,"Mezzanine::Physics::CollisionShape::ShapeType");
  arg1 = (Mezzanine::Physics::CollisionShape::ShapeType)(int)lua_tonumber(L, 1);
  result = Mezzanine::Physics::ShapeTypeToString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringToShapeType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::StringToShapeType",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::StringToShapeType",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Physics::CollisionShape::ShapeType)Mezzanine::Physics::StringToShapeType((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeDeSerializer_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeDeSerializer *arg1 = (Mezzanine::Physics::CollisionShapeDeSerializer *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeDeSerializer::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::ProtoDeSerialize",1,"Mezzanine::Physics::CollisionShapeDeSerializer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::CollisionShape *)(arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeDeSerializer_DeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeDeSerializer *arg1 = (Mezzanine::Physics::CollisionShapeDeSerializer *) 0 ;
  std::istream *arg2 = 0 ;
  std::istream *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeDeSerializer::DeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::DeSerialize",1,"Mezzanine::Physics::CollisionShapeDeSerializer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::DeSerialize",2,"std::istream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_DeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__istream,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_DeSerialize",2,SWIGTYPE_p_std__istream);
  }
  
  result = (std::istream *) &(arg1)->DeSerialize(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__istream,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeDeSerializer_DeSerializeAndRetrieve(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeDeSerializer *arg1 = (Mezzanine::Physics::CollisionShapeDeSerializer *) 0 ;
  std::istream *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeDeSerializer::DeSerializeAndRetrieve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::DeSerializeAndRetrieve",1,"Mezzanine::Physics::CollisionShapeDeSerializer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::DeSerializeAndRetrieve",2,"std::istream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_DeSerializeAndRetrieve",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__istream,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_DeSerializeAndRetrieve",2,SWIGTYPE_p_std__istream);
  }
  
  result = (Mezzanine::Physics::CollisionShape *)(arg1)->DeSerializeAndRetrieve(*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeDeSerializer_ContainerName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeDeSerializer *arg1 = (Mezzanine::Physics::CollisionShapeDeSerializer *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeDeSerializer::ContainerName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeDeSerializer::ContainerName",1,"Mezzanine::Physics::CollisionShapeDeSerializer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer,0))){
    SWIG_fail_ptr("CollisionShapeDeSerializer_ContainerName",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer);
  }
  
  result = ((Mezzanine::Physics::CollisionShapeDeSerializer const *)arg1)->ContainerName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeDeSerializer(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeDeSerializer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeDeSerializer::CollisionShapeDeSerializer",0,0)
  result = (Mezzanine::Physics::CollisionShapeDeSerializer *)new Mezzanine::Physics::CollisionShapeDeSerializer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionShapeDeSerializer(void *obj) {
Mezzanine::Physics::CollisionShapeDeSerializer *arg1 = (Mezzanine::Physics::CollisionShapeDeSerializer *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionShapeDeSerializer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionShapeDeSerializer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionShapeDeSerializer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionShapeDeSerializer_methods[]= {
    { "ProtoDeSerialize", _wrap_CollisionShapeDeSerializer_ProtoDeSerialize},
    { "DeSerialize", _wrap_CollisionShapeDeSerializer_DeSerialize},
    { "DeSerializeAndRetrieve", _wrap_CollisionShapeDeSerializer_DeSerializeAndRetrieve},
    { "ContainerName", _wrap_CollisionShapeDeSerializer_ContainerName},
    {0,0}
};
static swig_lua_method swig_CollisionShapeDeSerializer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionShapeDeSerializer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollisionShapeDeSerializer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionShapeDeSerializer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionShapeDeSerializer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionShapeDeSerializer_Sf_SwigStatic = {
    "CollisionShapeDeSerializer",
    swig_CollisionShapeDeSerializer_Sf_SwigStatic_methods,
    swig_CollisionShapeDeSerializer_Sf_SwigStatic_attributes,
    swig_CollisionShapeDeSerializer_Sf_SwigStatic_constants,
    swig_CollisionShapeDeSerializer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionShapeDeSerializer_bases[] = {0};
static const char *swig_CollisionShapeDeSerializer_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionShapeDeSerializer = { "CollisionShapeDeSerializer", "CollisionShapeDeSerializer", &SWIGTYPE_p_Mezzanine__Physics__CollisionShapeDeSerializer,_proxy__wrap_new_CollisionShapeDeSerializer, swig_delete_CollisionShapeDeSerializer, swig_CollisionShapeDeSerializer_methods, swig_CollisionShapeDeSerializer_attributes, &swig_CollisionShapeDeSerializer_Sf_SwigStatic, swig_CollisionShapeDeSerializer_meta, swig_CollisionShapeDeSerializer_bases, swig_CollisionShapeDeSerializer_base_names };

static int _wrap_CollisionShapeManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::Physics::CollisionShapeManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::InterfaceType",0,0)
  result = (ManagerBase::ManagerType)Mezzanine::Physics::CollisionShapeManager::InterfaceType;
  {
    ManagerBase::ManagerType * resultptr = new ManagerBase::ManagerType((const ManagerBase::ManagerType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ManagerBase__ManagerType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::CollisionShapeManager",0,0)
  result = (Mezzanine::Physics::CollisionShapeManager *)new Mezzanine::Physics::CollisionShapeManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::CollisionShapeManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::CollisionShapeManager",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::CollisionShapeManager",1,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_CollisionShapeManager",1,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::CollisionShapeManager *)new Mezzanine::Physics::CollisionShapeManager((XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollisionShapeManager(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CollisionShapeManager__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CollisionShapeManager__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CollisionShapeManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::CollisionShapeManager()\n"
    "    Mezzanine::Physics::CollisionShapeManager::CollisionShapeManager(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_StoreShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::StoreShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::StoreShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::StoreShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_StoreShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShapeManager_StoreShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->StoreShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GetShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GetShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GetShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GetShape",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GetShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Physics::CollisionShape *)(arg1)->GetShape((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GetNumStoredShapes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GetNumStoredShapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GetNumStoredShapes",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GetNumStoredShapes",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetNumStoredShapes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_RemoveShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::RemoveShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::RemoveShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::RemoveShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_RemoveShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShapeManager_RemoveShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->RemoveShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_RemoveShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::RemoveShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::RemoveShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::RemoveShape",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_RemoveShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->RemoveShape((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_RemoveShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionShapeManager_RemoveShape__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionShapeManager_RemoveShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeManager_RemoveShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::RemoveShape(Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::Physics::CollisionShapeManager::RemoveShape(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_RemoveAllShapes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::RemoveAllShapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::RemoveAllShapes",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_RemoveAllShapes",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  (arg1)->RemoveAllShapes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_DestroyShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::DestroyShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::DestroyShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::DestroyShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_DestroyShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShapeManager_DestroyShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->DestroyShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_DestroyShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::DestroyShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::DestroyShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::DestroyShape",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_DestroyShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->DestroyShape((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_DestroyShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollisionShapeManager_DestroyShape__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollisionShapeManager_DestroyShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeManager_DestroyShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::DestroyShape(Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::Physics::CollisionShapeManager::DestroyShape(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_DestroyAllShapes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::DestroyAllShapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::DestroyAllShapes",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_DestroyAllShapes",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  (arg1)->DestroyAllShapes();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_BeginCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  SwigValueWrapper< std::map< std::string,Mezzanine::Physics::CollisionShape * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::BeginCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::BeginCollisionShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_BeginCollisionShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  result = (arg1)->BeginCollisionShape();
  {
    Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator * resultptr = new Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator((const Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_EndCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  SwigValueWrapper< std::map< std::string,Mezzanine::Physics::CollisionShape * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::EndCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::EndCollisionShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_EndCollisionShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  result = (arg1)->EndCollisionShape();
  {
    Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator * resultptr = new Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator((const Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",3,"Mezzanine::Graphics::Mesh *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateConvexHull",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateConvexHull",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)(arg1)->GenerateConvexHull((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",3,"Mezzanine::Graphics::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateConvexHull",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateConvexHull",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)(arg1)->GenerateConvexHull((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Boole arg5 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",4,"Mezzanine::String const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",5,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateConvexHull",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)(arg1)->GenerateConvexHull((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull",4,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateConvexHull",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)(arg1)->GenerateConvexHull((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateConvexHull(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_CollisionShapeManager_GenerateConvexHull__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeManager_GenerateConvexHull'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull(Mezzanine::String const &,Mezzanine::Graphics::Mesh *,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull(Mezzanine::String const &,Mezzanine::Graphics::Mesh *)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateConvexHull(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::DynamicMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",3,"Mezzanine::Graphics::Mesh *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateDynamicTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateDynamicTriMesh",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::Physics::DynamicMeshCollisionShape *)(arg1)->GenerateDynamicTriMesh((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::DynamicMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",3,"Mezzanine::Graphics::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateDynamicTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateDynamicTriMesh",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  result = (Mezzanine::Physics::DynamicMeshCollisionShape *)(arg1)->GenerateDynamicTriMesh((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Boole arg5 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::DynamicMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",4,"Mezzanine::String const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",5,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateDynamicTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Mezzanine::Physics::DynamicMeshCollisionShape *)(arg1)->GenerateDynamicTriMesh((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::DynamicMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh",4,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateDynamicTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (Mezzanine::Physics::DynamicMeshCollisionShape *)(arg1)->GenerateDynamicTriMesh((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateDynamicTriMesh(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_CollisionShapeManager_GenerateDynamicTriMesh__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeManager_GenerateDynamicTriMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh(Mezzanine::String const &,Mezzanine::Graphics::Mesh *,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh(Mezzanine::String const &,Mezzanine::Graphics::Mesh *)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateDynamicTriMesh(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::StaticMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",3,"Mezzanine::Graphics::Mesh *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateStaticTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateStaticTriMesh",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::Physics::StaticMeshCollisionShape *)(arg1)->GenerateStaticTriMesh((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::StaticMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",3,"Mezzanine::Graphics::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateStaticTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateStaticTriMesh",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  result = (Mezzanine::Physics::StaticMeshCollisionShape *)(arg1)->GenerateStaticTriMesh((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Boole arg5 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::StaticMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",4,"Mezzanine::String const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",5,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateStaticTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Mezzanine::Physics::StaticMeshCollisionShape *)(arg1)->GenerateStaticTriMesh((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::StaticMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh",4,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GenerateStaticTriMesh",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (Mezzanine::Physics::StaticMeshCollisionShape *)(arg1)->GenerateStaticTriMesh((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GenerateStaticTriMesh(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_CollisionShapeManager_GenerateStaticTriMesh__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeManager_GenerateStaticTriMesh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh(Mezzanine::String const &,Mezzanine::Graphics::Mesh *,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh(Mezzanine::String const &,Mezzanine::Graphics::Mesh *)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::GenerateStaticTriMesh(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Whole arg4 ;
  Mezzanine::Real arg5 ;
  Mezzanine::Real arg6 ;
  Mezzanine::Boole arg7 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::CompoundCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",3,"Mezzanine::Graphics::Mesh *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",4,"Mezzanine::Whole");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",5,"Mezzanine::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",6,"Mezzanine::Real");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",7,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_PerformConvexDecomposition",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_PerformConvexDecomposition",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Mezzanine::Whole)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real)lua_tonumber(L, 6);
  arg7 = (lua_toboolean(L, 7)!=0);
  result = (Mezzanine::Physics::CompoundCollisionShape *)(arg1)->PerformConvexDecomposition((Mezzanine::String const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Whole arg4 ;
  Mezzanine::Real arg5 ;
  Mezzanine::Real arg6 ;
  Mezzanine::String temp2 ;
  Mezzanine::Physics::CompoundCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",3,"Mezzanine::Graphics::Mesh *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",4,"Mezzanine::Whole");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",5,"Mezzanine::Real");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",6,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_PerformConvexDecomposition",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("CollisionShapeManager_PerformConvexDecomposition",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Mezzanine::Whole)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real)lua_tonumber(L, 6);
  result = (Mezzanine::Physics::CompoundCollisionShape *)(arg1)->PerformConvexDecomposition((Mezzanine::String const &)*arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole arg5 ;
  Mezzanine::Real arg6 ;
  Mezzanine::Real arg7 ;
  Mezzanine::Boole arg8 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::CompoundCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",5,"Mezzanine::Whole");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",6,"Mezzanine::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",7,"Mezzanine::Real");
  if(!lua_isboolean(L,8)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",8,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_PerformConvexDecomposition",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (Mezzanine::Whole)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real)lua_tonumber(L, 6);
  arg7 = (Mezzanine::Real)lua_tonumber(L, 7);
  arg8 = (lua_toboolean(L, 8)!=0);
  result = (Mezzanine::Physics::CompoundCollisionShape *)(arg1)->PerformConvexDecomposition((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::Whole arg5 ;
  Mezzanine::Real arg6 ;
  Mezzanine::Real arg7 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::Physics::CompoundCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",4,"Mezzanine::String const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",5,"Mezzanine::Whole");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",6,"Mezzanine::Real");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition",7,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_PerformConvexDecomposition",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (Mezzanine::Whole)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real)lua_tonumber(L, 6);
  arg7 = (Mezzanine::Real)lua_tonumber(L, 7);
  result = (Mezzanine::Physics::CompoundCollisionShape *)(arg1)->PerformConvexDecomposition((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_PerformConvexDecomposition(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_3(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isboolean(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_CollisionShapeManager_PerformConvexDecomposition__SWIG_2(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollisionShapeManager_PerformConvexDecomposition'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition(Mezzanine::String const &,Mezzanine::Graphics::Mesh *,Mezzanine::Whole,Mezzanine::Real,Mezzanine::Real,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition(Mezzanine::String const &,Mezzanine::Graphics::Mesh *,Mezzanine::Whole,Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole,Mezzanine::Real,Mezzanine::Real,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollisionShapeManager::PerformConvexDecomposition(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole,Mezzanine::Real,Mezzanine::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_CollisionShapeManager_LoadAllShapesFromXMLFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromXMLFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromXMLFile",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromXMLFile",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromXMLFile",3,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_LoadAllShapesFromXMLFile",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->LoadAllShapesFromXMLFile((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_SaveAllStoredShapesToXMLFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToXMLFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToXMLFile",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToXMLFile",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_SaveAllStoredShapesToXMLFile",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SaveAllStoredShapesToXMLFile((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_SaveShapesToXMLFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShapeManager::ShapeVector *arg3 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::SaveShapesToXMLFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveShapesToXMLFile",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveShapesToXMLFile",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveShapesToXMLFile",3,"Mezzanine::Physics::CollisionShapeManager::ShapeVector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_SaveShapesToXMLFile",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t,0))){
    SWIG_fail_ptr("CollisionShapeManager_SaveShapesToXMLFile",3,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t);
  }
  
  (arg1)->SaveShapesToXMLFile((Mezzanine::String const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_LoadAllShapesFromBinaryFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromBinaryFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromBinaryFile",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromBinaryFile",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromBinaryFile",3,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_LoadAllShapesFromBinaryFile",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->LoadAllShapesFromBinaryFile((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_SaveAllStoredShapesToBinaryFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToBinaryFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToBinaryFile",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToBinaryFile",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_SaveAllStoredShapesToBinaryFile",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SaveAllStoredShapesToBinaryFile((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_SaveShapesToBinaryFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShapeManager::ShapeVector *arg3 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::SaveShapesToBinaryFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveShapesToBinaryFile",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveShapesToBinaryFile",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SaveShapesToBinaryFile",3,"Mezzanine::Physics::CollisionShapeManager::ShapeVector &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_SaveShapesToBinaryFile",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t,0))){
    SWIG_fail_ptr("CollisionShapeManager_SaveShapesToBinaryFile",3,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t);
  }
  
  (arg1)->SaveShapesToBinaryFile((Mezzanine::String const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GetUnnamedShapes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::Physics::CollisionShapeManager::ShapeVector *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GetUnnamedShapes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GetUnnamedShapes",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GetUnnamedShapes",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  result = (Mezzanine::Physics::CollisionShapeManager::ShapeVector *) &(arg1)->GetUnnamedShapes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_SetNameForUnnamedShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::SetNameForUnnamedShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SetNameForUnnamedShape",1,"Mezzanine::Physics::CollisionShapeManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SetNameForUnnamedShape",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::SetNameForUnnamedShape",3,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_SetNameForUnnamedShape",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollisionShapeManager_SetNameForUnnamedShape",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->SetNameForUnnamedShape((Mezzanine::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::Initialize",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_Initialize",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::Deinitialize",1,"Mezzanine::Physics::CollisionShapeManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GetInterfaceType",1,"Mezzanine::Physics::CollisionShapeManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  result = ((Mezzanine::Physics::CollisionShapeManager const *)arg1)->GetInterfaceType();
  {
    ManagerBase::ManagerType * resultptr = new ManagerBase::ManagerType((const ManagerBase::ManagerType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ManagerBase__ManagerType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionShapeManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollisionShapeManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollisionShapeManager::GetImplementationTypeName",1,"Mezzanine::Physics::CollisionShapeManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,0))){
    SWIG_fail_ptr("CollisionShapeManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager);
  }
  
  result = ((Mezzanine::Physics::CollisionShapeManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionShapeManager(void *obj) {
Mezzanine::Physics::CollisionShapeManager *arg1 = (Mezzanine::Physics::CollisionShapeManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollisionShapeManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollisionShapeManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollisionShapeManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollisionShapeManager_methods[]= {
    { "StoreShape", _wrap_CollisionShapeManager_StoreShape},
    { "GetShape", _wrap_CollisionShapeManager_GetShape},
    { "GetNumStoredShapes", _wrap_CollisionShapeManager_GetNumStoredShapes},
    { "RemoveShape", _wrap_CollisionShapeManager_RemoveShape},
    { "RemoveAllShapes", _wrap_CollisionShapeManager_RemoveAllShapes},
    { "DestroyShape", _wrap_CollisionShapeManager_DestroyShape},
    { "DestroyAllShapes", _wrap_CollisionShapeManager_DestroyAllShapes},
    { "BeginCollisionShape", _wrap_CollisionShapeManager_BeginCollisionShape},
    { "EndCollisionShape", _wrap_CollisionShapeManager_EndCollisionShape},
    { "GenerateConvexHull", _wrap_CollisionShapeManager_GenerateConvexHull},
    { "GenerateDynamicTriMesh", _wrap_CollisionShapeManager_GenerateDynamicTriMesh},
    { "GenerateStaticTriMesh", _wrap_CollisionShapeManager_GenerateStaticTriMesh},
    { "PerformConvexDecomposition", _wrap_CollisionShapeManager_PerformConvexDecomposition},
    { "LoadAllShapesFromXMLFile", _wrap_CollisionShapeManager_LoadAllShapesFromXMLFile},
    { "SaveAllStoredShapesToXMLFile", _wrap_CollisionShapeManager_SaveAllStoredShapesToXMLFile},
    { "SaveShapesToXMLFile", _wrap_CollisionShapeManager_SaveShapesToXMLFile},
    { "LoadAllShapesFromBinaryFile", _wrap_CollisionShapeManager_LoadAllShapesFromBinaryFile},
    { "SaveAllStoredShapesToBinaryFile", _wrap_CollisionShapeManager_SaveAllStoredShapesToBinaryFile},
    { "SaveShapesToBinaryFile", _wrap_CollisionShapeManager_SaveShapesToBinaryFile},
    { "GetUnnamedShapes", _wrap_CollisionShapeManager_GetUnnamedShapes},
    { "SetNameForUnnamedShape", _wrap_CollisionShapeManager_SetNameForUnnamedShape},
    { "Initialize", _wrap_CollisionShapeManager_Initialize},
    { "Deinitialize", _wrap_CollisionShapeManager_Deinitialize},
    { "GetInterfaceType", _wrap_CollisionShapeManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_CollisionShapeManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_CollisionShapeManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollisionShapeManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_CollisionShapeManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_CollisionShapeManager_InterfaceType_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_CollisionShapeManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollisionShapeManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollisionShapeManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollisionShapeManager_Sf_SwigStatic = {
    "CollisionShapeManager",
    swig_CollisionShapeManager_Sf_SwigStatic_methods,
    swig_CollisionShapeManager_Sf_SwigStatic_attributes,
    swig_CollisionShapeManager_Sf_SwigStatic_constants,
    swig_CollisionShapeManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollisionShapeManager_bases[] = {0};
static const char *swig_CollisionShapeManager_base_names[] = {0};
static swig_lua_class _wrap_class_CollisionShapeManager = { "CollisionShapeManager", "CollisionShapeManager", &SWIGTYPE_p_Mezzanine__Physics__CollisionShapeManager,_proxy__wrap_new_CollisionShapeManager, swig_delete_CollisionShapeManager, swig_CollisionShapeManager_methods, swig_CollisionShapeManager_attributes, &swig_CollisionShapeManager_Sf_SwigStatic, swig_CollisionShapeManager_meta, swig_CollisionShapeManager_bases, swig_CollisionShapeManager_base_names };

static int _wrap_new_DefaultCollisionShapeManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultCollisionShapeManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::DefaultCollisionShapeManagerFactory",0,0)
  result = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *)new Mezzanine::Physics::DefaultCollisionShapeManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultCollisionShapeManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultCollisionShapeManagerFactory *arg1 = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::GetManagerImplName",1,"Mezzanine::Physics::DefaultCollisionShapeManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory);
  }
  
  result = ((Mezzanine::Physics::DefaultCollisionShapeManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultCollisionShapeManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultCollisionShapeManagerFactory *arg1 = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *) 0 ;
  ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::GetManagerType",1,"Mezzanine::Physics::DefaultCollisionShapeManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory);
  }
  
  result = ((Mezzanine::Physics::DefaultCollisionShapeManagerFactory const *)arg1)->GetManagerType();
  {
    ManagerBase::ManagerType * resultptr = new ManagerBase::ManagerType((const ManagerBase::ManagerType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ManagerBase__ManagerType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultCollisionShapeManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultCollisionShapeManagerFactory *arg1 = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *) 0 ;
  Mezzanine::NameValuePairList *arg2 = 0 ;
  EntresolManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager",1,"Mezzanine::Physics::DefaultCollisionShapeManagerFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager",2,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_CreateManager",2,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (EntresolManager *)(arg1)->CreateManager((Mezzanine::NameValuePairList const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EntresolManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultCollisionShapeManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultCollisionShapeManagerFactory *arg1 = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *) 0 ;
  XML::Node *arg2 = 0 ;
  EntresolManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager",1,"Mezzanine::Physics::DefaultCollisionShapeManagerFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_CreateManager",2,SWIGTYPE_p_XML__Node);
  }
  
  result = (EntresolManager *)(arg1)->CreateManager((XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_EntresolManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultCollisionShapeManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DefaultCollisionShapeManagerFactory_CreateManager__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DefaultCollisionShapeManagerFactory_CreateManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultCollisionShapeManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager(Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultCollisionShapeManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DefaultCollisionShapeManagerFactory *arg1 = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *) 0 ;
  EntresolManager *arg2 = (EntresolManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::DestroyManager",1,"Mezzanine::Physics::DefaultCollisionShapeManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::DefaultCollisionShapeManagerFactory::DestroyManager",2,"EntresolManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_EntresolManager,0))){
    SWIG_fail_ptr("DefaultCollisionShapeManagerFactory_DestroyManager",2,SWIGTYPE_p_EntresolManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultCollisionShapeManagerFactory(void *obj) {
Mezzanine::Physics::DefaultCollisionShapeManagerFactory *arg1 = (Mezzanine::Physics::DefaultCollisionShapeManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultCollisionShapeManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultCollisionShapeManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultCollisionShapeManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultCollisionShapeManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultCollisionShapeManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultCollisionShapeManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultCollisionShapeManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultCollisionShapeManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultCollisionShapeManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic = {
    "DefaultCollisionShapeManagerFactory",
    swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultCollisionShapeManagerFactory_bases[] = {0};
static const char *swig_DefaultCollisionShapeManagerFactory_base_names[] = {0};
static swig_lua_class _wrap_class_DefaultCollisionShapeManagerFactory = { "DefaultCollisionShapeManagerFactory", "DefaultCollisionShapeManagerFactory", &SWIGTYPE_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,_proxy__wrap_new_DefaultCollisionShapeManagerFactory, swig_delete_DefaultCollisionShapeManagerFactory, swig_DefaultCollisionShapeManagerFactory_methods, swig_DefaultCollisionShapeManagerFactory_attributes, &swig_DefaultCollisionShapeManagerFactory_Sf_SwigStatic, swig_DefaultCollisionShapeManagerFactory_meta, swig_DefaultCollisionShapeManagerFactory_bases, swig_DefaultCollisionShapeManagerFactory_base_names };

static int _wrap_PrimitiveCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PrimitiveCollisionShape *arg1 = (Mezzanine::Physics::PrimitiveCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::PrimitiveCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PrimitiveCollisionShape::GetType",1,"Mezzanine::Physics::PrimitiveCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape,0))){
    SWIG_fail_ptr("PrimitiveCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::PrimitiveCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PrimitiveCollisionShape_GetBulletConvexShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PrimitiveCollisionShape *arg1 = (Mezzanine::Physics::PrimitiveCollisionShape *) 0 ;
  btConvexInternalShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PrimitiveCollisionShape::GetBulletConvexShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PrimitiveCollisionShape::GetBulletConvexShape",1,"Mezzanine::Physics::PrimitiveCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape,0))){
    SWIG_fail_ptr("PrimitiveCollisionShape_GetBulletConvexShape",1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape);
  }
  
  result = (btConvexInternalShape *)((Mezzanine::Physics::PrimitiveCollisionShape const *)arg1)->GetBulletConvexShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexInternalShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PrimitiveCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PrimitiveCollisionShape *arg1 = (Mezzanine::Physics::PrimitiveCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PrimitiveCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PrimitiveCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::PrimitiveCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PrimitiveCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape,0))){
    SWIG_fail_ptr("PrimitiveCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PrimitiveCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::PrimitiveCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PrimitiveCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PrimitiveCollisionShape *arg1 = (Mezzanine::Physics::PrimitiveCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PrimitiveCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PrimitiveCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::PrimitiveCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PrimitiveCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape,0))){
    SWIG_fail_ptr("PrimitiveCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PrimitiveCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PrimitiveCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::PrimitiveCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::PrimitiveCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PrimitiveCollisionShape(void *obj) {
Mezzanine::Physics::PrimitiveCollisionShape *arg1 = (Mezzanine::Physics::PrimitiveCollisionShape *) obj;
delete arg1;
}
static swig_lua_attribute swig_PrimitiveCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PrimitiveCollisionShape_methods[]= {
    { "GetType", _wrap_PrimitiveCollisionShape_GetType},
    { "GetBulletConvexShape", _wrap_PrimitiveCollisionShape_GetBulletConvexShape},
    { "ProtoSerialize", _wrap_PrimitiveCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_PrimitiveCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_PrimitiveCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PrimitiveCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PrimitiveCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PrimitiveCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_PrimitiveCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_PrimitiveCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PrimitiveCollisionShape_Sf_SwigStatic = {
    "PrimitiveCollisionShape",
    swig_PrimitiveCollisionShape_Sf_SwigStatic_methods,
    swig_PrimitiveCollisionShape_Sf_SwigStatic_attributes,
    swig_PrimitiveCollisionShape_Sf_SwigStatic_constants,
    swig_PrimitiveCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PrimitiveCollisionShape_bases[] = {0,0};
static const char *swig_PrimitiveCollisionShape_base_names[] = {"Mezzanine::Physics::CollisionShape *",0};
static swig_lua_class _wrap_class_PrimitiveCollisionShape = { "PrimitiveCollisionShape", "PrimitiveCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__PrimitiveCollisionShape,0, swig_delete_PrimitiveCollisionShape, swig_PrimitiveCollisionShape_methods, swig_PrimitiveCollisionShape_attributes, &swig_PrimitiveCollisionShape_Sf_SwigStatic, swig_PrimitiveCollisionShape_meta, swig_PrimitiveCollisionShape_bases, swig_PrimitiveCollisionShape_base_names };

static int _wrap_new_BoxCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::BoxCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",2,"Mezzanine::Physics::Vector3 const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_BoxCollisionShape",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::BoxCollisionShape *)new Mezzanine::Physics::BoxCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Physics::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoxCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btBoxShape *arg2 = (btBoxShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::BoxCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",2,"btBoxShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBoxShape,0))){
    SWIG_fail_ptr("new_BoxCollisionShape",2,SWIGTYPE_p_btBoxShape);
  }
  
  result = (Mezzanine::Physics::BoxCollisionShape *)new Mezzanine::Physics::BoxCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoxCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::BoxCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_BoxCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::BoxCollisionShape *)new Mezzanine::Physics::BoxCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoxCollisionShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BoxCollisionShape__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btBoxShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BoxCollisionShape__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BoxCollisionShape__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BoxCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape(Mezzanine::String const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape(Mezzanine::String const &,btBoxShape *)\n"
    "    Mezzanine::Physics::BoxCollisionShape::BoxCollisionShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_BoxCollisionShape_GetCleanHalfExtents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::GetCleanHalfExtents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::GetCleanHalfExtents",1,"Mezzanine::Physics::BoxCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_GetCleanHalfExtents",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  result = ((Mezzanine::Physics::BoxCollisionShape const *)arg1)->GetCleanHalfExtents();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_GetHalfExtents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::GetHalfExtents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::GetHalfExtents",1,"Mezzanine::Physics::BoxCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_GetHalfExtents",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  result = ((Mezzanine::Physics::BoxCollisionShape const *)arg1)->GetHalfExtents();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_GetHalfExtentsWithMargin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::GetHalfExtentsWithMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::GetHalfExtentsWithMargin",1,"Mezzanine::Physics::BoxCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_GetHalfExtentsWithMargin",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  result = ((Mezzanine::Physics::BoxCollisionShape const *)arg1)->GetHalfExtentsWithMargin();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::IsInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::IsInside",1,"Mezzanine::Physics::BoxCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::IsInside",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::IsInside",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_IsInside",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("BoxCollisionShape_IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  result = (Mezzanine::Boole)((Mezzanine::Physics::BoxCollisionShape const *)arg1)->IsInside((Mezzanine::Physics::Vector3 const &)*arg2,(Mezzanine::Real const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::GetType",1,"Mezzanine::Physics::BoxCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::BoxCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_GetBulletBoxShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  btBoxShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::GetBulletBoxShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::GetBulletBoxShape",1,"Mezzanine::Physics::BoxCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_GetBulletBoxShape",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  result = (btBoxShape *)((Mezzanine::Physics::BoxCollisionShape const *)arg1)->GetBulletBoxShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btBoxShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::BoxCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("BoxCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::BoxCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::BoxCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::BoxCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,0))){
    SWIG_fail_ptr("BoxCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("BoxCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoxCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::BoxCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::BoxCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BoxCollisionShape(void *obj) {
Mezzanine::Physics::BoxCollisionShape *arg1 = (Mezzanine::Physics::BoxCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_BoxCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BoxCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BoxCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BoxCollisionShape_methods[]= {
    { "GetCleanHalfExtents", _wrap_BoxCollisionShape_GetCleanHalfExtents},
    { "GetHalfExtents", _wrap_BoxCollisionShape_GetHalfExtents},
    { "GetHalfExtentsWithMargin", _wrap_BoxCollisionShape_GetHalfExtentsWithMargin},
    { "IsInside", _wrap_BoxCollisionShape_IsInside},
    { "GetType", _wrap_BoxCollisionShape_GetType},
    { "GetBulletBoxShape", _wrap_BoxCollisionShape_GetBulletBoxShape},
    { "ProtoSerialize", _wrap_BoxCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_BoxCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_BoxCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BoxCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BoxCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BoxCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_BoxCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_BoxCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BoxCollisionShape_Sf_SwigStatic = {
    "BoxCollisionShape",
    swig_BoxCollisionShape_Sf_SwigStatic_methods,
    swig_BoxCollisionShape_Sf_SwigStatic_attributes,
    swig_BoxCollisionShape_Sf_SwigStatic_constants,
    swig_BoxCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BoxCollisionShape_bases[] = {0,0};
static const char *swig_BoxCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_BoxCollisionShape = { "BoxCollisionShape", "BoxCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__BoxCollisionShape,_proxy__wrap_new_BoxCollisionShape, swig_delete_BoxCollisionShape, swig_BoxCollisionShape_methods, swig_BoxCollisionShape_attributes, &swig_BoxCollisionShape_Sf_SwigStatic, swig_BoxCollisionShape_meta, swig_BoxCollisionShape_bases, swig_BoxCollisionShape_base_names };

static int _wrap_new_CapsuleCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Physics::CapsuleCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",3,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",4,"Mezzanine::Physics::Vector3 const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_CapsuleCollisionShape",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::CapsuleCollisionShape *)new Mezzanine::Physics::CapsuleCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Physics::Vector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CapsuleCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  StandardAxis arg4 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  StandardAxis *argp4 ;
  Mezzanine::Physics::CapsuleCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",3,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",4,"StandardAxis");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_StandardAxis,0))){
    SWIG_fail_ptr("new_CapsuleCollisionShape",4,SWIGTYPE_p_StandardAxis);
  }
  arg4 = *argp4;
  
  result = (Mezzanine::Physics::CapsuleCollisionShape *)new Mezzanine::Physics::CapsuleCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CapsuleCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::CapsuleCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_CapsuleCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::CapsuleCollisionShape *)new Mezzanine::Physics::CapsuleCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CapsuleCollisionShape__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btCapsuleShape *arg2 = (btCapsuleShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CapsuleCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape",2,"btCapsuleShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCapsuleShape,0))){
    SWIG_fail_ptr("new_CapsuleCollisionShape",2,SWIGTYPE_p_btCapsuleShape);
  }
  
  result = (Mezzanine::Physics::CapsuleCollisionShape *)new Mezzanine::Physics::CapsuleCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CapsuleCollisionShape(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CapsuleCollisionShape__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCapsuleShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CapsuleCollisionShape__SWIG_3(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_CapsuleCollisionShape__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_StandardAxis, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_CapsuleCollisionShape__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CapsuleCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape(Mezzanine::String const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape(Mezzanine::String const &,Mezzanine::Real const &,Mezzanine::Real const &,StandardAxis)\n"
    "    Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape(XML::Node)\n"
    "    Mezzanine::Physics::CapsuleCollisionShape::CapsuleCollisionShape(Mezzanine::String const &,btCapsuleShape *)\n");
  lua_error(L);return 0;
}


static int _wrap_CapsuleCollisionShape_GetRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetRadius",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetRadius",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetHeight",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetHeight",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetCleanRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetCleanRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetCleanRadius",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetCleanRadius",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetCleanRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetCleanHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetCleanHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetCleanHeight",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetCleanHeight",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetCleanHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetUpAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetUpAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetUpAxis",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetUpAxis",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = ((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetUpAxis();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetUpStandardAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetUpStandardAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetUpStandardAxis",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetUpStandardAxis",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = ((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetUpStandardAxis();
  {
    StandardAxis * resultptr = new StandardAxis((const StandardAxis &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_StandardAxis,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetType",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetBulletCapsuleShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  btCapsuleShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetBulletCapsuleShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::GetBulletCapsuleShape",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_GetBulletCapsuleShape",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  result = (btCapsuleShape *)((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->GetBulletCapsuleShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCapsuleShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::CapsuleCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::CapsuleCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::CapsuleCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CapsuleCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CapsuleCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CapsuleCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CapsuleCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::CapsuleCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CapsuleCollisionShape(void *obj) {
Mezzanine::Physics::CapsuleCollisionShape *arg1 = (Mezzanine::Physics::CapsuleCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_CapsuleCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CapsuleCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CapsuleCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CapsuleCollisionShape_methods[]= {
    { "GetRadius", _wrap_CapsuleCollisionShape_GetRadius},
    { "GetHeight", _wrap_CapsuleCollisionShape_GetHeight},
    { "GetCleanRadius", _wrap_CapsuleCollisionShape_GetCleanRadius},
    { "GetCleanHeight", _wrap_CapsuleCollisionShape_GetCleanHeight},
    { "GetUpAxis", _wrap_CapsuleCollisionShape_GetUpAxis},
    { "GetUpStandardAxis", _wrap_CapsuleCollisionShape_GetUpStandardAxis},
    { "GetType", _wrap_CapsuleCollisionShape_GetType},
    { "GetBulletCapsuleShape", _wrap_CapsuleCollisionShape_GetBulletCapsuleShape},
    { "ProtoSerialize", _wrap_CapsuleCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_CapsuleCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_CapsuleCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CapsuleCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CapsuleCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CapsuleCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_CapsuleCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_CapsuleCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CapsuleCollisionShape_Sf_SwigStatic = {
    "CapsuleCollisionShape",
    swig_CapsuleCollisionShape_Sf_SwigStatic_methods,
    swig_CapsuleCollisionShape_Sf_SwigStatic_attributes,
    swig_CapsuleCollisionShape_Sf_SwigStatic_constants,
    swig_CapsuleCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CapsuleCollisionShape_bases[] = {0,0};
static const char *swig_CapsuleCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_CapsuleCollisionShape = { "CapsuleCollisionShape", "CapsuleCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__CapsuleCollisionShape,_proxy__wrap_new_CapsuleCollisionShape, swig_delete_CapsuleCollisionShape, swig_CapsuleCollisionShape_methods, swig_CapsuleCollisionShape_attributes, &swig_CapsuleCollisionShape_Sf_SwigStatic, swig_CapsuleCollisionShape_meta, swig_CapsuleCollisionShape_bases, swig_CapsuleCollisionShape_base_names };

static int _wrap_CollidablePair_ProxyA_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::ProxyA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::ProxyA",1,"Mezzanine::Physics::CollidablePair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::ProxyA",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair_ProxyA_set",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollidablePair_ProxyA_set",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  if (arg1) (arg1)->ProxyA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidablePair_ProxyA_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::ProxyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::ProxyA",1,"Mezzanine::Physics::CollidablePair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair_ProxyA_get",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  result = (Mezzanine::Physics::CollidableProxy *) ((arg1)->ProxyA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidablePair_ProxyB_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::ProxyB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::ProxyB",1,"Mezzanine::Physics::CollidablePair *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::ProxyB",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair_ProxyB_set",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("CollidablePair_ProxyB_set",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  if (arg1) (arg1)->ProxyB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidablePair_ProxyB_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::ProxyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::ProxyB",1,"Mezzanine::Physics::CollidablePair *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair_ProxyB_get",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  result = (Mezzanine::Physics::CollidableProxy *) ((arg1)->ProxyB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CollidablePair(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::CollidablePair *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::CollidablePair",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::CollidablePair",1,"Mezzanine::Physics::CollidableProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::CollidablePair",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("new_CollidablePair",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("new_CollidablePair",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Physics::CollidablePair *)new Mezzanine::Physics::CollidablePair(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidablePair_PairsMatch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidablePair *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::PairsMatch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::PairsMatch",1,"Mezzanine::Physics::CollidablePair const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::PairsMatch",2,"Mezzanine::Physics::CollidablePair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair_PairsMatch",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair_PairsMatch",2,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidablePair const *)arg1)->PairsMatch((Mezzanine::Physics::CollidablePair const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidablePair___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidablePair *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::operator ==",1,"Mezzanine::Physics::CollidablePair const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::operator ==",2,"Mezzanine::Physics::CollidablePair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair___eq",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair___eq",2,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidablePair const *)arg1)->operator ==((Mezzanine::Physics::CollidablePair const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidablePair___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) 0 ;
  Mezzanine::Physics::CollidablePair *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidablePair::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::operator <",1,"Mezzanine::Physics::CollidablePair const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidablePair::operator <",2,"Mezzanine::Physics::CollidablePair const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair___lt",1,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidablePair,0))){
    SWIG_fail_ptr("CollidablePair___lt",2,SWIGTYPE_p_Mezzanine__Physics__CollidablePair);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidablePair const *)arg1)->operator <((Mezzanine::Physics::CollidablePair const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollidablePair(void *obj) {
Mezzanine::Physics::CollidablePair *arg1 = (Mezzanine::Physics::CollidablePair *) obj;
delete arg1;
}
static int _proxy__wrap_new_CollidablePair(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CollidablePair);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CollidablePair_attributes[] = {
    { "ProxyA", _wrap_CollidablePair_ProxyA_get, _wrap_CollidablePair_ProxyA_set },
    { "ProxyB", _wrap_CollidablePair_ProxyB_get, _wrap_CollidablePair_ProxyB_set },
    {0,0,0}
};
static swig_lua_method swig_CollidablePair_methods[]= {
    { "PairsMatch", _wrap_CollidablePair_PairsMatch},
    { "__eq", _wrap_CollidablePair___eq},
    { "__lt", _wrap_CollidablePair___lt},
    {0,0}
};
static swig_lua_method swig_CollidablePair_meta[] = {
    { "__eq", _wrap_CollidablePair___eq},
    { "__lt", _wrap_CollidablePair___lt},
    {0,0}
};

static swig_lua_attribute swig_CollidablePair_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollidablePair_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollidablePair_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CollidablePair_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollidablePair_Sf_SwigStatic = {
    "CollidablePair",
    swig_CollidablePair_Sf_SwigStatic_methods,
    swig_CollidablePair_Sf_SwigStatic_attributes,
    swig_CollidablePair_Sf_SwigStatic_constants,
    swig_CollidablePair_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollidablePair_bases[] = {0};
static const char *swig_CollidablePair_base_names[] = {0};
static swig_lua_class _wrap_class_CollidablePair = { "CollidablePair", "CollidablePair", &SWIGTYPE_p_Mezzanine__Physics__CollidablePair,_proxy__wrap_new_CollidablePair, swig_delete_CollidablePair, swig_CollidablePair_methods, swig_CollidablePair_attributes, &swig_CollidablePair_Sf_SwigStatic, swig_CollidablePair_meta, swig_CollidablePair_bases, swig_CollidablePair_base_names };

static int _wrap_ExceptionBase_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionCode",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ExceptionBase const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetFunction",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetFunction",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetFunction();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetFile",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetFile",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetFile();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetLine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::Whole *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetLine",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetLine",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::Whole *) &((Mezzanine::ExceptionBase const *)arg1)->GetLine();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionTypeName",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionTypeName",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetExceptionTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionJavaTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionJavaTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionJavaTypeName",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionJavaTypeName",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetExceptionJavaTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetCompleteMessage(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetCompleteMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetCompleteMessage",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetCompleteMessage",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = ((Mezzanine::ExceptionBase const *)arg1)->GetCompleteMessage();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_what(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::what",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_what",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (char *)((Mezzanine::ExceptionBase const *)arg1)->what();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExceptionBase(void *obj) {
Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_ExceptionBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExceptionBase_methods[]= {
    { "GetExceptionCode", _wrap_ExceptionBase_GetExceptionCode},
    { "GetFunction", _wrap_ExceptionBase_GetFunction},
    { "GetFile", _wrap_ExceptionBase_GetFile},
    { "GetLine", _wrap_ExceptionBase_GetLine},
    { "GetExceptionTypeName", _wrap_ExceptionBase_GetExceptionTypeName},
    { "GetExceptionJavaTypeName", _wrap_ExceptionBase_GetExceptionJavaTypeName},
    { "GetCompleteMessage", _wrap_ExceptionBase_GetCompleteMessage},
    { "what", _wrap_ExceptionBase_what},
    {0,0}
};
static swig_lua_method swig_ExceptionBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExceptionBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExceptionBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("FIRST_EXCEPTION", Mezzanine::ExceptionBase::FIRST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_EXCEPTION", Mezzanine::ExceptionBase::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_URL_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_EXCEPTION", Mezzanine::ExceptionBase::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_INVALID_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::ExceptionBase::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_EXCEPTION", Mezzanine::ExceptionBase::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_CAST_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_RANGE_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ARITHMETIC_EXCEPTION", Mezzanine::ExceptionBase::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_VERSION_EXCEPTION", Mezzanine::ExceptionBase::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_STATE_EXCEPTION", Mezzanine::ExceptionBase::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RENDERINGAPI_EXCEPTION", Mezzanine::ExceptionBase::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RT_ASSERTION_EXCEPTION", Mezzanine::ExceptionBase::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INTERNAL_EXCEPTION", Mezzanine::ExceptionBase::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("NOT_IMPLEMENTED_EXCEPTION", Mezzanine::ExceptionBase::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_ASSIGNMENT", Mezzanine::ExceptionBase::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("LAST_EXCEPTION", Mezzanine::ExceptionBase::LAST_EXCEPTION)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExceptionBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExceptionBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExceptionBase_Sf_SwigStatic = {
    "ExceptionBase",
    swig_ExceptionBase_Sf_SwigStatic_methods,
    swig_ExceptionBase_Sf_SwigStatic_attributes,
    swig_ExceptionBase_Sf_SwigStatic_constants,
    swig_ExceptionBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExceptionBase_bases[] = {0};
static const char *swig_ExceptionBase_base_names[] = {0};
static swig_lua_class _wrap_class_ExceptionBase = { "ExceptionBase", "ExceptionBase", &SWIGTYPE_p_Mezzanine__ExceptionBase,0, swig_delete_ExceptionBase, swig_ExceptionBase_methods, swig_ExceptionBase_attributes, &swig_ExceptionBase_Sf_SwigStatic, swig_ExceptionBase_meta, swig_ExceptionBase_bases, swig_ExceptionBase_base_names };

static int _wrap_new_IOException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOException::IOException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOException::IOException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOException *arg1 = (Mezzanine::IOException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOException::GetExceptionCode",1,"Mezzanine::IOException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOException,0))){
    SWIG_fail_ptr("IOException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOException(void *obj) {
Mezzanine::IOException *arg1 = (Mezzanine::IOException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOException_methods[]= {
    { "GetExceptionCode", _wrap_IOException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOException_Sf_SwigStatic = {
    "IOException",
    swig_IOException_Sf_SwigStatic_methods,
    swig_IOException_Sf_SwigStatic_attributes,
    swig_IOException_Sf_SwigStatic_constants,
    swig_IOException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOException_bases[] = {0,0};
static const char *swig_IOException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_IOException = { "IOException", "IOException", &SWIGTYPE_p_Mezzanine__IOException,_proxy__wrap_new_IOException, swig_delete_IOException, swig_IOException_methods, swig_IOException_attributes, &swig_IOException_Sf_SwigStatic, swig_IOException_meta, swig_IOException_bases, swig_IOException_base_names };

static int _wrap_new_FileException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileException::FileException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileException::FileException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileException *arg1 = (Mezzanine::FileException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileException::GetExceptionCode",1,"Mezzanine::FileException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileException,0))){
    SWIG_fail_ptr("FileException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileException(void *obj) {
Mezzanine::FileException *arg1 = (Mezzanine::FileException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileException_methods[]= {
    { "GetExceptionCode", _wrap_FileException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileException_Sf_SwigStatic = {
    "FileException",
    swig_FileException_Sf_SwigStatic_methods,
    swig_FileException_Sf_SwigStatic_attributes,
    swig_FileException_Sf_SwigStatic_constants,
    swig_FileException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileException_bases[] = {0,0};
static const char *swig_FileException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_FileException = { "FileException", "FileException", &SWIGTYPE_p_Mezzanine__FileException,_proxy__wrap_new_FileException, swig_delete_FileException, swig_FileException_methods, swig_FileException_attributes, &swig_FileException_Sf_SwigStatic, swig_FileException_meta, swig_FileException_bases, swig_FileException_base_names };

static int _wrap_new_FileReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::GetExceptionCode",1,"Mezzanine::FileReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileReadException,0))){
    SWIG_fail_ptr("FileReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileReadException(void *obj) {
Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileReadException_methods[]= {
    { "GetExceptionCode", _wrap_FileReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileReadException_Sf_SwigStatic = {
    "FileReadException",
    swig_FileReadException_Sf_SwigStatic_methods,
    swig_FileReadException_Sf_SwigStatic_attributes,
    swig_FileReadException_Sf_SwigStatic_constants,
    swig_FileReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileReadException_bases[] = {0,0};
static const char *swig_FileReadException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileReadException = { "FileReadException", "FileReadException", &SWIGTYPE_p_Mezzanine__FileReadException,_proxy__wrap_new_FileReadException, swig_delete_FileReadException, swig_FileReadException_methods, swig_FileReadException_attributes, &swig_FileReadException_Sf_SwigStatic, swig_FileReadException_meta, swig_FileReadException_bases, swig_FileReadException_base_names };

static int _wrap_new_FileWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::GetExceptionCode",1,"Mezzanine::FileWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileWriteException,0))){
    SWIG_fail_ptr("FileWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileWriteException(void *obj) {
Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileWriteException_methods[]= {
    { "GetExceptionCode", _wrap_FileWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileWriteException_Sf_SwigStatic = {
    "FileWriteException",
    swig_FileWriteException_Sf_SwigStatic_methods,
    swig_FileWriteException_Sf_SwigStatic_attributes,
    swig_FileWriteException_Sf_SwigStatic_constants,
    swig_FileWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileWriteException_bases[] = {0,0};
static const char *swig_FileWriteException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileWriteException = { "FileWriteException", "FileWriteException", &SWIGTYPE_p_Mezzanine__FileWriteException,_proxy__wrap_new_FileWriteException, swig_delete_FileWriteException, swig_FileWriteException_methods, swig_FileWriteException_attributes, &swig_FileWriteException_Sf_SwigStatic, swig_FileWriteException_meta, swig_FileWriteException_bases, swig_FileWriteException_base_names };

static int _wrap_new_FileNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::GetExceptionCode",1,"Mezzanine::FileNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileNotFoundException,0))){
    SWIG_fail_ptr("FileNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileNotFoundException(void *obj) {
Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_FileNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileNotFoundException_Sf_SwigStatic = {
    "FileNotFoundException",
    swig_FileNotFoundException_Sf_SwigStatic_methods,
    swig_FileNotFoundException_Sf_SwigStatic_attributes,
    swig_FileNotFoundException_Sf_SwigStatic_constants,
    swig_FileNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileNotFoundException_bases[] = {0,0};
static const char *swig_FileNotFoundException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileNotFoundException = { "FileNotFoundException", "FileNotFoundException", &SWIGTYPE_p_Mezzanine__FileNotFoundException,_proxy__wrap_new_FileNotFoundException, swig_delete_FileNotFoundException, swig_FileNotFoundException_methods, swig_FileNotFoundException_attributes, &swig_FileNotFoundException_Sf_SwigStatic, swig_FileNotFoundException_meta, swig_FileNotFoundException_bases, swig_FileNotFoundException_base_names };

static int _wrap_new_FilePermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FilePermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FilePermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FilePermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FilePermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::GetExceptionCode",1,"Mezzanine::FilePermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FilePermissionException,0))){
    SWIG_fail_ptr("FilePermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FilePermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FilePermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilePermissionException(void *obj) {
Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilePermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilePermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilePermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilePermissionException_methods[]= {
    { "GetExceptionCode", _wrap_FilePermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FilePermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilePermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilePermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilePermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilePermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilePermissionException_Sf_SwigStatic = {
    "FilePermissionException",
    swig_FilePermissionException_Sf_SwigStatic_methods,
    swig_FilePermissionException_Sf_SwigStatic_attributes,
    swig_FilePermissionException_Sf_SwigStatic_constants,
    swig_FilePermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilePermissionException_bases[] = {0,0};
static const char *swig_FilePermissionException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FilePermissionException = { "FilePermissionException", "FilePermissionException", &SWIGTYPE_p_Mezzanine__FilePermissionException,_proxy__wrap_new_FilePermissionException, swig_delete_FilePermissionException, swig_FilePermissionException_methods, swig_FilePermissionException_attributes, &swig_FilePermissionException_Sf_SwigStatic, swig_FilePermissionException_meta, swig_FilePermissionException_bases, swig_FilePermissionException_base_names };

static int _wrap_new_DirectoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::GetExceptionCode",1,"Mezzanine::DirectoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryException,0))){
    SWIG_fail_ptr("DirectoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryException(void *obj) {
Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryException_Sf_SwigStatic = {
    "DirectoryException",
    swig_DirectoryException_Sf_SwigStatic_methods,
    swig_DirectoryException_Sf_SwigStatic_attributes,
    swig_DirectoryException_Sf_SwigStatic_constants,
    swig_DirectoryException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryException_bases[] = {0,0};
static const char *swig_DirectoryException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_DirectoryException = { "DirectoryException", "DirectoryException", &SWIGTYPE_p_Mezzanine__DirectoryException,_proxy__wrap_new_DirectoryException, swig_delete_DirectoryException, swig_DirectoryException_methods, swig_DirectoryException_attributes, &swig_DirectoryException_Sf_SwigStatic, swig_DirectoryException_meta, swig_DirectoryException_bases, swig_DirectoryException_base_names };

static int _wrap_new_DirectoryReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::GetExceptionCode",1,"Mezzanine::DirectoryReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryReadException,0))){
    SWIG_fail_ptr("DirectoryReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryReadException(void *obj) {
Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryReadException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryReadException_Sf_SwigStatic = {
    "DirectoryReadException",
    swig_DirectoryReadException_Sf_SwigStatic_methods,
    swig_DirectoryReadException_Sf_SwigStatic_attributes,
    swig_DirectoryReadException_Sf_SwigStatic_constants,
    swig_DirectoryReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryReadException_bases[] = {0,0};
static const char *swig_DirectoryReadException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryReadException = { "DirectoryReadException", "DirectoryReadException", &SWIGTYPE_p_Mezzanine__DirectoryReadException,_proxy__wrap_new_DirectoryReadException, swig_delete_DirectoryReadException, swig_DirectoryReadException_methods, swig_DirectoryReadException_attributes, &swig_DirectoryReadException_Sf_SwigStatic, swig_DirectoryReadException_meta, swig_DirectoryReadException_bases, swig_DirectoryReadException_base_names };

static int _wrap_new_DirectoryWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::GetExceptionCode",1,"Mezzanine::DirectoryWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryWriteException,0))){
    SWIG_fail_ptr("DirectoryWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryWriteException(void *obj) {
Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryWriteException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryWriteException_Sf_SwigStatic = {
    "DirectoryWriteException",
    swig_DirectoryWriteException_Sf_SwigStatic_methods,
    swig_DirectoryWriteException_Sf_SwigStatic_attributes,
    swig_DirectoryWriteException_Sf_SwigStatic_constants,
    swig_DirectoryWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryWriteException_bases[] = {0,0};
static const char *swig_DirectoryWriteException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryWriteException = { "DirectoryWriteException", "DirectoryWriteException", &SWIGTYPE_p_Mezzanine__DirectoryWriteException,_proxy__wrap_new_DirectoryWriteException, swig_delete_DirectoryWriteException, swig_DirectoryWriteException_methods, swig_DirectoryWriteException_attributes, &swig_DirectoryWriteException_Sf_SwigStatic, swig_DirectoryWriteException_meta, swig_DirectoryWriteException_bases, swig_DirectoryWriteException_base_names };

static int _wrap_new_DirectoryNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,"Mezzanine::DirectoryNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,0))){
    SWIG_fail_ptr("DirectoryNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryNotFoundException(void *obj) {
Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryNotFoundException_Sf_SwigStatic = {
    "DirectoryNotFoundException",
    swig_DirectoryNotFoundException_Sf_SwigStatic_methods,
    swig_DirectoryNotFoundException_Sf_SwigStatic_attributes,
    swig_DirectoryNotFoundException_Sf_SwigStatic_constants,
    swig_DirectoryNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryNotFoundException_bases[] = {0,0};
static const char *swig_DirectoryNotFoundException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryNotFoundException = { "DirectoryNotFoundException", "DirectoryNotFoundException", &SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,_proxy__wrap_new_DirectoryNotFoundException, swig_delete_DirectoryNotFoundException, swig_DirectoryNotFoundException_methods, swig_DirectoryNotFoundException_attributes, &swig_DirectoryNotFoundException_Sf_SwigStatic, swig_DirectoryNotFoundException_meta, swig_DirectoryNotFoundException_bases, swig_DirectoryNotFoundException_base_names };

static int _wrap_new_DirectoryPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryPermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,"Mezzanine::DirectoryPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,0))){
    SWIG_fail_ptr("DirectoryPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryPermissionException(void *obj) {
Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryPermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryPermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryPermissionException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryPermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryPermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryPermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryPermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryPermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryPermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryPermissionException_Sf_SwigStatic = {
    "DirectoryPermissionException",
    swig_DirectoryPermissionException_Sf_SwigStatic_methods,
    swig_DirectoryPermissionException_Sf_SwigStatic_attributes,
    swig_DirectoryPermissionException_Sf_SwigStatic_constants,
    swig_DirectoryPermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryPermissionException_bases[] = {0,0};
static const char *swig_DirectoryPermissionException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryPermissionException = { "DirectoryPermissionException", "DirectoryPermissionException", &SWIGTYPE_p_Mezzanine__DirectoryPermissionException,_proxy__wrap_new_DirectoryPermissionException, swig_delete_DirectoryPermissionException, swig_DirectoryPermissionException_methods, swig_DirectoryPermissionException_attributes, &swig_DirectoryPermissionException_Sf_SwigStatic, swig_DirectoryPermissionException_meta, swig_DirectoryPermissionException_bases, swig_DirectoryPermissionException_base_names };

static int _wrap_new_NetworkException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::GetExceptionCode",1,"Mezzanine::NetworkException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkException,0))){
    SWIG_fail_ptr("NetworkException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkException(void *obj) {
Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkException_Sf_SwigStatic = {
    "NetworkException",
    swig_NetworkException_Sf_SwigStatic_methods,
    swig_NetworkException_Sf_SwigStatic_attributes,
    swig_NetworkException_Sf_SwigStatic_constants,
    swig_NetworkException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkException_bases[] = {0,0};
static const char *swig_NetworkException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_NetworkException = { "NetworkException", "NetworkException", &SWIGTYPE_p_Mezzanine__NetworkException,_proxy__wrap_new_NetworkException, swig_delete_NetworkException, swig_NetworkException_methods, swig_NetworkException_attributes, &swig_NetworkException_Sf_SwigStatic, swig_NetworkException_meta, swig_NetworkException_bases, swig_NetworkException_base_names };

static int _wrap_new_NetworkReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::GetExceptionCode",1,"Mezzanine::NetworkReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkReadException,0))){
    SWIG_fail_ptr("NetworkReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkReadException(void *obj) {
Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkReadException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkReadException_Sf_SwigStatic = {
    "NetworkReadException",
    swig_NetworkReadException_Sf_SwigStatic_methods,
    swig_NetworkReadException_Sf_SwigStatic_attributes,
    swig_NetworkReadException_Sf_SwigStatic_constants,
    swig_NetworkReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkReadException_bases[] = {0,0};
static const char *swig_NetworkReadException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkReadException = { "NetworkReadException", "NetworkReadException", &SWIGTYPE_p_Mezzanine__NetworkReadException,_proxy__wrap_new_NetworkReadException, swig_delete_NetworkReadException, swig_NetworkReadException_methods, swig_NetworkReadException_attributes, &swig_NetworkReadException_Sf_SwigStatic, swig_NetworkReadException_meta, swig_NetworkReadException_bases, swig_NetworkReadException_base_names };

static int _wrap_new_NetworkWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::GetExceptionCode",1,"Mezzanine::NetworkWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkWriteException,0))){
    SWIG_fail_ptr("NetworkWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkWriteException(void *obj) {
Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkWriteException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkWriteException_Sf_SwigStatic = {
    "NetworkWriteException",
    swig_NetworkWriteException_Sf_SwigStatic_methods,
    swig_NetworkWriteException_Sf_SwigStatic_attributes,
    swig_NetworkWriteException_Sf_SwigStatic_constants,
    swig_NetworkWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkWriteException_bases[] = {0,0};
static const char *swig_NetworkWriteException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkWriteException = { "NetworkWriteException", "NetworkWriteException", &SWIGTYPE_p_Mezzanine__NetworkWriteException,_proxy__wrap_new_NetworkWriteException, swig_delete_NetworkWriteException, swig_NetworkWriteException_methods, swig_NetworkWriteException_attributes, &swig_NetworkWriteException_Sf_SwigStatic, swig_NetworkWriteException_meta, swig_NetworkWriteException_bases, swig_NetworkWriteException_base_names };

static int _wrap_new_NetworkNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,"Mezzanine::NetworkNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,0))){
    SWIG_fail_ptr("NetworkNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkNotFoundException(void *obj) {
Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkNotFoundException_Sf_SwigStatic = {
    "NetworkNotFoundException",
    swig_NetworkNotFoundException_Sf_SwigStatic_methods,
    swig_NetworkNotFoundException_Sf_SwigStatic_attributes,
    swig_NetworkNotFoundException_Sf_SwigStatic_constants,
    swig_NetworkNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkNotFoundException_bases[] = {0,0};
static const char *swig_NetworkNotFoundException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkNotFoundException = { "NetworkNotFoundException", "NetworkNotFoundException", &SWIGTYPE_p_Mezzanine__NetworkNotFoundException,_proxy__wrap_new_NetworkNotFoundException, swig_delete_NetworkNotFoundException, swig_NetworkNotFoundException_methods, swig_NetworkNotFoundException_attributes, &swig_NetworkNotFoundException_Sf_SwigStatic, swig_NetworkNotFoundException_meta, swig_NetworkNotFoundException_bases, swig_NetworkNotFoundException_base_names };

static int _wrap_new_NetworkURLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkURLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkURLException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkURLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkURLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::GetExceptionCode",1,"Mezzanine::NetworkURLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkURLException,0))){
    SWIG_fail_ptr("NetworkURLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkURLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkURLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkURLException(void *obj) {
Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkURLException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkURLException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkURLException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkURLException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkURLException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkURLException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkURLException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkURLException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkURLException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkURLException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkURLException_Sf_SwigStatic = {
    "NetworkURLException",
    swig_NetworkURLException_Sf_SwigStatic_methods,
    swig_NetworkURLException_Sf_SwigStatic_attributes,
    swig_NetworkURLException_Sf_SwigStatic_constants,
    swig_NetworkURLException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkURLException_bases[] = {0,0};
static const char *swig_NetworkURLException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkURLException = { "NetworkURLException", "NetworkURLException", &SWIGTYPE_p_Mezzanine__NetworkURLException,_proxy__wrap_new_NetworkURLException, swig_delete_NetworkURLException, swig_NetworkURLException_methods, swig_NetworkURLException_attributes, &swig_NetworkURLException_Sf_SwigStatic, swig_NetworkURLException_meta, swig_NetworkURLException_bases, swig_NetworkURLException_base_names };

static int _wrap_new_NetworkPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkPermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::GetExceptionCode",1,"Mezzanine::NetworkPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkPermissionException,0))){
    SWIG_fail_ptr("NetworkPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkPermissionException(void *obj) {
Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkPermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkPermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkPermissionException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkPermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkPermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkPermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkPermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkPermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkPermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkPermissionException_Sf_SwigStatic = {
    "NetworkPermissionException",
    swig_NetworkPermissionException_Sf_SwigStatic_methods,
    swig_NetworkPermissionException_Sf_SwigStatic_attributes,
    swig_NetworkPermissionException_Sf_SwigStatic_constants,
    swig_NetworkPermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkPermissionException_bases[] = {0,0};
static const char *swig_NetworkPermissionException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkPermissionException = { "NetworkPermissionException", "NetworkPermissionException", &SWIGTYPE_p_Mezzanine__NetworkPermissionException,_proxy__wrap_new_NetworkPermissionException, swig_delete_NetworkPermissionException, swig_NetworkPermissionException_methods, swig_NetworkPermissionException_attributes, &swig_NetworkPermissionException_Sf_SwigStatic, swig_NetworkPermissionException_meta, swig_NetworkPermissionException_bases, swig_NetworkPermissionException_base_names };

static int _wrap_new_IOWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::GetExceptionCode",1,"Mezzanine::IOWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOWriteException,0))){
    SWIG_fail_ptr("IOWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOWriteException(void *obj) {
Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOWriteException_methods[]= {
    { "GetExceptionCode", _wrap_IOWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOWriteException_Sf_SwigStatic = {
    "IOWriteException",
    swig_IOWriteException_Sf_SwigStatic_methods,
    swig_IOWriteException_Sf_SwigStatic_attributes,
    swig_IOWriteException_Sf_SwigStatic_constants,
    swig_IOWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOWriteException_bases[] = {0,0};
static const char *swig_IOWriteException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_IOWriteException = { "IOWriteException", "IOWriteException", &SWIGTYPE_p_Mezzanine__IOWriteException,_proxy__wrap_new_IOWriteException, swig_delete_IOWriteException, swig_IOWriteException_methods, swig_IOWriteException_attributes, &swig_IOWriteException_Sf_SwigStatic, swig_IOWriteException_meta, swig_IOWriteException_bases, swig_IOWriteException_base_names };

static int _wrap_new_IOReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::GetExceptionCode",1,"Mezzanine::IOReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOReadException,0))){
    SWIG_fail_ptr("IOReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOReadException(void *obj) {
Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOReadException_methods[]= {
    { "GetExceptionCode", _wrap_IOReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOReadException_Sf_SwigStatic = {
    "IOReadException",
    swig_IOReadException_Sf_SwigStatic_methods,
    swig_IOReadException_Sf_SwigStatic_attributes,
    swig_IOReadException_Sf_SwigStatic_constants,
    swig_IOReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOReadException_bases[] = {0,0};
static const char *swig_IOReadException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_IOReadException = { "IOReadException", "IOReadException", &SWIGTYPE_p_Mezzanine__IOReadException,_proxy__wrap_new_IOReadException, swig_delete_IOReadException, swig_IOReadException_methods, swig_IOReadException_attributes, &swig_IOReadException_Sf_SwigStatic, swig_IOReadException_meta, swig_IOReadException_bases, swig_IOReadException_base_names };

static int _wrap_new_InstanceIdentityException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::GetExceptionCode",1,"Mezzanine::InstanceIdentityException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityException,0))){
    SWIG_fail_ptr("InstanceIdentityException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityException(void *obj) {
Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityException_Sf_SwigStatic = {
    "InstanceIdentityException",
    swig_InstanceIdentityException_Sf_SwigStatic_methods,
    swig_InstanceIdentityException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityException_Sf_SwigStatic_constants,
    swig_InstanceIdentityException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityException_bases[] = {0,0};
static const char *swig_InstanceIdentityException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InstanceIdentityException = { "InstanceIdentityException", "InstanceIdentityException", &SWIGTYPE_p_Mezzanine__InstanceIdentityException,_proxy__wrap_new_InstanceIdentityException, swig_delete_InstanceIdentityException, swig_InstanceIdentityException_methods, swig_InstanceIdentityException_attributes, &swig_InstanceIdentityException_Sf_SwigStatic, swig_InstanceIdentityException_meta, swig_InstanceIdentityException_bases, swig_InstanceIdentityException_base_names };

static int _wrap_new_InstanceIdentityInvalidException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityInvalidException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityInvalidException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityInvalidException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityInvalidException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,"Mezzanine::InstanceIdentityInvalidException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,0))){
    SWIG_fail_ptr("InstanceIdentityInvalidException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityInvalidException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityInvalidException(void *obj) {
Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityInvalidException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityInvalidException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityInvalidException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityInvalidException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityInvalidException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityInvalidException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityInvalidException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityInvalidException_Sf_SwigStatic = {
    "InstanceIdentityInvalidException",
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_methods,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_constants,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityInvalidException_bases[] = {0,0};
static const char *swig_InstanceIdentityInvalidException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityInvalidException = { "InstanceIdentityInvalidException", "InstanceIdentityInvalidException", &SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,_proxy__wrap_new_InstanceIdentityInvalidException, swig_delete_InstanceIdentityInvalidException, swig_InstanceIdentityInvalidException_methods, swig_InstanceIdentityInvalidException_attributes, &swig_InstanceIdentityInvalidException_Sf_SwigStatic, swig_InstanceIdentityInvalidException_meta, swig_InstanceIdentityInvalidException_bases, swig_InstanceIdentityInvalidException_base_names };

static int _wrap_new_InstanceIdentityNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,"Mezzanine::InstanceIdentityNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,0))){
    SWIG_fail_ptr("InstanceIdentityNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityNotFoundException(void *obj) {
Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityNotFoundException_Sf_SwigStatic = {
    "InstanceIdentityNotFoundException",
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_methods,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_constants,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityNotFoundException_bases[] = {0,0};
static const char *swig_InstanceIdentityNotFoundException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityNotFoundException = { "InstanceIdentityNotFoundException", "InstanceIdentityNotFoundException", &SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,_proxy__wrap_new_InstanceIdentityNotFoundException, swig_delete_InstanceIdentityNotFoundException, swig_InstanceIdentityNotFoundException_methods, swig_InstanceIdentityNotFoundException_attributes, &swig_InstanceIdentityNotFoundException_Sf_SwigStatic, swig_InstanceIdentityNotFoundException_meta, swig_InstanceIdentityNotFoundException_bases, swig_InstanceIdentityNotFoundException_base_names };

static int _wrap_new_InstanceIdentityDuplicateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityDuplicateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityDuplicateException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityDuplicateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityDuplicateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,"Mezzanine::InstanceIdentityDuplicateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,0))){
    SWIG_fail_ptr("InstanceIdentityDuplicateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityDuplicateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityDuplicateException(void *obj) {
Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityDuplicateException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityDuplicateException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityDuplicateException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityDuplicateException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityDuplicateException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityDuplicateException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityDuplicateException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityDuplicateException_Sf_SwigStatic = {
    "InstanceIdentityDuplicateException",
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_methods,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_constants,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityDuplicateException_bases[] = {0,0};
static const char *swig_InstanceIdentityDuplicateException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityDuplicateException = { "InstanceIdentityDuplicateException", "InstanceIdentityDuplicateException", &SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,_proxy__wrap_new_InstanceIdentityDuplicateException, swig_delete_InstanceIdentityDuplicateException, swig_InstanceIdentityDuplicateException_methods, swig_InstanceIdentityDuplicateException_attributes, &swig_InstanceIdentityDuplicateException_Sf_SwigStatic, swig_InstanceIdentityDuplicateException_meta, swig_InstanceIdentityDuplicateException_bases, swig_InstanceIdentityDuplicateException_base_names };

static int _wrap_new_MemoryManagementException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryManagementException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_MemoryManagementException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryManagementException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryManagementException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::GetExceptionCode",1,"Mezzanine::MemoryManagementException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryManagementException,0))){
    SWIG_fail_ptr("MemoryManagementException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryManagementException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryManagementException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryManagementException(void *obj) {
Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) obj;
delete arg1;
}
static int _proxy__wrap_new_MemoryManagementException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MemoryManagementException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MemoryManagementException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MemoryManagementException_methods[]= {
    { "GetExceptionCode", _wrap_MemoryManagementException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_MemoryManagementException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MemoryManagementException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MemoryManagementException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MemoryManagementException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MemoryManagementException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MemoryManagementException_Sf_SwigStatic = {
    "MemoryManagementException",
    swig_MemoryManagementException_Sf_SwigStatic_methods,
    swig_MemoryManagementException_Sf_SwigStatic_attributes,
    swig_MemoryManagementException_Sf_SwigStatic_constants,
    swig_MemoryManagementException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MemoryManagementException_bases[] = {0,0};
static const char *swig_MemoryManagementException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_MemoryManagementException = { "MemoryManagementException", "MemoryManagementException", &SWIGTYPE_p_Mezzanine__MemoryManagementException,_proxy__wrap_new_MemoryManagementException, swig_delete_MemoryManagementException, swig_MemoryManagementException_methods, swig_MemoryManagementException_attributes, &swig_MemoryManagementException_Sf_SwigStatic, swig_MemoryManagementException_meta, swig_MemoryManagementException_bases, swig_MemoryManagementException_base_names };

static int _wrap_new_OutOfMemoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_OutOfMemoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_OutOfMemoryException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OutOfMemoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OutOfMemoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::GetExceptionCode",1,"Mezzanine::OutOfMemoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__OutOfMemoryException,0))){
    SWIG_fail_ptr("OutOfMemoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__OutOfMemoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::OutOfMemoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OutOfMemoryException(void *obj) {
Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) obj;
delete arg1;
}
static int _proxy__wrap_new_OutOfMemoryException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OutOfMemoryException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OutOfMemoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OutOfMemoryException_methods[]= {
    { "GetExceptionCode", _wrap_OutOfMemoryException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_OutOfMemoryException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OutOfMemoryException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OutOfMemoryException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OutOfMemoryException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OutOfMemoryException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OutOfMemoryException_Sf_SwigStatic = {
    "OutOfMemoryException",
    swig_OutOfMemoryException_Sf_SwigStatic_methods,
    swig_OutOfMemoryException_Sf_SwigStatic_attributes,
    swig_OutOfMemoryException_Sf_SwigStatic_constants,
    swig_OutOfMemoryException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OutOfMemoryException_bases[] = {0,0};
static const char *swig_OutOfMemoryException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_OutOfMemoryException = { "OutOfMemoryException", "OutOfMemoryException", &SWIGTYPE_p_Mezzanine__OutOfMemoryException,_proxy__wrap_new_OutOfMemoryException, swig_delete_OutOfMemoryException, swig_OutOfMemoryException_methods, swig_OutOfMemoryException_attributes, &swig_OutOfMemoryException_Sf_SwigStatic, swig_OutOfMemoryException_meta, swig_OutOfMemoryException_bases, swig_OutOfMemoryException_base_names };

static int _wrap_new_MemoryOutOfBoundsException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryOutOfBoundsException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_MemoryOutOfBoundsException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryOutOfBoundsException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryOutOfBoundsException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,"Mezzanine::MemoryOutOfBoundsException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,0))){
    SWIG_fail_ptr("MemoryOutOfBoundsException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryOutOfBoundsException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryOutOfBoundsException(void *obj) {
Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) obj;
delete arg1;
}
static int _proxy__wrap_new_MemoryOutOfBoundsException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MemoryOutOfBoundsException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MemoryOutOfBoundsException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_methods[]= {
    { "GetExceptionCode", _wrap_MemoryOutOfBoundsException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MemoryOutOfBoundsException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MemoryOutOfBoundsException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MemoryOutOfBoundsException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MemoryOutOfBoundsException_Sf_SwigStatic = {
    "MemoryOutOfBoundsException",
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_methods,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_attributes,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_constants,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MemoryOutOfBoundsException_bases[] = {0,0};
static const char *swig_MemoryOutOfBoundsException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_MemoryOutOfBoundsException = { "MemoryOutOfBoundsException", "MemoryOutOfBoundsException", &SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,_proxy__wrap_new_MemoryOutOfBoundsException, swig_delete_MemoryOutOfBoundsException, swig_MemoryOutOfBoundsException_methods, swig_MemoryOutOfBoundsException_attributes, &swig_MemoryOutOfBoundsException_Sf_SwigStatic, swig_MemoryOutOfBoundsException_meta, swig_MemoryOutOfBoundsException_bases, swig_MemoryOutOfBoundsException_base_names };

static int _wrap_new_SyntaxErrorException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::GetExceptionCode",1,"Mezzanine::SyntaxErrorException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorException,0))){
    SWIG_fail_ptr("SyntaxErrorException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorException(void *obj) {
Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorException_Sf_SwigStatic = {
    "SyntaxErrorException",
    swig_SyntaxErrorException_Sf_SwigStatic_methods,
    swig_SyntaxErrorException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorException_Sf_SwigStatic_constants,
    swig_SyntaxErrorException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorException_bases[] = {0,0};
static const char *swig_SyntaxErrorException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_SyntaxErrorException = { "SyntaxErrorException", "SyntaxErrorException", &SWIGTYPE_p_Mezzanine__SyntaxErrorException,_proxy__wrap_new_SyntaxErrorException, swig_delete_SyntaxErrorException, swig_SyntaxErrorException_methods, swig_SyntaxErrorException_attributes, &swig_SyntaxErrorException_Sf_SwigStatic, swig_SyntaxErrorException_meta, swig_SyntaxErrorException_bases, swig_SyntaxErrorException_base_names };

static int _wrap_new_SyntaxErrorXMLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXMLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorXMLException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXMLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXMLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXMLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,0))){
    SWIG_fail_ptr("SyntaxErrorXMLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXMLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXMLException(void *obj) {
Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorXMLException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorXMLException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorXMLException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorXMLException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorXMLException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorXMLException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorXMLException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorXMLException_Sf_SwigStatic = {
    "SyntaxErrorXMLException",
    swig_SyntaxErrorXMLException_Sf_SwigStatic_methods,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_constants,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorXMLException_bases[] = {0,0};
static const char *swig_SyntaxErrorXMLException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorXMLException = { "SyntaxErrorXMLException", "SyntaxErrorXMLException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,_proxy__wrap_new_SyntaxErrorXMLException, swig_delete_SyntaxErrorXMLException, swig_SyntaxErrorXMLException_methods, swig_SyntaxErrorXMLException_attributes, &swig_SyntaxErrorXMLException_Sf_SwigStatic, swig_SyntaxErrorXMLException_meta, swig_SyntaxErrorXMLException_bases, swig_SyntaxErrorXMLException_base_names };

static int _wrap_new_SyntaxErrorXPathException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXPathException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorXPathException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXPathException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXPathException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXPathException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,0))){
    SWIG_fail_ptr("SyntaxErrorXPathException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXPathException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXPathException(void *obj) {
Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorXPathException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorXPathException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorXPathException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorXPathException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorXPathException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorXPathException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorXPathException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorXPathException_Sf_SwigStatic = {
    "SyntaxErrorXPathException",
    swig_SyntaxErrorXPathException_Sf_SwigStatic_methods,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_constants,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorXPathException_bases[] = {0,0};
static const char *swig_SyntaxErrorXPathException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorXPathException = { "SyntaxErrorXPathException", "SyntaxErrorXPathException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,_proxy__wrap_new_SyntaxErrorXPathException, swig_delete_SyntaxErrorXPathException, swig_SyntaxErrorXPathException_methods, swig_SyntaxErrorXPathException_attributes, &swig_SyntaxErrorXPathException_Sf_SwigStatic, swig_SyntaxErrorXPathException_meta, swig_SyntaxErrorXPathException_bases, swig_SyntaxErrorXPathException_base_names };

static int _wrap_new_SyntaxErrorLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorLuaException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,"Mezzanine::SyntaxErrorLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,0))){
    SWIG_fail_ptr("SyntaxErrorLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorLuaException(void *obj) {
Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorLuaException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorLuaException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorLuaException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorLuaException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorLuaException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorLuaException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorLuaException_Sf_SwigStatic = {
    "SyntaxErrorLuaException",
    swig_SyntaxErrorLuaException_Sf_SwigStatic_methods,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_constants,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorLuaException_bases[] = {0,0};
static const char *swig_SyntaxErrorLuaException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorLuaException = { "SyntaxErrorLuaException", "SyntaxErrorLuaException", &SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,_proxy__wrap_new_SyntaxErrorLuaException, swig_delete_SyntaxErrorLuaException, swig_SyntaxErrorLuaException_methods, swig_SyntaxErrorLuaException_attributes, &swig_SyntaxErrorLuaException_Sf_SwigStatic, swig_SyntaxErrorLuaException_meta, swig_SyntaxErrorLuaException_bases, swig_SyntaxErrorLuaException_base_names };

static int _wrap_new_ScriptException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::GetExceptionCode",1,"Mezzanine::ScriptException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptException,0))){
    SWIG_fail_ptr("ScriptException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptException(void *obj) {
Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptException_Sf_SwigStatic = {
    "ScriptException",
    swig_ScriptException_Sf_SwigStatic_methods,
    swig_ScriptException_Sf_SwigStatic_attributes,
    swig_ScriptException_Sf_SwigStatic_constants,
    swig_ScriptException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptException_bases[] = {0,0};
static const char *swig_ScriptException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ScriptException = { "ScriptException", "ScriptException", &SWIGTYPE_p_Mezzanine__ScriptException,_proxy__wrap_new_ScriptException, swig_delete_ScriptException, swig_ScriptException_methods, swig_ScriptException_attributes, &swig_ScriptException_Sf_SwigStatic, swig_ScriptException_meta, swig_ScriptException_bases, swig_ScriptException_base_names };

static int _wrap_new_ScriptLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::GetExceptionCode",1,"Mezzanine::ScriptLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaException,0))){
    SWIG_fail_ptr("ScriptLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaException(void *obj) {
Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaException_Sf_SwigStatic = {
    "ScriptLuaException",
    swig_ScriptLuaException_Sf_SwigStatic_methods,
    swig_ScriptLuaException_Sf_SwigStatic_attributes,
    swig_ScriptLuaException_Sf_SwigStatic_constants,
    swig_ScriptLuaException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaException_bases[] = {0,0};
static const char *swig_ScriptLuaException_base_names[] = {"Mezzanine::ScriptException *",0};
static swig_lua_class _wrap_class_ScriptLuaException = { "ScriptLuaException", "ScriptLuaException", &SWIGTYPE_p_Mezzanine__ScriptLuaException,_proxy__wrap_new_ScriptLuaException, swig_delete_ScriptLuaException, swig_ScriptLuaException_methods, swig_ScriptLuaException_attributes, &swig_ScriptLuaException_Sf_SwigStatic, swig_ScriptLuaException_meta, swig_ScriptLuaException_bases, swig_ScriptLuaException_base_names };

static int _wrap_new_ScriptLuaYieldException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaYieldException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaYieldException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaYieldException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaYieldException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,"Mezzanine::ScriptLuaYieldException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,0))){
    SWIG_fail_ptr("ScriptLuaYieldException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaYieldException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaYieldException(void *obj) {
Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaYieldException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaYieldException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaYieldException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaYieldException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaYieldException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaYieldException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaYieldException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaYieldException_Sf_SwigStatic = {
    "ScriptLuaYieldException",
    swig_ScriptLuaYieldException_Sf_SwigStatic_methods,
    swig_ScriptLuaYieldException_Sf_SwigStatic_attributes,
    swig_ScriptLuaYieldException_Sf_SwigStatic_constants,
    swig_ScriptLuaYieldException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaYieldException_bases[] = {0,0};
static const char *swig_ScriptLuaYieldException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaYieldException = { "ScriptLuaYieldException", "ScriptLuaYieldException", &SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,_proxy__wrap_new_ScriptLuaYieldException, swig_delete_ScriptLuaYieldException, swig_ScriptLuaYieldException_methods, swig_ScriptLuaYieldException_attributes, &swig_ScriptLuaYieldException_Sf_SwigStatic, swig_ScriptLuaYieldException_meta, swig_ScriptLuaYieldException_bases, swig_ScriptLuaYieldException_base_names };

static int _wrap_new_ScriptLuaRuntimeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaRuntimeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaRuntimeException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaRuntimeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaRuntimeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,"Mezzanine::ScriptLuaRuntimeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,0))){
    SWIG_fail_ptr("ScriptLuaRuntimeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaRuntimeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaRuntimeException(void *obj) {
Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaRuntimeException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaRuntimeException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaRuntimeException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaRuntimeException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaRuntimeException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaRuntimeException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaRuntimeException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaRuntimeException_Sf_SwigStatic = {
    "ScriptLuaRuntimeException",
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_methods,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_attributes,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_constants,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaRuntimeException_bases[] = {0,0};
static const char *swig_ScriptLuaRuntimeException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaRuntimeException = { "ScriptLuaRuntimeException", "ScriptLuaRuntimeException", &SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,_proxy__wrap_new_ScriptLuaRuntimeException, swig_delete_ScriptLuaRuntimeException, swig_ScriptLuaRuntimeException_methods, swig_ScriptLuaRuntimeException_attributes, &swig_ScriptLuaRuntimeException_Sf_SwigStatic, swig_ScriptLuaRuntimeException_meta, swig_ScriptLuaRuntimeException_bases, swig_ScriptLuaRuntimeException_base_names };

static int _wrap_new_ScriptLuaErrErrException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaErrErrException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaErrErrException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaErrErrException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaErrErrException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,"Mezzanine::ScriptLuaErrErrException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,0))){
    SWIG_fail_ptr("ScriptLuaErrErrException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaErrErrException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaErrErrException(void *obj) {
Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaErrErrException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaErrErrException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaErrErrException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaErrErrException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaErrErrException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaErrErrException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaErrErrException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaErrErrException_Sf_SwigStatic = {
    "ScriptLuaErrErrException",
    swig_ScriptLuaErrErrException_Sf_SwigStatic_methods,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_attributes,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_constants,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaErrErrException_bases[] = {0,0};
static const char *swig_ScriptLuaErrErrException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaErrErrException = { "ScriptLuaErrErrException", "ScriptLuaErrErrException", &SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,_proxy__wrap_new_ScriptLuaErrErrException, swig_delete_ScriptLuaErrErrException, swig_ScriptLuaErrErrException_methods, swig_ScriptLuaErrErrException_attributes, &swig_ScriptLuaErrErrException_Sf_SwigStatic, swig_ScriptLuaErrErrException_meta, swig_ScriptLuaErrErrException_bases, swig_ScriptLuaErrErrException_base_names };

static int _wrap_new_ParametersException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::GetExceptionCode",1,"Mezzanine::ParametersException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersException,0))){
    SWIG_fail_ptr("ParametersException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersException(void *obj) {
Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersException_Sf_SwigStatic = {
    "ParametersException",
    swig_ParametersException_Sf_SwigStatic_methods,
    swig_ParametersException_Sf_SwigStatic_attributes,
    swig_ParametersException_Sf_SwigStatic_constants,
    swig_ParametersException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersException_bases[] = {0,0};
static const char *swig_ParametersException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ParametersException = { "ParametersException", "ParametersException", &SWIGTYPE_p_Mezzanine__ParametersException,_proxy__wrap_new_ParametersException, swig_delete_ParametersException, swig_ParametersException_methods, swig_ParametersException_attributes, &swig_ParametersException_Sf_SwigStatic, swig_ParametersException_meta, swig_ParametersException_bases, swig_ParametersException_base_names };

static int _wrap_new_ParametersCastException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersCastException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersCastException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersCastException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersCastException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::GetExceptionCode",1,"Mezzanine::ParametersCastException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersCastException,0))){
    SWIG_fail_ptr("ParametersCastException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersCastException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersCastException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersCastException(void *obj) {
Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersCastException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersCastException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersCastException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersCastException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersCastException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersCastException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersCastException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersCastException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersCastException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersCastException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersCastException_Sf_SwigStatic = {
    "ParametersCastException",
    swig_ParametersCastException_Sf_SwigStatic_methods,
    swig_ParametersCastException_Sf_SwigStatic_attributes,
    swig_ParametersCastException_Sf_SwigStatic_constants,
    swig_ParametersCastException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersCastException_bases[] = {0,0};
static const char *swig_ParametersCastException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_ParametersCastException = { "ParametersCastException", "ParametersCastException", &SWIGTYPE_p_Mezzanine__ParametersCastException,_proxy__wrap_new_ParametersCastException, swig_delete_ParametersCastException, swig_ParametersCastException_methods, swig_ParametersCastException_attributes, &swig_ParametersCastException_Sf_SwigStatic, swig_ParametersCastException_meta, swig_ParametersCastException_bases, swig_ParametersCastException_base_names };

static int _wrap_new_ParametersRangeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersRangeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersRangeException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersRangeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersRangeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::GetExceptionCode",1,"Mezzanine::ParametersRangeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersRangeException,0))){
    SWIG_fail_ptr("ParametersRangeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersRangeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersRangeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersRangeException(void *obj) {
Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersRangeException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersRangeException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersRangeException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersRangeException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersRangeException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersRangeException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersRangeException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersRangeException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersRangeException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersRangeException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersRangeException_Sf_SwigStatic = {
    "ParametersRangeException",
    swig_ParametersRangeException_Sf_SwigStatic_methods,
    swig_ParametersRangeException_Sf_SwigStatic_attributes,
    swig_ParametersRangeException_Sf_SwigStatic_constants,
    swig_ParametersRangeException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersRangeException_bases[] = {0,0};
static const char *swig_ParametersRangeException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_ParametersRangeException = { "ParametersRangeException", "ParametersRangeException", &SWIGTYPE_p_Mezzanine__ParametersRangeException,_proxy__wrap_new_ParametersRangeException, swig_delete_ParametersRangeException, swig_ParametersRangeException_methods, swig_ParametersRangeException_attributes, &swig_ParametersRangeException_Sf_SwigStatic, swig_ParametersRangeException_meta, swig_ParametersRangeException_bases, swig_ParametersRangeException_base_names };

static int _wrap_new_ArithmeticException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ArithmeticException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ArithmeticException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ArithmeticException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArithmeticException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::GetExceptionCode",1,"Mezzanine::ArithmeticException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ArithmeticException,0))){
    SWIG_fail_ptr("ArithmeticException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ArithmeticException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ArithmeticException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArithmeticException(void *obj) {
Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ArithmeticException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ArithmeticException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ArithmeticException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArithmeticException_methods[]= {
    { "GetExceptionCode", _wrap_ArithmeticException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ArithmeticException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ArithmeticException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ArithmeticException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ArithmeticException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ArithmeticException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ArithmeticException_Sf_SwigStatic = {
    "ArithmeticException",
    swig_ArithmeticException_Sf_SwigStatic_methods,
    swig_ArithmeticException_Sf_SwigStatic_attributes,
    swig_ArithmeticException_Sf_SwigStatic_constants,
    swig_ArithmeticException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ArithmeticException_bases[] = {0,0};
static const char *swig_ArithmeticException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ArithmeticException = { "ArithmeticException", "ArithmeticException", &SWIGTYPE_p_Mezzanine__ArithmeticException,_proxy__wrap_new_ArithmeticException, swig_delete_ArithmeticException, swig_ArithmeticException_methods, swig_ArithmeticException_attributes, &swig_ArithmeticException_Sf_SwigStatic, swig_ArithmeticException_meta, swig_ArithmeticException_bases, swig_ArithmeticException_base_names };

static int _wrap_new_InvalidVersionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidVersionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidVersionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidVersionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidVersionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::GetExceptionCode",1,"Mezzanine::InvalidVersionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidVersionException,0))){
    SWIG_fail_ptr("InvalidVersionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidVersionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidVersionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidVersionException(void *obj) {
Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidVersionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidVersionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidVersionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidVersionException_methods[]= {
    { "GetExceptionCode", _wrap_InvalidVersionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidVersionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidVersionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidVersionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidVersionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidVersionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidVersionException_Sf_SwigStatic = {
    "InvalidVersionException",
    swig_InvalidVersionException_Sf_SwigStatic_methods,
    swig_InvalidVersionException_Sf_SwigStatic_attributes,
    swig_InvalidVersionException_Sf_SwigStatic_constants,
    swig_InvalidVersionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidVersionException_bases[] = {0,0};
static const char *swig_InvalidVersionException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidVersionException = { "InvalidVersionException", "InvalidVersionException", &SWIGTYPE_p_Mezzanine__InvalidVersionException,_proxy__wrap_new_InvalidVersionException, swig_delete_InvalidVersionException, swig_InvalidVersionException_methods, swig_InvalidVersionException_attributes, &swig_InvalidVersionException_Sf_SwigStatic, swig_InvalidVersionException_meta, swig_InvalidVersionException_bases, swig_InvalidVersionException_base_names };

static int _wrap_new_InvalidStateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidStateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidStateException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidStateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidStateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::GetExceptionCode",1,"Mezzanine::InvalidStateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidStateException,0))){
    SWIG_fail_ptr("InvalidStateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidStateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidStateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidStateException(void *obj) {
Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidStateException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidStateException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidStateException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidStateException_methods[]= {
    { "GetExceptionCode", _wrap_InvalidStateException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidStateException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidStateException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidStateException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidStateException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidStateException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidStateException_Sf_SwigStatic = {
    "InvalidStateException",
    swig_InvalidStateException_Sf_SwigStatic_methods,
    swig_InvalidStateException_Sf_SwigStatic_attributes,
    swig_InvalidStateException_Sf_SwigStatic_constants,
    swig_InvalidStateException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidStateException_bases[] = {0,0};
static const char *swig_InvalidStateException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidStateException = { "InvalidStateException", "InvalidStateException", &SWIGTYPE_p_Mezzanine__InvalidStateException,_proxy__wrap_new_InvalidStateException, swig_delete_InvalidStateException, swig_InvalidStateException_methods, swig_InvalidStateException_attributes, &swig_InvalidStateException_Sf_SwigStatic, swig_InvalidStateException_meta, swig_InvalidStateException_bases, swig_InvalidStateException_base_names };

static int _wrap_new_RenderingAPIException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RenderingAPIException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RenderingAPIException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RenderingAPIException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingAPIException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::GetExceptionCode",1,"Mezzanine::RenderingAPIException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RenderingAPIException,0))){
    SWIG_fail_ptr("RenderingAPIException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RenderingAPIException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RenderingAPIException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderingAPIException(void *obj) {
Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) obj;
delete arg1;
}
static int _proxy__wrap_new_RenderingAPIException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RenderingAPIException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RenderingAPIException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RenderingAPIException_methods[]= {
    { "GetExceptionCode", _wrap_RenderingAPIException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_RenderingAPIException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderingAPIException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderingAPIException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderingAPIException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderingAPIException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderingAPIException_Sf_SwigStatic = {
    "RenderingAPIException",
    swig_RenderingAPIException_Sf_SwigStatic_methods,
    swig_RenderingAPIException_Sf_SwigStatic_attributes,
    swig_RenderingAPIException_Sf_SwigStatic_constants,
    swig_RenderingAPIException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderingAPIException_bases[] = {0,0};
static const char *swig_RenderingAPIException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_RenderingAPIException = { "RenderingAPIException", "RenderingAPIException", &SWIGTYPE_p_Mezzanine__RenderingAPIException,_proxy__wrap_new_RenderingAPIException, swig_delete_RenderingAPIException, swig_RenderingAPIException_methods, swig_RenderingAPIException_attributes, &swig_RenderingAPIException_Sf_SwigStatic, swig_RenderingAPIException_meta, swig_RenderingAPIException_bases, swig_RenderingAPIException_base_names };

static int _wrap_new_RuntimeAssertionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RuntimeAssertionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RuntimeAssertionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RuntimeAssertionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RuntimeAssertionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,"Mezzanine::RuntimeAssertionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,0))){
    SWIG_fail_ptr("RuntimeAssertionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RuntimeAssertionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RuntimeAssertionException(void *obj) {
Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_RuntimeAssertionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RuntimeAssertionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RuntimeAssertionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RuntimeAssertionException_methods[]= {
    { "GetExceptionCode", _wrap_RuntimeAssertionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_RuntimeAssertionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RuntimeAssertionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RuntimeAssertionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RuntimeAssertionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RuntimeAssertionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RuntimeAssertionException_Sf_SwigStatic = {
    "RuntimeAssertionException",
    swig_RuntimeAssertionException_Sf_SwigStatic_methods,
    swig_RuntimeAssertionException_Sf_SwigStatic_attributes,
    swig_RuntimeAssertionException_Sf_SwigStatic_constants,
    swig_RuntimeAssertionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RuntimeAssertionException_bases[] = {0,0};
static const char *swig_RuntimeAssertionException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_RuntimeAssertionException = { "RuntimeAssertionException", "RuntimeAssertionException", &SWIGTYPE_p_Mezzanine__RuntimeAssertionException,_proxy__wrap_new_RuntimeAssertionException, swig_delete_RuntimeAssertionException, swig_RuntimeAssertionException_methods, swig_RuntimeAssertionException_attributes, &swig_RuntimeAssertionException_Sf_SwigStatic, swig_RuntimeAssertionException_meta, swig_RuntimeAssertionException_bases, swig_RuntimeAssertionException_base_names };

static int _wrap_new_InternalException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InternalException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InternalException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InternalException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InternalException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InternalException::GetExceptionCode",1,"Mezzanine::InternalException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InternalException,0))){
    SWIG_fail_ptr("InternalException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InternalException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InternalException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InternalException(void *obj) {
Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InternalException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InternalException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InternalException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InternalException_methods[]= {
    { "GetExceptionCode", _wrap_InternalException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InternalException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InternalException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InternalException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InternalException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InternalException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InternalException_Sf_SwigStatic = {
    "InternalException",
    swig_InternalException_Sf_SwigStatic_methods,
    swig_InternalException_Sf_SwigStatic_attributes,
    swig_InternalException_Sf_SwigStatic_constants,
    swig_InternalException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InternalException_bases[] = {0,0};
static const char *swig_InternalException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InternalException = { "InternalException", "InternalException", &SWIGTYPE_p_Mezzanine__InternalException,_proxy__wrap_new_InternalException, swig_delete_InternalException, swig_InternalException_methods, swig_InternalException_attributes, &swig_InternalException_Sf_SwigStatic, swig_InternalException_meta, swig_InternalException_bases, swig_InternalException_base_names };

static int _wrap_new_NotImplementedException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NotImplementedException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NotImplementedException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NotImplementedException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NotImplementedException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::GetExceptionCode",1,"Mezzanine::NotImplementedException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NotImplementedException,0))){
    SWIG_fail_ptr("NotImplementedException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NotImplementedException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NotImplementedException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NotImplementedException(void *obj) {
Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NotImplementedException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NotImplementedException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NotImplementedException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NotImplementedException_methods[]= {
    { "GetExceptionCode", _wrap_NotImplementedException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NotImplementedException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NotImplementedException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NotImplementedException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NotImplementedException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NotImplementedException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NotImplementedException_Sf_SwigStatic = {
    "NotImplementedException",
    swig_NotImplementedException_Sf_SwigStatic_methods,
    swig_NotImplementedException_Sf_SwigStatic_attributes,
    swig_NotImplementedException_Sf_SwigStatic_constants,
    swig_NotImplementedException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NotImplementedException_bases[] = {0,0};
static const char *swig_NotImplementedException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_NotImplementedException = { "NotImplementedException", "NotImplementedException", &SWIGTYPE_p_Mezzanine__NotImplementedException,_proxy__wrap_new_NotImplementedException, swig_delete_NotImplementedException, swig_NotImplementedException_methods, swig_NotImplementedException_attributes, &swig_NotImplementedException_Sf_SwigStatic, swig_NotImplementedException_meta, swig_NotImplementedException_bases, swig_NotImplementedException_base_names };

static int _wrap_new_InvalidAssignment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidAssignment__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidAssignment__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidAssignment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidAssignment_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::GetExceptionCode",1,"Mezzanine::InvalidAssignment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidAssignment,0))){
    SWIG_fail_ptr("InvalidAssignment_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidAssignment);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidAssignment const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidAssignment(void *obj) {
Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidAssignment(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidAssignment);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidAssignment_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidAssignment_methods[]= {
    { "GetExceptionCode", _wrap_InvalidAssignment_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidAssignment_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidAssignment_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidAssignment_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidAssignment_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidAssignment_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidAssignment_Sf_SwigStatic = {
    "InvalidAssignment",
    swig_InvalidAssignment_Sf_SwigStatic_methods,
    swig_InvalidAssignment_Sf_SwigStatic_attributes,
    swig_InvalidAssignment_Sf_SwigStatic_constants,
    swig_InvalidAssignment_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidAssignment_bases[] = {0,0};
static const char *swig_InvalidAssignment_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidAssignment = { "InvalidAssignment", "InvalidAssignment", &SWIGTYPE_p_Mezzanine__InvalidAssignment,_proxy__wrap_new_InvalidAssignment, swig_delete_InvalidAssignment, swig_InvalidAssignment_methods, swig_InvalidAssignment_attributes, &swig_InvalidAssignment_Sf_SwigStatic, swig_InvalidAssignment_meta, swig_InvalidAssignment_bases, swig_InvalidAssignment_base_names };

static int _wrap_SerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::SerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeSerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::DeSerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DeSerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_DeSerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DeSerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAxisValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAxisValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAxisValue",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->GetAxisValue((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",0,0)
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",3,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Ogre::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::Vector3()\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector3::Vector3(Ogre::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(btVector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_X",0,0)
  result = Mezzanine::Vector3::Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Y",0,0)
  result = Mezzanine::Vector3::Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Z",0,0)
  result = Mezzanine::Vector3::Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_X",0,0)
  result = Mezzanine::Vector3::Neg_Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Z",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UnitOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::StandardAxis arg1 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::UnitOnAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::UnitOnAxis",1,"Mezzanine::StandardAxis");
  arg1 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 1);
  result = Mezzanine::Vector3::UnitOnAxis(arg1);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsStandardUnitAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsStandardUnitAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsStandardUnitAxis",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsStandardUnitAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::StandardAxis)((Mezzanine::Vector3 const *)arg1)->IsStandardUnitAxis();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Ogre::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator ==(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator <=((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator +(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator -(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->CrossProduct((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->DotProduct((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Normalize",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Normalize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetNormal",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::AngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AngleBetween",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::AngleBetween",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AngleBetween",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AngleBetween",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->AngleBetween((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Permute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Permute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Permute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Permute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Permute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::AntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AntiPermute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->AntiPermute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAntiPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetAntiPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetDirection((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Perpendicular",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsPerpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsPerpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsPerpendicular((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Inverse",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Inverse",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Inverse();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Reflect((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Distance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Distance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Distance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Length",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Length",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZeroLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZeroLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZeroLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZeroLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZeroLength();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3_GetRotationToAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Vector3_GetRotationToAxis__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3_GetRotationToAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Zero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Zero",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Zero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::SetValues",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",4,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SetValues",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZero",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Ceil(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Ceil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Ceil((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Floor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Floor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Floor",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Floor",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Floor((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetBulletVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetBulletVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetBulletVector3();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractBulletVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->ExtractBulletVector3((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetOgreVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetOgreVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetOgreVector3();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractOgreVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->ExtractOgreVector3((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Vector3 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetSerializableName",0,0)
  result = Mezzanine::Vector3::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___tostring(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::__str__",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___tostring",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (char *)(arg1)->__str__();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3_attributes[] = {
    { "X", _wrap_Vector3_X_get, _wrap_Vector3_X_set },
    { "Y", _wrap_Vector3_Y_get, _wrap_Vector3_Y_set },
    { "Z", _wrap_Vector3_Z_get, _wrap_Vector3_Z_set },
    {0,0,0}
};
static swig_lua_method swig_Vector3_methods[]= {
    { "GetAxisValue", _wrap_Vector3_GetAxisValue},
    { "IsStandardUnitAxis", _wrap_Vector3_IsStandardUnitAxis},
    { "__unm", _wrap_Vector3___unm},
    { "__eq", _wrap_Vector3___eq},
    { "__le", _wrap_Vector3___le},
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "CrossProduct", _wrap_Vector3_CrossProduct},
    { "DotProduct", _wrap_Vector3_DotProduct},
    { "Normalize", _wrap_Vector3_Normalize},
    { "GetNormal", _wrap_Vector3_GetNormal},
    { "AngleBetween", _wrap_Vector3_AngleBetween},
    { "Permute", _wrap_Vector3_Permute},
    { "GetPermute", _wrap_Vector3_GetPermute},
    { "AntiPermute", _wrap_Vector3_AntiPermute},
    { "GetAntiPermute", _wrap_Vector3_GetAntiPermute},
    { "GetDirection", _wrap_Vector3_GetDirection},
    { "Perpendicular", _wrap_Vector3_Perpendicular},
    { "IsPerpendicular", _wrap_Vector3_IsPerpendicular},
    { "Inverse", _wrap_Vector3_Inverse},
    { "Reflect", _wrap_Vector3_Reflect},
    { "Distance", _wrap_Vector3_Distance},
    { "SquaredDistance", _wrap_Vector3_SquaredDistance},
    { "Length", _wrap_Vector3_Length},
    { "SquaredLength", _wrap_Vector3_SquaredLength},
    { "IsZeroLength", _wrap_Vector3_IsZeroLength},
    { "GetRotationToAxis", _wrap_Vector3_GetRotationToAxis},
    { "Zero", _wrap_Vector3_Zero},
    { "SetValues", _wrap_Vector3_SetValues},
    { "IsZero", _wrap_Vector3_IsZero},
    { "Ceil", _wrap_Vector3_Ceil},
    { "Floor", _wrap_Vector3_Floor},
    { "GetBulletVector3", _wrap_Vector3_GetBulletVector3},
    { "ExtractBulletVector3", _wrap_Vector3_ExtractBulletVector3},
    { "GetOgreVector3", _wrap_Vector3_GetOgreVector3},
    { "ExtractOgreVector3", _wrap_Vector3_ExtractOgreVector3},
    { "ProtoSerialize", _wrap_Vector3_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Vector3_ProtoDeSerialize},
    { "__tostring", _wrap_Vector3___tostring},
    {0,0}
};
static swig_lua_method swig_Vector3_meta[] = {
    { "__unm", _wrap_Vector3___unm},
    { "__eq", _wrap_Vector3___eq},
    { "__le", _wrap_Vector3___le},
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__tostring", _wrap_Vector3___tostring},
    {0,0}
};

static swig_lua_attribute swig_Vector3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3_Sf_SwigStatic_methods[]= {
    { "Unit_X", _wrap_Vector3_Unit_X},
    { "Unit_Y", _wrap_Vector3_Unit_Y},
    { "Unit_Z", _wrap_Vector3_Unit_Z},
    { "Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "GetSerializableName", _wrap_Vector3_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Vector3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3_Sf_SwigStatic = {
    "Vector3",
    swig_Vector3_Sf_SwigStatic_methods,
    swig_Vector3_Sf_SwigStatic_attributes,
    swig_Vector3_Sf_SwigStatic_constants,
    swig_Vector3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3_bases[] = {0};
static const char *swig_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3 = { "Vector3", "Vector3", &SWIGTYPE_p_Mezzanine__Vector3,_proxy__wrap_new_Vector3, swig_delete_Vector3, swig_Vector3_methods, swig_Vector3_attributes, &swig_Vector3_Sf_SwigStatic, swig_Vector3_meta, swig_Vector3_bases, swig_Vector3_base_names };

static int _wrap_Vector3LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",1,"Mezzanine::Vector3LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3LengthCompare const *)arg1)->operator ()((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::Vector3LengthCompare",0,0)
  result = (Mezzanine::Vector3LengthCompare *)new Mezzanine::Vector3LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3LengthCompare(void *obj) {
Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3LengthCompare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3LengthCompare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector3LengthCompare_methods[]= {
    { "__call", _wrap_Vector3LengthCompare___call},
    {0,0}
};
static swig_lua_method swig_Vector3LengthCompare_meta[] = {
    { "__call", _wrap_Vector3LengthCompare___call},
    {0,0}
};

static swig_lua_attribute swig_Vector3LengthCompare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3LengthCompare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3LengthCompare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3LengthCompare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3LengthCompare_Sf_SwigStatic = {
    "Vector3LengthCompare",
    swig_Vector3LengthCompare_Sf_SwigStatic_methods,
    swig_Vector3LengthCompare_Sf_SwigStatic_attributes,
    swig_Vector3LengthCompare_Sf_SwigStatic_constants,
    swig_Vector3LengthCompare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3LengthCompare_bases[] = {0};
static const char *swig_Vector3LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3LengthCompare = { "Vector3LengthCompare", "Vector3LengthCompare", &SWIGTYPE_p_Mezzanine__Vector3LengthCompare,_proxy__wrap_new_Vector3LengthCompare, swig_delete_Vector3LengthCompare, swig_Vector3LengthCompare_methods, swig_Vector3LengthCompare_attributes, &swig_Vector3LengthCompare_Sf_SwigStatic, swig_Vector3LengthCompare_meta, swig_Vector3LengthCompare_bases, swig_Vector3LengthCompare_base_names };

static int _wrap___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator +(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator +(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator -(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator -(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator *(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator *(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator /(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator /(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::X",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_X_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::X",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_X_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Y",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Y_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Y",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Y_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Z",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Z_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Z",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Z_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_W_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::W",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::W",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_W_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_W_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::W",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_W_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",0,0)
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",4,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Matrix3x3 *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Matrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Matrix3x3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Matrix3x3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Matrix3x3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((btQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Ogre::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Matrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::Quaternion()\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Real const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Matrix3x3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(btQuaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Ogre::Quaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetIdentity",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetIdentity",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real *arg5 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  Mezzanine::Real temp5 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetValues",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",4,"Mezzanine::Real const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",5,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetValues",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  temp5=(Mezzanine::Real)lua_tonumber(L,5); arg5=&temp5;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4,(Mezzanine::Real const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxisAngle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxisAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",2,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisAngle",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisAngle",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxisAngle((Mezzanine::Real const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromMatrix3x3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Matrix3x3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromMatrix3x3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromMatrix3x3",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromMatrix3x3",2,"Mezzanine::Matrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromMatrix3x3",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Matrix3x3,0))){
    SWIG_fail_ptr("Quaternion_SetFromMatrix3x3",2,SWIGTYPE_p_Mezzanine__Matrix3x3);
  }
  
  (arg1)->SetFromMatrix3x3((Mezzanine::Matrix3x3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxes((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxisToZ(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxisToZ",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxisToZ((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ConvertToAngleAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ConvertToAngleAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",2,"Mezzanine::Real &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",3,"Mezzanine::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  ((Mezzanine::Quaternion const *)arg1)->ConvertToAngleAxis(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::DotProduct",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::DotProduct",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_DotProduct",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_DotProduct",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->DotProduct((Mezzanine::Quaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Length",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Length",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_LengthSqrd(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::LengthSqrd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::LengthSqrd",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_LengthSqrd",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->LengthSqrd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Normalize",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Normalize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetNormalizedCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetNormalizedCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetNormalizedCopy",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetNormalizedCopy",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetNormalizedCopy();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetInverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetInverse",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetInverse",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetInverse();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Boole arg2 ;
  btQuaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetBulletQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",1,"Mezzanine::Quaternion const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion(arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetBulletQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Quaternion_GetBulletQuaternion__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_GetBulletQuaternion__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_GetBulletQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::GetBulletQuaternion(Mezzanine::Boole) const\n"
    "    Mezzanine::Quaternion::GetBulletQuaternion() const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_ExtractBulletQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ExtractBulletQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractBulletQuaternion",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractBulletQuaternion",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractBulletQuaternion",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->ExtractBulletQuaternion((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Boole arg2 ;
  Ogre::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetOgreQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",1,"Mezzanine::Quaternion const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion(arg2);
  {
    Ogre::Quaternion * resultptr = new Ogre::Quaternion((const Ogre::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetOgreQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion();
  {
    Ogre::Quaternion * resultptr = new Ogre::Quaternion((const Ogre::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Quaternion_GetOgreQuaternion__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_GetOgreQuaternion__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_GetOgreQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::GetOgreQuaternion(Mezzanine::Boole) const\n"
    "    Mezzanine::Quaternion::GetOgreQuaternion() const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_ExtractOgreQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ExtractOgreQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractOgreQuaternion",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractOgreQuaternion",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractOgreQuaternion",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->ExtractOgreQuaternion((Ogre::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___div(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator /",1,"Mezzanine::Quaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___div",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator +(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator +(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator +(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator -(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator -(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator -(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(btQuaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((Mezzanine::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((Ogre::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((btQuaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator ==(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator ==(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator ==(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator <=",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator <=",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___le",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___le",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator <=((Mezzanine::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoSerialize",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Quaternion_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Quaternion const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoDeSerialize",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Quaternion_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetSerializableName",0,0)
  result = Mezzanine::Quaternion::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quaternion_attributes[] = {
    { "X", _wrap_Quaternion_X_get, _wrap_Quaternion_X_set },
    { "Y", _wrap_Quaternion_Y_get, _wrap_Quaternion_Y_set },
    { "Z", _wrap_Quaternion_Z_get, _wrap_Quaternion_Z_set },
    { "W", _wrap_Quaternion_W_get, _wrap_Quaternion_W_set },
    {0,0,0}
};
static swig_lua_method swig_Quaternion_methods[]= {
    { "SetIdentity", _wrap_Quaternion_SetIdentity},
    { "SetValues", _wrap_Quaternion_SetValues},
    { "SetFromAxisAngle", _wrap_Quaternion_SetFromAxisAngle},
    { "SetFromMatrix3x3", _wrap_Quaternion_SetFromMatrix3x3},
    { "SetFromAxes", _wrap_Quaternion_SetFromAxes},
    { "SetFromAxisToZ", _wrap_Quaternion_SetFromAxisToZ},
    { "ConvertToAngleAxis", _wrap_Quaternion_ConvertToAngleAxis},
    { "DotProduct", _wrap_Quaternion_DotProduct},
    { "Length", _wrap_Quaternion_Length},
    { "LengthSqrd", _wrap_Quaternion_LengthSqrd},
    { "Normalize", _wrap_Quaternion_Normalize},
    { "GetNormalizedCopy", _wrap_Quaternion_GetNormalizedCopy},
    { "GetInverse", _wrap_Quaternion_GetInverse},
    { "GetBulletQuaternion", _wrap_Quaternion_GetBulletQuaternion},
    { "ExtractBulletQuaternion", _wrap_Quaternion_ExtractBulletQuaternion},
    { "GetOgreQuaternion", _wrap_Quaternion_GetOgreQuaternion},
    { "ExtractOgreQuaternion", _wrap_Quaternion_ExtractOgreQuaternion},
    { "__div", _wrap_Quaternion___div},
    { "__add", _wrap_Quaternion___add},
    { "__sub", _wrap_Quaternion___sub},
    { "__mul", _wrap_Quaternion___mul},
    { "__eq", _wrap_Quaternion___eq},
    { "__le", _wrap_Quaternion___le},
    { "ProtoSerialize", _wrap_Quaternion_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Quaternion_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_Quaternion_meta[] = {
    { "__div", _wrap_Quaternion___div},
    { "__add", _wrap_Quaternion___add},
    { "__sub", _wrap_Quaternion___sub},
    { "__mul", _wrap_Quaternion___mul},
    { "__eq", _wrap_Quaternion___eq},
    { "__le", _wrap_Quaternion___le},
    {0,0}
};

static swig_lua_attribute swig_Quaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quaternion_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Quaternion_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Quaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quaternion_Sf_SwigStatic = {
    "Quaternion",
    swig_Quaternion_Sf_SwigStatic_methods,
    swig_Quaternion_Sf_SwigStatic_attributes,
    swig_Quaternion_Sf_SwigStatic_constants,
    swig_Quaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quaternion_bases[] = {0};
static const char *swig_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Quaternion = { "Quaternion", "Quaternion", &SWIGTYPE_p_Mezzanine__Quaternion,_proxy__wrap_new_Quaternion, swig_delete_Quaternion, swig_Quaternion_methods, swig_Quaternion_attributes, &swig_Quaternion_Sf_SwigStatic, swig_Quaternion_meta, swig_Quaternion_bases, swig_Quaternion_base_names };

static int _wrap_TransformableObject_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetLocation",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableObject_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::TransformableObject::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetOrientation",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetScale",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Yaw",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Pitch",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Roll",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableObject_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::TransformableObject::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_ConvertLocalToGlobal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::ConvertLocalToGlobal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::TransformableObject::ConvertLocalToGlobal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_ConvertGlobalToLocal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::ConvertGlobalToLocal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::TransformableObject::ConvertGlobalToLocal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransformableObject(void *obj) {
Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_TransformableObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransformableObject_methods[]= {
    { "SetLocation", _wrap_TransformableObject_SetLocation},
    { "GetLocation", _wrap_TransformableObject_GetLocation},
    { "SetOrientation", _wrap_TransformableObject_SetOrientation},
    { "GetOrientation", _wrap_TransformableObject_GetOrientation},
    { "SetScale", _wrap_TransformableObject_SetScale},
    { "GetScale", _wrap_TransformableObject_GetScale},
    { "Translate", _wrap_TransformableObject_Translate},
    { "Yaw", _wrap_TransformableObject_Yaw},
    { "Pitch", _wrap_TransformableObject_Pitch},
    { "Roll", _wrap_TransformableObject_Roll},
    { "Rotate", _wrap_TransformableObject_Rotate},
    { "Scale", _wrap_TransformableObject_Scale},
    { "ConvertLocalToGlobal", _wrap_TransformableObject_ConvertLocalToGlobal},
    { "ConvertGlobalToLocal", _wrap_TransformableObject_ConvertGlobalToLocal},
    {0,0}
};
static swig_lua_method swig_TransformableObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransformableObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransformableObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransformableObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransformableObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransformableObject_Sf_SwigStatic = {
    "TransformableObject",
    swig_TransformableObject_Sf_SwigStatic_methods,
    swig_TransformableObject_Sf_SwigStatic_attributes,
    swig_TransformableObject_Sf_SwigStatic_constants,
    swig_TransformableObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransformableObject_bases[] = {0};
static const char *swig_TransformableObject_base_names[] = {0};
static swig_lua_class _wrap_class_TransformableObject = { "TransformableObject", "TransformableObject", &SWIGTYPE_p_Mezzanine__TransformableObject,0, swig_delete_TransformableObject, swig_TransformableObject_methods, swig_TransformableObject_attributes, &swig_TransformableObject_Sf_SwigStatic, swig_TransformableObject_meta, swig_TransformableObject_bases, swig_TransformableObject_base_names };

static int _wrap_TransformableChildObject_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetLocation",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableChildObject_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::TransformableChildObject::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetOrientation",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetScale",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::TransformSpace arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",5,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 5);
  (arg1)->Translate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Translate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Translate__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Translate__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableChildObject_Translate__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Vector3 const &,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Yaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Yaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Yaw(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Yaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Yaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Yaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Yaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Yaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Yaw(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Yaw(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Pitch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Pitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Pitch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Pitch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Pitch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Pitch__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Pitch__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Pitch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Pitch(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Pitch(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Roll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Roll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Roll(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Roll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Roll(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Roll__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Roll__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Roll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Roll(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Roll(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::TransformSpace arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",4,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 4);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Quaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Rotate__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Rotate__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Rotate__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Rotate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Quaternion const &,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static void swig_delete_TransformableChildObject(void *obj) {
Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_TransformableChildObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransformableChildObject_methods[]= {
    { "SetLocation", _wrap_TransformableChildObject_SetLocation},
    { "GetLocation", _wrap_TransformableChildObject_GetLocation},
    { "SetOrientation", _wrap_TransformableChildObject_SetOrientation},
    { "GetOrientation", _wrap_TransformableChildObject_GetOrientation},
    { "SetScale", _wrap_TransformableChildObject_SetScale},
    { "GetScale", _wrap_TransformableChildObject_GetScale},
    { "Translate", _wrap_TransformableChildObject_Translate},
    { "Yaw", _wrap_TransformableChildObject_Yaw},
    { "Pitch", _wrap_TransformableChildObject_Pitch},
    { "Roll", _wrap_TransformableChildObject_Roll},
    { "Rotate", _wrap_TransformableChildObject_Rotate},
    { "Scale", _wrap_TransformableChildObject_Scale},
    {0,0}
};
static swig_lua_method swig_TransformableChildObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransformableChildObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransformableChildObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransformableChildObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransformableChildObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransformableChildObject_Sf_SwigStatic = {
    "TransformableChildObject",
    swig_TransformableChildObject_Sf_SwigStatic_methods,
    swig_TransformableChildObject_Sf_SwigStatic_attributes,
    swig_TransformableChildObject_Sf_SwigStatic_constants,
    swig_TransformableChildObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransformableChildObject_bases[] = {0};
static const char *swig_TransformableChildObject_base_names[] = {0};
static swig_lua_class _wrap_class_TransformableChildObject = { "TransformableChildObject", "TransformableChildObject", &SWIGTYPE_p_Mezzanine__TransformableChildObject,0, swig_delete_TransformableChildObject, swig_TransformableChildObject_methods, swig_TransformableChildObject_attributes, &swig_TransformableChildObject_Sf_SwigStatic, swig_TransformableChildObject_meta, swig_TransformableChildObject_bases, swig_TransformableChildObject_base_names };

static int _wrap_WorldProxy_GetProxyType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::ProxyType result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetProxyType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetProxyType",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetProxyType",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::ProxyType)((Mezzanine::WorldProxy const *)arg1)->GetProxyType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::AddToWorld",1,"Mezzanine::WorldProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_AddToWorld",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::RemoveFromWorld",1,"Mezzanine::WorldProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_IsInWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::IsInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::IsInWorld",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_IsInWorld",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldProxy const *)arg1)->IsInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetParentObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::WorldObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetParentObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetParentObject",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetParentObject",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::WorldObject *)((Mezzanine::WorldProxy const *)arg1)->GetParentObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetProxyID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetProxyID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetProxyID",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetProxyID",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::WorldProxy const *)arg1)->GetProxyID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetCreator(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetCreator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetCreator",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetCreator",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::WorldManager *)((Mezzanine::WorldProxy const *)arg1)->GetCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetLocation",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetLocation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("WorldProxy_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_WorldProxy_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::WorldProxy::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetOrientation",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetOrientation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetScale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetScale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetScale",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetScale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Translate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Translate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Yaw",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Yaw",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Pitch",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Pitch",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Roll",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Roll",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WorldProxy_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::WorldProxy::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Scale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Scale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerialize",1,"Mezzanine::WorldProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::WorldProxy const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerializeProperties",1,"Mezzanine::WorldProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::WorldProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerialize",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerializeProperties",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetDerivedSerializableName",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetSerializableName",0,0)
  result = Mezzanine::WorldProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy__Bind(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::WorldObject *arg2 = (Mezzanine::WorldObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::_Bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::_Bind",1,"Mezzanine::WorldProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::_Bind",2,"Mezzanine::WorldObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy__Bind",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldProxy__Bind",2,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  (arg1)->_Bind(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldProxy(void *obj) {
Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldProxy_methods[]= {
    { "GetProxyType", _wrap_WorldProxy_GetProxyType},
    { "AddToWorld", _wrap_WorldProxy_AddToWorld},
    { "RemoveFromWorld", _wrap_WorldProxy_RemoveFromWorld},
    { "IsInWorld", _wrap_WorldProxy_IsInWorld},
    { "GetParentObject", _wrap_WorldProxy_GetParentObject},
    { "GetProxyID", _wrap_WorldProxy_GetProxyID},
    { "GetCreator", _wrap_WorldProxy_GetCreator},
    { "SetLocation", _wrap_WorldProxy_SetLocation},
    { "GetLocation", _wrap_WorldProxy_GetLocation},
    { "SetOrientation", _wrap_WorldProxy_SetOrientation},
    { "GetOrientation", _wrap_WorldProxy_GetOrientation},
    { "SetScale", _wrap_WorldProxy_SetScale},
    { "GetScale", _wrap_WorldProxy_GetScale},
    { "Translate", _wrap_WorldProxy_Translate},
    { "Yaw", _wrap_WorldProxy_Yaw},
    { "Pitch", _wrap_WorldProxy_Pitch},
    { "Roll", _wrap_WorldProxy_Roll},
    { "Rotate", _wrap_WorldProxy_Rotate},
    { "Scale", _wrap_WorldProxy_Scale},
    { "ProtoSerialize", _wrap_WorldProxy_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_WorldProxy_ProtoSerializeProperties},
    { "ProtoDeSerialize", _wrap_WorldProxy_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_WorldProxy_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_WorldProxy_GetDerivedSerializableName},
    { "_Bind", _wrap_WorldProxy__Bind},
    {0,0}
};
static swig_lua_method swig_WorldProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_WorldProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_WorldProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldProxy_Sf_SwigStatic = {
    "WorldProxy",
    swig_WorldProxy_Sf_SwigStatic_methods,
    swig_WorldProxy_Sf_SwigStatic_attributes,
    swig_WorldProxy_Sf_SwigStatic_constants,
    swig_WorldProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldProxy_bases[] = {0,0};
static const char *swig_WorldProxy_base_names[] = {"Mezzanine::TransformableObject *",0};
static swig_lua_class _wrap_class_WorldProxy = { "WorldProxy", "WorldProxy", &SWIGTYPE_p_Mezzanine__WorldProxy,0, swig_delete_WorldProxy, swig_WorldProxy_methods, swig_WorldProxy_attributes, &swig_WorldProxy_Sf_SwigStatic, swig_WorldProxy_meta, swig_WorldProxy_bases, swig_WorldProxy_base_names };

static int _wrap_CollidableProxy_GetAABB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  AxisAlignedBox result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetAABB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetAABB",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetAABB",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = ((Mezzanine::Physics::CollidableProxy const *)arg1)->GetAABB();
  {
    AxisAlignedBox * resultptr = new AxisAlignedBox((const AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::AddToWorld",1,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_AddToWorld",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::RemoveFromWorld",1,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_IsInWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::IsInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsInWorld",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_IsInWorld",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->IsInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetCreator(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetCreator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetCreator",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetCreator",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::WorldManager *)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetCollisionGroupAndMask(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Int16 arg2 ;
  Mezzanine::Int16 arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetCollisionGroupAndMask",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionGroupAndMask",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionGroupAndMask",2,"Mezzanine::Int16 const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionGroupAndMask",3,"Mezzanine::Int16 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionGroupAndMask",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Int16 const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Int16 const)lua_tonumber(L, 3);
  (arg1)->SetCollisionGroupAndMask(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetCollisionGroup(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Int16 arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetCollisionGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionGroup",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionGroup",2,"Mezzanine::Int16 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionGroup",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Int16 const)lua_tonumber(L, 2);
  (arg1)->SetCollisionGroup(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetCollisionMask(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Int16 arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetCollisionMask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionMask",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionMask",2,"Mezzanine::Int16 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionMask",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Int16 const)lua_tonumber(L, 2);
  (arg1)->SetCollisionMask(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetCollisionGroup(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Int16 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetCollisionGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetCollisionGroup",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetCollisionGroup",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Int16)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetCollisionGroup();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetCollisionMask(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Int16 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetCollisionMask",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetCollisionMask",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetCollisionMask",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Int16)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetCollisionMask();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionShape",1,"Mezzanine::Physics::CollidableProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionShape",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->SetCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetCollisionShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetCollisionShape",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetCollisionShape",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Physics::CollisionShape *)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetCollisionShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetCollisionResponse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetCollisionResponse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionResponse",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionResponse",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionResponse",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetCollisionResponse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetCollisionResponse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetCollisionResponse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetCollisionResponse",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetCollisionResponse",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetCollisionResponse();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetCollisionFlags(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetCollisionFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionFlags",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetCollisionFlags",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetCollisionFlags",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->SetCollisionFlags(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetCollisionFlags(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetCollisionFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetCollisionFlags",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetCollisionFlags",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetCollisionFlags();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetKinematic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetKinematic",1,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetKinematic",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->SetKinematic();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetStatic",1,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetStatic",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->SetStatic();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_IsKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::IsKinematic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsKinematic",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_IsKinematic",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->IsKinematic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_IsStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::IsStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsStatic",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_IsStatic",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->IsStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_IsStaticOrKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::IsStaticOrKinematic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsStaticOrKinematic",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_IsStaticOrKinematic",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->IsStaticOrKinematic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetFriction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetFriction",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetFriction",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetFriction",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetFriction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetFriction",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetFriction",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetFriction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetRollingFriction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetRollingFriction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetRollingFriction",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetRollingFriction",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetRollingFriction",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRollingFriction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetRollingFriction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetRollingFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetRollingFriction",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetRollingFriction",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetRollingFriction();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetAnisotropicFriction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetAnisotropicFriction",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetAnisotropicFriction",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetAnisotropicFriction",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetAnisotropicFriction",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetAnisotropicFriction",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollidableProxy_SetAnisotropicFriction",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  (arg1)->SetAnisotropicFriction((Mezzanine::Physics::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetAnisotropicFrictionMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::AnisotropicFrictionFlags result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetAnisotropicFrictionMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetAnisotropicFrictionMode",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetAnisotropicFrictionMode",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Physics::AnisotropicFrictionFlags)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetAnisotropicFrictionMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_IsAnisotropicFrictionModeSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::IsAnisotropicFrictionModeSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsAnisotropicFrictionModeSet",1,"Mezzanine::Physics::CollidableProxy const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsAnisotropicFrictionModeSet",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_IsAnisotropicFrictionModeSet",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->IsAnisotropicFrictionModeSet(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetAnisotropicFriction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetAnisotropicFriction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetAnisotropicFriction",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetAnisotropicFriction",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = ((Mezzanine::Physics::CollidableProxy const *)arg1)->GetAnisotropicFriction();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetRestitution",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetRestitution",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetRestitution",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetRestitution((Mezzanine::Real const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetRestitution",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetRestitution",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetRestitution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetActivationState__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::ActivationState arg2 ;
  Mezzanine::Boole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetActivationState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetActivationState",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetActivationState",2,"Mezzanine::Physics::ActivationState const");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetActivationState",3,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetActivationState",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Physics::ActivationState const)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetActivationState(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetActivationState__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::ActivationState arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetActivationState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetActivationState",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetActivationState",2,"Mezzanine::Physics::ActivationState const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetActivationState",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Physics::ActivationState const)(int)lua_tonumber(L, 2);
  (arg1)->SetActivationState(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetActivationState(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CollidableProxy_SetActivationState__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_CollidableProxy_SetActivationState__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_SetActivationState'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::SetActivationState(Mezzanine::Physics::ActivationState const,Mezzanine::Boole)\n"
    "    Mezzanine::Physics::CollidableProxy::SetActivationState(Mezzanine::Physics::ActivationState const)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_GetActivationState(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::ActivationState result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetActivationState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetActivationState",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetActivationState",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Physics::ActivationState)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetActivationState();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_IsActive(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::IsActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::IsActive",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_IsActive",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::CollidableProxy const *)arg1)->IsActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetDeactivationTime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetDeactivationTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetDeactivationTime",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetDeactivationTime",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetDeactivationTime",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDeactivationTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetDeactivationTime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetDeactivationTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetDeactivationTime",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetDeactivationTime",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CollidableProxy const *)arg1)->GetDeactivationTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetLocation",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetLocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollidableProxy_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetLocation",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollidableProxy_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollidableProxy_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::SetLocation(Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CollidableProxy::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetLocation",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetLocation",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = ((Mezzanine::Physics::CollidableProxy const *)arg1)->GetLocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("CollidableProxy_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollidableProxy_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_CollidableProxy_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Physics::CollidableProxy::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetOrientation",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetOrientation",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = ((Mezzanine::Physics::CollidableProxy const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetScale",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetScale",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetScale",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollidableProxy_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetScale",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_SetScale",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollidableProxy_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollidableProxy_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::SetScale(Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CollidableProxy::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetScale",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetScale",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = ((Mezzanine::Physics::CollidableProxy const *)arg1)->GetScale();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Translate",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Translate",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Translate",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollidableProxy_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Translate",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Translate",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollidableProxy_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollidableProxy_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::Translate(Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CollidableProxy::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Yaw",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Yaw",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Pitch",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Pitch",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Roll",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Roll",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Rotate",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Rotate",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Rotate",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollidableProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Physics::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Rotate",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Rotate",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("CollidableProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollidableProxy_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_CollidableProxy_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::Rotate(Mezzanine::Physics::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::CollidableProxy::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Scale",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Scale",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Scale",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CollidableProxy_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Scale",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_Scale",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CollidableProxy_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_CollidableProxy_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CollidableProxy_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CollidableProxy::Scale(Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CollidableProxy::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_CollidableProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoSerializeProperties",1,"Mezzanine::Physics::CollidableProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::CollidableProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_ProtoSerializeShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::ProtoSerializeShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoSerializeShape",1,"Mezzanine::Physics::CollidableProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoSerializeShape",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoSerializeShape",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoSerializeShape",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::CollidableProxy const *)arg1)->ProtoSerializeShape(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoDeSerializeProperties",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_ProtoDeSerializeShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::ProtoDeSerializeShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoDeSerializeShape",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::ProtoDeSerializeShape",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoDeSerializeShape",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CollidableProxy_ProtoDeSerializeShape",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeShape((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::GetDerivedSerializableName",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = ((Mezzanine::Physics::CollidableProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::GetSerializableName",0,0)
  result = Mezzanine::Physics::CollidableProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy__GetBroadphaseUniqueID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::_GetBroadphaseUniqueID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::_GetBroadphaseUniqueID",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy__GetBroadphaseUniqueID",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Integer)((Mezzanine::Physics::CollidableProxy const *)arg1)->_GetBroadphaseUniqueID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy__SetContactProcessingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::_SetContactProcessingThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::_SetContactProcessingThreshold",1,"Mezzanine::Physics::CollidableProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::_SetContactProcessingThreshold",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy__SetContactProcessingThreshold",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->_SetContactProcessingThreshold(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy__GetContactProcessingThreshold(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::_GetContactProcessingThreshold",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::_GetContactProcessingThreshold",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy__GetContactProcessingThreshold",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CollidableProxy const *)arg1)->_GetContactProcessingThreshold();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollidableProxy__GetBasePhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CollidableProxy::_GetBasePhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CollidableProxy::_GetBasePhysicsObject",1,"Mezzanine::Physics::CollidableProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("CollidableProxy__GetBasePhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (btCollisionObject *)((Mezzanine::Physics::CollidableProxy const *)arg1)->_GetBasePhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollidableProxy(void *obj) {
Mezzanine::Physics::CollidableProxy *arg1 = (Mezzanine::Physics::CollidableProxy *) obj;
delete arg1;
}
static swig_lua_attribute swig_CollidableProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CollidableProxy_methods[]= {
    { "GetAABB", _wrap_CollidableProxy_GetAABB},
    { "AddToWorld", _wrap_CollidableProxy_AddToWorld},
    { "RemoveFromWorld", _wrap_CollidableProxy_RemoveFromWorld},
    { "IsInWorld", _wrap_CollidableProxy_IsInWorld},
    { "GetCreator", _wrap_CollidableProxy_GetCreator},
    { "SetCollisionGroupAndMask", _wrap_CollidableProxy_SetCollisionGroupAndMask},
    { "SetCollisionGroup", _wrap_CollidableProxy_SetCollisionGroup},
    { "SetCollisionMask", _wrap_CollidableProxy_SetCollisionMask},
    { "GetCollisionGroup", _wrap_CollidableProxy_GetCollisionGroup},
    { "GetCollisionMask", _wrap_CollidableProxy_GetCollisionMask},
    { "SetCollisionShape", _wrap_CollidableProxy_SetCollisionShape},
    { "GetCollisionShape", _wrap_CollidableProxy_GetCollisionShape},
    { "SetCollisionResponse", _wrap_CollidableProxy_SetCollisionResponse},
    { "GetCollisionResponse", _wrap_CollidableProxy_GetCollisionResponse},
    { "SetCollisionFlags", _wrap_CollidableProxy_SetCollisionFlags},
    { "GetCollisionFlags", _wrap_CollidableProxy_GetCollisionFlags},
    { "SetKinematic", _wrap_CollidableProxy_SetKinematic},
    { "SetStatic", _wrap_CollidableProxy_SetStatic},
    { "IsKinematic", _wrap_CollidableProxy_IsKinematic},
    { "IsStatic", _wrap_CollidableProxy_IsStatic},
    { "IsStaticOrKinematic", _wrap_CollidableProxy_IsStaticOrKinematic},
    { "SetFriction", _wrap_CollidableProxy_SetFriction},
    { "GetFriction", _wrap_CollidableProxy_GetFriction},
    { "SetRollingFriction", _wrap_CollidableProxy_SetRollingFriction},
    { "GetRollingFriction", _wrap_CollidableProxy_GetRollingFriction},
    { "SetAnisotropicFriction", _wrap_CollidableProxy_SetAnisotropicFriction},
    { "GetAnisotropicFrictionMode", _wrap_CollidableProxy_GetAnisotropicFrictionMode},
    { "IsAnisotropicFrictionModeSet", _wrap_CollidableProxy_IsAnisotropicFrictionModeSet},
    { "GetAnisotropicFriction", _wrap_CollidableProxy_GetAnisotropicFriction},
    { "SetRestitution", _wrap_CollidableProxy_SetRestitution},
    { "GetRestitution", _wrap_CollidableProxy_GetRestitution},
    { "SetActivationState", _wrap_CollidableProxy_SetActivationState},
    { "GetActivationState", _wrap_CollidableProxy_GetActivationState},
    { "IsActive", _wrap_CollidableProxy_IsActive},
    { "SetDeactivationTime", _wrap_CollidableProxy_SetDeactivationTime},
    { "GetDeactivationTime", _wrap_CollidableProxy_GetDeactivationTime},
    { "SetLocation", _wrap_CollidableProxy_SetLocation},
    { "GetLocation", _wrap_CollidableProxy_GetLocation},
    { "SetOrientation", _wrap_CollidableProxy_SetOrientation},
    { "GetOrientation", _wrap_CollidableProxy_GetOrientation},
    { "SetScale", _wrap_CollidableProxy_SetScale},
    { "GetScale", _wrap_CollidableProxy_GetScale},
    { "Translate", _wrap_CollidableProxy_Translate},
    { "Yaw", _wrap_CollidableProxy_Yaw},
    { "Pitch", _wrap_CollidableProxy_Pitch},
    { "Roll", _wrap_CollidableProxy_Roll},
    { "Rotate", _wrap_CollidableProxy_Rotate},
    { "Scale", _wrap_CollidableProxy_Scale},
    { "ProtoSerializeProperties", _wrap_CollidableProxy_ProtoSerializeProperties},
    { "ProtoSerializeShape", _wrap_CollidableProxy_ProtoSerializeShape},
    { "ProtoDeSerializeProperties", _wrap_CollidableProxy_ProtoDeSerializeProperties},
    { "ProtoDeSerializeShape", _wrap_CollidableProxy_ProtoDeSerializeShape},
    { "GetDerivedSerializableName", _wrap_CollidableProxy_GetDerivedSerializableName},
    { "_GetBroadphaseUniqueID", _wrap_CollidableProxy__GetBroadphaseUniqueID},
    { "_SetContactProcessingThreshold", _wrap_CollidableProxy__SetContactProcessingThreshold},
    { "_GetContactProcessingThreshold", _wrap_CollidableProxy__GetContactProcessingThreshold},
    { "_GetBasePhysicsObject", _wrap_CollidableProxy__GetBasePhysicsObject},
    {0,0}
};
static swig_lua_method swig_CollidableProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CollidableProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CollidableProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CollidableProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_CollidableProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_CollidableProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CollidableProxy_Sf_SwigStatic = {
    "CollidableProxy",
    swig_CollidableProxy_Sf_SwigStatic_methods,
    swig_CollidableProxy_Sf_SwigStatic_attributes,
    swig_CollidableProxy_Sf_SwigStatic_constants,
    swig_CollidableProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CollidableProxy_bases[] = {0,0};
static const char *swig_CollidableProxy_base_names[] = {"Mezzanine::WorldProxy *",0};
static swig_lua_class _wrap_class_CollidableProxy = { "CollidableProxy", "CollidableProxy", &SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0, swig_delete_CollidableProxy, swig_CollidableProxy_methods, swig_CollidableProxy_attributes, &swig_CollidableProxy_Sf_SwigStatic, swig_CollidableProxy_meta, swig_CollidableProxy_bases, swig_CollidableProxy_base_names };

static int _wrap_new_Collision__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::Collision",0,0)
  result = (Mezzanine::Physics::Collision *)new Mezzanine::Physics::Collision();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Collision,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Collision__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = 0 ;
  Mezzanine::Physics::Collision *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::Collision",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::Collision",1,"Mezzanine::Physics::Collision const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("new_Collision",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  result = (Mezzanine::Physics::Collision *)new Mezzanine::Physics::Collision((Mezzanine::Physics::Collision const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Collision,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Collision(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Collision__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Collision, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Collision__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Collision'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Collision::Collision()\n"
    "    Mezzanine::Physics::Collision::Collision(Mezzanine::Physics::Collision const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Collision_GetProxyA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetProxyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetProxyA",1,"Mezzanine::Physics::Collision const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetProxyA",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  result = (Mezzanine::Physics::CollidableProxy *)((Mezzanine::Physics::Collision const *)arg1)->GetProxyA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetProxyB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetProxyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetProxyB",1,"Mezzanine::Physics::Collision const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetProxyB",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  result = (Mezzanine::Physics::CollidableProxy *)((Mezzanine::Physics::Collision const *)arg1)->GetProxyB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetObjectA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::WorldObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetObjectA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetObjectA",1,"Mezzanine::Physics::Collision const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetObjectA",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  result = (Mezzanine::WorldObject *)((Mezzanine::Physics::Collision const *)arg1)->GetObjectA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetObjectB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::WorldObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetObjectB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetObjectB",1,"Mezzanine::Physics::Collision const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetObjectB",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  result = (Mezzanine::WorldObject *)((Mezzanine::Physics::Collision const *)arg1)->GetObjectB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_PairsMatch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::WorldObject *arg2 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::WorldObject *arg3 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::PairsMatch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::PairsMatch",1,"Mezzanine::Physics::Collision const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::PairsMatch",2,"Mezzanine::WorldObject *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::Collision::PairsMatch",3,"Mezzanine::WorldObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_PairsMatch",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("Collision_PairsMatch",2,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("Collision_PairsMatch",3,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::Collision const *)arg1)->PairsMatch(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_PairsMatch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg3 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::PairsMatch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::PairsMatch",1,"Mezzanine::Physics::Collision const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::PairsMatch",2,"Mezzanine::Physics::CollidableProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::Collision::PairsMatch",3,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_PairsMatch",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("Collision_PairsMatch",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("Collision_PairsMatch",3,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::Collision const *)arg1)->PairsMatch(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_PairsMatch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Collision, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldObject, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldObject, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Collision_PairsMatch__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Collision, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollidableProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Collision_PairsMatch__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Collision_PairsMatch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Collision::PairsMatch(Mezzanine::WorldObject *,Mezzanine::WorldObject *) const\n"
    "    Mezzanine::Physics::Collision::PairsMatch(Mezzanine::Physics::CollidableProxy *,Mezzanine::Physics::CollidableProxy *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Collision_Update(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::Update",1,"Mezzanine::Physics::Collision *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_Update",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  (arg1)->Update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetNumContactPoints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetNumContactPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetNumContactPoints",1,"Mezzanine::Physics::Collision *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetNumContactPoints",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetNumContactPoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetWorldLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetWorldLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetWorldLocation",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetWorldLocation",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetWorldLocation",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->GetWorldLocation((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetLocalALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetLocalALocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetLocalALocation",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetLocalALocation",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetLocalALocation",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->GetLocalALocation((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetLocalBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetLocalBLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetLocalBLocation",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetLocalBLocation",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetLocalBLocation",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->GetLocalBLocation((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetNormal",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetNormal",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetNormal",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->GetNormal((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetAppliedImpulse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetAppliedImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetAppliedImpulse",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetAppliedImpulse",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetAppliedImpulse",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)(arg1)->GetAppliedImpulse((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetDistance",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetDistance",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetDistance",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)(arg1)->GetDistance((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision_GetAge(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::GetAge",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetAge",1,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::GetAge",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision_GetAge",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Whole)(arg1)->GetAge((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision__SetProxyA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::_SetProxyA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::_SetProxyA",1,"Mezzanine::Physics::Collision *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::_SetProxyA",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision__SetProxyA",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("Collision__SetProxyA",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->_SetProxyA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Collision__SetProxyB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Physics::CollidableProxy *arg2 = (Mezzanine::Physics::CollidableProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Collision::_SetProxyB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Collision::_SetProxyB",1,"Mezzanine::Physics::Collision *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Collision::_SetProxyB",2,"Mezzanine::Physics::CollidableProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("Collision__SetProxyB",1,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0))){
    SWIG_fail_ptr("Collision__SetProxyB",2,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy);
  }
  
  (arg1)->_SetProxyB(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Collision(void *obj) {
Mezzanine::Physics::Collision *arg1 = (Mezzanine::Physics::Collision *) obj;
delete arg1;
}
static int _proxy__wrap_new_Collision(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Collision);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Collision_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Collision_methods[]= {
    { "GetProxyA", _wrap_Collision_GetProxyA},
    { "GetProxyB", _wrap_Collision_GetProxyB},
    { "GetObjectA", _wrap_Collision_GetObjectA},
    { "GetObjectB", _wrap_Collision_GetObjectB},
    { "PairsMatch", _wrap_Collision_PairsMatch},
    { "Update", _wrap_Collision_Update},
    { "GetNumContactPoints", _wrap_Collision_GetNumContactPoints},
    { "GetWorldLocation", _wrap_Collision_GetWorldLocation},
    { "GetLocalALocation", _wrap_Collision_GetLocalALocation},
    { "GetLocalBLocation", _wrap_Collision_GetLocalBLocation},
    { "GetNormal", _wrap_Collision_GetNormal},
    { "GetAppliedImpulse", _wrap_Collision_GetAppliedImpulse},
    { "GetDistance", _wrap_Collision_GetDistance},
    { "GetAge", _wrap_Collision_GetAge},
    { "_SetProxyA", _wrap_Collision__SetProxyA},
    { "_SetProxyB", _wrap_Collision__SetProxyB},
    {0,0}
};
static swig_lua_method swig_Collision_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Collision_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Collision_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Collision_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Collision_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Collision_Sf_SwigStatic = {
    "Collision",
    swig_Collision_Sf_SwigStatic_methods,
    swig_Collision_Sf_SwigStatic_attributes,
    swig_Collision_Sf_SwigStatic_constants,
    swig_Collision_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Collision_bases[] = {0};
static const char *swig_Collision_base_names[] = {0};
static swig_lua_class _wrap_class_Collision = { "Collision", "Collision", &SWIGTYPE_p_Mezzanine__Physics__Collision,_proxy__wrap_new_Collision, swig_delete_Collision, swig_Collision_methods, swig_Collision_attributes, &swig_Collision_Sf_SwigStatic, swig_Collision_meta, swig_Collision_bases, swig_Collision_base_names };

static int _wrap_new_CompoundCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CompoundCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Physics::CompoundCollisionShape *)new Mezzanine::Physics::CompoundCollisionShape((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CompoundCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btCompoundShape *arg2 = (btCompoundShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CompoundCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape",2,"btCompoundShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCompoundShape,0))){
    SWIG_fail_ptr("new_CompoundCollisionShape",2,SWIGTYPE_p_btCompoundShape);
  }
  
  result = (Mezzanine::Physics::CompoundCollisionShape *)new Mezzanine::Physics::CompoundCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CompoundCollisionShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CompoundCollisionShape__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCompoundShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CompoundCollisionShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CompoundCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape(Mezzanine::String const &)\n"
    "    Mezzanine::Physics::CompoundCollisionShape::CompoundCollisionShape(Mezzanine::String const &,btCompoundShape *)\n");
  lua_error(L);return 0;
}


static int _wrap_CompoundCollisionShape_AddChildShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",1,"Mezzanine::Physics::CompoundCollisionShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",2,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",3,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",4,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",4,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->AddChildShape(arg2,(Mezzanine::Physics::Vector3 const &)*arg3,(Mezzanine::Quaternion const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_AddChildShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",1,"Mezzanine::Physics::CompoundCollisionShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",2,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",3,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->AddChildShape(arg2,(Mezzanine::Physics::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_AddChildShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Transform *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",1,"Mezzanine::Physics::CompoundCollisionShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",2,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::AddChildShape",3,"Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Transform,0))){
    SWIG_fail_ptr("CompoundCollisionShape_AddChildShape",3,SWIGTYPE_p_Transform);
  }
  
  (arg1)->AddChildShape(arg2,(Transform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_AddChildShape(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CompoundCollisionShape_AddChildShape__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CompoundCollisionShape_AddChildShape__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CompoundCollisionShape_AddChildShape__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CompoundCollisionShape_AddChildShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CompoundCollisionShape::AddChildShape(Mezzanine::Physics::CollisionShape *,Mezzanine::Physics::Vector3 const &,Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Physics::CompoundCollisionShape::AddChildShape(Mezzanine::Physics::CollisionShape *,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CompoundCollisionShape::AddChildShape(Mezzanine::Physics::CollisionShape *,Transform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CompoundCollisionShape_GetNumChildren(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::GetNumChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::GetNumChildren",1,"Mezzanine::Physics::CompoundCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_GetNumChildren",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::Physics::CompoundCollisionShape const *)arg1)->GetNumChildren();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Physics::CollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::GetChild",1,"Mezzanine::Physics::CompoundCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::GetChild",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_GetChild",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::CollisionShape *)((Mezzanine::Physics::CompoundCollisionShape const *)arg1)->GetChild(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_RemoveChildShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape",1,"Mezzanine::Physics::CompoundCollisionShape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_RemoveChildShape",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_RemoveChildShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->RemoveChildShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_RemoveChildShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape",1,"Mezzanine::Physics::CompoundCollisionShape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_RemoveChildShape",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->RemoveChildShape((Mezzanine::Whole const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_RemoveChildShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CompoundCollisionShape_RemoveChildShape__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_CompoundCollisionShape_RemoveChildShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CompoundCollisionShape_RemoveChildShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape(Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::Physics::CompoundCollisionShape::RemoveChildShape(Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_CompoundCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::GetType",1,"Mezzanine::Physics::CompoundCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::CompoundCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_GetBulletCompoundShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  btCompoundShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::GetBulletCompoundShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::GetBulletCompoundShape",1,"Mezzanine::Physics::CompoundCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_GetBulletCompoundShape",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  result = (btCompoundShape *)((Mezzanine::Physics::CompoundCollisionShape const *)arg1)->GetBulletCompoundShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCompoundShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::CompoundCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CompoundCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::CompoundCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::CompoundCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CompoundCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,0))){
    SWIG_fail_ptr("CompoundCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CompoundCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CompoundCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CompoundCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::CompoundCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CompoundCollisionShape(void *obj) {
Mezzanine::Physics::CompoundCollisionShape *arg1 = (Mezzanine::Physics::CompoundCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_CompoundCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CompoundCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CompoundCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CompoundCollisionShape_methods[]= {
    { "AddChildShape", _wrap_CompoundCollisionShape_AddChildShape},
    { "GetNumChildren", _wrap_CompoundCollisionShape_GetNumChildren},
    { "GetChild", _wrap_CompoundCollisionShape_GetChild},
    { "RemoveChildShape", _wrap_CompoundCollisionShape_RemoveChildShape},
    { "GetType", _wrap_CompoundCollisionShape_GetType},
    { "GetBulletCompoundShape", _wrap_CompoundCollisionShape_GetBulletCompoundShape},
    { "ProtoSerialize", _wrap_CompoundCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_CompoundCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_CompoundCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CompoundCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CompoundCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CompoundCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_CompoundCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_CompoundCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CompoundCollisionShape_Sf_SwigStatic = {
    "CompoundCollisionShape",
    swig_CompoundCollisionShape_Sf_SwigStatic_methods,
    swig_CompoundCollisionShape_Sf_SwigStatic_attributes,
    swig_CompoundCollisionShape_Sf_SwigStatic_constants,
    swig_CompoundCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CompoundCollisionShape_bases[] = {0,0};
static const char *swig_CompoundCollisionShape_base_names[] = {"Mezzanine::Physics::CollisionShape *",0};
static swig_lua_class _wrap_class_CompoundCollisionShape = { "CompoundCollisionShape", "CompoundCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__CompoundCollisionShape,_proxy__wrap_new_CompoundCollisionShape, swig_delete_CompoundCollisionShape, swig_CompoundCollisionShape_methods, swig_CompoundCollisionShape_attributes, &swig_CompoundCollisionShape_Sf_SwigStatic, swig_CompoundCollisionShape_meta, swig_CompoundCollisionShape_bases, swig_CompoundCollisionShape_base_names };

static int _wrap_new_ConeCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Physics::ConeCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",3,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",4,"Mezzanine::Physics::Vector3 const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_ConeCollisionShape",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::ConeCollisionShape *)new Mezzanine::Physics::ConeCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Physics::Vector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::StandardAxis arg4 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Physics::ConeCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",4,"Mezzanine::StandardAxis");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  arg4 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 4);
  result = (Mezzanine::Physics::ConeCollisionShape *)new Mezzanine::Physics::ConeCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btConeShape *arg2 = (btConeShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::ConeCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",2,"btConeShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConeShape,0))){
    SWIG_fail_ptr("new_ConeCollisionShape",2,SWIGTYPE_p_btConeShape);
  }
  
  result = (Mezzanine::Physics::ConeCollisionShape *)new Mezzanine::Physics::ConeCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeCollisionShape__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::ConeCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_ConeCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::ConeCollisionShape *)new Mezzanine::Physics::ConeCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeCollisionShape(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ConeCollisionShape__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btConeShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ConeCollisionShape__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_ConeCollisionShape__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ConeCollisionShape__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ConeCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape(Mezzanine::String const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape(Mezzanine::String const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::StandardAxis)\n"
    "    Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape(Mezzanine::String const &,btConeShape *)\n"
    "    Mezzanine::Physics::ConeCollisionShape::ConeCollisionShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_ConeCollisionShape_GetRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetRadius",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetRadius",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetHeight",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetHeight",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetCleanRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetCleanRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetCleanRadius",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetCleanRadius",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetCleanRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetCleanHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetCleanHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetCleanHeight",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetCleanHeight",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetCleanHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetRadiusScaling(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetRadiusScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetRadiusScaling",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetRadiusScaling",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetRadiusScaling();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetHeightScaling(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetHeightScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetHeightScaling",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetHeightScaling",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetHeightScaling();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetUpAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetUpAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetUpAxis",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetUpAxis",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = ((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetUpAxis();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetUpStandardAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetUpStandardAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetUpStandardAxis",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetUpStandardAxis",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::StandardAxis)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetUpStandardAxis();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetType",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetBulletConeShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  btConeShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetBulletConeShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::GetBulletConeShape",1,"Mezzanine::Physics::ConeCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_GetBulletConeShape",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  result = (btConeShape *)((Mezzanine::Physics::ConeCollisionShape const *)arg1)->GetBulletConeShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConeShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::ConeCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ConeCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::ConeCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::ConeCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,0))){
    SWIG_fail_ptr("ConeCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ConeCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::ConeCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConeCollisionShape(void *obj) {
Mezzanine::Physics::ConeCollisionShape *arg1 = (Mezzanine::Physics::ConeCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConeCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConeCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConeCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConeCollisionShape_methods[]= {
    { "GetRadius", _wrap_ConeCollisionShape_GetRadius},
    { "GetHeight", _wrap_ConeCollisionShape_GetHeight},
    { "GetCleanRadius", _wrap_ConeCollisionShape_GetCleanRadius},
    { "GetCleanHeight", _wrap_ConeCollisionShape_GetCleanHeight},
    { "GetRadiusScaling", _wrap_ConeCollisionShape_GetRadiusScaling},
    { "GetHeightScaling", _wrap_ConeCollisionShape_GetHeightScaling},
    { "GetUpAxis", _wrap_ConeCollisionShape_GetUpAxis},
    { "GetUpStandardAxis", _wrap_ConeCollisionShape_GetUpStandardAxis},
    { "GetType", _wrap_ConeCollisionShape_GetType},
    { "GetBulletConeShape", _wrap_ConeCollisionShape_GetBulletConeShape},
    { "ProtoSerialize", _wrap_ConeCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_ConeCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_ConeCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConeCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConeCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConeCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_ConeCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_ConeCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConeCollisionShape_Sf_SwigStatic = {
    "ConeCollisionShape",
    swig_ConeCollisionShape_Sf_SwigStatic_methods,
    swig_ConeCollisionShape_Sf_SwigStatic_attributes,
    swig_ConeCollisionShape_Sf_SwigStatic_constants,
    swig_ConeCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConeCollisionShape_bases[] = {0,0};
static const char *swig_ConeCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_ConeCollisionShape = { "ConeCollisionShape", "ConeCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__ConeCollisionShape,_proxy__wrap_new_ConeCollisionShape, swig_delete_ConeCollisionShape, swig_ConeCollisionShape_methods, swig_ConeCollisionShape_attributes, &swig_ConeCollisionShape_Sf_SwigStatic, swig_ConeCollisionShape_meta, swig_ConeCollisionShape_bases, swig_ConeCollisionShape_base_names };

static int _wrap_Transform_Location_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Location",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Location",1,"Mezzanine::Transform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Transform::Location",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Location_set",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Transform_Location_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Location = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Location_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Location",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Location_get",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Location);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Rotation_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *arg2 = (Mezzanine::Quaternion *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Rotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Rotation",1,"Mezzanine::Transform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Transform::Rotation",2,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Rotation_set",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Transform_Rotation_set",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  if (arg1) (arg1)->Rotation = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Rotation_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Rotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Rotation",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Rotation_get",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Quaternion *)& ((arg1)->Rotation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::Transform",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Transform",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Quaternion const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",0,0)
  result = (Mezzanine::Transform *)new Mezzanine::Transform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_btTransform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((btTransform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Transform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Transform__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Transform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Vector3 const &,Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Transform::Transform()\n"
    "    Mezzanine::Transform::Transform(btTransform const &)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Transform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Transform_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::SetIdentity",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_SetIdentity",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_GetBulletTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("Mezzanine::Transform::GetBulletTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::GetBulletTransform",1,"Mezzanine::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_GetBulletTransform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->GetBulletTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ExtractBulletTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ExtractBulletTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ExtractBulletTransform",1,"Mezzanine::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ExtractBulletTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ExtractBulletTransform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("Transform_ExtractBulletTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->ExtractBulletTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ProtoSerialize",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Transform_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Transform const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ProtoDeSerialize",1,"Mezzanine::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Transform_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Transform::GetSerializableName",0,0)
  result = Mezzanine::Transform::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator -",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator -",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___sub",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___sub",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->operator -((Mezzanine::Transform const &)*arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator +",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator +",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___add",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___add",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->operator +((Mezzanine::Transform const &)*arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___mul(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator *",1,"Mezzanine::Transform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator *",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___mul",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = ((Mezzanine::Transform const *)arg1)->operator *(arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___div(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator /",1,"Mezzanine::Transform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator /",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___div",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = ((Mezzanine::Transform const *)arg1)->operator /(arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator <=",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator <=",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___le",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___le",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Transform const *)arg1)->operator <=((Mezzanine::Transform const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Transform(void *obj) {
Mezzanine::Transform *arg1 = (Mezzanine::Transform *) obj;
delete arg1;
}
static int _proxy__wrap_new_Transform(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Transform);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Transform_attributes[] = {
    { "Location", _wrap_Transform_Location_get, _wrap_Transform_Location_set },
    { "Rotation", _wrap_Transform_Rotation_get, _wrap_Transform_Rotation_set },
    {0,0,0}
};
static swig_lua_method swig_Transform_methods[]= {
    { "SetIdentity", _wrap_Transform_SetIdentity},
    { "GetBulletTransform", _wrap_Transform_GetBulletTransform},
    { "ExtractBulletTransform", _wrap_Transform_ExtractBulletTransform},
    { "ProtoSerialize", _wrap_Transform_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Transform_ProtoDeSerialize},
    { "__sub", _wrap_Transform___sub},
    { "__add", _wrap_Transform___add},
    { "__mul", _wrap_Transform___mul},
    { "__div", _wrap_Transform___div},
    { "__le", _wrap_Transform___le},
    {0,0}
};
static swig_lua_method swig_Transform_meta[] = {
    { "__sub", _wrap_Transform___sub},
    { "__add", _wrap_Transform___add},
    { "__mul", _wrap_Transform___mul},
    { "__div", _wrap_Transform___div},
    { "__le", _wrap_Transform___le},
    {0,0}
};

static swig_lua_attribute swig_Transform_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Transform_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Transform_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Transform_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Transform_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Transform_Sf_SwigStatic = {
    "Transform",
    swig_Transform_Sf_SwigStatic_methods,
    swig_Transform_Sf_SwigStatic_attributes,
    swig_Transform_Sf_SwigStatic_constants,
    swig_Transform_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Transform_bases[] = {0};
static const char *swig_Transform_base_names[] = {0};
static swig_lua_class _wrap_class_Transform = { "Transform", "Transform", &SWIGTYPE_p_Mezzanine__Transform,_proxy__wrap_new_Transform, swig_delete_Transform, swig_Transform_methods, swig_Transform_attributes, &swig_Transform_Sf_SwigStatic, swig_Transform_meta, swig_Transform_bases, swig_Transform_base_names };

static int _wrap_ConstraintParamAsString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConstraintParam arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConstraintParamAsString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConstraintParamAsString",1,"Mezzanine::Physics::ConstraintParam");
  arg1 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 1);
  result = Mezzanine::Physics::ConstraintParamAsString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringAsConstraintParam(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::Physics::ConstraintParam result;
  
  SWIG_check_num_args("Mezzanine::Physics::StringAsConstraintParam",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::StringAsConstraintParam",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = (Mezzanine::Physics::ConstraintParam)Mezzanine::Physics::StringAsConstraintParam(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConstraintParamCount_get(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConstraintParamCount",0,0)
  result = (int)(int)Mezzanine::Physics::ConstraintParamCount;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_char4ToAxis(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::Physics::char4ToAxis",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::char4ToAxis",1,"char");
  arg1 = (lua_tostring(L, 1))[0];
  result = (int)Mezzanine::Physics::char4ToAxis(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetConstraintID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetConstraintID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetConstraintID",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetConstraintID",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::Physics::Constraint const *)arg1)->GetConstraintID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_EnableConstraint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::EnableConstraint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::EnableConstraint",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::EnableConstraint",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_EnableConstraint",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->EnableConstraint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_IsConstraintEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::IsConstraintEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::IsConstraintEnabled",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_IsConstraintEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::Constraint const *)arg1)->IsConstraintEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_SetAllowCollisions(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::SetAllowCollisions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetAllowCollisions",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetAllowCollisions",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_SetAllowCollisions",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetAllowCollisions(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetAllowCollisions(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetAllowCollisions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetAllowCollisions",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetAllowCollisions",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::Constraint const *)arg1)->GetAllowCollisions();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetProxyA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetProxyA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetProxyA",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetProxyA",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = (Mezzanine::Physics::RigidProxy *)((Mezzanine::Physics::Constraint const *)arg1)->GetProxyA();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetProxyB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetProxyB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetProxyB",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetProxyB",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = (Mezzanine::Physics::RigidProxy *)((Mezzanine::Physics::Constraint const *)arg1)->GetProxyB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::Constraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetValidLinearAxes",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = ((Mezzanine::Physics::Constraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetValidAngularAxes",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = ((Mezzanine::Physics::Constraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::HasParamBeenSet",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Constraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Constraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetValidAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetValidAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetValidAxes",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetValidAxes",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = ((Mezzanine::Physics::Constraint const *)arg1)->GetValidAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_IsParamValidOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::IsParamValidOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::IsParamValidOnAxis",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::IsParamValidOnAxis",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Constraint::IsParamValidOnAxis",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_IsParamValidOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Constraint const *)arg1)->IsParamValidOnAxis(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetValidParams(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetValidParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetValidParams",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetValidParams",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = ((Mezzanine::Physics::Constraint const *)arg1)->GetValidParams();
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_SetParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  Mezzanine::Real arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::SetParam",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_SetParam",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->SetParam(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_SetParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::SetParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Constraint::SetParam",3,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_SetParam",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  (arg1)->SetParam(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_SetParam(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Constraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Constraint_SetParam__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Constraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Constraint_SetParam__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Constraint_SetParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Constraint::SetParam(Mezzanine::Physics::ConstraintParam,Mezzanine::Real,int)\n"
    "    Mezzanine::Physics::Constraint::SetParam(Mezzanine::Physics::ConstraintParam,Mezzanine::Real)\n");
  lua_error(L);return 0;
}


static int _wrap_Constraint_GetParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetParam",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetParam",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetParam",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetParam",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Real)((Mezzanine::Physics::Constraint const *)arg1)->GetParam(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetParam",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetParam",2,"Mezzanine::Physics::ConstraintParam");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetParam",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Constraint const *)arg1)->GetParam(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetParam(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Constraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Constraint_GetParam__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__Constraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Constraint_GetParam__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Constraint_GetParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Constraint::GetParam(Mezzanine::Physics::ConstraintParam,int) const\n"
    "    Mezzanine::Physics::Constraint::GetParam(Mezzanine::Physics::ConstraintParam) const\n");
  lua_error(L);return 0;
}


static int _wrap_Constraint_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerialize",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Constraint const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerializeInitData",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerializeInitData",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Constraint const *)arg1)->ProtoSerializeInitData(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerializeProperties",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Constraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoSerializeGlobalOverrides(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoSerializeGlobalOverrides",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerializeGlobalOverrides",1,"Mezzanine::Physics::Constraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoSerializeGlobalOverrides",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoSerializeGlobalOverrides",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoSerializeGlobalOverrides",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Constraint const *)arg1)->ProtoSerializeGlobalOverrides(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerialize",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoDeSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoDeSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerializeInitData",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerializeInitData",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeInitData((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_ProtoDeSerializeGlobalOverrides(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::ProtoDeSerializeGlobalOverrides",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerializeGlobalOverrides",1,"Mezzanine::Physics::Constraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Constraint::ProtoDeSerializeGlobalOverrides",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerializeGlobalOverrides",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Constraint_ProtoDeSerializeGlobalOverrides",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeGlobalOverrides((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::GetDerivedSerializableName",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = ((Mezzanine::Physics::Constraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::Constraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Constraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Constraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Constraint::_GetConstraintBase",1,"Mezzanine::Physics::Constraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Constraint,0))){
    SWIG_fail_ptr("Constraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__Constraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::Constraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Constraint(void *obj) {
Mezzanine::Physics::Constraint *arg1 = (Mezzanine::Physics::Constraint *) obj;
delete arg1;
}
static swig_lua_attribute swig_Constraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Constraint_methods[]= {
    { "GetConstraintID", _wrap_Constraint_GetConstraintID},
    { "EnableConstraint", _wrap_Constraint_EnableConstraint},
    { "IsConstraintEnabled", _wrap_Constraint_IsConstraintEnabled},
    { "SetAllowCollisions", _wrap_Constraint_SetAllowCollisions},
    { "GetAllowCollisions", _wrap_Constraint_GetAllowCollisions},
    { "GetProxyA", _wrap_Constraint_GetProxyA},
    { "GetProxyB", _wrap_Constraint_GetProxyB},
    { "GetValidParamsOnAxis", _wrap_Constraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_Constraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_Constraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_Constraint_HasParamBeenSet},
    { "GetValidAxes", _wrap_Constraint_GetValidAxes},
    { "IsParamValidOnAxis", _wrap_Constraint_IsParamValidOnAxis},
    { "GetValidParams", _wrap_Constraint_GetValidParams},
    { "SetParam", _wrap_Constraint_SetParam},
    { "GetParam", _wrap_Constraint_GetParam},
    { "ProtoSerialize", _wrap_Constraint_ProtoSerialize},
    { "ProtoSerializeInitData", _wrap_Constraint_ProtoSerializeInitData},
    { "ProtoSerializeProperties", _wrap_Constraint_ProtoSerializeProperties},
    { "ProtoSerializeGlobalOverrides", _wrap_Constraint_ProtoSerializeGlobalOverrides},
    { "ProtoDeSerialize", _wrap_Constraint_ProtoDeSerialize},
    { "ProtoDeSerializeInitData", _wrap_Constraint_ProtoDeSerializeInitData},
    { "ProtoDeSerializeProperties", _wrap_Constraint_ProtoDeSerializeProperties},
    { "ProtoDeSerializeGlobalOverrides", _wrap_Constraint_ProtoDeSerializeGlobalOverrides},
    { "GetDerivedSerializableName", _wrap_Constraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_Constraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_Constraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Constraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Constraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Constraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Constraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Constraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Constraint_Sf_SwigStatic = {
    "Constraint",
    swig_Constraint_Sf_SwigStatic_methods,
    swig_Constraint_Sf_SwigStatic_attributes,
    swig_Constraint_Sf_SwigStatic_constants,
    swig_Constraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Constraint_bases[] = {0};
static const char *swig_Constraint_base_names[] = {0};
static swig_lua_class _wrap_class_Constraint = { "Constraint", "Constraint", &SWIGTYPE_p_Mezzanine__Physics__Constraint,0, swig_delete_Constraint, swig_Constraint_methods, swig_Constraint_attributes, &swig_Constraint_Sf_SwigStatic, swig_Constraint_meta, swig_Constraint_bases, swig_Constraint_base_names };

static int _wrap_DualTransformConstraint_SetPivotTransforms(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotTransforms",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotTransforms",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotTransforms",2,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotTransforms",3,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotTransforms",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotTransforms",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotTransforms",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotTransforms((Mezzanine::Transform const &)*arg2,(Mezzanine::Transform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_SetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotATransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotATransform",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotATransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotATransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotATransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_SetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotBTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotBTransform",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotBTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotBTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotBTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetPivotATransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::GetPivotATransform",1,"Mezzanine::Physics::DualTransformConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_GetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  result = ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->GetPivotATransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetPivotBTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::GetPivotBTransform",1,"Mezzanine::Physics::DualTransformConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_GetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  result = ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->GetPivotBTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_SetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotALocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotALocation",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotALocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotALocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotALocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_SetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotBLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotBLocation",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotBLocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotBLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotBLocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetPivotALocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::GetPivotALocation",1,"Mezzanine::Physics::DualTransformConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_GetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  result = ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->GetPivotALocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetPivotBLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::GetPivotBLocation",1,"Mezzanine::Physics::DualTransformConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_GetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  result = ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->GetPivotBLocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_SetPivotARotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotARotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotARotation",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotARotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotARotation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotARotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetPivotARotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_SetPivotBRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::SetPivotBRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotBRotation",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::SetPivotBRotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotBRotation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("DualTransformConstraint_SetPivotBRotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetPivotBRotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetPivotARotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetPivotARotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::GetPivotARotation",1,"Mezzanine::Physics::DualTransformConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_GetPivotARotation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  result = ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->GetPivotARotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetPivotBRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetPivotBRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::GetPivotBRotation",1,"Mezzanine::Physics::DualTransformConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_GetPivotBRotation",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  result = ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->GetPivotBRotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_ProtoSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::ProtoSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::ProtoSerializeInitData",1,"Mezzanine::Physics::DualTransformConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::ProtoSerializeInitData",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_ProtoSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("DualTransformConstraint_ProtoSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::DualTransformConstraint const *)arg1)->ProtoSerializeInitData(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_ProtoDeSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::ProtoDeSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::ProtoDeSerializeInitData",1,"Mezzanine::Physics::DualTransformConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::DualTransformConstraint::ProtoDeSerializeInitData",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0))){
    SWIG_fail_ptr("DualTransformConstraint_ProtoDeSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("DualTransformConstraint_ProtoDeSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeInitData((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DualTransformConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::DualTransformConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::DualTransformConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DualTransformConstraint(void *obj) {
Mezzanine::Physics::DualTransformConstraint *arg1 = (Mezzanine::Physics::DualTransformConstraint *) obj;
delete arg1;
}
static swig_lua_attribute swig_DualTransformConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DualTransformConstraint_methods[]= {
    { "SetPivotTransforms", _wrap_DualTransformConstraint_SetPivotTransforms},
    { "SetPivotATransform", _wrap_DualTransformConstraint_SetPivotATransform},
    { "SetPivotBTransform", _wrap_DualTransformConstraint_SetPivotBTransform},
    { "GetPivotATransform", _wrap_DualTransformConstraint_GetPivotATransform},
    { "GetPivotBTransform", _wrap_DualTransformConstraint_GetPivotBTransform},
    { "SetPivotALocation", _wrap_DualTransformConstraint_SetPivotALocation},
    { "SetPivotBLocation", _wrap_DualTransformConstraint_SetPivotBLocation},
    { "GetPivotALocation", _wrap_DualTransformConstraint_GetPivotALocation},
    { "GetPivotBLocation", _wrap_DualTransformConstraint_GetPivotBLocation},
    { "SetPivotARotation", _wrap_DualTransformConstraint_SetPivotARotation},
    { "SetPivotBRotation", _wrap_DualTransformConstraint_SetPivotBRotation},
    { "GetPivotARotation", _wrap_DualTransformConstraint_GetPivotARotation},
    { "GetPivotBRotation", _wrap_DualTransformConstraint_GetPivotBRotation},
    { "ProtoSerializeInitData", _wrap_DualTransformConstraint_ProtoSerializeInitData},
    { "ProtoDeSerializeInitData", _wrap_DualTransformConstraint_ProtoDeSerializeInitData},
    {0,0}
};
static swig_lua_method swig_DualTransformConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DualTransformConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DualTransformConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DualTransformConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_DualTransformConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_DualTransformConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DualTransformConstraint_Sf_SwigStatic = {
    "DualTransformConstraint",
    swig_DualTransformConstraint_Sf_SwigStatic_methods,
    swig_DualTransformConstraint_Sf_SwigStatic_attributes,
    swig_DualTransformConstraint_Sf_SwigStatic_constants,
    swig_DualTransformConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DualTransformConstraint_bases[] = {0,0};
static const char *swig_DualTransformConstraint_base_names[] = {"Mezzanine::Physics::Constraint *",0};
static swig_lua_class _wrap_class_DualTransformConstraint = { "DualTransformConstraint", "DualTransformConstraint", &SWIGTYPE_p_Mezzanine__Physics__DualTransformConstraint,0, swig_delete_DualTransformConstraint, swig_DualTransformConstraint_methods, swig_DualTransformConstraint_attributes, &swig_DualTransformConstraint_Sf_SwigStatic, swig_DualTransformConstraint_meta, swig_DualTransformConstraint_bases, swig_DualTransformConstraint_base_names };

static int _wrap_new_ConeTwistConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg4 = 0 ;
  Mezzanine::Transform *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::ConeTwistConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",4,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",5,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",4,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",5,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::ConeTwistConstraint *)new Mezzanine::Physics::ConeTwistConstraint(arg1,arg2,arg3,(Mezzanine::Transform const &)*arg4,(Mezzanine::Transform const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeTwistConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg4 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::ConeTwistConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",3,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",4,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::ConeTwistConstraint *)new Mezzanine::Physics::ConeTwistConstraint(arg1,arg2,(Mezzanine::Transform const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeTwistConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::ConeTwistConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_ConeTwistConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::ConeTwistConstraint *)new Mezzanine::Physics::ConeTwistConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConeTwistConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ConeTwistConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_ConeTwistConstraint__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_ConeTwistConstraint__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ConeTwistConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::ConeTwistConstraint::ConeTwistConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_ConeTwistConstraint_IsPassedSwingLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::IsPassedSwingLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::IsPassedSwingLimit",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_IsPassedSwingLimit",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->IsPassedSwingLimit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetTwistAngle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetTwistAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetTwistAngle",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetTwistAngle",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetTwistAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetPivotATransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetPivotATransform",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetPivotATransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetPivotATransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotATransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetPivotBTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetPivotBTransform",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetPivotBTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetPivotBTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotBTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetPivotATransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetPivotATransform",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetPivotATransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetPivotBTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetPivotBTransform",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetPivotBTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_EnableMotor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::EnableMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::EnableMotor",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::EnableMotor",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_EnableMotor",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->EnableMotor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_IsMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::IsMotorEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::IsMotorEnabled",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_IsMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->IsMotorEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetAngularOnly(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetAngularOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetAngularOnly",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetAngularOnly",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetAngularOnly",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetAngularOnly(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetAngularOnly(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetAngularOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetAngularOnly",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetAngularOnly",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetAngularOnly();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimit",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimit",2,"Mezzanine::Integer const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimit",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetLimit",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Integer const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetLimit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetLimits__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  Mezzanine::Real arg6 ;
  Mezzanine::Real arg7 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetLimits",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",5,"Mezzanine::Real const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",6,"Mezzanine::Real const");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",7,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real const)lua_tonumber(L, 6);
  arg7 = (Mezzanine::Real const)lua_tonumber(L, 7);
  (arg1)->SetLimits(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetLimits__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  Mezzanine::Real arg6 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetLimits",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",5,"Mezzanine::Real const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",6,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real const)lua_tonumber(L, 6);
  (arg1)->SetLimits(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetLimits__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetLimits",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetLimits(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetLimits__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetLimits",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLimits(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetLimits(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ConeTwistConstraint_SetLimits__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ConeTwistConstraint_SetLimits__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ConeTwistConstraint_SetLimits__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ConeTwistConstraint_SetLimits__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConeTwistConstraint_SetLimits'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::ConeTwistConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::ConeTwistConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::ConeTwistConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::ConeTwistConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_ConeTwistConstraint_GetLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetLimit",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetLimit",2,"Mezzanine::Integer const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetLimit",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Integer const)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetLimit(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetSwingSpan1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetSwingSpan1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetSwingSpan1",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetSwingSpan1",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetSwingSpan1();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetSwingSpan2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetSwingSpan2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetSwingSpan2",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetSwingSpan2",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetSwingSpan2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetTwistSpan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetTwistSpan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetTwistSpan",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetTwistSpan",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetTwistSpan();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetLimitSoftness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetLimitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetLimitSoftness",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetLimitSoftness",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetLimitSoftness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetBiasFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetBiasFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetBiasFactor",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetBiasFactor",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetBiasFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetRelaxationFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetRelaxationFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetRelaxationFactor",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetRelaxationFactor",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetRelaxationFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetDamping",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetDamping",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetDamping",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetDamping",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetDamping",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetMaxMotorImpulse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetMaxMotorImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMaxMotorImpulse",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMaxMotorImpulse",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetMaxMotorImpulse",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMaxMotorImpulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetMaxMotorImpulseNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetMaxMotorImpulseNormalized",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMaxMotorImpulseNormalized",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMaxMotorImpulseNormalized",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetMaxMotorImpulseNormalized",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMaxMotorImpulseNormalized(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_IsMaxMotorImpulseNormalized(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::IsMaxMotorImpulseNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::IsMaxMotorImpulseNormalized",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_IsMaxMotorImpulseNormalized",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->IsMaxMotorImpulseNormalized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetMaxMotorImpulse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetMaxMotorImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetMaxMotorImpulse",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetMaxMotorImpulse",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetMaxMotorImpulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetFixThresh(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetFixThresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetFixThresh",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetFixThresh",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetFixThresh",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetFixThresh(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetFixThresh(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetFixThresh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetFixThresh",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetFixThresh",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetFixThresh();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetMotorTarget(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetMotorTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMotorTarget",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMotorTarget",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetMotorTarget",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetMotorTarget",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetMotorTarget((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_SetMotorTargetInConstraintSpace(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::SetMotorTargetInConstraintSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMotorTargetInConstraintSpace",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::SetMotorTargetInConstraintSpace",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetMotorTargetInConstraintSpace",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("ConeTwistConstraint_SetMotorTargetInConstraintSpace",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetMotorTargetInConstraintSpace((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetMotorTarget(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetMotorTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetMotorTarget",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetMotorTarget",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetMotorTarget();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetValidLinearAxes",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetValidAngularAxes",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::HasParamBeenSet",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ConeTwistConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::ConeTwistConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ConeTwistConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = ((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::ConeTwistConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConeTwistConstraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConeTwistConstraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConeTwistConstraint::_GetConstraintBase",1,"Mezzanine::Physics::ConeTwistConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,0))){
    SWIG_fail_ptr("ConeTwistConstraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::ConeTwistConstraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConeTwistConstraint(void *obj) {
Mezzanine::Physics::ConeTwistConstraint *arg1 = (Mezzanine::Physics::ConeTwistConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConeTwistConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConeTwistConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConeTwistConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConeTwistConstraint_methods[]= {
    { "IsPassedSwingLimit", _wrap_ConeTwistConstraint_IsPassedSwingLimit},
    { "GetTwistAngle", _wrap_ConeTwistConstraint_GetTwistAngle},
    { "SetPivotATransform", _wrap_ConeTwistConstraint_SetPivotATransform},
    { "SetPivotBTransform", _wrap_ConeTwistConstraint_SetPivotBTransform},
    { "GetPivotATransform", _wrap_ConeTwistConstraint_GetPivotATransform},
    { "GetPivotBTransform", _wrap_ConeTwistConstraint_GetPivotBTransform},
    { "EnableMotor", _wrap_ConeTwistConstraint_EnableMotor},
    { "IsMotorEnabled", _wrap_ConeTwistConstraint_IsMotorEnabled},
    { "SetAngularOnly", _wrap_ConeTwistConstraint_SetAngularOnly},
    { "GetAngularOnly", _wrap_ConeTwistConstraint_GetAngularOnly},
    { "SetLimit", _wrap_ConeTwistConstraint_SetLimit},
    { "SetLimits", _wrap_ConeTwistConstraint_SetLimits},
    { "GetLimit", _wrap_ConeTwistConstraint_GetLimit},
    { "GetSwingSpan1", _wrap_ConeTwistConstraint_GetSwingSpan1},
    { "GetSwingSpan2", _wrap_ConeTwistConstraint_GetSwingSpan2},
    { "GetTwistSpan", _wrap_ConeTwistConstraint_GetTwistSpan},
    { "GetLimitSoftness", _wrap_ConeTwistConstraint_GetLimitSoftness},
    { "GetBiasFactor", _wrap_ConeTwistConstraint_GetBiasFactor},
    { "GetRelaxationFactor", _wrap_ConeTwistConstraint_GetRelaxationFactor},
    { "SetDamping", _wrap_ConeTwistConstraint_SetDamping},
    { "GetDamping", _wrap_ConeTwistConstraint_GetDamping},
    { "SetMaxMotorImpulse", _wrap_ConeTwistConstraint_SetMaxMotorImpulse},
    { "SetMaxMotorImpulseNormalized", _wrap_ConeTwistConstraint_SetMaxMotorImpulseNormalized},
    { "IsMaxMotorImpulseNormalized", _wrap_ConeTwistConstraint_IsMaxMotorImpulseNormalized},
    { "GetMaxMotorImpulse", _wrap_ConeTwistConstraint_GetMaxMotorImpulse},
    { "SetFixThresh", _wrap_ConeTwistConstraint_SetFixThresh},
    { "GetFixThresh", _wrap_ConeTwistConstraint_GetFixThresh},
    { "SetMotorTarget", _wrap_ConeTwistConstraint_SetMotorTarget},
    { "SetMotorTargetInConstraintSpace", _wrap_ConeTwistConstraint_SetMotorTargetInConstraintSpace},
    { "GetMotorTarget", _wrap_ConeTwistConstraint_GetMotorTarget},
    { "GetValidParamsOnAxis", _wrap_ConeTwistConstraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_ConeTwistConstraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_ConeTwistConstraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_ConeTwistConstraint_HasParamBeenSet},
    { "ProtoSerializeProperties", _wrap_ConeTwistConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_ConeTwistConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_ConeTwistConstraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_ConeTwistConstraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_ConeTwistConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConeTwistConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConeTwistConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConeTwistConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_ConeTwistConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_ConeTwistConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConeTwistConstraint_Sf_SwigStatic = {
    "ConeTwistConstraint",
    swig_ConeTwistConstraint_Sf_SwigStatic_methods,
    swig_ConeTwistConstraint_Sf_SwigStatic_attributes,
    swig_ConeTwistConstraint_Sf_SwigStatic_constants,
    swig_ConeTwistConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConeTwistConstraint_bases[] = {0,0};
static const char *swig_ConeTwistConstraint_base_names[] = {"Mezzanine::Physics::DualTransformConstraint *",0};
static swig_lua_class _wrap_class_ConeTwistConstraint = { "ConeTwistConstraint", "ConeTwistConstraint", &SWIGTYPE_p_Mezzanine__Physics__ConeTwistConstraint,_proxy__wrap_new_ConeTwistConstraint, swig_delete_ConeTwistConstraint, swig_ConeTwistConstraint_methods, swig_ConeTwistConstraint_attributes, &swig_ConeTwistConstraint_Sf_SwigStatic, swig_ConeTwistConstraint_meta, swig_ConeTwistConstraint_bases, swig_ConeTwistConstraint_base_names };

static int _wrap_new_ConvexHullCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  std::vector< Mezzanine::Physics::Vector3 > *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",2,"std::vector< Mezzanine::Physics::Vector3 > const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t,0))){
    SWIG_fail_ptr("new_ConvexHullCollisionShape",2,SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t);
  }
  
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)new Mezzanine::Physics::ConvexHullCollisionShape((Mezzanine::String const &)*arg1,(std::vector< Mezzanine::Physics::Vector3 > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvexHullCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btConvexHullShape *arg2 = (btConvexHullShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",2,"btConvexHullShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btConvexHullShape,0))){
    SWIG_fail_ptr("new_ConvexHullCollisionShape",2,SWIGTYPE_p_btConvexHullShape);
  }
  
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)new Mezzanine::Physics::ConvexHullCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvexHullCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::ConvexHullCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_ConvexHullCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::ConvexHullCollisionShape *)new Mezzanine::Physics::ConvexHullCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvexHullCollisionShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ConvexHullCollisionShape__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btConvexHullShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ConvexHullCollisionShape__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ConvexHullCollisionShape__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ConvexHullCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape(Mezzanine::String const &,std::vector< Mezzanine::Physics::Vector3 > const &)\n"
    "    Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape(Mezzanine::String const &,btConvexHullShape *)\n"
    "    Mezzanine::Physics::ConvexHullCollisionShape::ConvexHullCollisionShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvexHullCollisionShape_AddPoint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::AddPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::AddPoint",1,"Mezzanine::Physics::ConvexHullCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::AddPoint",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_AddPoint",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_AddPoint",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->AddPoint((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_GetUnscaledPoint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::GetUnscaledPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetUnscaledPoint",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetUnscaledPoint",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_GetUnscaledPoint",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->GetUnscaledPoint((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_GetPoint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::GetPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetPoint",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetPoint",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_GetPoint",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->GetPoint((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_GetNumPoints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::GetNumPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetNumPoints",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_GetNumPoints",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->GetNumPoints();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::IsInside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::IsInside",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::IsInside",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::IsInside",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_IsInside",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  result = (Mezzanine::Boole)((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->IsInside((Mezzanine::Physics::Vector3 const &)*arg2,(Mezzanine::Real const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetType",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_GetBulletHullShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  btConvexHullShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::GetBulletHullShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::GetBulletHullShape",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_GetBulletHullShape",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  result = (btConvexHullShape *)((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->GetBulletHullShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConvexHullShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::ConvexHullCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::ConvexHullCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::ConvexHullCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::ConvexHullCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ConvexHullCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvexHullCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::ConvexHullCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::ConvexHullCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConvexHullCollisionShape(void *obj) {
Mezzanine::Physics::ConvexHullCollisionShape *arg1 = (Mezzanine::Physics::ConvexHullCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConvexHullCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConvexHullCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConvexHullCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConvexHullCollisionShape_methods[]= {
    { "AddPoint", _wrap_ConvexHullCollisionShape_AddPoint},
    { "GetUnscaledPoint", _wrap_ConvexHullCollisionShape_GetUnscaledPoint},
    { "GetPoint", _wrap_ConvexHullCollisionShape_GetPoint},
    { "GetNumPoints", _wrap_ConvexHullCollisionShape_GetNumPoints},
    { "IsInside", _wrap_ConvexHullCollisionShape_IsInside},
    { "GetType", _wrap_ConvexHullCollisionShape_GetType},
    { "GetBulletHullShape", _wrap_ConvexHullCollisionShape_GetBulletHullShape},
    { "ProtoSerialize", _wrap_ConvexHullCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_ConvexHullCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_ConvexHullCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConvexHullCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConvexHullCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConvexHullCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_ConvexHullCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_ConvexHullCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConvexHullCollisionShape_Sf_SwigStatic = {
    "ConvexHullCollisionShape",
    swig_ConvexHullCollisionShape_Sf_SwigStatic_methods,
    swig_ConvexHullCollisionShape_Sf_SwigStatic_attributes,
    swig_ConvexHullCollisionShape_Sf_SwigStatic_constants,
    swig_ConvexHullCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConvexHullCollisionShape_bases[] = {0,0};
static const char *swig_ConvexHullCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_ConvexHullCollisionShape = { "ConvexHullCollisionShape", "ConvexHullCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__ConvexHullCollisionShape,_proxy__wrap_new_ConvexHullCollisionShape, swig_delete_ConvexHullCollisionShape, swig_ConvexHullCollisionShape_methods, swig_ConvexHullCollisionShape_attributes, &swig_ConvexHullCollisionShape_Sf_SwigStatic, swig_ConvexHullCollisionShape_meta, swig_ConvexHullCollisionShape_bases, swig_ConvexHullCollisionShape_base_names };

static int _wrap_new_CylinderCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Physics::CylinderCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",3,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",4,"Mezzanine::Physics::Vector3 const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_CylinderCollisionShape",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::CylinderCollisionShape *)new Mezzanine::Physics::CylinderCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Physics::Vector3 const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CylinderCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::StandardAxis arg4 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Physics::CylinderCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",4,"Mezzanine::StandardAxis");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  arg4 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 4);
  result = (Mezzanine::Physics::CylinderCollisionShape *)new Mezzanine::Physics::CylinderCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CylinderCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CylinderCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",3,"Mezzanine::Physics::Vector3 const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_CylinderCollisionShape",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_CylinderCollisionShape",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Physics::CylinderCollisionShape *)new Mezzanine::Physics::CylinderCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Physics::Vector3 const &)*arg2,(Mezzanine::Physics::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CylinderCollisionShape__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::StandardAxis arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CylinderCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",3,"Mezzanine::StandardAxis");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_CylinderCollisionShape",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 3);
  result = (Mezzanine::Physics::CylinderCollisionShape *)new Mezzanine::Physics::CylinderCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Physics::Vector3 const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CylinderCollisionShape__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btCylinderShape *arg2 = (btCylinderShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::CylinderCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",2,"btCylinderShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btCylinderShape,0))){
    SWIG_fail_ptr("new_CylinderCollisionShape",2,SWIGTYPE_p_btCylinderShape);
  }
  
  result = (Mezzanine::Physics::CylinderCollisionShape *)new Mezzanine::Physics::CylinderCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CylinderCollisionShape__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::CylinderCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_CylinderCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::CylinderCollisionShape *)new Mezzanine::Physics::CylinderCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CylinderCollisionShape(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CylinderCollisionShape__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btCylinderShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CylinderCollisionShape__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_CylinderCollisionShape__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_CylinderCollisionShape__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_CylinderCollisionShape__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_CylinderCollisionShape__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CylinderCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape(Mezzanine::String const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape(Mezzanine::String const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::StandardAxis)\n"
    "    Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape(Mezzanine::String const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape(Mezzanine::String const &,Mezzanine::Physics::Vector3 const &,Mezzanine::StandardAxis)\n"
    "    Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape(Mezzanine::String const &,btCylinderShape *)\n"
    "    Mezzanine::Physics::CylinderCollisionShape::CylinderCollisionShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_CylinderCollisionShape_CreateHalfExtents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::StandardAxis arg3 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::CreateHalfExtents",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CreateHalfExtents",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CreateHalfExtents",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::CreateHalfExtents",3,"Mezzanine::StandardAxis");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 3);
  result = Mezzanine::Physics::CylinderCollisionShape::CreateHalfExtents((float const &)*arg1,(float const &)*arg2,arg3);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetHalfExtents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetHalfExtents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::GetHalfExtents",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_GetHalfExtents",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  result = ((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->GetHalfExtents();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetHalfExtentsWithMargin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetHalfExtentsWithMargin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::GetHalfExtentsWithMargin",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_GetHalfExtentsWithMargin",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  result = ((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->GetHalfExtentsWithMargin();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::GetRadius",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_GetRadius",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->GetRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetUpAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetUpAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::GetUpAxis",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_GetUpAxis",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  result = ((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->GetUpAxis();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::GetType",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetBulletCylinderShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  btCylinderShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetBulletCylinderShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::GetBulletCylinderShape",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_GetBulletCylinderShape",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  result = (btCylinderShape *)((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->GetBulletCylinderShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCylinderShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::CylinderCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CylinderCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::CylinderCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::CylinderCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::CylinderCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,0))){
    SWIG_fail_ptr("CylinderCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("CylinderCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CylinderCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::CylinderCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::CylinderCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CylinderCollisionShape(void *obj) {
Mezzanine::Physics::CylinderCollisionShape *arg1 = (Mezzanine::Physics::CylinderCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_CylinderCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CylinderCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CylinderCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CylinderCollisionShape_methods[]= {
    { "GetHalfExtents", _wrap_CylinderCollisionShape_GetHalfExtents},
    { "GetHalfExtentsWithMargin", _wrap_CylinderCollisionShape_GetHalfExtentsWithMargin},
    { "GetRadius", _wrap_CylinderCollisionShape_GetRadius},
    { "GetUpAxis", _wrap_CylinderCollisionShape_GetUpAxis},
    { "GetType", _wrap_CylinderCollisionShape_GetType},
    { "GetBulletCylinderShape", _wrap_CylinderCollisionShape_GetBulletCylinderShape},
    { "ProtoSerialize", _wrap_CylinderCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_CylinderCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_CylinderCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CylinderCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CylinderCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CylinderCollisionShape_Sf_SwigStatic_methods[]= {
    { "CreateHalfExtents", _wrap_CylinderCollisionShape_CreateHalfExtents},
    { "GetSerializableName", _wrap_CylinderCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_CylinderCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CylinderCollisionShape_Sf_SwigStatic = {
    "CylinderCollisionShape",
    swig_CylinderCollisionShape_Sf_SwigStatic_methods,
    swig_CylinderCollisionShape_Sf_SwigStatic_attributes,
    swig_CylinderCollisionShape_Sf_SwigStatic_constants,
    swig_CylinderCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CylinderCollisionShape_bases[] = {0,0};
static const char *swig_CylinderCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_CylinderCollisionShape = { "CylinderCollisionShape", "CylinderCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__CylinderCollisionShape,_proxy__wrap_new_CylinderCollisionShape, swig_delete_CylinderCollisionShape, swig_CylinderCollisionShape_methods, swig_CylinderCollisionShape_attributes, &swig_CylinderCollisionShape_Sf_SwigStatic, swig_CylinderCollisionShape_meta, swig_CylinderCollisionShape_bases, swig_CylinderCollisionShape_base_names };

static int _wrap_MeshCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MeshCollisionShape *arg1 = (Mezzanine::Physics::MeshCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::MeshCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MeshCollisionShape::GetType",1,"Mezzanine::Physics::MeshCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape,0))){
    SWIG_fail_ptr("MeshCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::MeshCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshCollisionShape_GetBulletConcaveShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MeshCollisionShape *arg1 = (Mezzanine::Physics::MeshCollisionShape *) 0 ;
  btConcaveShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MeshCollisionShape::GetBulletConcaveShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MeshCollisionShape::GetBulletConcaveShape",1,"Mezzanine::Physics::MeshCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape,0))){
    SWIG_fail_ptr("MeshCollisionShape_GetBulletConcaveShape",1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape);
  }
  
  result = (btConcaveShape *)((Mezzanine::Physics::MeshCollisionShape const *)arg1)->GetBulletConcaveShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConcaveShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MeshCollisionShape *arg1 = (Mezzanine::Physics::MeshCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MeshCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MeshCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::MeshCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::MeshCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape,0))){
    SWIG_fail_ptr("MeshCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("MeshCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::MeshCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MeshCollisionShape *arg1 = (Mezzanine::Physics::MeshCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MeshCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MeshCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::MeshCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::MeshCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape,0))){
    SWIG_fail_ptr("MeshCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("MeshCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::MeshCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::MeshCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MeshCollisionShape(void *obj) {
Mezzanine::Physics::MeshCollisionShape *arg1 = (Mezzanine::Physics::MeshCollisionShape *) obj;
delete arg1;
}
static swig_lua_attribute swig_MeshCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MeshCollisionShape_methods[]= {
    { "GetType", _wrap_MeshCollisionShape_GetType},
    { "GetBulletConcaveShape", _wrap_MeshCollisionShape_GetBulletConcaveShape},
    { "ProtoSerialize", _wrap_MeshCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_MeshCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_MeshCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MeshCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MeshCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MeshCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_MeshCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_MeshCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MeshCollisionShape_Sf_SwigStatic = {
    "MeshCollisionShape",
    swig_MeshCollisionShape_Sf_SwigStatic_methods,
    swig_MeshCollisionShape_Sf_SwigStatic_attributes,
    swig_MeshCollisionShape_Sf_SwigStatic_constants,
    swig_MeshCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MeshCollisionShape_bases[] = {0,0};
static const char *swig_MeshCollisionShape_base_names[] = {"Mezzanine::Physics::CollisionShape *",0};
static swig_lua_class _wrap_class_MeshCollisionShape = { "MeshCollisionShape", "MeshCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__MeshCollisionShape,0, swig_delete_MeshCollisionShape, swig_MeshCollisionShape_methods, swig_MeshCollisionShape_attributes, &swig_MeshCollisionShape_Sf_SwigStatic, swig_MeshCollisionShape_meta, swig_MeshCollisionShape_bases, swig_MeshCollisionShape_base_names };

static int _wrap_new_DynamicMeshCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btGImpactMeshShape *arg2 = (btGImpactMeshShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::DynamicMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::DynamicMeshCollisionShape::DynamicMeshCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::DynamicMeshCollisionShape::DynamicMeshCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::DynamicMeshCollisionShape::DynamicMeshCollisionShape",2,"btGImpactMeshShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btGImpactMeshShape,0))){
    SWIG_fail_ptr("new_DynamicMeshCollisionShape",2,SWIGTYPE_p_btGImpactMeshShape);
  }
  
  result = (Mezzanine::Physics::DynamicMeshCollisionShape *)new Mezzanine::Physics::DynamicMeshCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DynamicMeshCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::DynamicMeshCollisionShape *arg1 = (Mezzanine::Physics::DynamicMeshCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::DynamicMeshCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::DynamicMeshCollisionShape::GetType",1,"Mezzanine::Physics::DynamicMeshCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,0))){
    SWIG_fail_ptr("DynamicMeshCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::DynamicMeshCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DynamicMeshCollisionShape(void *obj) {
Mezzanine::Physics::DynamicMeshCollisionShape *arg1 = (Mezzanine::Physics::DynamicMeshCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_DynamicMeshCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DynamicMeshCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DynamicMeshCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DynamicMeshCollisionShape_methods[]= {
    { "GetType", _wrap_DynamicMeshCollisionShape_GetType},
    {0,0}
};
static swig_lua_method swig_DynamicMeshCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DynamicMeshCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DynamicMeshCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DynamicMeshCollisionShape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DynamicMeshCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DynamicMeshCollisionShape_Sf_SwigStatic = {
    "DynamicMeshCollisionShape",
    swig_DynamicMeshCollisionShape_Sf_SwigStatic_methods,
    swig_DynamicMeshCollisionShape_Sf_SwigStatic_attributes,
    swig_DynamicMeshCollisionShape_Sf_SwigStatic_constants,
    swig_DynamicMeshCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DynamicMeshCollisionShape_bases[] = {0,0};
static const char *swig_DynamicMeshCollisionShape_base_names[] = {"Mezzanine::Physics::MeshCollisionShape *",0};
static swig_lua_class _wrap_class_DynamicMeshCollisionShape = { "DynamicMeshCollisionShape", "DynamicMeshCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__DynamicMeshCollisionShape,_proxy__wrap_new_DynamicMeshCollisionShape, swig_delete_DynamicMeshCollisionShape, swig_DynamicMeshCollisionShape_methods, swig_DynamicMeshCollisionShape_attributes, &swig_DynamicMeshCollisionShape_Sf_SwigStatic, swig_DynamicMeshCollisionShape_meta, swig_DynamicMeshCollisionShape_bases, swig_DynamicMeshCollisionShape_base_names };

static int _wrap_FieldCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::FieldCollisionShape *arg1 = (Mezzanine::Physics::FieldCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::FieldCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::FieldCollisionShape::GetType",1,"Mezzanine::Physics::FieldCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape,0))){
    SWIG_fail_ptr("FieldCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::FieldCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldCollisionShape_GetBulletConcaveShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::FieldCollisionShape *arg1 = (Mezzanine::Physics::FieldCollisionShape *) 0 ;
  btConcaveShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::FieldCollisionShape::GetBulletConcaveShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::FieldCollisionShape::GetBulletConcaveShape",1,"Mezzanine::Physics::FieldCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape,0))){
    SWIG_fail_ptr("FieldCollisionShape_GetBulletConcaveShape",1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape);
  }
  
  result = (btConcaveShape *)((Mezzanine::Physics::FieldCollisionShape const *)arg1)->GetBulletConcaveShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btConcaveShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::FieldCollisionShape *arg1 = (Mezzanine::Physics::FieldCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::FieldCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::FieldCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::FieldCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::FieldCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape,0))){
    SWIG_fail_ptr("FieldCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("FieldCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::FieldCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::FieldCollisionShape *arg1 = (Mezzanine::Physics::FieldCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::FieldCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::FieldCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::FieldCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::FieldCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape,0))){
    SWIG_fail_ptr("FieldCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("FieldCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FieldCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::FieldCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::FieldCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FieldCollisionShape(void *obj) {
Mezzanine::Physics::FieldCollisionShape *arg1 = (Mezzanine::Physics::FieldCollisionShape *) obj;
delete arg1;
}
static swig_lua_attribute swig_FieldCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FieldCollisionShape_methods[]= {
    { "GetType", _wrap_FieldCollisionShape_GetType},
    { "GetBulletConcaveShape", _wrap_FieldCollisionShape_GetBulletConcaveShape},
    { "ProtoSerialize", _wrap_FieldCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_FieldCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_FieldCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FieldCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FieldCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FieldCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_FieldCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_FieldCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FieldCollisionShape_Sf_SwigStatic = {
    "FieldCollisionShape",
    swig_FieldCollisionShape_Sf_SwigStatic_methods,
    swig_FieldCollisionShape_Sf_SwigStatic_attributes,
    swig_FieldCollisionShape_Sf_SwigStatic_constants,
    swig_FieldCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FieldCollisionShape_bases[] = {0,0};
static const char *swig_FieldCollisionShape_base_names[] = {"Mezzanine::Physics::CollisionShape *",0};
static swig_lua_class _wrap_class_FieldCollisionShape = { "FieldCollisionShape", "FieldCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__FieldCollisionShape,0, swig_delete_FieldCollisionShape, swig_FieldCollisionShape_methods, swig_FieldCollisionShape_attributes, &swig_FieldCollisionShape_Sf_SwigStatic, swig_FieldCollisionShape_meta, swig_FieldCollisionShape_bases, swig_FieldCollisionShape_base_names };

static int _wrap_new_GearConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GearConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GearConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_GearConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_GearConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_GearConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_GearConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_GearConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GearConstraint *)new Mezzanine::Physics::GearConstraint(arg1,arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GearConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Real arg6 ;
  Mezzanine::Physics::PhysicsManager *arg7 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GearConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GearConstraint",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",6,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",7,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_GearConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_GearConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_GearConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_GearConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg6 = (Mezzanine::Real const)lua_tonumber(L, 6);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_GearConstraint",7,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GearConstraint *)new Mezzanine::Physics::GearConstraint(arg1,arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GearConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GearConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GearConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GearConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_GearConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_GearConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GearConstraint *)new Mezzanine::Physics::GearConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GearConstraint(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_GearConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_GearConstraint__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_new_GearConstraint__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GearConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::GearConstraint::GearConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::GearConstraint::GearConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Real const,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::GearConstraint::GearConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_GearConstraint_SetAxisA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::SetAxisA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::SetAxisA",1,"Mezzanine::Physics::GearConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::SetAxisA",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_SetAxisA",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("GearConstraint_SetAxisA",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAxisA((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_SetAxisB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::SetAxisB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::SetAxisB",1,"Mezzanine::Physics::GearConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::SetAxisB",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_SetAxisB",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("GearConstraint_SetAxisB",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAxisB((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetAxisA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetAxisA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetAxisA",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetAxisA",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = ((Mezzanine::Physics::GearConstraint const *)arg1)->GetAxisA();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetAxisB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetAxisB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetAxisB",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetAxisB",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = ((Mezzanine::Physics::GearConstraint const *)arg1)->GetAxisB();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_SetRotationRatio(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::SetRotationRatio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::SetRotationRatio",1,"Mezzanine::Physics::GearConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::SetRotationRatio",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_SetRotationRatio",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRotationRatio(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetRotationRatio(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetRotationRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetRotationRatio",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetRotationRatio",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::GearConstraint const *)arg1)->GetRotationRatio();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::GearConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::GearConstraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetValidLinearAxes",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = ((Mezzanine::Physics::GearConstraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetValidAngularAxes",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = ((Mezzanine::Physics::GearConstraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::HasParamBeenSet",1,"Mezzanine::Physics::GearConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::GearConstraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_ProtoSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::ProtoSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoSerializeInitData",1,"Mezzanine::Physics::GearConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoSerializeInitData",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_ProtoSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("GearConstraint_ProtoSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::GearConstraint const *)arg1)->ProtoSerializeInitData(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::GearConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("GearConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::GearConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_ProtoDeSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::ProtoDeSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoDeSerializeInitData",1,"Mezzanine::Physics::GearConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoDeSerializeInitData",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_ProtoDeSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("GearConstraint_ProtoDeSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeInitData((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::GearConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("GearConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = ((Mezzanine::Physics::GearConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::GearConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GearConstraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GearConstraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GearConstraint::_GetConstraintBase",1,"Mezzanine::Physics::GearConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint,0))){
    SWIG_fail_ptr("GearConstraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__GearConstraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::GearConstraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GearConstraint(void *obj) {
Mezzanine::Physics::GearConstraint *arg1 = (Mezzanine::Physics::GearConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_GearConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GearConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GearConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GearConstraint_methods[]= {
    { "SetAxisA", _wrap_GearConstraint_SetAxisA},
    { "SetAxisB", _wrap_GearConstraint_SetAxisB},
    { "GetAxisA", _wrap_GearConstraint_GetAxisA},
    { "GetAxisB", _wrap_GearConstraint_GetAxisB},
    { "SetRotationRatio", _wrap_GearConstraint_SetRotationRatio},
    { "GetRotationRatio", _wrap_GearConstraint_GetRotationRatio},
    { "GetValidParamsOnAxis", _wrap_GearConstraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_GearConstraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_GearConstraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_GearConstraint_HasParamBeenSet},
    { "ProtoSerializeInitData", _wrap_GearConstraint_ProtoSerializeInitData},
    { "ProtoSerializeProperties", _wrap_GearConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeInitData", _wrap_GearConstraint_ProtoDeSerializeInitData},
    { "ProtoDeSerializeProperties", _wrap_GearConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_GearConstraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_GearConstraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_GearConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GearConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GearConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GearConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_GearConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_GearConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GearConstraint_Sf_SwigStatic = {
    "GearConstraint",
    swig_GearConstraint_Sf_SwigStatic_methods,
    swig_GearConstraint_Sf_SwigStatic_attributes,
    swig_GearConstraint_Sf_SwigStatic_constants,
    swig_GearConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GearConstraint_bases[] = {0,0};
static const char *swig_GearConstraint_base_names[] = {"Mezzanine::Physics::Constraint *",0};
static swig_lua_class _wrap_class_GearConstraint = { "GearConstraint", "GearConstraint", &SWIGTYPE_p_Mezzanine__Physics__GearConstraint,_proxy__wrap_new_GearConstraint, swig_delete_GearConstraint, swig_GearConstraint_methods, swig_GearConstraint_attributes, &swig_GearConstraint_Sf_SwigStatic, swig_GearConstraint_meta, swig_GearConstraint_bases, swig_GearConstraint_base_names };

static int _wrap_new_Generic6DofConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg4 = 0 ;
  Mezzanine::Transform *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Generic6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",4,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",5,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",4,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",5,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Generic6DofConstraint *)new Mezzanine::Physics::Generic6DofConstraint(arg1,arg2,arg3,(Mezzanine::Transform const &)*arg4,(Mezzanine::Transform const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generic6DofConstraint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg4 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Generic6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",3,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",4,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Generic6DofConstraint *)new Mezzanine::Physics::Generic6DofConstraint(arg1,arg2,(Mezzanine::Transform const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generic6DofConstraint__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Generic6DofConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Generic6DofConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Generic6DofConstraint *)new Mezzanine::Physics::Generic6DofConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generic6DofConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Generic6DofConstraint__SWIG_4(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_Generic6DofConstraint__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_Generic6DofConstraint__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Generic6DofConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::Generic6DofConstraint::Generic6DofConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_Generic6DofConstraint_SetPivotTransforms(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotTransforms",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotTransforms",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotTransforms",2,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotTransforms",3,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotTransforms",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotTransforms",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotTransforms",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotTransforms((Mezzanine::Transform const &)*arg2,(Mezzanine::Transform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotATransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotATransform",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotATransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotATransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotATransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotBTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotBTransform",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotBTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotBTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotBTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetPivotATransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetPivotATransform",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetPivotATransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetPivotBTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetPivotBTransform",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetPivotBTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotALocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotALocation",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotALocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotALocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotALocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotBLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotBLocation",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotBLocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotBLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotBLocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetPivotALocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetPivotALocation",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetPivotALocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetPivotBLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetPivotBLocation",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetPivotBLocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetPivotARotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotARotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotARotation",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotARotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotARotation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotARotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetPivotARotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetPivotBRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetPivotBRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotBRotation",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetPivotBRotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotBRotation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetPivotBRotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetPivotBRotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetPivotARotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetPivotARotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetPivotARotation",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetPivotARotation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetPivotARotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetPivotBRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetPivotBRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetPivotBRotation",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetPivotBRotation",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetPivotBRotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetUseFrameOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetUseFrameOffset",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetUseFrameOffset",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetUseFrameOffset",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetUseFrameOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetUseFrameOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetUseFrameOffset",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetUseFrameOffset",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetUseFrameOffset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetUseLinearReferenceFrameA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetUseLinearReferenceFrameA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetUseLinearReferenceFrameA",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetUseLinearReferenceFrameA",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetUseLinearReferenceFrameA",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetUseLinearReferenceFrameA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetUseLinearReferenceFrameA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetUseLinearReferenceFrameA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetUseLinearReferenceFrameA",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetUseLinearReferenceFrameA",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetUseLinearReferenceFrameA();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_ConvertFrom6AxisTo3Axis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::ConvertFrom6AxisTo3Axis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ConvertFrom6AxisTo3Axis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ConvertFrom6AxisTo3Axis",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_ConvertFrom6AxisTo3Axis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->ConvertFrom6AxisTo3Axis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_ConvertAngularTo6Axis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::ConvertAngularTo6Axis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ConvertAngularTo6Axis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ConvertAngularTo6Axis",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_ConvertAngularTo6Axis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->ConvertAngularTo6Axis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLimit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLimit",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLimit",2,"Mezzanine::Whole");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLimit",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLimit",4,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLimit",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  (arg1)->SetLimit(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitLower(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLower",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLower",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLower",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitLower",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitLower",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearLimitLower((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitLower(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitLower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitLower",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitLower",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitLower();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitUpper(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpper",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpper",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitUpper",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitUpper",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearLimitUpper((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitUpper(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitUpper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitUpper",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitUpper",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitUpper();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitLowerOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLowerOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLowerOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLowerOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitLowerOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitLowerOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearLimitLowerOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitLowerOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitLowerOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitLowerOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitLowerOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitLowerOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitLowerOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitUpperOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpperOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpperOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpperOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitUpperOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitUpperOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearLimitUpperOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitUpperOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitUpperOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitUpperOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitUpperOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitUpperOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitUpperOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularLimitUpper(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpper",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpper",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitUpper",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitUpper",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularLimitUpper((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularLimitUpper(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitUpper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitUpper",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularLimitUpper",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularLimitUpper();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularLimitLower(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLower",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLower",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLower",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitLower",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitLower",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularLimitLower((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularLimitLower(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitLower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitLower",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularLimitLower",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularLimitLower();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularLimitLowerOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLowerOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLowerOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLowerOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitLowerOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitLowerOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularLimitLowerOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularLimitLowerOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitLowerOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitLowerOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitLowerOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularLimitLowerOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularLimitLowerOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularLimitUpperOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpperOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpperOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpperOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitUpperOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitUpperOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularLimitUpperOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularLimitUpperOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitUpperOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitUpperOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitUpperOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularLimitUpperOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularLimitUpperOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularLimitMaxForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForce",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForce",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitMaxForce",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitMaxForce",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularLimitMaxForce((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularLimitMaxForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitMaxForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitMaxForce",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularLimitMaxForce",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularLimitMaxForce();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularLimitMaxForceOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForceOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForceOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForceOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularLimitMaxForceOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularLimitMaxForceOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularLimitMaxForceOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularLimitMaxForceOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitMaxForceOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitMaxForceOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularLimitMaxForceOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularLimitMaxForceOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularLimitMaxForceOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocity",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorTargetVelocity",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorTargetVelocity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularMotorTargetVelocity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorTargetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorTargetVelocity",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorTargetVelocity",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorTargetVelocity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorTargetVelocityOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocityOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocityOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocityOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorTargetVelocityOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorTargetVelocityOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularMotorTargetVelocityOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorTargetVelocityOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorTargetVelocityOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorTargetVelocityOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorTargetVelocityOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorTargetVelocityOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorTargetVelocityOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorMaxForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForce",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForce",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorMaxForce",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorMaxForce",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularMotorMaxForce((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorMaxForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorMaxForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorMaxForce",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorMaxForce",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorMaxForce();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorMaxForceOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForceOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForceOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForceOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorMaxForceOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorMaxForceOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularMotorMaxForceOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorMaxForceOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorMaxForceOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorMaxForceOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorMaxForceOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorMaxForceOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorMaxForceOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDamping",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDamping",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorDamping",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularMotorDamping((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorDamping",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorDamping();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorDampingOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDampingOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDampingOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDampingOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorDampingOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorDampingOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularMotorDampingOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorDampingOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorDampingOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorDampingOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorDampingOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorDampingOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorDampingOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitution",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitution",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorRestitution",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorRestitution",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularMotorRestitution((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorRestitution",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorRestitution",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorRestitution();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorRestitutionOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitutionOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitutionOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitutionOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorRestitutionOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorRestitutionOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularMotorRestitutionOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorRestitutionOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorRestitutionOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorRestitutionOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorRestitutionOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorRestitutionOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorRestitutionOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabled",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabled",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorEnabled",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularMotorEnabled((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorEnabled",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorEnabled();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetAngularMotorEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabledOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabledOnAxis",2,"Mezzanine::Boole const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetAngularMotorEnabledOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetAngularMotorEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularMotorEnabledOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetAngularMotorEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorEnabledOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetAngularMotorEnabledOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetAngularMotorEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetAngularMotorEnabledOnAxis(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitSoftness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitSoftness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitSoftness",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitSoftness",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitSoftness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetLinearLimitSoftness(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitSoftness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitSoftness",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitSoftness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitSoftness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitDamping",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitDamping",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetLinearLimitDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitDamping",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearLimitRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitRestitution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitRestitution",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearLimitRestitution",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearLimitRestitution",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetLinearLimitRestitution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearLimitRestitution(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitRestitution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearLimitRestitution",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearLimitRestitution",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearLimitRestitution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearMotorMaxForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForce",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForce",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorMaxForce",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorMaxForce",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearMotorMaxForce((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearMotorMaxForceOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForceOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForceOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForceOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorMaxForceOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorMaxForceOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearMotorMaxForceOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearMotorMaxForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorMaxForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorMaxForce",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearMotorMaxForce",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearMotorMaxForce();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearMotorMaxForceOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorMaxForceOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorMaxForceOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorMaxForceOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearMotorMaxForceOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearMotorMaxForceOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearMotorTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocity",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorTargetVelocity",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorTargetVelocity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearMotorTargetVelocity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearMotorTargetVelocityOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocityOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocityOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocityOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorTargetVelocityOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorTargetVelocityOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearMotorTargetVelocityOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearMotorTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorTargetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorTargetVelocity",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearMotorTargetVelocity",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearMotorTargetVelocity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearMotorTargetVelocityOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorTargetVelocityOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorTargetVelocityOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorTargetVelocityOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearMotorTargetVelocityOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearMotorTargetVelocityOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabled",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabled",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorEnabled",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearMotorEnabled((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_SetLinearMotorEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabledOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabledOnAxis",2,"Mezzanine::Boole const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::SetLinearMotorEnabledOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_SetLinearMotorEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearMotorEnabledOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorEnabled",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearMotorEnabled();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetLinearMotorEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorEnabledOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetLinearMotorEnabledOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetLinearMotorEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetLinearMotorEnabledOnAxis(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetValidLinearAxes",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetValidAngularAxes",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::HasParamBeenSet",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Generic6DofConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::Generic6DofConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Generic6DofConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::Generic6DofConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofConstraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofConstraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofConstraint::_GetConstraintBase",1,"Mezzanine::Physics::Generic6DofConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,0))){
    SWIG_fail_ptr("Generic6DofConstraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::Generic6DofConstraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Generic6DofConstraint(void *obj) {
Mezzanine::Physics::Generic6DofConstraint *arg1 = (Mezzanine::Physics::Generic6DofConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_Generic6DofConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Generic6DofConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Generic6DofConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Generic6DofConstraint_methods[]= {
    { "SetPivotTransforms", _wrap_Generic6DofConstraint_SetPivotTransforms},
    { "SetPivotATransform", _wrap_Generic6DofConstraint_SetPivotATransform},
    { "SetPivotBTransform", _wrap_Generic6DofConstraint_SetPivotBTransform},
    { "GetPivotATransform", _wrap_Generic6DofConstraint_GetPivotATransform},
    { "GetPivotBTransform", _wrap_Generic6DofConstraint_GetPivotBTransform},
    { "SetPivotALocation", _wrap_Generic6DofConstraint_SetPivotALocation},
    { "SetPivotBLocation", _wrap_Generic6DofConstraint_SetPivotBLocation},
    { "GetPivotALocation", _wrap_Generic6DofConstraint_GetPivotALocation},
    { "GetPivotBLocation", _wrap_Generic6DofConstraint_GetPivotBLocation},
    { "SetPivotARotation", _wrap_Generic6DofConstraint_SetPivotARotation},
    { "SetPivotBRotation", _wrap_Generic6DofConstraint_SetPivotBRotation},
    { "GetPivotARotation", _wrap_Generic6DofConstraint_GetPivotARotation},
    { "GetPivotBRotation", _wrap_Generic6DofConstraint_GetPivotBRotation},
    { "SetUseFrameOffset", _wrap_Generic6DofConstraint_SetUseFrameOffset},
    { "GetUseFrameOffset", _wrap_Generic6DofConstraint_GetUseFrameOffset},
    { "SetUseLinearReferenceFrameA", _wrap_Generic6DofConstraint_SetUseLinearReferenceFrameA},
    { "GetUseLinearReferenceFrameA", _wrap_Generic6DofConstraint_GetUseLinearReferenceFrameA},
    { "ConvertFrom6AxisTo3Axis", _wrap_Generic6DofConstraint_ConvertFrom6AxisTo3Axis},
    { "ConvertAngularTo6Axis", _wrap_Generic6DofConstraint_ConvertAngularTo6Axis},
    { "SetLimit", _wrap_Generic6DofConstraint_SetLimit},
    { "SetLinearLimitLower", _wrap_Generic6DofConstraint_SetLinearLimitLower},
    { "GetLinearLimitLower", _wrap_Generic6DofConstraint_GetLinearLimitLower},
    { "SetLinearLimitUpper", _wrap_Generic6DofConstraint_SetLinearLimitUpper},
    { "GetLinearLimitUpper", _wrap_Generic6DofConstraint_GetLinearLimitUpper},
    { "SetLinearLimitLowerOnAxis", _wrap_Generic6DofConstraint_SetLinearLimitLowerOnAxis},
    { "GetLinearLimitLowerOnAxis", _wrap_Generic6DofConstraint_GetLinearLimitLowerOnAxis},
    { "SetLinearLimitUpperOnAxis", _wrap_Generic6DofConstraint_SetLinearLimitUpperOnAxis},
    { "GetLinearLimitUpperOnAxis", _wrap_Generic6DofConstraint_GetLinearLimitUpperOnAxis},
    { "SetAngularLimitUpper", _wrap_Generic6DofConstraint_SetAngularLimitUpper},
    { "GetAngularLimitUpper", _wrap_Generic6DofConstraint_GetAngularLimitUpper},
    { "SetAngularLimitLower", _wrap_Generic6DofConstraint_SetAngularLimitLower},
    { "GetAngularLimitLower", _wrap_Generic6DofConstraint_GetAngularLimitLower},
    { "SetAngularLimitLowerOnAxis", _wrap_Generic6DofConstraint_SetAngularLimitLowerOnAxis},
    { "GetAngularLimitLowerOnAxis", _wrap_Generic6DofConstraint_GetAngularLimitLowerOnAxis},
    { "SetAngularLimitUpperOnAxis", _wrap_Generic6DofConstraint_SetAngularLimitUpperOnAxis},
    { "GetAngularLimitUpperOnAxis", _wrap_Generic6DofConstraint_GetAngularLimitUpperOnAxis},
    { "SetAngularLimitMaxForce", _wrap_Generic6DofConstraint_SetAngularLimitMaxForce},
    { "GetAngularLimitMaxForce", _wrap_Generic6DofConstraint_GetAngularLimitMaxForce},
    { "SetAngularLimitMaxForceOnAxis", _wrap_Generic6DofConstraint_SetAngularLimitMaxForceOnAxis},
    { "GetAngularLimitMaxForceOnAxis", _wrap_Generic6DofConstraint_GetAngularLimitMaxForceOnAxis},
    { "SetAngularMotorTargetVelocity", _wrap_Generic6DofConstraint_SetAngularMotorTargetVelocity},
    { "GetAngularMotorTargetVelocity", _wrap_Generic6DofConstraint_GetAngularMotorTargetVelocity},
    { "SetAngularMotorTargetVelocityOnAxis", _wrap_Generic6DofConstraint_SetAngularMotorTargetVelocityOnAxis},
    { "GetAngularMotorTargetVelocityOnAxis", _wrap_Generic6DofConstraint_GetAngularMotorTargetVelocityOnAxis},
    { "SetAngularMotorMaxForce", _wrap_Generic6DofConstraint_SetAngularMotorMaxForce},
    { "GetAngularMotorMaxForce", _wrap_Generic6DofConstraint_GetAngularMotorMaxForce},
    { "SetAngularMotorMaxForceOnAxis", _wrap_Generic6DofConstraint_SetAngularMotorMaxForceOnAxis},
    { "GetAngularMotorMaxForceOnAxis", _wrap_Generic6DofConstraint_GetAngularMotorMaxForceOnAxis},
    { "SetAngularMotorDamping", _wrap_Generic6DofConstraint_SetAngularMotorDamping},
    { "GetAngularMotorDamping", _wrap_Generic6DofConstraint_GetAngularMotorDamping},
    { "SetAngularMotorDampingOnAxis", _wrap_Generic6DofConstraint_SetAngularMotorDampingOnAxis},
    { "GetAngularMotorDampingOnAxis", _wrap_Generic6DofConstraint_GetAngularMotorDampingOnAxis},
    { "SetAngularMotorRestitution", _wrap_Generic6DofConstraint_SetAngularMotorRestitution},
    { "GetAngularMotorRestitution", _wrap_Generic6DofConstraint_GetAngularMotorRestitution},
    { "SetAngularMotorRestitutionOnAxis", _wrap_Generic6DofConstraint_SetAngularMotorRestitutionOnAxis},
    { "GetAngularMotorRestitutionOnAxis", _wrap_Generic6DofConstraint_GetAngularMotorRestitutionOnAxis},
    { "SetAngularMotorEnabled", _wrap_Generic6DofConstraint_SetAngularMotorEnabled},
    { "GetAngularMotorEnabled", _wrap_Generic6DofConstraint_GetAngularMotorEnabled},
    { "SetAngularMotorEnabledOnAxis", _wrap_Generic6DofConstraint_SetAngularMotorEnabledOnAxis},
    { "GetAngularMotorEnabledOnAxis", _wrap_Generic6DofConstraint_GetAngularMotorEnabledOnAxis},
    { "SetLinearLimitSoftness", _wrap_Generic6DofConstraint_SetLinearLimitSoftness},
    { "GetLinearLimitSoftness", _wrap_Generic6DofConstraint_GetLinearLimitSoftness},
    { "SetLinearLimitDamping", _wrap_Generic6DofConstraint_SetLinearLimitDamping},
    { "GetLinearLimitDamping", _wrap_Generic6DofConstraint_GetLinearLimitDamping},
    { "SetLinearLimitRestitution", _wrap_Generic6DofConstraint_SetLinearLimitRestitution},
    { "GetLinearLimitRestitution", _wrap_Generic6DofConstraint_GetLinearLimitRestitution},
    { "SetLinearMotorMaxForce", _wrap_Generic6DofConstraint_SetLinearMotorMaxForce},
    { "SetLinearMotorMaxForceOnAxis", _wrap_Generic6DofConstraint_SetLinearMotorMaxForceOnAxis},
    { "GetLinearMotorMaxForce", _wrap_Generic6DofConstraint_GetLinearMotorMaxForce},
    { "GetLinearMotorMaxForceOnAxis", _wrap_Generic6DofConstraint_GetLinearMotorMaxForceOnAxis},
    { "SetLinearMotorTargetVelocity", _wrap_Generic6DofConstraint_SetLinearMotorTargetVelocity},
    { "SetLinearMotorTargetVelocityOnAxis", _wrap_Generic6DofConstraint_SetLinearMotorTargetVelocityOnAxis},
    { "GetLinearMotorTargetVelocity", _wrap_Generic6DofConstraint_GetLinearMotorTargetVelocity},
    { "GetLinearMotorTargetVelocityOnAxis", _wrap_Generic6DofConstraint_GetLinearMotorTargetVelocityOnAxis},
    { "SetLinearMotorEnabled", _wrap_Generic6DofConstraint_SetLinearMotorEnabled},
    { "SetLinearMotorEnabledOnAxis", _wrap_Generic6DofConstraint_SetLinearMotorEnabledOnAxis},
    { "GetLinearMotorEnabled", _wrap_Generic6DofConstraint_GetLinearMotorEnabled},
    { "GetLinearMotorEnabledOnAxis", _wrap_Generic6DofConstraint_GetLinearMotorEnabledOnAxis},
    { "GetValidParamsOnAxis", _wrap_Generic6DofConstraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_Generic6DofConstraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_Generic6DofConstraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_Generic6DofConstraint_HasParamBeenSet},
    { "ProtoSerializeProperties", _wrap_Generic6DofConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_Generic6DofConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_Generic6DofConstraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_Generic6DofConstraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_Generic6DofConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Generic6DofConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Generic6DofConstraint_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("LinearStart", Mezzanine::Physics::Generic6DofConstraint::LinearStart)},
    {SWIG_LUA_CONSTTAB_INT("LinearX", Mezzanine::Physics::Generic6DofConstraint::LinearX)},
    {SWIG_LUA_CONSTTAB_INT("LinearY", Mezzanine::Physics::Generic6DofConstraint::LinearY)},
    {SWIG_LUA_CONSTTAB_INT("LinearZ", Mezzanine::Physics::Generic6DofConstraint::LinearZ)},
    {SWIG_LUA_CONSTTAB_INT("LinearEnd", Mezzanine::Physics::Generic6DofConstraint::LinearEnd)},
    {SWIG_LUA_CONSTTAB_INT("AngularStart", Mezzanine::Physics::Generic6DofConstraint::AngularStart)},
    {SWIG_LUA_CONSTTAB_INT("AngularX", Mezzanine::Physics::Generic6DofConstraint::AngularX)},
    {SWIG_LUA_CONSTTAB_INT("AngularY", Mezzanine::Physics::Generic6DofConstraint::AngularY)},
    {SWIG_LUA_CONSTTAB_INT("AngularZ", Mezzanine::Physics::Generic6DofConstraint::AngularZ)},
    {SWIG_LUA_CONSTTAB_INT("AngularEnd", Mezzanine::Physics::Generic6DofConstraint::AngularEnd)},
    {SWIG_LUA_CONSTTAB_INT("AngularXAsRotationAxis", Mezzanine::Physics::Generic6DofConstraint::AngularXAsRotationAxis)},
    {SWIG_LUA_CONSTTAB_INT("AngularYAsRotationAxis", Mezzanine::Physics::Generic6DofConstraint::AngularYAsRotationAxis)},
    {SWIG_LUA_CONSTTAB_INT("AngularZAsRotationAxis", Mezzanine::Physics::Generic6DofConstraint::AngularZAsRotationAxis)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Generic6DofConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Generic6DofConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Generic6DofConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Generic6DofConstraint_Sf_SwigStatic = {
    "Generic6DofConstraint",
    swig_Generic6DofConstraint_Sf_SwigStatic_methods,
    swig_Generic6DofConstraint_Sf_SwigStatic_attributes,
    swig_Generic6DofConstraint_Sf_SwigStatic_constants,
    swig_Generic6DofConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Generic6DofConstraint_bases[] = {0,0};
static const char *swig_Generic6DofConstraint_base_names[] = {"Mezzanine::Physics::DualTransformConstraint *",0};
static swig_lua_class _wrap_class_Generic6DofConstraint = { "Generic6DofConstraint", "Generic6DofConstraint", &SWIGTYPE_p_Mezzanine__Physics__Generic6DofConstraint,_proxy__wrap_new_Generic6DofConstraint, swig_delete_Generic6DofConstraint, swig_Generic6DofConstraint_methods, swig_Generic6DofConstraint_attributes, &swig_Generic6DofConstraint_Sf_SwigStatic, swig_Generic6DofConstraint_meta, swig_Generic6DofConstraint_bases, swig_Generic6DofConstraint_base_names };

static int _wrap_new_Generic6DofSpringConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg4 = 0 ;
  Mezzanine::Transform *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Generic6DofSpringConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",4,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",5,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",4,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",5,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Generic6DofSpringConstraint *)new Mezzanine::Physics::Generic6DofSpringConstraint(arg1,arg2,arg3,(Mezzanine::Transform const &)*arg4,(Mezzanine::Transform const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generic6DofSpringConstraint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Generic6DofSpringConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Generic6DofSpringConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Generic6DofSpringConstraint *)new Mezzanine::Physics::Generic6DofSpringConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Generic6DofSpringConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Generic6DofSpringConstraint__SWIG_3(L);
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_Generic6DofSpringConstraint__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Generic6DofSpringConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::Generic6DofSpringConstraint::Generic6DofSpringConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_Generic6DofSpringConstraint_CalculateSpringEquilibriumPoints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::CalculateSpringEquilibriumPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::CalculateSpringEquilibriumPoints",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_CalculateSpringEquilibriumPoints",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  (arg1)->CalculateSpringEquilibriumPoints();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetLinearSpringStiffness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffness",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffness",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringStiffness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringStiffness",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearSpringStiffness((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringStiffness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringStiffness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringStiffness",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringStiffness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringStiffness();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetLinearSpringStiffnessOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffnessOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffnessOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffnessOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringStiffnessOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringStiffnessOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearSpringStiffnessOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringStiffnessOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringStiffnessOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringStiffnessOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringStiffnessOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringStiffnessOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringStiffnessOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetLinearSpringDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDamping",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDamping",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringDamping",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearSpringDamping((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringDamping",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringDamping();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetLinearSpringDampingOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDampingOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDampingOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDampingOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringDampingOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringDampingOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearSpringDampingOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringDampingOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringDampingOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringDampingOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringDampingOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringDampingOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringDampingOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetLinearSpringEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabled",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabled",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringEnabled",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearSpringEnabled((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEnabled",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringEnabled();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetLinearSpringEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabledOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabledOnAxis",2,"Mezzanine::Boole const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetLinearSpringEnabledOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetLinearSpringEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetLinearSpringEnabledOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEnabledOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEnabledOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringEnabledOnAxis(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetLinearSpringEquilibriumPoints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEquilibriumPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetLinearSpringEquilibriumPoints",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetLinearSpringEquilibriumPoints",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetLinearSpringEquilibriumPoints();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetAngularSpringStiffness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffness",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffness",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringStiffness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringStiffness",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularSpringStiffness((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringStiffness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringStiffness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringStiffness",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringStiffness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringStiffness();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetAngularSpringStiffnessOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffnessOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffnessOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffnessOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringStiffnessOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringStiffnessOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularSpringStiffnessOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringStiffnessOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringStiffnessOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringStiffnessOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringStiffnessOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringStiffnessOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringStiffnessOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetAngularSpringDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDamping",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDamping",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringDamping",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularSpringDamping((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringDamping",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringDamping();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetAngularSpringDampingOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDampingOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDampingOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDampingOnAxis",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringDampingOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringDampingOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularSpringDampingOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringDampingOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringDampingOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringDampingOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringDampingOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringDampingOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringDampingOnAxis(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetAngularSpringEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabled",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabled",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringEnabled",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularSpringEnabled((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEnabled",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringEnabled();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetAngularSpringEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabledOnAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabledOnAxis",2,"Mezzanine::Boole const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetAngularSpringEnabledOnAxis",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetAngularSpringEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  (arg1)->SetAngularSpringEnabledOnAxis(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringEnabledOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEnabledOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEnabledOnAxis",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEnabledOnAxis",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringEnabledOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringEnabledOnAxis(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetAngularSpringEquilibriumPoints(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEquilibriumPoints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetAngularSpringEquilibriumPoints",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetAngularSpringEquilibriumPoints",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetAngularSpringEquilibriumPoints();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetSpringStiffness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringStiffness",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringStiffness",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringStiffness",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringStiffness",3,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetSpringStiffness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  (arg1)->SetSpringStiffness(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetSpringStiffness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringStiffness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringStiffness",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringStiffness",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetSpringStiffness",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetSpringStiffness(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetSpringDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringDamping",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringDamping",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringDamping",3,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetSpringDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  (arg1)->SetSpringDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetSpringDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringDamping",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringDamping",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetSpringDamping",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetSpringDamping(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetSpringEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Boole arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEnabled",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEnabled",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEnabled",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEnabled",3,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetSpringEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->SetSpringEnabled(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetSpringEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringEnabled",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringEnabled",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetSpringEnabled",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetSpringEnabled(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_CalculateSpringEquilibriumPoint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::CalculateSpringEquilibriumPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::CalculateSpringEquilibriumPoint",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::CalculateSpringEquilibriumPoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_CalculateSpringEquilibriumPoint",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->CalculateSpringEquilibriumPoint(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_SetSpringEquilibriumPoint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEquilibriumPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEquilibriumPoint",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEquilibriumPoint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::SetSpringEquilibriumPoint",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_SetSpringEquilibriumPoint",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetSpringEquilibriumPoint(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetSpringEquilibriumPoint(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  int arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringEquilibriumPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringEquilibriumPoint",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetSpringEquilibriumPoint",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetSpringEquilibriumPoint",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetSpringEquilibriumPoint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::Generic6DofSpringConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Generic6DofSpringConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::Generic6DofSpringConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,0))){
    SWIG_fail_ptr("Generic6DofSpringConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint);
  }
  
  result = ((Mezzanine::Physics::Generic6DofSpringConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Generic6DofSpringConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Generic6DofSpringConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::Generic6DofSpringConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Generic6DofSpringConstraint(void *obj) {
Mezzanine::Physics::Generic6DofSpringConstraint *arg1 = (Mezzanine::Physics::Generic6DofSpringConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_Generic6DofSpringConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Generic6DofSpringConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Generic6DofSpringConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Generic6DofSpringConstraint_methods[]= {
    { "CalculateSpringEquilibriumPoints", _wrap_Generic6DofSpringConstraint_CalculateSpringEquilibriumPoints},
    { "SetLinearSpringStiffness", _wrap_Generic6DofSpringConstraint_SetLinearSpringStiffness},
    { "GetLinearSpringStiffness", _wrap_Generic6DofSpringConstraint_GetLinearSpringStiffness},
    { "SetLinearSpringStiffnessOnAxis", _wrap_Generic6DofSpringConstraint_SetLinearSpringStiffnessOnAxis},
    { "GetLinearSpringStiffnessOnAxis", _wrap_Generic6DofSpringConstraint_GetLinearSpringStiffnessOnAxis},
    { "SetLinearSpringDamping", _wrap_Generic6DofSpringConstraint_SetLinearSpringDamping},
    { "GetLinearSpringDamping", _wrap_Generic6DofSpringConstraint_GetLinearSpringDamping},
    { "SetLinearSpringDampingOnAxis", _wrap_Generic6DofSpringConstraint_SetLinearSpringDampingOnAxis},
    { "GetLinearSpringDampingOnAxis", _wrap_Generic6DofSpringConstraint_GetLinearSpringDampingOnAxis},
    { "SetLinearSpringEnabled", _wrap_Generic6DofSpringConstraint_SetLinearSpringEnabled},
    { "GetLinearSpringEnabled", _wrap_Generic6DofSpringConstraint_GetLinearSpringEnabled},
    { "SetLinearSpringEnabledOnAxis", _wrap_Generic6DofSpringConstraint_SetLinearSpringEnabledOnAxis},
    { "GetLinearSpringEnabledOnAxis", _wrap_Generic6DofSpringConstraint_GetLinearSpringEnabledOnAxis},
    { "GetLinearSpringEquilibriumPoints", _wrap_Generic6DofSpringConstraint_GetLinearSpringEquilibriumPoints},
    { "SetAngularSpringStiffness", _wrap_Generic6DofSpringConstraint_SetAngularSpringStiffness},
    { "GetAngularSpringStiffness", _wrap_Generic6DofSpringConstraint_GetAngularSpringStiffness},
    { "SetAngularSpringStiffnessOnAxis", _wrap_Generic6DofSpringConstraint_SetAngularSpringStiffnessOnAxis},
    { "GetAngularSpringStiffnessOnAxis", _wrap_Generic6DofSpringConstraint_GetAngularSpringStiffnessOnAxis},
    { "SetAngularSpringDamping", _wrap_Generic6DofSpringConstraint_SetAngularSpringDamping},
    { "GetAngularSpringDamping", _wrap_Generic6DofSpringConstraint_GetAngularSpringDamping},
    { "SetAngularSpringDampingOnAxis", _wrap_Generic6DofSpringConstraint_SetAngularSpringDampingOnAxis},
    { "GetAngularSpringDampingOnAxis", _wrap_Generic6DofSpringConstraint_GetAngularSpringDampingOnAxis},
    { "SetAngularSpringEnabled", _wrap_Generic6DofSpringConstraint_SetAngularSpringEnabled},
    { "GetAngularSpringEnabled", _wrap_Generic6DofSpringConstraint_GetAngularSpringEnabled},
    { "SetAngularSpringEnabledOnAxis", _wrap_Generic6DofSpringConstraint_SetAngularSpringEnabledOnAxis},
    { "GetAngularSpringEnabledOnAxis", _wrap_Generic6DofSpringConstraint_GetAngularSpringEnabledOnAxis},
    { "GetAngularSpringEquilibriumPoints", _wrap_Generic6DofSpringConstraint_GetAngularSpringEquilibriumPoints},
    { "SetSpringStiffness", _wrap_Generic6DofSpringConstraint_SetSpringStiffness},
    { "GetSpringStiffness", _wrap_Generic6DofSpringConstraint_GetSpringStiffness},
    { "SetSpringDamping", _wrap_Generic6DofSpringConstraint_SetSpringDamping},
    { "GetSpringDamping", _wrap_Generic6DofSpringConstraint_GetSpringDamping},
    { "SetSpringEnabled", _wrap_Generic6DofSpringConstraint_SetSpringEnabled},
    { "GetSpringEnabled", _wrap_Generic6DofSpringConstraint_GetSpringEnabled},
    { "CalculateSpringEquilibriumPoint", _wrap_Generic6DofSpringConstraint_CalculateSpringEquilibriumPoint},
    { "SetSpringEquilibriumPoint", _wrap_Generic6DofSpringConstraint_SetSpringEquilibriumPoint},
    { "GetSpringEquilibriumPoint", _wrap_Generic6DofSpringConstraint_GetSpringEquilibriumPoint},
    { "ProtoSerializeProperties", _wrap_Generic6DofSpringConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_Generic6DofSpringConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_Generic6DofSpringConstraint_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_Generic6DofSpringConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Generic6DofSpringConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Generic6DofSpringConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Generic6DofSpringConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Generic6DofSpringConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Generic6DofSpringConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Generic6DofSpringConstraint_Sf_SwigStatic = {
    "Generic6DofSpringConstraint",
    swig_Generic6DofSpringConstraint_Sf_SwigStatic_methods,
    swig_Generic6DofSpringConstraint_Sf_SwigStatic_attributes,
    swig_Generic6DofSpringConstraint_Sf_SwigStatic_constants,
    swig_Generic6DofSpringConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Generic6DofSpringConstraint_bases[] = {0,0};
static const char *swig_Generic6DofSpringConstraint_base_names[] = {"Mezzanine::Physics::Generic6DofConstraint *",0};
static swig_lua_class _wrap_class_Generic6DofSpringConstraint = { "Generic6DofSpringConstraint", "Generic6DofSpringConstraint", &SWIGTYPE_p_Mezzanine__Physics__Generic6DofSpringConstraint,_proxy__wrap_new_Generic6DofSpringConstraint, swig_delete_Generic6DofSpringConstraint, swig_Generic6DofSpringConstraint_methods, swig_Generic6DofSpringConstraint_attributes, &swig_Generic6DofSpringConstraint_Sf_SwigStatic, swig_Generic6DofSpringConstraint_meta, swig_Generic6DofSpringConstraint_bases, swig_Generic6DofSpringConstraint_base_names };

static int _wrap_new_GhostProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GhostProxy",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",2,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_GhostProxy",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)new Mezzanine::Physics::GhostProxy(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::PhysicsManager *arg3 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GhostProxy",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",2,"Mezzanine::Physics::CollisionShape *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",3,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("new_GhostProxy",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_GhostProxy",3,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)new Mezzanine::Physics::GhostProxy(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostProxy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GhostProxy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GhostProxy",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_GhostProxy",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_GhostProxy",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)new Mezzanine::Physics::GhostProxy((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GhostProxy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_GhostProxy__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_GhostProxy__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_GhostProxy__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GhostProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::GhostProxy::GhostProxy(Mezzanine::UInt32 const,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::GhostProxy::GhostProxy(Mezzanine::UInt32 const,Mezzanine::Physics::CollisionShape *,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::GhostProxy::GhostProxy(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_GhostProxy_GetProxyType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  Mezzanine::ProxyType result;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetProxyType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetProxyType",1,"Mezzanine::Physics::GhostProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_GetProxyType",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  result = (Mezzanine::ProxyType)((Mezzanine::Physics::GhostProxy const *)arg1)->GetProxyType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::AddToWorld",1,"Mezzanine::Physics::GhostProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_AddToWorld",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::RemoveFromWorld",1,"Mezzanine::Physics::GhostProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_GetAABBOverlappingProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetAABBOverlappingProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetAABBOverlappingProxy",1,"Mezzanine::Physics::GhostProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetAABBOverlappingProxy",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_GetAABBOverlappingProxy",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::CollidableProxy *)(arg1)->GetAABBOverlappingProxy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_GetNumAABBOverlappingProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetNumAABBOverlappingProxies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetNumAABBOverlappingProxies",1,"Mezzanine::Physics::GhostProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_GetNumAABBOverlappingProxies",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::Physics::GhostProxy const *)arg1)->GetNumAABBOverlappingProxies();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_GetShapeOverlappingProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::Physics::CollidableProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetShapeOverlappingProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetShapeOverlappingProxy",1,"Mezzanine::Physics::GhostProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetShapeOverlappingProxy",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_GetShapeOverlappingProxy",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::Physics::CollidableProxy *)(arg1)->GetShapeOverlappingProxy(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__CollidableProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_GetNumShapeOverlappingProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetNumShapeOverlappingProxies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetNumShapeOverlappingProxies",1,"Mezzanine::Physics::GhostProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_GetNumShapeOverlappingProxies",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::Physics::GhostProxy const *)arg1)->GetNumShapeOverlappingProxies();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::ProtoSerializeProperties",1,"Mezzanine::Physics::GhostProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("GhostProxy_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::GhostProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::ProtoDeSerializeProperties",1,"Mezzanine::Physics::GhostProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("GhostProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::GetDerivedSerializableName",1,"Mezzanine::Physics::GhostProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  result = ((Mezzanine::Physics::GhostProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::GetSerializableName",0,0)
  result = Mezzanine::Physics::GhostProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy__GetPhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  btPairCachingGhostObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::_GetPhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::_GetPhysicsObject",1,"Mezzanine::Physics::GhostProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy__GetPhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  result = (btPairCachingGhostObject *)((Mezzanine::Physics::GhostProxy const *)arg1)->_GetPhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btPairCachingGhostObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GhostProxy__GetBasePhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::GhostProxy::_GetBasePhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::GhostProxy::_GetBasePhysicsObject",1,"Mezzanine::Physics::GhostProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0))){
    SWIG_fail_ptr("GhostProxy__GetBasePhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__GhostProxy);
  }
  
  result = (btCollisionObject *)((Mezzanine::Physics::GhostProxy const *)arg1)->_GetBasePhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GhostProxy(void *obj) {
Mezzanine::Physics::GhostProxy *arg1 = (Mezzanine::Physics::GhostProxy *) obj;
delete arg1;
}
static int _proxy__wrap_new_GhostProxy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GhostProxy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GhostProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GhostProxy_methods[]= {
    { "GetProxyType", _wrap_GhostProxy_GetProxyType},
    { "AddToWorld", _wrap_GhostProxy_AddToWorld},
    { "RemoveFromWorld", _wrap_GhostProxy_RemoveFromWorld},
    { "GetAABBOverlappingProxy", _wrap_GhostProxy_GetAABBOverlappingProxy},
    { "GetNumAABBOverlappingProxies", _wrap_GhostProxy_GetNumAABBOverlappingProxies},
    { "GetShapeOverlappingProxy", _wrap_GhostProxy_GetShapeOverlappingProxy},
    { "GetNumShapeOverlappingProxies", _wrap_GhostProxy_GetNumShapeOverlappingProxies},
    { "ProtoSerializeProperties", _wrap_GhostProxy_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_GhostProxy_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_GhostProxy_GetDerivedSerializableName},
    { "_GetPhysicsObject", _wrap_GhostProxy__GetPhysicsObject},
    { "_GetBasePhysicsObject", _wrap_GhostProxy__GetBasePhysicsObject},
    {0,0}
};
static swig_lua_method swig_GhostProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GhostProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GhostProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GhostProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_GhostProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_GhostProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GhostProxy_Sf_SwigStatic = {
    "GhostProxy",
    swig_GhostProxy_Sf_SwigStatic_methods,
    swig_GhostProxy_Sf_SwigStatic_attributes,
    swig_GhostProxy_Sf_SwigStatic_constants,
    swig_GhostProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GhostProxy_bases[] = {0,0};
static const char *swig_GhostProxy_base_names[] = {"Mezzanine::Physics::CollidableProxy *",0};
static swig_lua_class _wrap_class_GhostProxy = { "GhostProxy", "GhostProxy", &SWIGTYPE_p_Mezzanine__Physics__GhostProxy,_proxy__wrap_new_GhostProxy, swig_delete_GhostProxy, swig_GhostProxy_methods, swig_GhostProxy_attributes, &swig_GhostProxy_Sf_SwigStatic, swig_GhostProxy_meta, swig_GhostProxy_bases, swig_GhostProxy_base_names };

static int _wrap_new_HeightfieldCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::HeightfieldCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Physics::HeightfieldCollisionShape *)new Mezzanine::Physics::HeightfieldCollisionShape((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HeightfieldCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HeightfieldCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btHeightfieldTerrainShape *arg2 = (btHeightfieldTerrainShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::HeightfieldCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape",2,"btHeightfieldTerrainShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btHeightfieldTerrainShape,0))){
    SWIG_fail_ptr("new_HeightfieldCollisionShape",2,SWIGTYPE_p_btHeightfieldTerrainShape);
  }
  
  result = (Mezzanine::Physics::HeightfieldCollisionShape *)new Mezzanine::Physics::HeightfieldCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HeightfieldCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HeightfieldCollisionShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_HeightfieldCollisionShape__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btHeightfieldTerrainShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_HeightfieldCollisionShape__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_HeightfieldCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape(Mezzanine::String const &)\n"
    "    Mezzanine::Physics::HeightfieldCollisionShape::HeightfieldCollisionShape(Mezzanine::String const &,btHeightfieldTerrainShape *)\n");
  lua_error(L);return 0;
}


static int _wrap_HeightfieldCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HeightfieldCollisionShape *arg1 = (Mezzanine::Physics::HeightfieldCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::HeightfieldCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HeightfieldCollisionShape::GetType",1,"Mezzanine::Physics::HeightfieldCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HeightfieldCollisionShape,0))){
    SWIG_fail_ptr("HeightfieldCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__HeightfieldCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::HeightfieldCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HeightfieldCollisionShape(void *obj) {
Mezzanine::Physics::HeightfieldCollisionShape *arg1 = (Mezzanine::Physics::HeightfieldCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_HeightfieldCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HeightfieldCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HeightfieldCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_HeightfieldCollisionShape_methods[]= {
    { "GetType", _wrap_HeightfieldCollisionShape_GetType},
    {0,0}
};
static swig_lua_method swig_HeightfieldCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HeightfieldCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HeightfieldCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HeightfieldCollisionShape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_HeightfieldCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HeightfieldCollisionShape_Sf_SwigStatic = {
    "HeightfieldCollisionShape",
    swig_HeightfieldCollisionShape_Sf_SwigStatic_methods,
    swig_HeightfieldCollisionShape_Sf_SwigStatic_attributes,
    swig_HeightfieldCollisionShape_Sf_SwigStatic_constants,
    swig_HeightfieldCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HeightfieldCollisionShape_bases[] = {0,0};
static const char *swig_HeightfieldCollisionShape_base_names[] = {"Mezzanine::Physics::FieldCollisionShape *",0};
static swig_lua_class _wrap_class_HeightfieldCollisionShape = { "HeightfieldCollisionShape", "HeightfieldCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__HeightfieldCollisionShape,_proxy__wrap_new_HeightfieldCollisionShape, swig_delete_HeightfieldCollisionShape, swig_HeightfieldCollisionShape_methods, swig_HeightfieldCollisionShape_attributes, &swig_HeightfieldCollisionShape_Sf_SwigStatic, swig_HeightfieldCollisionShape_meta, swig_HeightfieldCollisionShape_bases, swig_HeightfieldCollisionShape_base_names };

static int _wrap_new_HingeConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::Vector3 *arg6 = 0 ;
  Mezzanine::Physics::Vector3 *arg7 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg8 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::HingeConstraint",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",6,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",7,"Mezzanine::Physics::Vector3 const &");
  if(!SWIG_isptrtype(L,8)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",8,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_HingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_HingeConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_HingeConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_HingeConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_HingeConstraint",6,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_HingeConstraint",7,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&arg8,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_HingeConstraint",8,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)new Mezzanine::Physics::HingeConstraint(arg1,arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,(Mezzanine::Physics::Vector3 const &)*arg6,(Mezzanine::Physics::Vector3 const &)*arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HingeConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg4 = 0 ;
  Mezzanine::Transform *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::HingeConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",4,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",5,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_HingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_HingeConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_HingeConstraint",4,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_HingeConstraint",5,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_HingeConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)new Mezzanine::Physics::HingeConstraint(arg1,arg2,arg3,(Mezzanine::Transform const &)*arg4,(Mezzanine::Transform const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HingeConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg5 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::HingeConstraint",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",3,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",5,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_HingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_HingeConstraint",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_HingeConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_HingeConstraint",5,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)new Mezzanine::Physics::HingeConstraint(arg1,arg2,(Mezzanine::Physics::Vector3 const &)*arg3,(Mezzanine::Physics::Vector3 const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HingeConstraint__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg4 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::HingeConstraint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",3,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",4,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_HingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_HingeConstraint",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_HingeConstraint",4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)new Mezzanine::Physics::HingeConstraint(arg1,arg2,(Mezzanine::Transform const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HingeConstraint__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::HingeConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::HingeConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HingeConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_HingeConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_HingeConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::HingeConstraint *)new Mezzanine::Physics::HingeConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_HingeConstraint(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_HingeConstraint__SWIG_4(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_HingeConstraint__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_HingeConstraint__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_HingeConstraint__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  {
                    void *ptr;
                    if (SWIG_isptrtype(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_new_HingeConstraint__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_HingeConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::HingeConstraint::HingeConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::HingeConstraint::HingeConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::HingeConstraint::HingeConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::HingeConstraint::HingeConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::HingeConstraint::HingeConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_HingeConstraint_SetPivotTransforms(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetPivotTransforms",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotTransforms",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotTransforms",2,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotTransforms",3,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotTransforms",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotTransforms",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotTransforms",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotTransforms((Mezzanine::Transform const &)*arg2,(Mezzanine::Transform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetPivotATransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotATransform",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotATransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotATransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotATransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetPivotBTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotBTransform",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotBTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotBTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotBTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetPivotATransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetPivotATransform",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetPivotATransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetPivotBTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetPivotBTransform",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetPivotBTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetPivotALocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotALocation",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotALocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotALocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotALocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetPivotBLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotBLocation",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetPivotBLocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("HingeConstraint_SetPivotBLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotBLocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetPivotALocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetPivotALocation",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetPivotALocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetPivotBLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetPivotBLocation",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetPivotBLocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetAPivotRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetAPivotRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetAPivotRotation",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetAPivotRotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetAPivotRotation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("HingeConstraint_SetAPivotRotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetAPivotRotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetBPivotRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetBPivotRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetBPivotRotation",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetBPivotRotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetBPivotRotation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("HingeConstraint_SetBPivotRotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetBPivotRotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetAPivotRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetAPivotRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetAPivotRotation",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetAPivotRotation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetAPivotRotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetBPivotRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetBPivotRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetBPivotRotation",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetBPivotRotation",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetBPivotRotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetAxis",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetAxis",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetAxis",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("HingeConstraint_SetAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAxis((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetHingeAngle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetHingeAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetHingeAngle",1,"Mezzanine::Physics::HingeConstraint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetHingeAngle",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)(arg1)->GetHingeAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetUseFrameOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetUseFrameOffset",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetUseFrameOffset",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetUseFrameOffset",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetUseFrameOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetUseFrameOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetUseFrameOffset",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetUseFrameOffset",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetUseFrameOffset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetUseReferenceFrameA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetUseReferenceFrameA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetUseReferenceFrameA",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetUseReferenceFrameA",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetUseReferenceFrameA",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetUseReferenceFrameA(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetUseReferenceFrameA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetUseReferenceFrameA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetUseReferenceFrameA",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetUseReferenceFrameA",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetUseReferenceFrameA();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetLimits__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  Mezzanine::Real arg6 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetLimits",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",5,"Mezzanine::Real const");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",6,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  arg6 = (Mezzanine::Real const)lua_tonumber(L, 6);
  (arg1)->SetLimits(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetLimits__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetLimits",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetLimits(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetLimits__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetLimits",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLimits(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetLimits__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetLimits",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetLimits",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetLimits(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetLimits(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__HingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_HingeConstraint_SetLimits__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__HingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_HingeConstraint_SetLimits__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__HingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_HingeConstraint_SetLimits__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__HingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_HingeConstraint_SetLimits__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HingeConstraint_SetLimits'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::HingeConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::HingeConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::HingeConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::HingeConstraint::SetLimits(Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_HingeConstraint_GetLimitLow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetLimitLow",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetLimitLow",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetLimitLow",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetLimitLow();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetLimitHigh(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetLimitHigh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetLimitHigh",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetLimitHigh",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetLimitHigh();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetLimitSoftness(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetLimitSoftness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetLimitSoftness",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetLimitSoftness",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetLimitSoftness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetLimitBiasFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetLimitBiasFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetLimitBiasFactor",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetLimitBiasFactor",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetLimitBiasFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetLimitRelaxationFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetLimitRelaxationFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetLimitRelaxationFactor",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetLimitRelaxationFactor",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetLimitRelaxationFactor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_EnableMotor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::EnableMotor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::EnableMotor",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::EnableMotor",2,"Mezzanine::Boole const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::EnableMotor",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::EnableMotor",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_EnableMotor",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->EnableMotor(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetMotorEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorEnabled",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorEnabled",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetMotorEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetMotorEnabled(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetMotorEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetMotorEnabled",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetMotorEnabled",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetMotorEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetMaxMotorImpulse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetMaxMotorImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMaxMotorImpulse",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMaxMotorImpulse",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetMaxMotorImpulse",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMaxMotorImpulse(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetMaxMotorImpulse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetMaxMotorImpulse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetMaxMotorImpulse",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetMaxMotorImpulse",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetMaxMotorImpulse();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetMotorTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetMotorTargetVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTargetVelocity",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTargetVelocity",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetMotorTargetVelocity",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMotorTargetVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetMotorTargetVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetMotorTargetVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetMotorTargetVelocity",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetMotorTargetVelocity",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::HingeConstraint const *)arg1)->GetMotorTargetVelocity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetMotorTarget__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetMotorTarget",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTarget",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTarget",2,"Mezzanine::Quaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTarget",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetMotorTarget",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("HingeConstraint_SetMotorTarget",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetMotorTarget((Mezzanine::Quaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetMotorTarget__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::SetMotorTarget",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTarget",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTarget",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::SetMotorTarget",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_SetMotorTarget",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetMotorTarget(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_SetMotorTarget(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__HingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_HingeConstraint_SetMotorTarget__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__HingeConstraint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_HingeConstraint_SetMotorTarget__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'HingeConstraint_SetMotorTarget'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::HingeConstraint::SetMotorTarget(Mezzanine::Quaternion const &,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::HingeConstraint::SetMotorTarget(Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_HingeConstraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::HingeConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetValidLinearAxes",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetValidAngularAxes",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HasParamBeenSet",1,"Mezzanine::Physics::HingeConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::HingeConstraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::HingeConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("HingeConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::HingeConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::HingeConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("HingeConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = ((Mezzanine::Physics::HingeConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::HingeConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_HingeConstraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::HingeConstraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::HingeConstraint::_GetConstraintBase",1,"Mezzanine::Physics::HingeConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,0))){
    SWIG_fail_ptr("HingeConstraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__HingeConstraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::HingeConstraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_HingeConstraint(void *obj) {
Mezzanine::Physics::HingeConstraint *arg1 = (Mezzanine::Physics::HingeConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_HingeConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_HingeConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_HingeConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_HingeConstraint_methods[]= {
    { "SetPivotTransforms", _wrap_HingeConstraint_SetPivotTransforms},
    { "SetPivotATransform", _wrap_HingeConstraint_SetPivotATransform},
    { "SetPivotBTransform", _wrap_HingeConstraint_SetPivotBTransform},
    { "GetPivotATransform", _wrap_HingeConstraint_GetPivotATransform},
    { "GetPivotBTransform", _wrap_HingeConstraint_GetPivotBTransform},
    { "SetPivotALocation", _wrap_HingeConstraint_SetPivotALocation},
    { "SetPivotBLocation", _wrap_HingeConstraint_SetPivotBLocation},
    { "GetPivotALocation", _wrap_HingeConstraint_GetPivotALocation},
    { "GetPivotBLocation", _wrap_HingeConstraint_GetPivotBLocation},
    { "SetAPivotRotation", _wrap_HingeConstraint_SetAPivotRotation},
    { "SetBPivotRotation", _wrap_HingeConstraint_SetBPivotRotation},
    { "GetAPivotRotation", _wrap_HingeConstraint_GetAPivotRotation},
    { "GetBPivotRotation", _wrap_HingeConstraint_GetBPivotRotation},
    { "SetAxis", _wrap_HingeConstraint_SetAxis},
    { "GetHingeAngle", _wrap_HingeConstraint_GetHingeAngle},
    { "SetUseFrameOffset", _wrap_HingeConstraint_SetUseFrameOffset},
    { "GetUseFrameOffset", _wrap_HingeConstraint_GetUseFrameOffset},
    { "SetUseReferenceFrameA", _wrap_HingeConstraint_SetUseReferenceFrameA},
    { "GetUseReferenceFrameA", _wrap_HingeConstraint_GetUseReferenceFrameA},
    { "SetLimits", _wrap_HingeConstraint_SetLimits},
    { "GetLimitLow", _wrap_HingeConstraint_GetLimitLow},
    { "GetLimitHigh", _wrap_HingeConstraint_GetLimitHigh},
    { "GetLimitSoftness", _wrap_HingeConstraint_GetLimitSoftness},
    { "GetLimitBiasFactor", _wrap_HingeConstraint_GetLimitBiasFactor},
    { "GetLimitRelaxationFactor", _wrap_HingeConstraint_GetLimitRelaxationFactor},
    { "EnableMotor", _wrap_HingeConstraint_EnableMotor},
    { "SetMotorEnabled", _wrap_HingeConstraint_SetMotorEnabled},
    { "GetMotorEnabled", _wrap_HingeConstraint_GetMotorEnabled},
    { "SetMaxMotorImpulse", _wrap_HingeConstraint_SetMaxMotorImpulse},
    { "GetMaxMotorImpulse", _wrap_HingeConstraint_GetMaxMotorImpulse},
    { "SetMotorTargetVelocity", _wrap_HingeConstraint_SetMotorTargetVelocity},
    { "GetMotorTargetVelocity", _wrap_HingeConstraint_GetMotorTargetVelocity},
    { "SetMotorTarget", _wrap_HingeConstraint_SetMotorTarget},
    { "GetValidParamsOnAxis", _wrap_HingeConstraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_HingeConstraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_HingeConstraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_HingeConstraint_HasParamBeenSet},
    { "ProtoSerializeProperties", _wrap_HingeConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_HingeConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_HingeConstraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_HingeConstraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_HingeConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_HingeConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_HingeConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_HingeConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_HingeConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_HingeConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_HingeConstraint_Sf_SwigStatic = {
    "HingeConstraint",
    swig_HingeConstraint_Sf_SwigStatic_methods,
    swig_HingeConstraint_Sf_SwigStatic_attributes,
    swig_HingeConstraint_Sf_SwigStatic_constants,
    swig_HingeConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_HingeConstraint_bases[] = {0,0};
static const char *swig_HingeConstraint_base_names[] = {"Mezzanine::Physics::DualTransformConstraint *",0};
static swig_lua_class _wrap_class_HingeConstraint = { "HingeConstraint", "HingeConstraint", &SWIGTYPE_p_Mezzanine__Physics__HingeConstraint,_proxy__wrap_new_HingeConstraint, swig_delete_HingeConstraint, swig_HingeConstraint_methods, swig_HingeConstraint_attributes, &swig_HingeConstraint_Sf_SwigStatic, swig_HingeConstraint_meta, swig_HingeConstraint_bases, swig_HingeConstraint_base_names };

static int _wrap_ManagerConstructionInfo_PhysicsFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::PhysicsFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::PhysicsFlags",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::PhysicsFlags",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_PhysicsFlags_set",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  if (arg1) (arg1)->PhysicsFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_PhysicsFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::PhysicsFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::PhysicsFlags",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_PhysicsFlags_get",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  result = (Mezzanine::Whole) ((arg1)->PhysicsFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_MaxProxies_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::MaxProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::MaxProxies",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::MaxProxies",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_MaxProxies_set",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  if (arg1) (arg1)->MaxProxies = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_MaxProxies_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::MaxProxies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::MaxProxies",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_MaxProxies_get",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  result = (Mezzanine::Whole) ((arg1)->MaxProxies);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_GeographyLowerBounds_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = (Mezzanine::Physics::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::GeographyLowerBounds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::GeographyLowerBounds",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::GeographyLowerBounds",2,"Mezzanine::Physics::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_GeographyLowerBounds_set",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_GeographyLowerBounds_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->GeographyLowerBounds = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_GeographyLowerBounds_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Physics::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::GeographyLowerBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::GeographyLowerBounds",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_GeographyLowerBounds_get",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  result = (Mezzanine::Physics::Vector3 *)& ((arg1)->GeographyLowerBounds);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_GeographyUpperBounds_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = (Mezzanine::Physics::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::GeographyUpperBounds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::GeographyUpperBounds",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::GeographyUpperBounds",2,"Mezzanine::Physics::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_GeographyUpperBounds_set",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_GeographyUpperBounds_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->GeographyUpperBounds = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_GeographyUpperBounds_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Physics::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::GeographyUpperBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::GeographyUpperBounds",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_GeographyUpperBounds_get",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  result = (Mezzanine::Physics::Vector3 *)& ((arg1)->GeographyUpperBounds);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_Gravity_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = (Mezzanine::Physics::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::Gravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::Gravity",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::Gravity",2,"Mezzanine::Physics::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_Gravity_set",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_Gravity_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Gravity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerConstructionInfo_Gravity_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) 0 ;
  Mezzanine::Physics::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::Gravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::ManagerConstructionInfo::Gravity",1,"Mezzanine::Physics::ManagerConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("ManagerConstructionInfo_Gravity_get",1,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  result = (Mezzanine::Physics::Vector3 *)& ((arg1)->Gravity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ManagerConstructionInfo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::ManagerConstructionInfo *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::ManagerConstructionInfo::ManagerConstructionInfo",0,0)
  result = (Mezzanine::Physics::ManagerConstructionInfo *)new Mezzanine::Physics::ManagerConstructionInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagerConstructionInfo(void *obj) {
Mezzanine::Physics::ManagerConstructionInfo *arg1 = (Mezzanine::Physics::ManagerConstructionInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ManagerConstructionInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ManagerConstructionInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ManagerConstructionInfo_attributes[] = {
    { "PhysicsFlags", _wrap_ManagerConstructionInfo_PhysicsFlags_get, _wrap_ManagerConstructionInfo_PhysicsFlags_set },
    { "MaxProxies", _wrap_ManagerConstructionInfo_MaxProxies_get, _wrap_ManagerConstructionInfo_MaxProxies_set },
    { "GeographyLowerBounds", _wrap_ManagerConstructionInfo_GeographyLowerBounds_get, _wrap_ManagerConstructionInfo_GeographyLowerBounds_set },
    { "GeographyUpperBounds", _wrap_ManagerConstructionInfo_GeographyUpperBounds_get, _wrap_ManagerConstructionInfo_GeographyUpperBounds_set },
    { "Gravity", _wrap_ManagerConstructionInfo_Gravity_get, _wrap_ManagerConstructionInfo_Gravity_set },
    {0,0,0}
};
static swig_lua_method swig_ManagerConstructionInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_ManagerConstructionInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagerConstructionInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagerConstructionInfo_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PCF_SoftRigidWorld", Mezzanine::Physics::ManagerConstructionInfo::PCF_SoftRigidWorld)},
    {SWIG_LUA_CONSTTAB_INT("PCF_LimitlessWorld", Mezzanine::Physics::ManagerConstructionInfo::PCF_LimitlessWorld)},
    {SWIG_LUA_CONSTTAB_INT("PCF_Multithreaded", Mezzanine::Physics::ManagerConstructionInfo::PCF_Multithreaded)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagerConstructionInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ManagerConstructionInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagerConstructionInfo_Sf_SwigStatic = {
    "ManagerConstructionInfo",
    swig_ManagerConstructionInfo_Sf_SwigStatic_methods,
    swig_ManagerConstructionInfo_Sf_SwigStatic_attributes,
    swig_ManagerConstructionInfo_Sf_SwigStatic_constants,
    swig_ManagerConstructionInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagerConstructionInfo_bases[] = {0};
static const char *swig_ManagerConstructionInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ManagerConstructionInfo = { "ManagerConstructionInfo", "ManagerConstructionInfo", &SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,_proxy__wrap_new_ManagerConstructionInfo, swig_delete_ManagerConstructionInfo, swig_ManagerConstructionInfo_methods, swig_ManagerConstructionInfo_attributes, &swig_ManagerConstructionInfo_Sf_SwigStatic, swig_ManagerConstructionInfo_meta, swig_ManagerConstructionInfo_bases, swig_ManagerConstructionInfo_base_names };

static int _wrap_new_MultiSphereCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  std::vector< Mezzanine::Physics::Vector3 > *arg2 = 0 ;
  std::vector< Mezzanine::Real > *arg3 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::MultiSphereCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",2,"std::vector< Mezzanine::Physics::Vector3 > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",3,"std::vector< Mezzanine::Real > const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t,0))){
    SWIG_fail_ptr("new_MultiSphereCollisionShape",2,SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_MultiSphereCollisionShape",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (Mezzanine::Physics::MultiSphereCollisionShape *)new Mezzanine::Physics::MultiSphereCollisionShape((Mezzanine::String const &)*arg1,(std::vector< Mezzanine::Physics::Vector3 > const &)*arg2,(std::vector< Mezzanine::Real > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultiSphereCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btMultiSphereShape *arg2 = (btMultiSphereShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::MultiSphereCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",2,"btMultiSphereShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btMultiSphereShape,0))){
    SWIG_fail_ptr("new_MultiSphereCollisionShape",2,SWIGTYPE_p_btMultiSphereShape);
  }
  
  result = (Mezzanine::Physics::MultiSphereCollisionShape *)new Mezzanine::Physics::MultiSphereCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultiSphereCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::MultiSphereCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_MultiSphereCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::MultiSphereCollisionShape *)new Mezzanine::Physics::MultiSphereCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultiSphereCollisionShape(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MultiSphereCollisionShape__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btMultiSphereShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_MultiSphereCollisionShape__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__Vector3_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_MultiSphereCollisionShape__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MultiSphereCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape(Mezzanine::String const &,std::vector< Mezzanine::Physics::Vector3 > const &,std::vector< Mezzanine::Real > const &)\n"
    "    Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape(Mezzanine::String const &,btMultiSphereShape *)\n"
    "    Mezzanine::Physics::MultiSphereCollisionShape::MultiSphereCollisionShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_MultiSphereCollisionShape_GetSphereLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::GetSphereLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetSphereLocation",1,"Mezzanine::Physics::MultiSphereCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetSphereLocation",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_GetSphereLocation",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Physics::MultiSphereCollisionShape const *)arg1)->GetSphereLocation((Mezzanine::Whole const &)*arg2);
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_GetSphereRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::GetSphereRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetSphereRadius",1,"Mezzanine::Physics::MultiSphereCollisionShape const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetSphereRadius",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_GetSphereRadius",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)((Mezzanine::Physics::MultiSphereCollisionShape const *)arg1)->GetSphereRadius((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_GetNumSpheres(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::GetNumSpheres",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetNumSpheres",1,"Mezzanine::Physics::MultiSphereCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_GetNumSpheres",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::Physics::MultiSphereCollisionShape const *)arg1)->GetNumSpheres();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetType",1,"Mezzanine::Physics::MultiSphereCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::MultiSphereCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_GetMultiSphereShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  btMultiSphereShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::GetMultiSphereShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::GetMultiSphereShape",1,"Mezzanine::Physics::MultiSphereCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_GetMultiSphereShape",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  result = (btMultiSphereShape *)((Mezzanine::Physics::MultiSphereCollisionShape const *)arg1)->GetMultiSphereShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btMultiSphereShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::MultiSphereCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::MultiSphereCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::MultiSphereCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::MultiSphereCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("MultiSphereCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultiSphereCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::MultiSphereCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::MultiSphereCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MultiSphereCollisionShape(void *obj) {
Mezzanine::Physics::MultiSphereCollisionShape *arg1 = (Mezzanine::Physics::MultiSphereCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_MultiSphereCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MultiSphereCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MultiSphereCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MultiSphereCollisionShape_methods[]= {
    { "GetSphereLocation", _wrap_MultiSphereCollisionShape_GetSphereLocation},
    { "GetSphereRadius", _wrap_MultiSphereCollisionShape_GetSphereRadius},
    { "GetNumSpheres", _wrap_MultiSphereCollisionShape_GetNumSpheres},
    { "GetType", _wrap_MultiSphereCollisionShape_GetType},
    { "GetMultiSphereShape", _wrap_MultiSphereCollisionShape_GetMultiSphereShape},
    { "ProtoSerialize", _wrap_MultiSphereCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_MultiSphereCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_MultiSphereCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MultiSphereCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MultiSphereCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MultiSphereCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_MultiSphereCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_MultiSphereCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MultiSphereCollisionShape_Sf_SwigStatic = {
    "MultiSphereCollisionShape",
    swig_MultiSphereCollisionShape_Sf_SwigStatic_methods,
    swig_MultiSphereCollisionShape_Sf_SwigStatic_attributes,
    swig_MultiSphereCollisionShape_Sf_SwigStatic_constants,
    swig_MultiSphereCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MultiSphereCollisionShape_bases[] = {0,0};
static const char *swig_MultiSphereCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_MultiSphereCollisionShape = { "MultiSphereCollisionShape", "MultiSphereCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__MultiSphereCollisionShape,_proxy__wrap_new_MultiSphereCollisionShape, swig_delete_MultiSphereCollisionShape, swig_MultiSphereCollisionShape_methods, swig_MultiSphereCollisionShape_attributes, &swig_MultiSphereCollisionShape_Sf_SwigStatic, swig_MultiSphereCollisionShape_meta, swig_MultiSphereCollisionShape_bases, swig_MultiSphereCollisionShape_base_names };

static int _wrap_Plane_Normal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Plane::Normal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Normal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Normal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Distance",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Real) ((arg1)->Distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",0,0)
  result = (Mezzanine::Plane *)new Mezzanine::Plane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Plane",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Ogre__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Ogre::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Plane__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Plane__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Plane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Plane()\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Plane const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Ogre::Plane const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Define__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Plane::Define",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Plane_Define__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_Define'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetSide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane::Side result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane::Side result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::GetSide",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_GetSide__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_GetSide__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_GetSide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetDistance",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Plane const *)arg1)->GetDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOverlap(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Ray result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOverlap((Mezzanine::Plane const &)*arg2);
  {
    Mezzanine::Ray * resultptr = new Mezzanine::Ray((const Mezzanine::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  
  SWIG_check_num_args("Mezzanine::Plane::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Intersects",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Intersects",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Plane_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::Plane::RayTestResult * resultptr = new Mezzanine::Plane::RayTestResult((const Mezzanine::Plane::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ExtractOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ExtractOgrePlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",2,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",2,SWIGTYPE_p_Ogre__Plane);
  }
  
  (arg1)->ExtractOgrePlane((Ogre::Plane const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOgrePlane",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOgrePlane",1,"Mezzanine::Plane const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOgrePlane();
  {
    Ogre::Plane * resultptr = new Ogre::Plane((const Ogre::Plane &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Plane,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Plane const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSerializableName",0,0)
  result = Mezzanine::Plane::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::operator ==",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::operator ==",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->operator ==((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Plane(void *obj) {
Mezzanine::Plane *arg1 = (Mezzanine::Plane *) obj;
delete arg1;
}
static int _proxy__wrap_new_Plane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Plane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Plane_attributes[] = {
    { "Normal", _wrap_Plane_Normal_get, _wrap_Plane_Normal_set },
    { "Distance", _wrap_Plane_Distance_get, _wrap_Plane_Distance_set },
    {0,0,0}
};
static swig_lua_method swig_Plane_methods[]= {
    { "Define", _wrap_Plane_Define},
    { "GetSide", _wrap_Plane_GetSide},
    { "GetDistance", _wrap_Plane_GetDistance},
    { "GetOverlap", _wrap_Plane_GetOverlap},
    { "IsOverlapping", _wrap_Plane_IsOverlapping},
    { "Intersects", _wrap_Plane_Intersects},
    { "ExtractOgrePlane", _wrap_Plane_ExtractOgrePlane},
    { "GetOgrePlane", _wrap_Plane_GetOgrePlane},
    { "ProtoSerialize", _wrap_Plane_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Plane_ProtoDeSerialize},
    { "__eq", _wrap_Plane___eq},
    {0,0}
};
static swig_lua_method swig_Plane_meta[] = {
    { "__eq", _wrap_Plane___eq},
    {0,0}
};

static swig_lua_attribute swig_Plane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Plane_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("S_None", Mezzanine::Plane::S_None)},
    {SWIG_LUA_CONSTTAB_INT("S_Positive", Mezzanine::Plane::S_Positive)},
    {SWIG_LUA_CONSTTAB_INT("S_Negative", Mezzanine::Plane::S_Negative)},
    {SWIG_LUA_CONSTTAB_INT("S_Both", Mezzanine::Plane::S_Both)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Plane_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Plane_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Plane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Plane_Sf_SwigStatic = {
    "Plane",
    swig_Plane_Sf_SwigStatic_methods,
    swig_Plane_Sf_SwigStatic_attributes,
    swig_Plane_Sf_SwigStatic_constants,
    swig_Plane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Plane_bases[] = {0};
static const char *swig_Plane_base_names[] = {0};
static swig_lua_class _wrap_class_Plane = { "Plane", "Plane", &SWIGTYPE_p_Mezzanine__Plane,_proxy__wrap_new_Plane, swig_delete_Plane, swig_Plane_methods, swig_Plane_attributes, &swig_Plane_Sf_SwigStatic, swig_Plane_meta, swig_Plane_bases, swig_Plane_base_names };

static int _wrap_new_PlaneCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::PlaneCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",2,"Mezzanine::Plane const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("new_PlaneCollisionShape",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Physics::PlaneCollisionShape *)new Mezzanine::Physics::PlaneCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Plane const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlaneCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::PlaneCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",2,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",3,"Mezzanine::Real const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_PlaneCollisionShape",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  result = (Mezzanine::Physics::PlaneCollisionShape *)new Mezzanine::Physics::PlaneCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Physics::Vector3 const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlaneCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btStaticPlaneShape *arg2 = (btStaticPlaneShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::PlaneCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",2,"btStaticPlaneShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btStaticPlaneShape,0))){
    SWIG_fail_ptr("new_PlaneCollisionShape",2,SWIGTYPE_p_btStaticPlaneShape);
  }
  
  result = (Mezzanine::Physics::PlaneCollisionShape *)new Mezzanine::Physics::PlaneCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlaneCollisionShape__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PlaneCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape",1,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_PlaneCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Physics::PlaneCollisionShape *)new Mezzanine::Physics::PlaneCollisionShape((XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PlaneCollisionShape(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_PlaneCollisionShape__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btStaticPlaneShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PlaneCollisionShape__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_PlaneCollisionShape__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_PlaneCollisionShape__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_PlaneCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape(Mezzanine::String const &,Mezzanine::Plane const &)\n"
    "    Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape(Mezzanine::String const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape(Mezzanine::String const &,btStaticPlaneShape *)\n"
    "    Mezzanine::Physics::PlaneCollisionShape::PlaneCollisionShape(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_PlaneCollisionShape_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PlaneCollisionShape *arg1 = (Mezzanine::Physics::PlaneCollisionShape *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::GetNormal",1,"Mezzanine::Physics::PlaneCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,0))){
    SWIG_fail_ptr("PlaneCollisionShape_GetNormal",1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape);
  }
  
  result = ((Mezzanine::Physics::PlaneCollisionShape const *)arg1)->GetNormal();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaneCollisionShape_GetConstant(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PlaneCollisionShape *arg1 = (Mezzanine::Physics::PlaneCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::GetConstant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::GetConstant",1,"Mezzanine::Physics::PlaneCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,0))){
    SWIG_fail_ptr("PlaneCollisionShape_GetConstant",1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::PlaneCollisionShape const *)arg1)->GetConstant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaneCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PlaneCollisionShape *arg1 = (Mezzanine::Physics::PlaneCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::GetType",1,"Mezzanine::Physics::PlaneCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,0))){
    SWIG_fail_ptr("PlaneCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::PlaneCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaneCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PlaneCollisionShape *arg1 = (Mezzanine::Physics::PlaneCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::PlaneCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,0))){
    SWIG_fail_ptr("PlaneCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PlaneCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::PlaneCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaneCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::PlaneCollisionShape *arg1 = (Mezzanine::Physics::PlaneCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::PlaneCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::PlaneCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,0))){
    SWIG_fail_ptr("PlaneCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("PlaneCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PlaneCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::PlaneCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::PlaneCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PlaneCollisionShape(void *obj) {
Mezzanine::Physics::PlaneCollisionShape *arg1 = (Mezzanine::Physics::PlaneCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_PlaneCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PlaneCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PlaneCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PlaneCollisionShape_methods[]= {
    { "GetNormal", _wrap_PlaneCollisionShape_GetNormal},
    { "GetConstant", _wrap_PlaneCollisionShape_GetConstant},
    { "GetType", _wrap_PlaneCollisionShape_GetType},
    { "ProtoSerialize", _wrap_PlaneCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_PlaneCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_PlaneCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PlaneCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PlaneCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PlaneCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_PlaneCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_PlaneCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PlaneCollisionShape_Sf_SwigStatic = {
    "PlaneCollisionShape",
    swig_PlaneCollisionShape_Sf_SwigStatic_methods,
    swig_PlaneCollisionShape_Sf_SwigStatic_attributes,
    swig_PlaneCollisionShape_Sf_SwigStatic_constants,
    swig_PlaneCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PlaneCollisionShape_bases[] = {0,0};
static const char *swig_PlaneCollisionShape_base_names[] = {"Mezzanine::Physics::FieldCollisionShape *",0};
static swig_lua_class _wrap_class_PlaneCollisionShape = { "PlaneCollisionShape", "PlaneCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__PlaneCollisionShape,_proxy__wrap_new_PlaneCollisionShape, swig_delete_PlaneCollisionShape, swig_PlaneCollisionShape_methods, swig_PlaneCollisionShape_attributes, &swig_PlaneCollisionShape_Sf_SwigStatic, swig_PlaneCollisionShape_meta, swig_PlaneCollisionShape_bases, swig_PlaneCollisionShape_base_names };

static int _wrap_new_Point2PointConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Point2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Point2PointConstraint *)new Mezzanine::Physics::Point2PointConstraint(arg1,arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point2PointConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg3 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg4 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Point2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",3,"Mezzanine::Physics::Vector3 const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",4,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Point2PointConstraint *)new Mezzanine::Physics::Point2PointConstraint(arg1,arg2,(Mezzanine::Physics::Vector3 const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point2PointConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::Point2PointConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_Point2PointConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::Point2PointConstraint *)new Mezzanine::Physics::Point2PointConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Point2PointConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Point2PointConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_Point2PointConstraint__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_Point2PointConstraint__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Point2PointConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::Point2PointConstraint::Point2PointConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_Point2PointConstraint_SetPivotA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::SetPivotA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetPivotA",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetPivotA",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetPivotA",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetPivotA",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotA((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_SetPivotB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::SetPivotB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetPivotB",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetPivotB",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetPivotB",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetPivotB",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotB((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetPivotA(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetPivotA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetPivotA",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetPivotA",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetPivotA();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetPivotB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetPivotB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetPivotB",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetPivotB",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetPivotB();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_SetImpulseClamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::SetImpulseClamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetImpulseClamping",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetImpulseClamping",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetImpulseClamping",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetImpulseClamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetImpulseClamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetImpulseClamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetImpulseClamping",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetImpulseClamping",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetImpulseClamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::SetDamping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetDamping",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetDamping",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetDamping",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDamping(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetDamping",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetDamping",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_SetTAU(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::SetTAU",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetTAU",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::SetTAU",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_SetTAU",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetTAU(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetTAU(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetTAU",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetTAU",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetTAU",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetTAU();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::Point2PointConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetValidLinearAxes",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetValidAngularAxes",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::HasParamBeenSet",1,"Mezzanine::Physics::Point2PointConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::Point2PointConstraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_ProtoSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::ProtoSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoSerializeInitData",1,"Mezzanine::Physics::Point2PointConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoSerializeInitData",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->ProtoSerializeInitData(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::Point2PointConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_ProtoDeSerializeInitData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::ProtoDeSerializeInitData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoDeSerializeInitData",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoDeSerializeInitData",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoDeSerializeInitData",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoDeSerializeInitData",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeInitData((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::Point2PointConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Point2PointConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = ((Mezzanine::Physics::Point2PointConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::Point2PointConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Point2PointConstraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::Point2PointConstraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::Point2PointConstraint::_GetConstraintBase",1,"Mezzanine::Physics::Point2PointConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,0))){
    SWIG_fail_ptr("Point2PointConstraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::Point2PointConstraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Point2PointConstraint(void *obj) {
Mezzanine::Physics::Point2PointConstraint *arg1 = (Mezzanine::Physics::Point2PointConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_Point2PointConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Point2PointConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Point2PointConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Point2PointConstraint_methods[]= {
    { "SetPivotA", _wrap_Point2PointConstraint_SetPivotA},
    { "SetPivotB", _wrap_Point2PointConstraint_SetPivotB},
    { "GetPivotA", _wrap_Point2PointConstraint_GetPivotA},
    { "GetPivotB", _wrap_Point2PointConstraint_GetPivotB},
    { "SetImpulseClamping", _wrap_Point2PointConstraint_SetImpulseClamping},
    { "GetImpulseClamping", _wrap_Point2PointConstraint_GetImpulseClamping},
    { "SetDamping", _wrap_Point2PointConstraint_SetDamping},
    { "GetDamping", _wrap_Point2PointConstraint_GetDamping},
    { "SetTAU", _wrap_Point2PointConstraint_SetTAU},
    { "GetTAU", _wrap_Point2PointConstraint_GetTAU},
    { "GetValidParamsOnAxis", _wrap_Point2PointConstraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_Point2PointConstraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_Point2PointConstraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_Point2PointConstraint_HasParamBeenSet},
    { "ProtoSerializeInitData", _wrap_Point2PointConstraint_ProtoSerializeInitData},
    { "ProtoSerializeProperties", _wrap_Point2PointConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeInitData", _wrap_Point2PointConstraint_ProtoDeSerializeInitData},
    { "ProtoDeSerializeProperties", _wrap_Point2PointConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_Point2PointConstraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_Point2PointConstraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_Point2PointConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Point2PointConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Point2PointConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Point2PointConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Point2PointConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Point2PointConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Point2PointConstraint_Sf_SwigStatic = {
    "Point2PointConstraint",
    swig_Point2PointConstraint_Sf_SwigStatic_methods,
    swig_Point2PointConstraint_Sf_SwigStatic_attributes,
    swig_Point2PointConstraint_Sf_SwigStatic_constants,
    swig_Point2PointConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Point2PointConstraint_bases[] = {0,0};
static const char *swig_Point2PointConstraint_base_names[] = {"Mezzanine::Physics::Constraint *",0};
static swig_lua_class _wrap_class_Point2PointConstraint = { "Point2PointConstraint", "Point2PointConstraint", &SWIGTYPE_p_Mezzanine__Physics__Point2PointConstraint,_proxy__wrap_new_Point2PointConstraint, swig_delete_Point2PointConstraint, swig_Point2PointConstraint_methods, swig_Point2PointConstraint_attributes, &swig_Point2PointConstraint_Sf_SwigStatic, swig_Point2PointConstraint_meta, swig_Point2PointConstraint_bases, swig_Point2PointConstraint_base_names };

static int _wrap_StickyConstraintConstructionInfo_TransA_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Transform *arg2 = (Mezzanine::Transform *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::TransA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::TransA",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::TransA",2,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_TransA_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_TransA_set",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  if (arg1) (arg1)->TransA = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_TransA_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::TransA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::TransA",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_TransA_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  result = (Mezzanine::Transform *)& ((arg1)->TransA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_TransB_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Transform *arg2 = (Mezzanine::Transform *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::TransB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::TransB",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::TransB",2,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_TransB_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_TransB_set",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  if (arg1) (arg1)->TransB = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_TransB_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::TransB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::TransB",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_TransB_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  result = (Mezzanine::Transform *)& ((arg1)->TransB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_ProxA_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxA",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxA",2,"Mezzanine::Physics::RigidProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_ProxA_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_ProxA_set",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  if (arg1) (arg1)->ProxA = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_ProxA_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxA",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_ProxA_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  result = (Mezzanine::Physics::RigidProxy *) ((arg1)->ProxA);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_ProxB_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxB",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxB",2,"Mezzanine::Physics::RigidProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_ProxB_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_ProxB_set",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  if (arg1) (arg1)->ProxB = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyConstraintConstructionInfo_ProxB_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::ProxB",1,"Mezzanine::Physics::StickyConstraintConstructionInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("StickyConstraintConstructionInfo_ProxB_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  result = (Mezzanine::Physics::RigidProxy *) ((arg1)->ProxB);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StickyConstraintConstructionInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::StickyConstraintConstructionInfo",0,0)
  result = (Mezzanine::Physics::StickyConstraintConstructionInfo *)new Mezzanine::Physics::StickyConstraintConstructionInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StickyConstraintConstructionInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = 0 ;
  Mezzanine::Physics::StickyConstraintConstructionInfo *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyConstraintConstructionInfo::StickyConstraintConstructionInfo",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyConstraintConstructionInfo::StickyConstraintConstructionInfo",1,"Mezzanine::Physics::StickyConstraintConstructionInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,0))){
    SWIG_fail_ptr("new_StickyConstraintConstructionInfo",1,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo);
  }
  
  result = (Mezzanine::Physics::StickyConstraintConstructionInfo *)new Mezzanine::Physics::StickyConstraintConstructionInfo((Mezzanine::Physics::StickyConstraintConstructionInfo const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StickyConstraintConstructionInfo(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StickyConstraintConstructionInfo__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StickyConstraintConstructionInfo__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StickyConstraintConstructionInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::StickyConstraintConstructionInfo::StickyConstraintConstructionInfo()\n"
    "    Mezzanine::Physics::StickyConstraintConstructionInfo::StickyConstraintConstructionInfo(Mezzanine::Physics::StickyConstraintConstructionInfo const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_StickyConstraintConstructionInfo(void *obj) {
Mezzanine::Physics::StickyConstraintConstructionInfo *arg1 = (Mezzanine::Physics::StickyConstraintConstructionInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_StickyConstraintConstructionInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StickyConstraintConstructionInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StickyConstraintConstructionInfo_attributes[] = {
    { "TransA", _wrap_StickyConstraintConstructionInfo_TransA_get, _wrap_StickyConstraintConstructionInfo_TransA_set },
    { "TransB", _wrap_StickyConstraintConstructionInfo_TransB_get, _wrap_StickyConstraintConstructionInfo_TransB_set },
    { "ProxA", _wrap_StickyConstraintConstructionInfo_ProxA_get, _wrap_StickyConstraintConstructionInfo_ProxA_set },
    { "ProxB", _wrap_StickyConstraintConstructionInfo_ProxB_get, _wrap_StickyConstraintConstructionInfo_ProxB_set },
    {0,0,0}
};
static swig_lua_method swig_StickyConstraintConstructionInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_StickyConstraintConstructionInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StickyConstraintConstructionInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StickyConstraintConstructionInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StickyConstraintConstructionInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StickyConstraintConstructionInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StickyConstraintConstructionInfo_Sf_SwigStatic = {
    "StickyConstraintConstructionInfo",
    swig_StickyConstraintConstructionInfo_Sf_SwigStatic_methods,
    swig_StickyConstraintConstructionInfo_Sf_SwigStatic_attributes,
    swig_StickyConstraintConstructionInfo_Sf_SwigStatic_constants,
    swig_StickyConstraintConstructionInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StickyConstraintConstructionInfo_bases[] = {0};
static const char *swig_StickyConstraintConstructionInfo_base_names[] = {0};
static swig_lua_class _wrap_class_StickyConstraintConstructionInfo = { "StickyConstraintConstructionInfo", "StickyConstraintConstructionInfo", &SWIGTYPE_p_Mezzanine__Physics__StickyConstraintConstructionInfo,_proxy__wrap_new_StickyConstraintConstructionInfo, swig_delete_StickyConstraintConstructionInfo, swig_StickyConstraintConstructionInfo_methods, swig_StickyConstraintConstructionInfo_attributes, &swig_StickyConstraintConstructionInfo_Sf_SwigStatic, swig_StickyConstraintConstructionInfo_meta, swig_StickyConstraintConstructionInfo_bases, swig_StickyConstraintConstructionInfo_base_names };

static int _wrap_new_StickyData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::StickyData",0,0)
  result = (Mezzanine::Physics::StickyData *)new Mezzanine::Physics::StickyData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StickyData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyData_StickyConstraints_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) 0 ;
  std::vector< Mezzanine::Physics::StickyConstraint * > *arg2 = (std::vector< Mezzanine::Physics::StickyConstraint * > *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::StickyConstraints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyData::StickyConstraints",1,"Mezzanine::Physics::StickyData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyData::StickyConstraints",2,"std::vector< Mezzanine::Physics::StickyConstraint * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyData,0))){
    SWIG_fail_ptr("StickyData_StickyConstraints_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t,0))){
    SWIG_fail_ptr("StickyData_StickyConstraints_set",2,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t);
  }
  
  if (arg1) (arg1)->StickyConstraints = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyData_StickyConstraints_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) 0 ;
  std::vector< Mezzanine::Physics::StickyConstraint * > *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::StickyConstraints",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyData::StickyConstraints",1,"Mezzanine::Physics::StickyData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyData,0))){
    SWIG_fail_ptr("StickyData_StickyConstraints_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyData);
  }
  
  result = (std::vector< Mezzanine::Physics::StickyConstraint * > *)& ((arg1)->StickyConstraints);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyData_CreationQueue_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) 0 ;
  std::vector< Mezzanine::Physics::StickyConstraintConstructionInfo > *arg2 = (std::vector< Mezzanine::Physics::StickyConstraintConstructionInfo > *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::CreationQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyData::CreationQueue",1,"Mezzanine::Physics::StickyData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyData::CreationQueue",2,"std::vector< Mezzanine::Physics::StickyConstraintConstructionInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyData,0))){
    SWIG_fail_ptr("StickyData_CreationQueue_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyData);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t,0))){
    SWIG_fail_ptr("StickyData_CreationQueue_set",2,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t);
  }
  
  if (arg1) (arg1)->CreationQueue = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyData_CreationQueue_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) 0 ;
  std::vector< Mezzanine::Physics::StickyConstraintConstructionInfo > *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::CreationQueue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyData::CreationQueue",1,"Mezzanine::Physics::StickyData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyData,0))){
    SWIG_fail_ptr("StickyData_CreationQueue_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyData);
  }
  
  result = (std::vector< Mezzanine::Physics::StickyConstraintConstructionInfo > *)& ((arg1)->CreationQueue);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyData_MaxNumContacts_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::MaxNumContacts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyData::MaxNumContacts",1,"Mezzanine::Physics::StickyData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::StickyData::MaxNumContacts",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyData,0))){
    SWIG_fail_ptr("StickyData_MaxNumContacts_set",1,SWIGTYPE_p_Mezzanine__Physics__StickyData);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  if (arg1) (arg1)->MaxNumContacts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StickyData_MaxNumContacts_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Physics::StickyData::MaxNumContacts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StickyData::MaxNumContacts",1,"Mezzanine::Physics::StickyData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StickyData,0))){
    SWIG_fail_ptr("StickyData_MaxNumContacts_get",1,SWIGTYPE_p_Mezzanine__Physics__StickyData);
  }
  
  result = (Mezzanine::Whole) ((arg1)->MaxNumContacts);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StickyData(void *obj) {
Mezzanine::Physics::StickyData *arg1 = (Mezzanine::Physics::StickyData *) obj;
delete arg1;
}
static int _proxy__wrap_new_StickyData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StickyData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StickyData_attributes[] = {
    { "StickyConstraints", _wrap_StickyData_StickyConstraints_get, _wrap_StickyData_StickyConstraints_set },
    { "CreationQueue", _wrap_StickyData_CreationQueue_get, _wrap_StickyData_CreationQueue_set },
    { "MaxNumContacts", _wrap_StickyData_MaxNumContacts_get, _wrap_StickyData_MaxNumContacts_set },
    {0,0,0}
};
static swig_lua_method swig_StickyData_methods[]= {
    {0,0}
};
static swig_lua_method swig_StickyData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StickyData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StickyData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StickyData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StickyData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StickyData_Sf_SwigStatic = {
    "StickyData",
    swig_StickyData_Sf_SwigStatic_methods,
    swig_StickyData_Sf_SwigStatic_attributes,
    swig_StickyData_Sf_SwigStatic_constants,
    swig_StickyData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StickyData_bases[] = {0};
static const char *swig_StickyData_base_names[] = {0};
static swig_lua_class _wrap_class_StickyData = { "StickyData", "StickyData", &SWIGTYPE_p_Mezzanine__Physics__StickyData,_proxy__wrap_new_StickyData, swig_delete_StickyData, swig_StickyData_methods, swig_StickyData_attributes, &swig_StickyData_Sf_SwigStatic, swig_StickyData_meta, swig_StickyData_bases, swig_StickyData_base_names };

static int _wrap_new_RigidProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Physics::PhysicsManager *arg3 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::RigidProxy",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",1,"Mezzanine::UInt32 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",2,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",3,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_RigidProxy",3,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::RigidProxy *)new Mezzanine::Physics::RigidProxy(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Physics::PhysicsManager *arg4 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::RigidProxy",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",1,"Mezzanine::UInt32 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",2,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",3,"Mezzanine::Physics::CollisionShape *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",4,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("new_RigidProxy",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_RigidProxy",4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::RigidProxy *)new Mezzanine::Physics::RigidProxy(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidProxy__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::RigidProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::RigidProxy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RigidProxy",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_RigidProxy",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_RigidProxy",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::RigidProxy *)new Mezzanine::Physics::RigidProxy((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RigidProxy(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_RigidProxy__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_RigidProxy__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_RigidProxy__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RigidProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::RigidProxy::RigidProxy(Mezzanine::UInt32 const,Mezzanine::Real const,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::RigidProxy::RigidProxy(Mezzanine::UInt32 const,Mezzanine::Real const,Mezzanine::Physics::CollisionShape *,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::RigidProxy::RigidProxy(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_RigidProxy_GetProxyType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::ProxyType result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetProxyType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetProxyType",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetProxyType",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (Mezzanine::ProxyType)((Mezzanine::Physics::RigidProxy const *)arg1)->GetProxyType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::AddToWorld",1,"Mezzanine::Physics::RigidProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_AddToWorld",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RemoveFromWorld",1,"Mezzanine::Physics::RigidProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetCollisionShape",1,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetCollisionShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetCollisionShape",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("RigidProxy_SetCollisionShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->SetCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetLinearMovementFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetLinearMovementFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetLinearMovementFactor",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetLinearMovementFactor",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetLinearMovementFactor",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_SetLinearMovementFactor",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearMovementFactor((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetLinearMovementFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetLinearMovementFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetLinearMovementFactor",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetLinearMovementFactor",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetLinearMovementFactor();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetAngularMovementFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetAngularMovementFactor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetAngularMovementFactor",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetAngularMovementFactor",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetAngularMovementFactor",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_SetAngularMovementFactor",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularMovementFactor((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetAngularMovementFactor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetAngularMovementFactor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetAngularMovementFactor",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetAngularMovementFactor",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetAngularMovementFactor();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetMass(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetMass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetMass",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetMass",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetMass",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetMass(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetMass",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetMass",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetMass",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::RigidProxy const *)arg1)->GetMass();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetDamping",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetDamping",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetDamping",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetDamping",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetDamping",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetDamping(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetLinearDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetLinearDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetLinearDamping",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetLinearDamping",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::RigidProxy const *)arg1)->GetLinearDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetAngularDamping(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetAngularDamping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetAngularDamping",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetAngularDamping",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::RigidProxy const *)arg1)->GetAngularDamping();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetLinearVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetLinearVelocity",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetLinearVelocity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetLinearVelocity",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_SetLinearVelocity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLinearVelocity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetLinearVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetLinearVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetLinearVelocity",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetLinearVelocity",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetLinearVelocity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetAngularVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetAngularVelocity",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetAngularVelocity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetAngularVelocity",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_SetAngularVelocity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetAngularVelocity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetAngularVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetAngularVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetAngularVelocity",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetAngularVelocity",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetAngularVelocity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_SetGravity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::SetGravity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetGravity",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::SetGravity",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_SetGravity",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_SetGravity",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetGravity((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetGravity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetGravity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetGravity",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetGravity",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetGravity();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_ApplyForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::ApplyForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ApplyForce",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ApplyForce",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_ApplyForce",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_ApplyForce",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->ApplyForce((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetAppliedForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetAppliedForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetAppliedForce",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetAppliedForce",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetAppliedForce();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_ApplyTorque(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::ApplyTorque",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ApplyTorque",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ApplyTorque",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_ApplyTorque",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RigidProxy_ApplyTorque",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->ApplyTorque((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetAppliedTorque(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetAppliedTorque",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetAppliedTorque",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetAppliedTorque",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetAppliedTorque();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_AddSyncObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::TransformableObject *arg2 = (Mezzanine::TransformableObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::AddSyncObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::AddSyncObject",1,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::AddSyncObject",2,"Mezzanine::TransformableObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_AddSyncObject",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("RigidProxy_AddSyncObject",2,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  (arg1)->AddSyncObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetSyncObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::TransformableObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetSyncObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetSyncObject",1,"Mezzanine::Physics::RigidProxy const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetSyncObject",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetSyncObject",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::TransformableObject *)((Mezzanine::Physics::RigidProxy const *)arg1)->GetSyncObject(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__TransformableObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetNumSyncObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetNumSyncObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetNumSyncObjects",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetNumSyncObjects",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::Physics::RigidProxy const *)arg1)->GetNumSyncObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_RemoveSyncObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::TransformableObject *arg2 = (Mezzanine::TransformableObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::RemoveSyncObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RemoveSyncObject",1,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RemoveSyncObject",2,"Mezzanine::TransformableObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_RemoveSyncObject",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("RigidProxy_RemoveSyncObject",2,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  (arg1)->RemoveSyncObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_RemoveAllSyncObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::RemoveAllSyncObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::RemoveAllSyncObjects",1,"Mezzanine::Physics::RigidProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_RemoveAllSyncObjects",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  (arg1)->RemoveAllSyncObjects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ProtoSerializeProperties",1,"Mezzanine::Physics::RigidProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("RigidProxy_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::RigidProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ProtoDeSerializeProperties",1,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("RigidProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::GetDerivedSerializableName",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = ((Mezzanine::Physics::RigidProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::GetSerializableName",0,0)
  result = Mezzanine::Physics::RigidProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy__GetPhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  btRigidBody *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::_GetPhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::_GetPhysicsObject",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy__GetPhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (btRigidBody *)((Mezzanine::Physics::RigidProxy const *)arg1)->_GetPhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btRigidBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RigidProxy__GetBasePhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::RigidProxy::_GetBasePhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::RigidProxy::_GetBasePhysicsObject",1,"Mezzanine::Physics::RigidProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("RigidProxy__GetBasePhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  result = (btCollisionObject *)((Mezzanine::Physics::RigidProxy const *)arg1)->_GetBasePhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RigidProxy(void *obj) {
Mezzanine::Physics::RigidProxy *arg1 = (Mezzanine::Physics::RigidProxy *) obj;
delete arg1;
}
static int _proxy__wrap_new_RigidProxy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RigidProxy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RigidProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RigidProxy_methods[]= {
    { "GetProxyType", _wrap_RigidProxy_GetProxyType},
    { "AddToWorld", _wrap_RigidProxy_AddToWorld},
    { "RemoveFromWorld", _wrap_RigidProxy_RemoveFromWorld},
    { "SetCollisionShape", _wrap_RigidProxy_SetCollisionShape},
    { "SetLinearMovementFactor", _wrap_RigidProxy_SetLinearMovementFactor},
    { "GetLinearMovementFactor", _wrap_RigidProxy_GetLinearMovementFactor},
    { "SetAngularMovementFactor", _wrap_RigidProxy_SetAngularMovementFactor},
    { "GetAngularMovementFactor", _wrap_RigidProxy_GetAngularMovementFactor},
    { "SetMass", _wrap_RigidProxy_SetMass},
    { "GetMass", _wrap_RigidProxy_GetMass},
    { "SetDamping", _wrap_RigidProxy_SetDamping},
    { "GetLinearDamping", _wrap_RigidProxy_GetLinearDamping},
    { "GetAngularDamping", _wrap_RigidProxy_GetAngularDamping},
    { "SetLinearVelocity", _wrap_RigidProxy_SetLinearVelocity},
    { "GetLinearVelocity", _wrap_RigidProxy_GetLinearVelocity},
    { "SetAngularVelocity", _wrap_RigidProxy_SetAngularVelocity},
    { "GetAngularVelocity", _wrap_RigidProxy_GetAngularVelocity},
    { "SetGravity", _wrap_RigidProxy_SetGravity},
    { "GetGravity", _wrap_RigidProxy_GetGravity},
    { "ApplyForce", _wrap_RigidProxy_ApplyForce},
    { "GetAppliedForce", _wrap_RigidProxy_GetAppliedForce},
    { "ApplyTorque", _wrap_RigidProxy_ApplyTorque},
    { "GetAppliedTorque", _wrap_RigidProxy_GetAppliedTorque},
    { "AddSyncObject", _wrap_RigidProxy_AddSyncObject},
    { "GetSyncObject", _wrap_RigidProxy_GetSyncObject},
    { "GetNumSyncObjects", _wrap_RigidProxy_GetNumSyncObjects},
    { "RemoveSyncObject", _wrap_RigidProxy_RemoveSyncObject},
    { "RemoveAllSyncObjects", _wrap_RigidProxy_RemoveAllSyncObjects},
    { "ProtoSerializeProperties", _wrap_RigidProxy_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_RigidProxy_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_RigidProxy_GetDerivedSerializableName},
    { "_GetPhysicsObject", _wrap_RigidProxy__GetPhysicsObject},
    { "_GetBasePhysicsObject", _wrap_RigidProxy__GetBasePhysicsObject},
    {0,0}
};
static swig_lua_method swig_RigidProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RigidProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RigidProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RigidProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_RigidProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_RigidProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RigidProxy_Sf_SwigStatic = {
    "RigidProxy",
    swig_RigidProxy_Sf_SwigStatic_methods,
    swig_RigidProxy_Sf_SwigStatic_attributes,
    swig_RigidProxy_Sf_SwigStatic_constants,
    swig_RigidProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RigidProxy_bases[] = {0,0};
static const char *swig_RigidProxy_base_names[] = {"Mezzanine::Physics::CollidableProxy *",0};
static swig_lua_class _wrap_class_RigidProxy = { "RigidProxy", "RigidProxy", &SWIGTYPE_p_Mezzanine__Physics__RigidProxy,_proxy__wrap_new_RigidProxy, swig_delete_RigidProxy, swig_RigidProxy_methods, swig_RigidProxy_attributes, &swig_RigidProxy_Sf_SwigStatic, swig_RigidProxy_meta, swig_RigidProxy_bases, swig_RigidProxy_base_names };

static int _wrap_new_SliderConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg4 = 0 ;
  Mezzanine::Transform *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SliderConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SliderConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",4,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",5,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_SliderConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_SliderConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_SliderConstraint",4,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_SliderConstraint",5,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SliderConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SliderConstraint *)new Mezzanine::Physics::SliderConstraint(arg1,arg2,arg3,(Mezzanine::Transform const &)*arg4,(Mezzanine::Transform const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SliderConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg4 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SliderConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SliderConstraint",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",3,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",4,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_SliderConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_SliderConstraint",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SliderConstraint",4,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SliderConstraint *)new Mezzanine::Physics::SliderConstraint(arg1,arg2,(Mezzanine::Transform const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SliderConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SliderConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SliderConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SliderConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_SliderConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SliderConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SliderConstraint *)new Mezzanine::Physics::SliderConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SliderConstraint(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SliderConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_SliderConstraint__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_SliderConstraint__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SliderConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::SliderConstraint::SliderConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::SliderConstraint::SliderConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::SliderConstraint::SliderConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_SliderConstraint_SetPivotTransforms(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotTransforms",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotTransforms",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotTransforms",2,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotTransforms",3,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotTransforms",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotTransforms",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotTransforms",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotTransforms((Mezzanine::Transform const &)*arg2,(Mezzanine::Transform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotATransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotATransform",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotATransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotATransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotATransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotBTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotBTransform",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotBTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotBTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetPivotBTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPivotATransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPivotATransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPivotATransform",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPivotATransform",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPivotATransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPivotBTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPivotBTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPivotBTransform",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPivotBTransform",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPivotBTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotALocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotALocation",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotALocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotALocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotALocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotBLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotBLocation",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotBLocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotBLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetPivotBLocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPivotALocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPivotALocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPivotALocation",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPivotALocation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPivotALocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPivotBLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPivotBLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPivotBLocation",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPivotBLocation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPivotBLocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPivotARotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotARotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotARotation",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotARotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotARotation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotARotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetPivotARotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPivotBRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPivotBRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotBRotation",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPivotBRotation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotBRotation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("SliderConstraint_SetPivotBRotation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetPivotBRotation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPivotARotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPivotARotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPivotARotation",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPivotARotation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPivotARotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPivotBRotation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPivotBRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPivotBRotation",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPivotBRotation",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPivotBRotation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetUseFrameOffset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetUseFrameOffset",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetUseFrameOffset",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetUseFrameOffset",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetUseFrameOffset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetUseFrameOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetUseFrameOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetUseFrameOffset",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetUseFrameOffset",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetUseFrameOffset();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetUpperLinLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetUpperLinLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetUpperLinLimit",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetUpperLinLimit",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetUpperLinLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetUpperLinLimit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetUpperLinLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetUpperLinLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetUpperLinLimit",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetUpperLinLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetUpperLinLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetUpperAngLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetUpperAngLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetUpperAngLimit",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetUpperAngLimit",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetUpperAngLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetUpperAngLimit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetUpperAngLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetUpperAngLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetUpperAngLimit",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetUpperAngLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetUpperAngLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetLowerLinLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetLowerLinLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetLowerLinLimit",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetLowerLinLimit",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetLowerLinLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetLowerLinLimit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetLowerLinLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetLowerLinLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetLowerLinLimit",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetLowerLinLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetLowerLinLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetLowerAngLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetLowerAngLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetLowerAngLimit",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetLowerAngLimit",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetLowerAngLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetLowerAngLimit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetLowerAngLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetLowerAngLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetLowerAngLimit",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetLowerAngLimit",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetLowerAngLimit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPoweredLinMotor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPoweredLinMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPoweredLinMotor",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPoweredLinMotor",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPoweredLinMotor",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetPoweredLinMotor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPoweredLinMotor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPoweredLinMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPoweredLinMotor",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPoweredLinMotor",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPoweredLinMotor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetPoweredAngMotor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetPoweredAngMotor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPoweredAngMotor",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetPoweredAngMotor",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetPoweredAngMotor",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetPoweredAngMotor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetPoweredAngMotor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetPoweredAngMotor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetPoweredAngMotor",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetPoweredAngMotor",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetPoweredAngMotor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetTargetLinMotorVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetTargetLinMotorVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetTargetLinMotorVelocity",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetTargetLinMotorVelocity",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetTargetLinMotorVelocity",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetTargetLinMotorVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetTargetLinMotorVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetTargetLinMotorVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetTargetLinMotorVelocity",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetTargetLinMotorVelocity",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetTargetLinMotorVelocity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetTargetAngMotorVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetTargetAngMotorVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetTargetAngMotorVelocity",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetTargetAngMotorVelocity",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetTargetAngMotorVelocity",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetTargetAngMotorVelocity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetTargetAngMotorVelocity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetTargetAngMotorVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetTargetAngMotorVelocity",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetTargetAngMotorVelocity",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetTargetAngMotorVelocity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetMaxLinMotorForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetMaxLinMotorForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetMaxLinMotorForce",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetMaxLinMotorForce",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetMaxLinMotorForce",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMaxLinMotorForce(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetMaxLinMotorForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetMaxLinMotorForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetMaxLinMotorForce",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetMaxLinMotorForce",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetMaxLinMotorForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetMaxAngMotorForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetMaxAngMotorForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetMaxAngMotorForce",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetMaxAngMotorForce",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetMaxAngMotorForce",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetMaxAngMotorForce(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetMaxAngMotorForce(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetMaxAngMotorForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetMaxAngMotorForce",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetMaxAngMotorForce",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetMaxAngMotorForce();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetSoftnessLimLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetSoftnessLimLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessLimLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessLimLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetSoftnessLimLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetSoftnessLimLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSoftnessLimLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSoftnessLimLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetSoftnessLimLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetSoftnessLimLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetSoftnessLimLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetSoftnessLimAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetSoftnessLimAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessLimAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessLimAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetSoftnessLimAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetSoftnessLimAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSoftnessLimAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSoftnessLimAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetSoftnessLimAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetSoftnessLimAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetSoftnessLimAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetSoftnessOrthoLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetSoftnessOrthoLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessOrthoLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessOrthoLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetSoftnessOrthoLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetSoftnessOrthoLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSoftnessOrthoLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSoftnessOrthoLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetSoftnessOrthoLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetSoftnessOrthoLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetSoftnessOrthoLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetSoftnessOrthoAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetSoftnessOrthoAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessOrthoAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessOrthoAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetSoftnessOrthoAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetSoftnessOrthoAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSoftnessOrthoAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSoftnessOrthoAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetSoftnessOrthoAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetSoftnessOrthoAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetSoftnessOrthoAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetSoftnessDirLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetSoftnessDirLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessDirLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessDirLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetSoftnessDirLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetSoftnessDirLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSoftnessDirLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSoftnessDirLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetSoftnessDirLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetSoftnessDirLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetSoftnessDirLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetSoftnessDirAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetSoftnessDirAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessDirAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetSoftnessDirAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetSoftnessDirAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetSoftnessDirAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSoftnessDirAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSoftnessDirAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetSoftnessDirAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetSoftnessDirAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetSoftnessDirAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetDampingDirLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetDampingDirLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingDirLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingDirLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetDampingDirLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDampingDirLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDampingDirLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDampingDirLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDampingDirLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDampingDirLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDampingDirLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetDampingDirAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetDampingDirAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingDirAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingDirAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetDampingDirAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDampingDirAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDampingDirAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDampingDirAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDampingDirAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDampingDirAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDampingDirAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetDampingLimLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetDampingLimLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingLimLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingLimLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetDampingLimLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDampingLimLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDampingLimLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDampingLimLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDampingLimLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDampingLimLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDampingLimLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetDampingLimAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetDampingLimAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingLimAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingLimAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetDampingLimAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDampingLimAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDampingLimAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDampingLimAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDampingLimAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDampingLimAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDampingLimAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetDampingOrthoLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetDampingOrthoLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingOrthoLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingOrthoLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetDampingOrthoLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDampingOrthoLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDampingOrthoLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDampingOrthoLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDampingOrthoLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDampingOrthoLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDampingOrthoLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetDampingOrthoAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetDampingOrthoAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingOrthoAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetDampingOrthoAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetDampingOrthoAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetDampingOrthoAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDampingOrthoAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDampingOrthoAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDampingOrthoAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDampingOrthoAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDampingOrthoAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetRestitutionDirLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetRestitutionDirLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionDirLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionDirLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetRestitutionDirLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRestitutionDirLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetRestitutionDirLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetRestitutionDirLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetRestitutionDirLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetRestitutionDirLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetRestitutionDirLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetRestitutionDirAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetRestitutionDirAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionDirAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionDirAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetRestitutionDirAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRestitutionDirAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetRestitutionDirAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetRestitutionDirAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetRestitutionDirAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetRestitutionDirAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetRestitutionDirAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetRestitutionLimLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetRestitutionLimLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionLimLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionLimLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetRestitutionLimLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRestitutionLimLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetRestitutionLimLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetRestitutionLimLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetRestitutionLimLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetRestitutionLimLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetRestitutionLimLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetRestitutionLimAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetRestitutionLimAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionLimAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionLimAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetRestitutionLimAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRestitutionLimAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetRestitutionLimAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetRestitutionLimAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetRestitutionLimAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetRestitutionLimAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetRestitutionLimAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetRestitutionOrthoLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetRestitutionOrthoLin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionOrthoLin",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionOrthoLin",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetRestitutionOrthoLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRestitutionOrthoLin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetRestitutionOrthoLin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetRestitutionOrthoLin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetRestitutionOrthoLin",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetRestitutionOrthoLin",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetRestitutionOrthoLin();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_SetRestitutionOrthoAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::SetRestitutionOrthoAng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionOrthoAng",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::SetRestitutionOrthoAng",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_SetRestitutionOrthoAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRestitutionOrthoAng(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetRestitutionOrthoAng(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetRestitutionOrthoAng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetRestitutionOrthoAng",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetRestitutionOrthoAng",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SliderConstraint const *)arg1)->GetRestitutionOrthoAng();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetValidParamsOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< enum Mezzanine::Physics::ConstraintParam > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetValidParamsOnAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetValidParamsOnAxis",1,"Mezzanine::Physics::SliderConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetValidParamsOnAxis",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetValidParamsOnAxis",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetValidParamsOnAxis(arg2);
  {
    Mezzanine::Physics::Constraint::ParamList * resultptr = new Mezzanine::Physics::Constraint::ParamList((const Mezzanine::Physics::Constraint::ParamList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetValidLinearAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetValidLinearAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetValidLinearAxes",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetValidLinearAxes",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetValidLinearAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetValidAngularAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  SwigValueWrapper< std::vector< int > > result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetValidAngularAxes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetValidAngularAxes",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetValidAngularAxes",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetValidAngularAxes();
  {
    Mezzanine::Physics::Constraint::AxisList * resultptr = new Mezzanine::Physics::Constraint::AxisList((const Mezzanine::Physics::Constraint::AxisList &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_HasParamBeenSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::Physics::ConstraintParam arg2 ;
  int arg3 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::HasParamBeenSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::HasParamBeenSet",1,"Mezzanine::Physics::SliderConstraint const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::HasParamBeenSet",2,"Mezzanine::Physics::ConstraintParam");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::HasParamBeenSet",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_HasParamBeenSet",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  arg2 = (Mezzanine::Physics::ConstraintParam)(int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)((Mezzanine::Physics::SliderConstraint const *)arg1)->HasParamBeenSet(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::ProtoSerializeProperties",1,"Mezzanine::Physics::SliderConstraint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SliderConstraint_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::SliderConstraint const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::ProtoDeSerializeProperties",1,"Mezzanine::Physics::SliderConstraint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SliderConstraint_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = ((Mezzanine::Physics::SliderConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::SliderConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SliderConstraint__GetConstraintBase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) 0 ;
  btTypedConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SliderConstraint::_GetConstraintBase",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SliderConstraint::_GetConstraintBase",1,"Mezzanine::Physics::SliderConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,0))){
    SWIG_fail_ptr("SliderConstraint__GetConstraintBase",1,SWIGTYPE_p_Mezzanine__Physics__SliderConstraint);
  }
  
  result = (btTypedConstraint *)((Mezzanine::Physics::SliderConstraint const *)arg1)->_GetConstraintBase();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btTypedConstraint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SliderConstraint(void *obj) {
Mezzanine::Physics::SliderConstraint *arg1 = (Mezzanine::Physics::SliderConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_SliderConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SliderConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SliderConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SliderConstraint_methods[]= {
    { "SetPivotTransforms", _wrap_SliderConstraint_SetPivotTransforms},
    { "SetPivotATransform", _wrap_SliderConstraint_SetPivotATransform},
    { "SetPivotBTransform", _wrap_SliderConstraint_SetPivotBTransform},
    { "GetPivotATransform", _wrap_SliderConstraint_GetPivotATransform},
    { "GetPivotBTransform", _wrap_SliderConstraint_GetPivotBTransform},
    { "SetPivotALocation", _wrap_SliderConstraint_SetPivotALocation},
    { "SetPivotBLocation", _wrap_SliderConstraint_SetPivotBLocation},
    { "GetPivotALocation", _wrap_SliderConstraint_GetPivotALocation},
    { "GetPivotBLocation", _wrap_SliderConstraint_GetPivotBLocation},
    { "SetPivotARotation", _wrap_SliderConstraint_SetPivotARotation},
    { "SetPivotBRotation", _wrap_SliderConstraint_SetPivotBRotation},
    { "GetPivotARotation", _wrap_SliderConstraint_GetPivotARotation},
    { "GetPivotBRotation", _wrap_SliderConstraint_GetPivotBRotation},
    { "SetUseFrameOffset", _wrap_SliderConstraint_SetUseFrameOffset},
    { "GetUseFrameOffset", _wrap_SliderConstraint_GetUseFrameOffset},
    { "SetUpperLinLimit", _wrap_SliderConstraint_SetUpperLinLimit},
    { "GetUpperLinLimit", _wrap_SliderConstraint_GetUpperLinLimit},
    { "SetUpperAngLimit", _wrap_SliderConstraint_SetUpperAngLimit},
    { "GetUpperAngLimit", _wrap_SliderConstraint_GetUpperAngLimit},
    { "SetLowerLinLimit", _wrap_SliderConstraint_SetLowerLinLimit},
    { "GetLowerLinLimit", _wrap_SliderConstraint_GetLowerLinLimit},
    { "SetLowerAngLimit", _wrap_SliderConstraint_SetLowerAngLimit},
    { "GetLowerAngLimit", _wrap_SliderConstraint_GetLowerAngLimit},
    { "SetPoweredLinMotor", _wrap_SliderConstraint_SetPoweredLinMotor},
    { "GetPoweredLinMotor", _wrap_SliderConstraint_GetPoweredLinMotor},
    { "SetPoweredAngMotor", _wrap_SliderConstraint_SetPoweredAngMotor},
    { "GetPoweredAngMotor", _wrap_SliderConstraint_GetPoweredAngMotor},
    { "SetTargetLinMotorVelocity", _wrap_SliderConstraint_SetTargetLinMotorVelocity},
    { "GetTargetLinMotorVelocity", _wrap_SliderConstraint_GetTargetLinMotorVelocity},
    { "SetTargetAngMotorVelocity", _wrap_SliderConstraint_SetTargetAngMotorVelocity},
    { "GetTargetAngMotorVelocity", _wrap_SliderConstraint_GetTargetAngMotorVelocity},
    { "SetMaxLinMotorForce", _wrap_SliderConstraint_SetMaxLinMotorForce},
    { "GetMaxLinMotorForce", _wrap_SliderConstraint_GetMaxLinMotorForce},
    { "SetMaxAngMotorForce", _wrap_SliderConstraint_SetMaxAngMotorForce},
    { "GetMaxAngMotorForce", _wrap_SliderConstraint_GetMaxAngMotorForce},
    { "SetSoftnessLimLin", _wrap_SliderConstraint_SetSoftnessLimLin},
    { "GetSoftnessLimLin", _wrap_SliderConstraint_GetSoftnessLimLin},
    { "SetSoftnessLimAng", _wrap_SliderConstraint_SetSoftnessLimAng},
    { "GetSoftnessLimAng", _wrap_SliderConstraint_GetSoftnessLimAng},
    { "SetSoftnessOrthoLin", _wrap_SliderConstraint_SetSoftnessOrthoLin},
    { "GetSoftnessOrthoLin", _wrap_SliderConstraint_GetSoftnessOrthoLin},
    { "SetSoftnessOrthoAng", _wrap_SliderConstraint_SetSoftnessOrthoAng},
    { "GetSoftnessOrthoAng", _wrap_SliderConstraint_GetSoftnessOrthoAng},
    { "SetSoftnessDirLin", _wrap_SliderConstraint_SetSoftnessDirLin},
    { "GetSoftnessDirLin", _wrap_SliderConstraint_GetSoftnessDirLin},
    { "SetSoftnessDirAng", _wrap_SliderConstraint_SetSoftnessDirAng},
    { "GetSoftnessDirAng", _wrap_SliderConstraint_GetSoftnessDirAng},
    { "SetDampingDirLin", _wrap_SliderConstraint_SetDampingDirLin},
    { "GetDampingDirLin", _wrap_SliderConstraint_GetDampingDirLin},
    { "SetDampingDirAng", _wrap_SliderConstraint_SetDampingDirAng},
    { "GetDampingDirAng", _wrap_SliderConstraint_GetDampingDirAng},
    { "SetDampingLimLin", _wrap_SliderConstraint_SetDampingLimLin},
    { "GetDampingLimLin", _wrap_SliderConstraint_GetDampingLimLin},
    { "SetDampingLimAng", _wrap_SliderConstraint_SetDampingLimAng},
    { "GetDampingLimAng", _wrap_SliderConstraint_GetDampingLimAng},
    { "SetDampingOrthoLin", _wrap_SliderConstraint_SetDampingOrthoLin},
    { "GetDampingOrthoLin", _wrap_SliderConstraint_GetDampingOrthoLin},
    { "SetDampingOrthoAng", _wrap_SliderConstraint_SetDampingOrthoAng},
    { "GetDampingOrthoAng", _wrap_SliderConstraint_GetDampingOrthoAng},
    { "SetRestitutionDirLin", _wrap_SliderConstraint_SetRestitutionDirLin},
    { "GetRestitutionDirLin", _wrap_SliderConstraint_GetRestitutionDirLin},
    { "SetRestitutionDirAng", _wrap_SliderConstraint_SetRestitutionDirAng},
    { "GetRestitutionDirAng", _wrap_SliderConstraint_GetRestitutionDirAng},
    { "SetRestitutionLimLin", _wrap_SliderConstraint_SetRestitutionLimLin},
    { "GetRestitutionLimLin", _wrap_SliderConstraint_GetRestitutionLimLin},
    { "SetRestitutionLimAng", _wrap_SliderConstraint_SetRestitutionLimAng},
    { "GetRestitutionLimAng", _wrap_SliderConstraint_GetRestitutionLimAng},
    { "SetRestitutionOrthoLin", _wrap_SliderConstraint_SetRestitutionOrthoLin},
    { "GetRestitutionOrthoLin", _wrap_SliderConstraint_GetRestitutionOrthoLin},
    { "SetRestitutionOrthoAng", _wrap_SliderConstraint_SetRestitutionOrthoAng},
    { "GetRestitutionOrthoAng", _wrap_SliderConstraint_GetRestitutionOrthoAng},
    { "GetValidParamsOnAxis", _wrap_SliderConstraint_GetValidParamsOnAxis},
    { "GetValidLinearAxes", _wrap_SliderConstraint_GetValidLinearAxes},
    { "GetValidAngularAxes", _wrap_SliderConstraint_GetValidAngularAxes},
    { "HasParamBeenSet", _wrap_SliderConstraint_HasParamBeenSet},
    { "ProtoSerializeProperties", _wrap_SliderConstraint_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_SliderConstraint_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_SliderConstraint_GetDerivedSerializableName},
    { "_GetConstraintBase", _wrap_SliderConstraint__GetConstraintBase},
    {0,0}
};
static swig_lua_method swig_SliderConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SliderConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SliderConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SliderConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_SliderConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_SliderConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SliderConstraint_Sf_SwigStatic = {
    "SliderConstraint",
    swig_SliderConstraint_Sf_SwigStatic_methods,
    swig_SliderConstraint_Sf_SwigStatic_attributes,
    swig_SliderConstraint_Sf_SwigStatic_constants,
    swig_SliderConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SliderConstraint_bases[] = {0,0};
static const char *swig_SliderConstraint_base_names[] = {"Mezzanine::Physics::DualTransformConstraint *",0};
static swig_lua_class _wrap_class_SliderConstraint = { "SliderConstraint", "SliderConstraint", &SWIGTYPE_p_Mezzanine__Physics__SliderConstraint,_proxy__wrap_new_SliderConstraint, swig_delete_SliderConstraint, swig_SliderConstraint_methods, swig_SliderConstraint_attributes, &swig_SliderConstraint_Sf_SwigStatic, swig_SliderConstraint_meta, swig_SliderConstraint_bases, swig_SliderConstraint_base_names };

static int _wrap_new_SoftCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btSoftBodyCollisionShape *arg2 = (btSoftBodyCollisionShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::SoftCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftCollisionShape::SoftCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftCollisionShape::SoftCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftCollisionShape::SoftCollisionShape",2,"btSoftBodyCollisionShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSoftBodyCollisionShape,0))){
    SWIG_fail_ptr("new_SoftCollisionShape",2,SWIGTYPE_p_btSoftBodyCollisionShape);
  }
  
  result = (Mezzanine::Physics::SoftCollisionShape *)new Mezzanine::Physics::SoftCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SoftCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftCollisionShape *arg1 = (Mezzanine::Physics::SoftCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftCollisionShape::GetType",1,"Mezzanine::Physics::SoftCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftCollisionShape,0))){
    SWIG_fail_ptr("SoftCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__SoftCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::SoftCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoftCollisionShape(void *obj) {
Mezzanine::Physics::SoftCollisionShape *arg1 = (Mezzanine::Physics::SoftCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoftCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoftCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoftCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftCollisionShape_methods[]= {
    { "GetType", _wrap_SoftCollisionShape_GetType},
    {0,0}
};
static swig_lua_method swig_SoftCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoftCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoftCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoftCollisionShape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SoftCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoftCollisionShape_Sf_SwigStatic = {
    "SoftCollisionShape",
    swig_SoftCollisionShape_Sf_SwigStatic_methods,
    swig_SoftCollisionShape_Sf_SwigStatic_attributes,
    swig_SoftCollisionShape_Sf_SwigStatic_constants,
    swig_SoftCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoftCollisionShape_bases[] = {0,0};
static const char *swig_SoftCollisionShape_base_names[] = {"Mezzanine::Physics::MeshCollisionShape *",0};
static swig_lua_class _wrap_class_SoftCollisionShape = { "SoftCollisionShape", "SoftCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__SoftCollisionShape,_proxy__wrap_new_SoftCollisionShape, swig_delete_SoftCollisionShape, swig_SoftCollisionShape_methods, swig_SoftCollisionShape_attributes, &swig_SoftCollisionShape_Sf_SwigStatic, swig_SoftCollisionShape_meta, swig_SoftCollisionShape_bases, swig_SoftCollisionShape_base_names };

static int _wrap_new_SoftProxy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Physics::PhysicsManager *arg3 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SoftProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SoftProxy",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SoftProxy",1,"Mezzanine::UInt32 const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SoftProxy",2,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SoftProxy",3,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SoftProxy",3,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SoftProxy *)new Mezzanine::Physics::SoftProxy(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoftProxy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::SoftProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SoftProxy",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SoftProxy",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SoftProxy",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_SoftProxy",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_SoftProxy",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::SoftProxy *)new Mezzanine::Physics::SoftProxy((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SoftProxy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SoftProxy__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_SoftProxy__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SoftProxy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::SoftProxy::SoftProxy(Mezzanine::UInt32 const,Mezzanine::Real const,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::SoftProxy::SoftProxy(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftProxy_GetProxyType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::ProxyType result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::GetProxyType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::GetProxyType",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_GetProxyType",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = (Mezzanine::ProxyType)((Mezzanine::Physics::SoftProxy const *)arg1)->GetProxyType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::AddToWorld",1,"Mezzanine::Physics::SoftProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_AddToWorld",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::RemoveFromWorld",1,"Mezzanine::Physics::SoftProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetCollisionShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetCollisionShape",1,"Mezzanine::Physics::SoftProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetCollisionShape",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetCollisionShape",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("SoftProxy_SetCollisionShape",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  (arg1)->SetCollisionShape(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetLocation",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetLocation",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("SoftProxy_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetLocation",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__SoftProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoftProxy_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__SoftProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SoftProxy_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftProxy_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::SoftProxy::SetLocation(Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::SoftProxy::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftProxy_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::GetLocation",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_GetLocation",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = ((Mezzanine::Physics::SoftProxy const *)arg1)->GetLocation();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("SoftProxy_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__SoftProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoftProxy_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__SoftProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SoftProxy_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftProxy_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::SoftProxy::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Physics::SoftProxy::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftProxy_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::GetOrientation",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_GetOrientation",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = ((Mezzanine::Physics::SoftProxy const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetScale",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetScale",2,"Mezzanine::Physics::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetScale",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("SoftProxy_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Physics::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetScale",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_SetScale",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__SoftProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_SoftProxy_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__SoftProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SoftProxy_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoftProxy_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::SoftProxy::SetScale(Mezzanine::Physics::Vector3 const &)\n"
    "    Mezzanine::Physics::SoftProxy::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_SoftProxy_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::Physics::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::GetScale",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_GetScale",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = ((Mezzanine::Physics::SoftProxy const *)arg1)->GetScale();
  {
    Mezzanine::Physics::Vector3 * resultptr = new Mezzanine::Physics::Vector3((const Mezzanine::Physics::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoSerialize",1,"Mezzanine::Physics::SoftProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SoftProxy_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::SoftProxy const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoSerializeProperties",1,"Mezzanine::Physics::SoftProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SoftProxy_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::SoftProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_ProtoSeriailzeNodes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::ProtoSeriailzeNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoSeriailzeNodes",1,"Mezzanine::Physics::SoftProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoSeriailzeNodes",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_ProtoSeriailzeNodes",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SoftProxy_ProtoSeriailzeNodes",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::SoftProxy const *)arg1)->ProtoSeriailzeNodes(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoDeSerialize",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SoftProxy_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoDeSerializeProperties",1,"Mezzanine::Physics::SoftProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SoftProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_ProtoDeSeriailzeNodes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::ProtoDeSeriailzeNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoDeSeriailzeNodes",1,"Mezzanine::Physics::SoftProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::ProtoDeSeriailzeNodes",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_ProtoDeSeriailzeNodes",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SoftProxy_ProtoDeSeriailzeNodes",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::SoftProxy const *)arg1)->ProtoDeSeriailzeNodes(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::GetDerivedSerializableName",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = ((Mezzanine::Physics::SoftProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::GetSerializableName",0,0)
  result = Mezzanine::Physics::SoftProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy__GetPhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  btSoftBody *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::_GetPhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::_GetPhysicsObject",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy__GetPhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = (btSoftBody *)((Mezzanine::Physics::SoftProxy const *)arg1)->_GetPhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSoftBody,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SoftProxy__GetBasePhysicsObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) 0 ;
  btCollisionObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SoftProxy::_GetBasePhysicsObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SoftProxy::_GetBasePhysicsObject",1,"Mezzanine::Physics::SoftProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy,0))){
    SWIG_fail_ptr("SoftProxy__GetBasePhysicsObject",1,SWIGTYPE_p_Mezzanine__Physics__SoftProxy);
  }
  
  result = (btCollisionObject *)((Mezzanine::Physics::SoftProxy const *)arg1)->_GetBasePhysicsObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btCollisionObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SoftProxy(void *obj) {
Mezzanine::Physics::SoftProxy *arg1 = (Mezzanine::Physics::SoftProxy *) obj;
delete arg1;
}
static int _proxy__wrap_new_SoftProxy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SoftProxy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SoftProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SoftProxy_methods[]= {
    { "GetProxyType", _wrap_SoftProxy_GetProxyType},
    { "AddToWorld", _wrap_SoftProxy_AddToWorld},
    { "RemoveFromWorld", _wrap_SoftProxy_RemoveFromWorld},
    { "SetCollisionShape", _wrap_SoftProxy_SetCollisionShape},
    { "SetLocation", _wrap_SoftProxy_SetLocation},
    { "GetLocation", _wrap_SoftProxy_GetLocation},
    { "SetOrientation", _wrap_SoftProxy_SetOrientation},
    { "GetOrientation", _wrap_SoftProxy_GetOrientation},
    { "SetScale", _wrap_SoftProxy_SetScale},
    { "GetScale", _wrap_SoftProxy_GetScale},
    { "ProtoSerialize", _wrap_SoftProxy_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_SoftProxy_ProtoSerializeProperties},
    { "ProtoSeriailzeNodes", _wrap_SoftProxy_ProtoSeriailzeNodes},
    { "ProtoDeSerialize", _wrap_SoftProxy_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_SoftProxy_ProtoDeSerializeProperties},
    { "ProtoDeSeriailzeNodes", _wrap_SoftProxy_ProtoDeSeriailzeNodes},
    { "GetDerivedSerializableName", _wrap_SoftProxy_GetDerivedSerializableName},
    { "_GetPhysicsObject", _wrap_SoftProxy__GetPhysicsObject},
    { "_GetBasePhysicsObject", _wrap_SoftProxy__GetBasePhysicsObject},
    {0,0}
};
static swig_lua_method swig_SoftProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SoftProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SoftProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SoftProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_SoftProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_SoftProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SoftProxy_Sf_SwigStatic = {
    "SoftProxy",
    swig_SoftProxy_Sf_SwigStatic_methods,
    swig_SoftProxy_Sf_SwigStatic_attributes,
    swig_SoftProxy_Sf_SwigStatic_constants,
    swig_SoftProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SoftProxy_bases[] = {0,0};
static const char *swig_SoftProxy_base_names[] = {"Mezzanine::Physics::CollidableProxy *",0};
static swig_lua_class _wrap_class_SoftProxy = { "SoftProxy", "SoftProxy", &SWIGTYPE_p_Mezzanine__Physics__SoftProxy,_proxy__wrap_new_SoftProxy, swig_delete_SoftProxy, swig_SoftProxy_methods, swig_SoftProxy_attributes, &swig_SoftProxy_Sf_SwigStatic, swig_SoftProxy_meta, swig_SoftProxy_bases, swig_SoftProxy_base_names };

static int _wrap_new_SphereCollisionShape__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Physics::SphereCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",1,"Mezzanine::String const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",2,"Mezzanine::Real const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Physics::SphereCollisionShape *)new Mezzanine::Physics::SphereCollisionShape((Mezzanine::String const &)*arg1,(Mezzanine::Real const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SphereCollisionShape__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btSphereShape *arg2 = (btSphereShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::SphereCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",2,"btSphereShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btSphereShape,0))){
    SWIG_fail_ptr("new_SphereCollisionShape",2,SWIGTYPE_p_btSphereShape);
  }
  
  result = (Mezzanine::Physics::SphereCollisionShape *)new Mezzanine::Physics::SphereCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SphereCollisionShape__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Physics::SphereCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_SphereCollisionShape",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Physics::SphereCollisionShape *)new Mezzanine::Physics::SphereCollisionShape(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SphereCollisionShape(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SphereCollisionShape__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btSphereShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SphereCollisionShape__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_SphereCollisionShape__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SphereCollisionShape'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape(Mezzanine::String const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape(Mezzanine::String const &,btSphereShape *)\n"
    "    Mezzanine::Physics::SphereCollisionShape::SphereCollisionShape(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_SphereCollisionShape_GetRadius(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SphereCollisionShape *arg1 = (Mezzanine::Physics::SphereCollisionShape *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::GetRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::GetRadius",1,"Mezzanine::Physics::SphereCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,0))){
    SWIG_fail_ptr("SphereCollisionShape_GetRadius",1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Physics::SphereCollisionShape const *)arg1)->GetRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SphereCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SphereCollisionShape *arg1 = (Mezzanine::Physics::SphereCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::GetType",1,"Mezzanine::Physics::SphereCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,0))){
    SWIG_fail_ptr("SphereCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::SphereCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SphereCollisionShape_GetSphereShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SphereCollisionShape *arg1 = (Mezzanine::Physics::SphereCollisionShape *) 0 ;
  btSphereShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::GetSphereShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::GetSphereShape",1,"Mezzanine::Physics::SphereCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,0))){
    SWIG_fail_ptr("SphereCollisionShape_GetSphereShape",1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape);
  }
  
  result = (btSphereShape *)((Mezzanine::Physics::SphereCollisionShape const *)arg1)->GetSphereShape();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_btSphereShape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SphereCollisionShape_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SphereCollisionShape *arg1 = (Mezzanine::Physics::SphereCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::ProtoSerialize",1,"Mezzanine::Physics::SphereCollisionShape const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,0))){
    SWIG_fail_ptr("SphereCollisionShape_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SphereCollisionShape_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Physics::SphereCollisionShape const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SphereCollisionShape_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::SphereCollisionShape *arg1 = (Mezzanine::Physics::SphereCollisionShape *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::ProtoDeSerialize",1,"Mezzanine::Physics::SphereCollisionShape *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Physics::SphereCollisionShape::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,0))){
    SWIG_fail_ptr("SphereCollisionShape_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("SphereCollisionShape_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SphereCollisionShape_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::SphereCollisionShape::GetSerializableName",0,0)
  result = Mezzanine::Physics::SphereCollisionShape::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SphereCollisionShape(void *obj) {
Mezzanine::Physics::SphereCollisionShape *arg1 = (Mezzanine::Physics::SphereCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_SphereCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SphereCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SphereCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SphereCollisionShape_methods[]= {
    { "GetRadius", _wrap_SphereCollisionShape_GetRadius},
    { "GetType", _wrap_SphereCollisionShape_GetType},
    { "GetSphereShape", _wrap_SphereCollisionShape_GetSphereShape},
    { "ProtoSerialize", _wrap_SphereCollisionShape_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_SphereCollisionShape_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_SphereCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SphereCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SphereCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SphereCollisionShape_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_SphereCollisionShape_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_SphereCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SphereCollisionShape_Sf_SwigStatic = {
    "SphereCollisionShape",
    swig_SphereCollisionShape_Sf_SwigStatic_methods,
    swig_SphereCollisionShape_Sf_SwigStatic_attributes,
    swig_SphereCollisionShape_Sf_SwigStatic_constants,
    swig_SphereCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SphereCollisionShape_bases[] = {0,0};
static const char *swig_SphereCollisionShape_base_names[] = {"Mezzanine::Physics::PrimitiveCollisionShape *",0};
static swig_lua_class _wrap_class_SphereCollisionShape = { "SphereCollisionShape", "SphereCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__SphereCollisionShape,_proxy__wrap_new_SphereCollisionShape, swig_delete_SphereCollisionShape, swig_SphereCollisionShape_methods, swig_SphereCollisionShape_attributes, &swig_SphereCollisionShape_Sf_SwigStatic, swig_SphereCollisionShape_meta, swig_SphereCollisionShape_bases, swig_SphereCollisionShape_base_names };

static int _wrap_new_StaticMeshCollisionShape(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  btBvhTriangleMeshShape *arg2 = (btBvhTriangleMeshShape *) 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Physics::StaticMeshCollisionShape *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::StaticMeshCollisionShape::StaticMeshCollisionShape",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Physics::StaticMeshCollisionShape::StaticMeshCollisionShape",1,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::StaticMeshCollisionShape::StaticMeshCollisionShape",2,"btBvhTriangleMeshShape *");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btBvhTriangleMeshShape,0))){
    SWIG_fail_ptr("new_StaticMeshCollisionShape",2,SWIGTYPE_p_btBvhTriangleMeshShape);
  }
  
  result = (Mezzanine::Physics::StaticMeshCollisionShape *)new Mezzanine::Physics::StaticMeshCollisionShape((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StaticMeshCollisionShape_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::StaticMeshCollisionShape *arg1 = (Mezzanine::Physics::StaticMeshCollisionShape *) 0 ;
  Mezzanine::Physics::CollisionShape::ShapeType result;
  
  SWIG_check_num_args("Mezzanine::Physics::StaticMeshCollisionShape::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::StaticMeshCollisionShape::GetType",1,"Mezzanine::Physics::StaticMeshCollisionShape const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,0))){
    SWIG_fail_ptr("StaticMeshCollisionShape_GetType",1,SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape);
  }
  
  result = (Mezzanine::Physics::CollisionShape::ShapeType)((Mezzanine::Physics::StaticMeshCollisionShape const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StaticMeshCollisionShape(void *obj) {
Mezzanine::Physics::StaticMeshCollisionShape *arg1 = (Mezzanine::Physics::StaticMeshCollisionShape *) obj;
delete arg1;
}
static int _proxy__wrap_new_StaticMeshCollisionShape(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StaticMeshCollisionShape);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StaticMeshCollisionShape_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StaticMeshCollisionShape_methods[]= {
    { "GetType", _wrap_StaticMeshCollisionShape_GetType},
    {0,0}
};
static swig_lua_method swig_StaticMeshCollisionShape_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StaticMeshCollisionShape_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StaticMeshCollisionShape_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StaticMeshCollisionShape_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StaticMeshCollisionShape_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StaticMeshCollisionShape_Sf_SwigStatic = {
    "StaticMeshCollisionShape",
    swig_StaticMeshCollisionShape_Sf_SwigStatic_methods,
    swig_StaticMeshCollisionShape_Sf_SwigStatic_attributes,
    swig_StaticMeshCollisionShape_Sf_SwigStatic_constants,
    swig_StaticMeshCollisionShape_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StaticMeshCollisionShape_bases[] = {0,0};
static const char *swig_StaticMeshCollisionShape_base_names[] = {"Mezzanine::Physics::MeshCollisionShape *",0};
static swig_lua_class _wrap_class_StaticMeshCollisionShape = { "StaticMeshCollisionShape", "StaticMeshCollisionShape", &SWIGTYPE_p_Mezzanine__Physics__StaticMeshCollisionShape,_proxy__wrap_new_StaticMeshCollisionShape, swig_delete_StaticMeshCollisionShape, swig_StaticMeshCollisionShape_methods, swig_StaticMeshCollisionShape_attributes, &swig_StaticMeshCollisionShape_Sf_SwigStatic, swig_StaticMeshCollisionShape_meta, swig_StaticMeshCollisionShape_bases, swig_StaticMeshCollisionShape_base_names };

static int _wrap_new_UniversalConstraint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::Vector3 *arg4 = 0 ;
  Mezzanine::Physics::Vector3 *arg5 = 0 ;
  Mezzanine::Physics::Vector3 *arg6 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg7 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::UniversalConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",4,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",5,"Mezzanine::Physics::Vector3 const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",6,"Mezzanine::Physics::Vector3 const &");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",7,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_UniversalConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_UniversalConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_UniversalConstraint",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_UniversalConstraint",5,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_UniversalConstraint",6,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_UniversalConstraint",7,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::UniversalConstraint *)new Mezzanine::Physics::UniversalConstraint(arg1,arg2,arg3,(Mezzanine::Physics::Vector3 const &)*arg4,(Mezzanine::Physics::Vector3 const &)*arg5,(Mezzanine::Physics::Vector3 const &)*arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniversalConstraint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt32 arg1 ;
  Mezzanine::Physics::RigidProxy *arg2 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Physics::RigidProxy *arg3 = (Mezzanine::Physics::RigidProxy *) 0 ;
  Mezzanine::Transform *arg4 = 0 ;
  Mezzanine::Transform *arg5 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg6 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::UniversalConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",1,"Mezzanine::UInt32 const");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",2,"Mezzanine::Physics::RigidProxy *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",3,"Mezzanine::Physics::RigidProxy *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",4,"Mezzanine::Transform const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",5,"Mezzanine::Transform const &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",6,"Mezzanine::Physics::PhysicsManager *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::UInt32 const)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_UniversalConstraint",2,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy,0))){
    SWIG_fail_ptr("new_UniversalConstraint",3,SWIGTYPE_p_Mezzanine__Physics__RigidProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_UniversalConstraint",4,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_UniversalConstraint",5,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_UniversalConstraint",6,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::UniversalConstraint *)new Mezzanine::Physics::UniversalConstraint(arg1,arg2,arg3,(Mezzanine::Transform const &)*arg4,(Mezzanine::Transform const &)*arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniversalConstraint__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Physics::PhysicsManager *arg2 = (Mezzanine::Physics::PhysicsManager *) 0 ;
  Mezzanine::Physics::UniversalConstraint *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",1,"XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::UniversalConstraint",2,"Mezzanine::Physics::PhysicsManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_UniversalConstraint",1,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager,0))){
    SWIG_fail_ptr("new_UniversalConstraint",2,SWIGTYPE_p_Mezzanine__Physics__PhysicsManager);
  }
  
  result = (Mezzanine::Physics::UniversalConstraint *)new Mezzanine::Physics::UniversalConstraint((XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UniversalConstraint(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_UniversalConstraint__SWIG_2(L);
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_UniversalConstraint__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__RigidProxy, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__PhysicsManager, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_new_UniversalConstraint__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_UniversalConstraint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Physics::UniversalConstraint::UniversalConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::Vector3 const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::UniversalConstraint::UniversalConstraint(Mezzanine::UInt32 const,Mezzanine::Physics::RigidProxy *,Mezzanine::Physics::RigidProxy *,Mezzanine::Transform const &,Mezzanine::Transform const &,Mezzanine::Physics::PhysicsManager *)\n"
    "    Mezzanine::Physics::UniversalConstraint::UniversalConstraint(XML::Node const &,Mezzanine::Physics::PhysicsManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_UniversalConstraint_SetUpperLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::UniversalConstraint *arg1 = (Mezzanine::Physics::UniversalConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::SetUpperLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::SetUpperLimit",1,"Mezzanine::Physics::UniversalConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::SetUpperLimit",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::SetUpperLimit",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,0))){
    SWIG_fail_ptr("UniversalConstraint_SetUpperLimit",1,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetUpperLimit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniversalConstraint_SetLowerLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::UniversalConstraint *arg1 = (Mezzanine::Physics::UniversalConstraint *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::SetLowerLimit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::SetLowerLimit",1,"Mezzanine::Physics::UniversalConstraint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::SetLowerLimit",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::SetLowerLimit",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,0))){
    SWIG_fail_ptr("UniversalConstraint_SetLowerLimit",1,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetLowerLimit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniversalConstraint_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Physics::UniversalConstraint *arg1 = (Mezzanine::Physics::UniversalConstraint *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Physics::UniversalConstraint::GetDerivedSerializableName",1,"Mezzanine::Physics::UniversalConstraint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,0))){
    SWIG_fail_ptr("UniversalConstraint_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint);
  }
  
  result = ((Mezzanine::Physics::UniversalConstraint const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UniversalConstraint_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Physics::UniversalConstraint::GetSerializableName",0,0)
  result = Mezzanine::Physics::UniversalConstraint::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UniversalConstraint(void *obj) {
Mezzanine::Physics::UniversalConstraint *arg1 = (Mezzanine::Physics::UniversalConstraint *) obj;
delete arg1;
}
static int _proxy__wrap_new_UniversalConstraint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UniversalConstraint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UniversalConstraint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UniversalConstraint_methods[]= {
    { "SetUpperLimit", _wrap_UniversalConstraint_SetUpperLimit},
    { "SetLowerLimit", _wrap_UniversalConstraint_SetLowerLimit},
    { "GetDerivedSerializableName", _wrap_UniversalConstraint_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_UniversalConstraint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UniversalConstraint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UniversalConstraint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UniversalConstraint_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_UniversalConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_UniversalConstraint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UniversalConstraint_Sf_SwigStatic = {
    "UniversalConstraint",
    swig_UniversalConstraint_Sf_SwigStatic_methods,
    swig_UniversalConstraint_Sf_SwigStatic_attributes,
    swig_UniversalConstraint_Sf_SwigStatic_constants,
    swig_UniversalConstraint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UniversalConstraint_bases[] = {0,0};
static const char *swig_UniversalConstraint_base_names[] = {"Mezzanine::Physics::Generic6DofConstraint *",0};
static swig_lua_class _wrap_class_UniversalConstraint = { "UniversalConstraint", "UniversalConstraint", &SWIGTYPE_p_Mezzanine__Physics__UniversalConstraint,_proxy__wrap_new_UniversalConstraint, swig_delete_UniversalConstraint, swig_UniversalConstraint_methods, swig_UniversalConstraint_attributes, &swig_UniversalConstraint_Sf_SwigStatic, swig_UniversalConstraint_meta, swig_UniversalConstraint_bases, swig_UniversalConstraint_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "PhysicsManager_ImplementationName", _wrap_PhysicsManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "PhysicsManager_InterfaceType", _wrap_PhysicsManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "CollisionShapeManager_ImplementationName", _wrap_CollisionShapeManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "CollisionShapeManager_InterfaceType", _wrap_CollisionShapeManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "ConstraintParamCount", _wrap_ConstraintParamCount_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("AS_Active", Mezzanine::Physics::AS_Active)},
    {SWIG_LUA_CONSTTAB_INT("AS_Island_Sleeping", Mezzanine::Physics::AS_Island_Sleeping)},
    {SWIG_LUA_CONSTTAB_INT("AS_Wants_Deactivation", Mezzanine::Physics::AS_Wants_Deactivation)},
    {SWIG_LUA_CONSTTAB_INT("AS_DisableDeactivation", Mezzanine::Physics::AS_DisableDeactivation)},
    {SWIG_LUA_CONSTTAB_INT("AS_DisableSimulation", Mezzanine::Physics::AS_DisableSimulation)},
    {SWIG_LUA_CONSTTAB_INT("AFF_AnisotropicFrictionDisabled", Mezzanine::Physics::AFF_AnisotropicFrictionDisabled)},
    {SWIG_LUA_CONSTTAB_INT("AFF_AnisotropicFriction", Mezzanine::Physics::AFF_AnisotropicFriction)},
    {SWIG_LUA_CONSTTAB_INT("AFF_AnisotropicRollingFriction", Mezzanine::Physics::AFF_AnisotropicRollingFriction)},
    {SWIG_LUA_CONSTTAB_INT("CF_GenericFilter", Mezzanine::Physics::CF_GenericFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_StaticFilter", Mezzanine::Physics::CF_StaticFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_KinematicFilter", Mezzanine::Physics::CF_KinematicFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_DebrisFilter", Mezzanine::Physics::CF_DebrisFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_SensorFilter", Mezzanine::Physics::CF_SensorFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_CharacterFilter", Mezzanine::Physics::CF_CharacterFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_AllFilter", Mezzanine::Physics::CF_AllFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter1", Mezzanine::Physics::CF_UserFilter1)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter2", Mezzanine::Physics::CF_UserFilter2)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter3", Mezzanine::Physics::CF_UserFilter3)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter4", Mezzanine::Physics::CF_UserFilter4)},
    {SWIG_LUA_CONSTTAB_INT("CF_StaticObject", Mezzanine::Physics::CF_StaticObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_KinematicObject", Mezzanine::Physics::CF_KinematicObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_NoContactResponse", Mezzanine::Physics::CF_NoContactResponse)},
    {SWIG_LUA_CONSTTAB_INT("CF_CustomMaterialCallback", Mezzanine::Physics::CF_CustomMaterialCallback)},
    {SWIG_LUA_CONSTTAB_INT("CF_CharacterObject", Mezzanine::Physics::CF_CharacterObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_DisableVisualizeObject", Mezzanine::Physics::CF_DisableVisualizeObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_DisableSPUCollisionProcessing", Mezzanine::Physics::CF_DisableSPUCollisionProcessing)},
    {SWIG_LUA_CONSTTAB_INT("Col_Begin", Mezzanine::Physics::Col_Begin)},
    {SWIG_LUA_CONSTTAB_INT("Col_Contacts_Updated", Mezzanine::Physics::Col_Contacts_Updated)},
    {SWIG_LUA_CONSTTAB_INT("Col_End", Mezzanine::Physics::Col_End)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_Actor", Mezzanine::Physics::Col_Actor_Actor)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_AreaEffect", Mezzanine::Physics::Col_Actor_AreaEffect)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_Debris", Mezzanine::Physics::Col_Actor_Debris)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_Terrain", Mezzanine::Physics::Col_Actor_Terrain)},
    {SWIG_LUA_CONSTTAB_INT("Col_AreaEffect_AreaEffect", Mezzanine::Physics::Col_AreaEffect_AreaEffect)},
    {SWIG_LUA_CONSTTAB_INT("Col_AreaEffect_Debris", Mezzanine::Physics::Col_AreaEffect_Debris)},
    {SWIG_LUA_CONSTTAB_INT("Col_AreaEffect_Terrain", Mezzanine::Physics::Col_AreaEffect_Terrain)},
    {SWIG_LUA_CONSTTAB_INT("Col_Debris_Debris", Mezzanine::Physics::Col_Debris_Debris)},
    {SWIG_LUA_CONSTTAB_INT("Col_Debris_Terrain", Mezzanine::Physics::Col_Debris_Terrain)},
    {SWIG_LUA_CONSTTAB_INT("DDM_NoDebug", Mezzanine::Physics::DDM_NoDebug)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawWireframe", Mezzanine::Physics::DDM_DrawWireframe)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawAABB", Mezzanine::Physics::DDM_DrawAABB)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawFeaturesText", Mezzanine::Physics::DDM_DrawFeaturesText)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawContactPoints", Mezzanine::Physics::DDM_DrawContactPoints)},
    {SWIG_LUA_CONSTTAB_INT("DDM_NoDeactivation", Mezzanine::Physics::DDM_NoDeactivation)},
    {SWIG_LUA_CONSTTAB_INT("DDM_NoHelpText", Mezzanine::Physics::DDM_NoHelpText)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawText", Mezzanine::Physics::DDM_DrawText)},
    {SWIG_LUA_CONSTTAB_INT("DDM_ProfileTimings", Mezzanine::Physics::DDM_ProfileTimings)},
    {SWIG_LUA_CONSTTAB_INT("DDM_EnableSatComparison", Mezzanine::Physics::DDM_EnableSatComparison)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DisableBulletLCP", Mezzanine::Physics::DDM_DisableBulletLCP)},
    {SWIG_LUA_CONSTTAB_INT("DDM_EnableCCD", Mezzanine::Physics::DDM_EnableCCD)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawConstraints", Mezzanine::Physics::DDM_DrawConstraints)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawConstraintLimits", Mezzanine::Physics::DDM_DrawConstraintLimits)},
    {SWIG_LUA_CONSTTAB_INT("DDM_FastWireframe", Mezzanine::Physics::DDM_FastWireframe)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawNormals", Mezzanine::Physics::DDM_DrawNormals)},
    {SWIG_LUA_CONSTTAB_INT("DDM_All", Mezzanine::Physics::DDM_All)},
    {SWIG_LUA_CONSTTAB_INT("PT_Rigid", Mezzanine::Physics::PT_Rigid)},
    {SWIG_LUA_CONSTTAB_INT("PT_Soft", Mezzanine::Physics::PT_Soft)},
    {SWIG_LUA_CONSTTAB_INT("PT_Ghost", Mezzanine::Physics::PT_Ghost)},
    {SWIG_LUA_CONSTTAB_INT("MEZZANINE_CORE", 1)},
    {SWIG_LUA_CONSTTAB_INT("MEZZ_FRAMESTOTRACK", 10)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Box", Mezzanine::Physics::CollisionShape::ST_Box)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Capsule", Mezzanine::Physics::CollisionShape::ST_Capsule)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Compound", Mezzanine::Physics::CollisionShape::ST_Compound)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Cone", Mezzanine::Physics::CollisionShape::ST_Cone)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_ConvexHull", Mezzanine::Physics::CollisionShape::ST_ConvexHull)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Cylinder", Mezzanine::Physics::CollisionShape::ST_Cylinder)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_MultiSphere", Mezzanine::Physics::CollisionShape::ST_MultiSphere)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Sphere", Mezzanine::Physics::CollisionShape::ST_Sphere)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_DynamicTriMesh", Mezzanine::Physics::CollisionShape::ST_DynamicTriMesh)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Heightfield", Mezzanine::Physics::CollisionShape::ST_Heightfield)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Plane", Mezzanine::Physics::CollisionShape::ST_Plane)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_Soft", Mezzanine::Physics::CollisionShape::ST_Soft)},
    {SWIG_LUA_CONSTTAB_INT("CollisionShape_ST_StaticTriMesh", Mezzanine::Physics::CollisionShape::ST_StaticTriMesh)},
    {SWIG_LUA_CONSTTAB_INT("Att_None", Mezzanine::Att_None)},
    {SWIG_LUA_CONSTTAB_INT("Att_Linear", Mezzanine::Att_Linear)},
    {SWIG_LUA_CONSTTAB_INT("Att_Quadratic", Mezzanine::Att_Quadratic)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_0", Mezzanine::OM_Degree_0)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_90", Mezzanine::OM_Degree_90)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_180", Mezzanine::OM_Degree_180)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_270", Mezzanine::OM_Degree_270)},
    {SWIG_LUA_CONSTTAB_INT("OM_Portrait", Mezzanine::OM_Portrait)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeRight", Mezzanine::OM_LandscapeRight)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeLeft", Mezzanine::OM_LandscapeLeft)},
    {SWIG_LUA_CONSTTAB_INT("PL_Unpaused", Mezzanine::PL_Unpaused)},
    {SWIG_LUA_CONSTTAB_INT("PL_PausePhysics", Mezzanine::PL_PausePhysics)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseParticles", Mezzanine::PL_PauseParticles)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAnimations", Mezzanine::PL_PauseAnimations)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAll", Mezzanine::PL_PauseAll)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_First", Mezzanine::PT_Audio_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_Listener", Mezzanine::PT_Audio_Listener)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_SoundProxy", Mezzanine::PT_Audio_SoundProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_Last", Mezzanine::PT_Audio_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_First", Mezzanine::PT_Graphics_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_BillboardSetProxy", Mezzanine::PT_Graphics_BillboardSetProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_CameraProxy", Mezzanine::PT_Graphics_CameraProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_EntityProxy", Mezzanine::PT_Graphics_EntityProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_LightProxy", Mezzanine::PT_Graphics_LightProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_ParticleSystemProxy", Mezzanine::PT_Graphics_ParticleSystemProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_Last", Mezzanine::PT_Graphics_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_First", Mezzanine::PT_Physics_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_GhostProxy", Mezzanine::PT_Physics_GhostProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_RigidProxy", Mezzanine::PT_Physics_RigidProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_SoftProxy", Mezzanine::PT_Physics_SoftProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_Last", Mezzanine::PT_Physics_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_All_Proxies", Mezzanine::PT_Audio_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_All_Proxies", Mezzanine::PT_Graphics_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_All_Proxies", Mezzanine::PT_Physics_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Invalid", Mezzanine::Axis_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("Axis_X", Mezzanine::Axis_X)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Min", Mezzanine::Axis_Min)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Y", Mezzanine::Axis_Y)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Z", Mezzanine::Axis_Z)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Max", Mezzanine::Axis_Max)},
    {SWIG_LUA_CONSTTAB_INT("TT_Simple", Mezzanine::TT_Simple)},
    {SWIG_LUA_CONSTTAB_INT("TT_Spline", Mezzanine::TT_Spline)},
    {SWIG_LUA_CONSTTAB_INT("TT_Bezier", Mezzanine::TT_Bezier)},
    {SWIG_LUA_CONSTTAB_INT("TS_Local", Mezzanine::TS_Local)},
    {SWIG_LUA_CONSTTAB_INT("TS_Parent", Mezzanine::TS_Parent)},
    {SWIG_LUA_CONSTTAB_INT("TS_World", Mezzanine::TS_World)},
    {SWIG_LUA_CONSTTAB_INT("WO_TerrainFirst", Mezzanine::WO_TerrainFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_MeshTerrain", Mezzanine::WO_MeshTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_HeightfieldTerrain", Mezzanine::WO_HeightfieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_VectorFieldTerrain", Mezzanine::WO_VectorFieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_VoxelTerrain", Mezzanine::WO_VoxelTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_MarchingCubeTerrain", Mezzanine::WO_MarchingCubeTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_UnknownTerrain", Mezzanine::WO_UnknownTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_TerrainLast", Mezzanine::WO_TerrainLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisFirst", Mezzanine::WO_DebrisFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisRigid", Mezzanine::WO_DebrisRigid)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisSoft", Mezzanine::WO_DebrisSoft)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisUnknown", Mezzanine::WO_DebrisUnknown)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisLast", Mezzanine::WO_DebrisLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectFirst", Mezzanine::WO_AreaEffectFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectGravityField", Mezzanine::WO_AreaEffectGravityField)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectGravityWell", Mezzanine::WO_AreaEffectGravityWell)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectFieldOfForce", Mezzanine::WO_AreaEffectFieldOfForce)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectPlaceHolder1", Mezzanine::WO_AreaEffectPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectPlaceHolder2", Mezzanine::WO_AreaEffectPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectUnknown", Mezzanine::WO_AreaEffectUnknown)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectLast", Mezzanine::WO_AreaEffectLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorFirst", Mezzanine::WO_ActorFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder1", Mezzanine::WO_ActorPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder2", Mezzanine::WO_ActorPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder3", Mezzanine::WO_ActorPlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorLast", Mezzanine::WO_ActorLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehicleFirst", Mezzanine::WO_VehicleFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder1", Mezzanine::WO_VehiclePlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder2", Mezzanine::WO_VehiclePlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder3", Mezzanine::WO_VehiclePlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder4", Mezzanine::WO_VehiclePlaceHolder4)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder5", Mezzanine::WO_VehiclePlaceHolder5)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehicleLast", Mezzanine::WO_VehicleLast)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_FIRST_EXCEPTION", Mezzanine::ExceptionBase::FIRST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_EXCEPTION", Mezzanine::ExceptionBase::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_URL_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_EXCEPTION", Mezzanine::ExceptionBase::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_IDENTITY_INVALID_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::ExceptionBase::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_EXCEPTION", Mezzanine::ExceptionBase::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_CAST_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_RANGE_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_ARITHMETIC_EXCEPTION", Mezzanine::ExceptionBase::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_VERSION_EXCEPTION", Mezzanine::ExceptionBase::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_STATE_EXCEPTION", Mezzanine::ExceptionBase::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_RENDERINGAPI_EXCEPTION", Mezzanine::ExceptionBase::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_RT_ASSERTION_EXCEPTION", Mezzanine::ExceptionBase::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INTERNAL_EXCEPTION", Mezzanine::ExceptionBase::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_NOT_IMPLEMENTED_EXCEPTION", Mezzanine::ExceptionBase::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_ASSIGNMENT", Mezzanine::ExceptionBase::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_LAST_EXCEPTION", Mezzanine::ExceptionBase::LAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IOException_ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileException_ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileReadException_ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileWriteException_ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileNotFoundException_ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FilePermissionException_ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryException_ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryReadException_ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryWriteException_ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryNotFoundException_ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryPermissionException_ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkException_ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkReadException_ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkWriteException_ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkNotFoundException_ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkURLException_ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkPermissionException_ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOWriteException_ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOReadException_ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityException_ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityInvalidException_ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityNotFoundException_ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityDuplicateException_ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryManagementException_ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("OutOfMemoryException_ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryOutOfBoundsException_ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorException_ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXMLException_ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXPathException_ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorLuaException_ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptException_ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaException_ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaYieldException_ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaRuntimeException_ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaErrErrException_ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersException_ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersCastException_ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersRangeException_ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ArithmeticException_ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidVersionException_ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidStateException_ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RenderingAPIException_ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RuntimeAssertionException_ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InternalException_ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NotImplementedException_ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidAssignment_ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneError", Mezzanine::CastNoneError)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneReturnZero", Mezzanine::CastNoneReturnZero)},
    {SWIG_LUA_CONSTTAB_INT("CastImplicit", Mezzanine::CastImplicit)},
    {SWIG_LUA_CONSTTAB_INT("CastStatic", Mezzanine::CastStatic)},
    {SWIG_LUA_CONSTTAB_INT("CastDynamic", Mezzanine::CastDynamic)},
    {SWIG_LUA_CONSTTAB_INT("Con_ERP", Mezzanine::Physics::Con_ERP)},
    {SWIG_LUA_CONSTTAB_INT("Con_Stop_ERP", Mezzanine::Physics::Con_Stop_ERP)},
    {SWIG_LUA_CONSTTAB_INT("Con_CFM", Mezzanine::Physics::Con_CFM)},
    {SWIG_LUA_CONSTTAB_INT("Con_Stop_CFM", Mezzanine::Physics::Con_Stop_CFM)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_LinearStart", Mezzanine::Physics::Generic6DofConstraint::LinearStart)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_LinearX", Mezzanine::Physics::Generic6DofConstraint::LinearX)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_LinearY", Mezzanine::Physics::Generic6DofConstraint::LinearY)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_LinearZ", Mezzanine::Physics::Generic6DofConstraint::LinearZ)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_LinearEnd", Mezzanine::Physics::Generic6DofConstraint::LinearEnd)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularStart", Mezzanine::Physics::Generic6DofConstraint::AngularStart)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularX", Mezzanine::Physics::Generic6DofConstraint::AngularX)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularY", Mezzanine::Physics::Generic6DofConstraint::AngularY)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularZ", Mezzanine::Physics::Generic6DofConstraint::AngularZ)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularEnd", Mezzanine::Physics::Generic6DofConstraint::AngularEnd)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularXAsRotationAxis", Mezzanine::Physics::Generic6DofConstraint::AngularXAsRotationAxis)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularYAsRotationAxis", Mezzanine::Physics::Generic6DofConstraint::AngularYAsRotationAxis)},
    {SWIG_LUA_CONSTTAB_INT("Generic6DofConstraint_AngularZAsRotationAxis", Mezzanine::Physics::Generic6DofConstraint::AngularZAsRotationAxis)},
    {SWIG_LUA_CONSTTAB_INT("ManagerConstructionInfo_PCF_SoftRigidWorld", Mezzanine::Physics::ManagerConstructionInfo::PCF_SoftRigidWorld)},
    {SWIG_LUA_CONSTTAB_INT("ManagerConstructionInfo_PCF_LimitlessWorld", Mezzanine::Physics::ManagerConstructionInfo::PCF_LimitlessWorld)},
    {SWIG_LUA_CONSTTAB_INT("ManagerConstructionInfo_PCF_Multithreaded", Mezzanine::Physics::ManagerConstructionInfo::PCF_Multithreaded)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_None", Mezzanine::Plane::S_None)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Positive", Mezzanine::Plane::S_Positive)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Negative", Mezzanine::Plane::S_Negative)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Both", Mezzanine::Plane::S_Both)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "CollisionShape_GetSerializableName", _wrap_CollisionShape_GetSerializableName},
    { "CreateShape", _wrap_CreateShape},
    { "InternalShapeTypeToShapeType", _wrap_InternalShapeTypeToShapeType},
    { "ShapeTypeToString", _wrap_ShapeTypeToString},
    { "StringToShapeType", _wrap_StringToShapeType},
    { "PrimitiveCollisionShape_GetSerializableName", _wrap_PrimitiveCollisionShape_GetSerializableName},
    { "BoxCollisionShape_GetSerializableName", _wrap_BoxCollisionShape_GetSerializableName},
    { "CapsuleCollisionShape_GetSerializableName", _wrap_CapsuleCollisionShape_GetSerializableName},
    { "SerializeError", _wrap_SerializeError},
    { "DeSerializeError", _wrap_DeSerializeError},
    { "Vector3_Unit_X", _wrap_Vector3_Unit_X},
    { "Vector3_Unit_Y", _wrap_Vector3_Unit_Y},
    { "Vector3_Unit_Z", _wrap_Vector3_Unit_Z},
    { "Vector3_Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Vector3_Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Vector3_Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "Vector3_UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "Vector3_GetSerializableName", _wrap_Vector3_GetSerializableName},
    { "__add", _wrap___add},
    { "__sub", _wrap___sub},
    { "__mul", _wrap___mul},
    { "__div", _wrap___div},
    { "Quaternion_GetSerializableName", _wrap_Quaternion_GetSerializableName},
    { "WorldProxy_GetSerializableName", _wrap_WorldProxy_GetSerializableName},
    { "CollidableProxy_GetSerializableName", _wrap_CollidableProxy_GetSerializableName},
    { "CompoundCollisionShape_GetSerializableName", _wrap_CompoundCollisionShape_GetSerializableName},
    { "ConeCollisionShape_GetSerializableName", _wrap_ConeCollisionShape_GetSerializableName},
    { "Transform_GetSerializableName", _wrap_Transform_GetSerializableName},
    { "ConstraintParamAsString", _wrap_ConstraintParamAsString},
    { "StringAsConstraintParam", _wrap_StringAsConstraintParam},
    { "char4ToAxis", _wrap_char4ToAxis},
    { "Constraint_GetSerializableName", _wrap_Constraint_GetSerializableName},
    { "DualTransformConstraint_GetSerializableName", _wrap_DualTransformConstraint_GetSerializableName},
    { "ConeTwistConstraint_GetSerializableName", _wrap_ConeTwistConstraint_GetSerializableName},
    { "ConvexHullCollisionShape_GetSerializableName", _wrap_ConvexHullCollisionShape_GetSerializableName},
    { "CylinderCollisionShape_CreateHalfExtents", _wrap_CylinderCollisionShape_CreateHalfExtents},
    { "CylinderCollisionShape_GetSerializableName", _wrap_CylinderCollisionShape_GetSerializableName},
    { "MeshCollisionShape_GetSerializableName", _wrap_MeshCollisionShape_GetSerializableName},
    { "FieldCollisionShape_GetSerializableName", _wrap_FieldCollisionShape_GetSerializableName},
    { "GearConstraint_GetSerializableName", _wrap_GearConstraint_GetSerializableName},
    { "Generic6DofConstraint_GetSerializableName", _wrap_Generic6DofConstraint_GetSerializableName},
    { "Generic6DofSpringConstraint_GetSerializableName", _wrap_Generic6DofSpringConstraint_GetSerializableName},
    { "GhostProxy_GetSerializableName", _wrap_GhostProxy_GetSerializableName},
    { "HingeConstraint_GetSerializableName", _wrap_HingeConstraint_GetSerializableName},
    { "MultiSphereCollisionShape_GetSerializableName", _wrap_MultiSphereCollisionShape_GetSerializableName},
    { "Plane_GetSerializableName", _wrap_Plane_GetSerializableName},
    { "PlaneCollisionShape_GetSerializableName", _wrap_PlaneCollisionShape_GetSerializableName},
    { "Point2PointConstraint_GetSerializableName", _wrap_Point2PointConstraint_GetSerializableName},
    { "RigidProxy_GetSerializableName", _wrap_RigidProxy_GetSerializableName},
    { "SliderConstraint_GetSerializableName", _wrap_SliderConstraint_GetSerializableName},
    { "SoftProxy_GetSerializableName", _wrap_SoftProxy_GetSerializableName},
    { "SphereCollisionShape_GetSerializableName", _wrap_SphereCollisionShape_GetSerializableName},
    { "UniversalConstraint_GetSerializableName", _wrap_UniversalConstraint_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_SimulationWorkUnit,
&_wrap_class_SimulationMonopolyWorkUnit,
&_wrap_class_WorldTriggerUpdateWorkUnit,
&_wrap_class_DebugDrawWorkUnit,
&_wrap_class_PhysicsManager,
&_wrap_class_DefaultPhysicsManagerFactory,
&_wrap_class_CollisionShape,
&_wrap_class_CollisionShapeDeSerializer,
&_wrap_class_CollisionShapeManager,
&_wrap_class_DefaultCollisionShapeManagerFactory,
&_wrap_class_PrimitiveCollisionShape,
&_wrap_class_BoxCollisionShape,
&_wrap_class_CapsuleCollisionShape,
&_wrap_class_CollidablePair,
&_wrap_class_ExceptionBase,
&_wrap_class_IOException,
&_wrap_class_FileException,
&_wrap_class_FileReadException,
&_wrap_class_FileWriteException,
&_wrap_class_FileNotFoundException,
&_wrap_class_FilePermissionException,
&_wrap_class_DirectoryException,
&_wrap_class_DirectoryReadException,
&_wrap_class_DirectoryWriteException,
&_wrap_class_DirectoryNotFoundException,
&_wrap_class_DirectoryPermissionException,
&_wrap_class_NetworkException,
&_wrap_class_NetworkReadException,
&_wrap_class_NetworkWriteException,
&_wrap_class_NetworkNotFoundException,
&_wrap_class_NetworkURLException,
&_wrap_class_NetworkPermissionException,
&_wrap_class_IOWriteException,
&_wrap_class_IOReadException,
&_wrap_class_InstanceIdentityException,
&_wrap_class_InstanceIdentityInvalidException,
&_wrap_class_InstanceIdentityNotFoundException,
&_wrap_class_InstanceIdentityDuplicateException,
&_wrap_class_MemoryManagementException,
&_wrap_class_OutOfMemoryException,
&_wrap_class_MemoryOutOfBoundsException,
&_wrap_class_SyntaxErrorException,
&_wrap_class_SyntaxErrorXMLException,
&_wrap_class_SyntaxErrorXPathException,
&_wrap_class_SyntaxErrorLuaException,
&_wrap_class_ScriptException,
&_wrap_class_ScriptLuaException,
&_wrap_class_ScriptLuaYieldException,
&_wrap_class_ScriptLuaRuntimeException,
&_wrap_class_ScriptLuaErrErrException,
&_wrap_class_ParametersException,
&_wrap_class_ParametersCastException,
&_wrap_class_ParametersRangeException,
&_wrap_class_ArithmeticException,
&_wrap_class_InvalidVersionException,
&_wrap_class_InvalidStateException,
&_wrap_class_RenderingAPIException,
&_wrap_class_RuntimeAssertionException,
&_wrap_class_InternalException,
&_wrap_class_NotImplementedException,
&_wrap_class_InvalidAssignment,
&_wrap_class_Vector3,
&_wrap_class_Vector3LengthCompare,
&_wrap_class_Quaternion,
&_wrap_class_TransformableObject,
&_wrap_class_TransformableChildObject,
&_wrap_class_WorldProxy,
&_wrap_class_CollidableProxy,
&_wrap_class_Collision,
&_wrap_class_CompoundCollisionShape,
&_wrap_class_ConeCollisionShape,
&_wrap_class_Transform,
&_wrap_class_Constraint,
&_wrap_class_DualTransformConstraint,
&_wrap_class_ConeTwistConstraint,
&_wrap_class_ConvexHullCollisionShape,
&_wrap_class_CylinderCollisionShape,
&_wrap_class_MeshCollisionShape,
&_wrap_class_DynamicMeshCollisionShape,
&_wrap_class_FieldCollisionShape,
&_wrap_class_GearConstraint,
&_wrap_class_Generic6DofConstraint,
&_wrap_class_Generic6DofSpringConstraint,
&_wrap_class_GhostProxy,
&_wrap_class_HeightfieldCollisionShape,
&_wrap_class_HingeConstraint,
&_wrap_class_ManagerConstructionInfo,
&_wrap_class_MultiSphereCollisionShape,
&_wrap_class_Plane,
&_wrap_class_PlaneCollisionShape,
&_wrap_class_Point2PointConstraint,
&_wrap_class_StickyConstraintConstructionInfo,
&_wrap_class_StickyData,
&_wrap_class_RigidProxy,
&_wrap_class_SliderConstraint,
&_wrap_class_SoftCollisionShape,
&_wrap_class_SoftProxy,
&_wrap_class_SphereCollisionShape,
&_wrap_class_StaticMeshCollisionShape,
&_wrap_class_UniversalConstraint,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "MezzaninePhysicsSafe",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Mezzanine__Physics__Generic6DofSpringConstraintTo_p_Mezzanine__Physics__Generic6DofConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Generic6DofConstraint *)  ((Mezzanine::Physics::Generic6DofSpringConstraint *) x));
}
static void *_p_Mezzanine__Physics__UniversalConstraintTo_p_Mezzanine__Physics__Generic6DofConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Generic6DofConstraint *)  ((Mezzanine::Physics::UniversalConstraint *) x));
}
static void *_p_Mezzanine__Physics__ConeTwistConstraintTo_p_Mezzanine__Physics__DualTransformConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::DualTransformConstraint *)  ((Mezzanine::Physics::ConeTwistConstraint *) x));
}
static void *_p_Mezzanine__Physics__Generic6DofConstraintTo_p_Mezzanine__Physics__DualTransformConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::DualTransformConstraint *)  ((Mezzanine::Physics::Generic6DofConstraint *) x));
}
static void *_p_Mezzanine__Physics__Generic6DofSpringConstraintTo_p_Mezzanine__Physics__DualTransformConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::DualTransformConstraint *) (Mezzanine::Physics::Generic6DofConstraint *) ((Mezzanine::Physics::Generic6DofSpringConstraint *) x));
}
static void *_p_Mezzanine__Physics__HingeConstraintTo_p_Mezzanine__Physics__DualTransformConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::DualTransformConstraint *)  ((Mezzanine::Physics::HingeConstraint *) x));
}
static void *_p_Mezzanine__Physics__SliderConstraintTo_p_Mezzanine__Physics__DualTransformConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::DualTransformConstraint *)  ((Mezzanine::Physics::SliderConstraint *) x));
}
static void *_p_Mezzanine__Physics__UniversalConstraintTo_p_Mezzanine__Physics__DualTransformConstraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::DualTransformConstraint *) (Mezzanine::Physics::Generic6DofConstraint *) ((Mezzanine::Physics::UniversalConstraint *) x));
}
static void *_p_Mezzanine__Physics__DualTransformConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *)  ((Mezzanine::Physics::DualTransformConstraint *) x));
}
static void *_p_Mezzanine__Physics__ConeTwistConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *) (Mezzanine::Physics::DualTransformConstraint *) ((Mezzanine::Physics::ConeTwistConstraint *) x));
}
static void *_p_Mezzanine__Physics__GearConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *)  ((Mezzanine::Physics::GearConstraint *) x));
}
static void *_p_Mezzanine__Physics__Generic6DofConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *) (Mezzanine::Physics::DualTransformConstraint *) ((Mezzanine::Physics::Generic6DofConstraint *) x));
}
static void *_p_Mezzanine__Physics__Generic6DofSpringConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *) (Mezzanine::Physics::DualTransformConstraint *)(Mezzanine::Physics::Generic6DofConstraint *) ((Mezzanine::Physics::Generic6DofSpringConstraint *) x));
}
static void *_p_Mezzanine__Physics__HingeConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *) (Mezzanine::Physics::DualTransformConstraint *) ((Mezzanine::Physics::HingeConstraint *) x));
}
static void *_p_Mezzanine__Physics__Point2PointConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *)  ((Mezzanine::Physics::Point2PointConstraint *) x));
}
static void *_p_Mezzanine__Physics__SliderConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *) (Mezzanine::Physics::DualTransformConstraint *) ((Mezzanine::Physics::SliderConstraint *) x));
}
static void *_p_Mezzanine__Physics__UniversalConstraintTo_p_Mezzanine__Physics__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::Constraint *) (Mezzanine::Physics::DualTransformConstraint *)(Mezzanine::Physics::Generic6DofConstraint *) ((Mezzanine::Physics::UniversalConstraint *) x));
}
static void *_p_Mezzanine__Physics__HeightfieldCollisionShapeTo_p_Mezzanine__Physics__FieldCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::FieldCollisionShape *)  ((Mezzanine::Physics::HeightfieldCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__PlaneCollisionShapeTo_p_Mezzanine__Physics__FieldCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::FieldCollisionShape *)  ((Mezzanine::Physics::PlaneCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__DynamicMeshCollisionShapeTo_p_Mezzanine__Physics__MeshCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::MeshCollisionShape *)  ((Mezzanine::Physics::DynamicMeshCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__SoftCollisionShapeTo_p_Mezzanine__Physics__MeshCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::MeshCollisionShape *)  ((Mezzanine::Physics::SoftCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__StaticMeshCollisionShapeTo_p_Mezzanine__Physics__MeshCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::MeshCollisionShape *)  ((Mezzanine::Physics::StaticMeshCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__SoftCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::MeshCollisionShape *) ((Mezzanine::Physics::SoftCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__PlaneCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::FieldCollisionShape *) ((Mezzanine::Physics::PlaneCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__MultiSphereCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::MultiSphereCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__HeightfieldCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::FieldCollisionShape *) ((Mezzanine::Physics::HeightfieldCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__FieldCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *)  ((Mezzanine::Physics::FieldCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__DynamicMeshCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::MeshCollisionShape *) ((Mezzanine::Physics::DynamicMeshCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__MeshCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *)  ((Mezzanine::Physics::MeshCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__CylinderCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::CylinderCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__ConvexHullCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::ConvexHullCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__ConeCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::ConeCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__CompoundCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *)  ((Mezzanine::Physics::CompoundCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__CapsuleCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::CapsuleCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__BoxCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::BoxCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__PrimitiveCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *)  ((Mezzanine::Physics::PrimitiveCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__SphereCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::PrimitiveCollisionShape *) ((Mezzanine::Physics::SphereCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__StaticMeshCollisionShapeTo_p_Mezzanine__Physics__CollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollisionShape *) (Mezzanine::Physics::MeshCollisionShape *) ((Mezzanine::Physics::StaticMeshCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__BoxCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::BoxCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__CapsuleCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::CapsuleCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__ConeCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::ConeCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__ConvexHullCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::ConvexHullCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__CylinderCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::CylinderCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__MultiSphereCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::MultiSphereCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__SphereCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::PrimitiveCollisionShape *)  ((Mezzanine::Physics::SphereCollisionShape *) x));
}
static void *_p_Mezzanine__Physics__CollidableProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldProxy *) ((Mezzanine::Physics::CollidableProxy *) x));
}
static void *_p_Mezzanine__Physics__GhostProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldProxy *)(Mezzanine::Physics::CollidableProxy *) ((Mezzanine::Physics::GhostProxy *) x));
}
static void *_p_Mezzanine__Physics__SoftProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldProxy *)(Mezzanine::Physics::CollidableProxy *) ((Mezzanine::Physics::SoftProxy *) x));
}
static void *_p_Mezzanine__Physics__RigidProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldProxy *)(Mezzanine::Physics::CollidableProxy *) ((Mezzanine::Physics::RigidProxy *) x));
}
static void *_p_Mezzanine__WorldProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *)  ((Mezzanine::WorldProxy *) x));
}
static void *_p_Mezzanine__Physics__CollidableProxyTo_p_Mezzanine__WorldProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldProxy *)  ((Mezzanine::Physics::CollidableProxy *) x));
}
static void *_p_Mezzanine__Physics__GhostProxyTo_p_Mezzanine__WorldProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldProxy *) (Mezzanine::Physics::CollidableProxy *) ((Mezzanine::Physics::GhostProxy *) x));
}
static void *_p_Mezzanine__Physics__SoftProxyTo_p_Mezzanine__WorldProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldProxy *) (Mezzanine::Physics::CollidableProxy *) ((Mezzanine::Physics::SoftProxy *) x));
}
static void *_p_Mezzanine__Physics__RigidProxyTo_p_Mezzanine__WorldProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldProxy *) (Mezzanine::Physics::CollidableProxy *) ((Mezzanine::Physics::RigidProxy *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__ExceptionBaseTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Mezzanine::ExceptionBase *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *)  ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__Physics__GhostProxyTo_p_Mezzanine__Physics__CollidableProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollidableProxy *)  ((Mezzanine::Physics::GhostProxy *) x));
}
static void *_p_Mezzanine__Physics__SoftProxyTo_p_Mezzanine__Physics__CollidableProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollidableProxy *)  ((Mezzanine::Physics::SoftProxy *) x));
}
static void *_p_Mezzanine__Physics__RigidProxyTo_p_Mezzanine__Physics__CollidableProxy(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Physics::CollidableProxy *)  ((Mezzanine::Physics::RigidProxy *) x));
}
static void *_p_Mezzanine__Physics__CollisionShapeManagerTo_p_EntresolManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((EntresolManager *)  ((Mezzanine::Physics::CollisionShapeManager *) x));
}
static void *_p_Mezzanine__Physics__PhysicsManagerTo_p_WorldManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((WorldManager *)  ((Mezzanine::Physics::PhysicsManager *) x));
}
static swig_type_info _swigt__p_AxisAlignedBox = {"_p_AxisAlignedBox", "AxisAlignedBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AxisList = {"_p_AxisList", "AxisList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelType = {"_p_ChannelType", "ChannelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollidablePair = {"_p_CollidablePair", "CollidablePair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionContainer = {"_p_CollisionContainer", "CollisionContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionIterator = {"_p_CollisionIterator", "CollisionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionMap = {"_p_CollisionMap", "CollisionMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionMapIterator = {"_p_CollisionMapIterator", "CollisionMapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionSortPair = {"_p_CollisionSortPair", "CollisionSortPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstCollisionIterator = {"_p_ConstCollisionIterator", "ConstCollisionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstCollisionMapIterator = {"_p_ConstCollisionMapIterator", "ConstCollisionMapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstConstraintIterator = {"_p_ConstConstraintIterator", "ConstConstraintIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstProxyIterator = {"_p_ConstProxyIterator", "ConstProxyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstShapeMapIterator = {"_p_ConstShapeMapIterator", "ConstShapeMapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstShapeVectorIterator = {"_p_ConstShapeVectorIterator", "ConstShapeVectorIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstWorldTriggerIterator = {"_p_ConstWorldTriggerIterator", "ConstWorldTriggerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Constraint = {"_p_Constraint", "Constraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstraintContainer = {"_p_ConstraintContainer", "ConstraintContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstraintIterator = {"_p_ConstraintIterator", "ConstraintIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntresolManager = {"_p_EntresolManager", "EntresolManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagerBase__ManagerType = {"_p_ManagerBase__ManagerType", "ManagerBase::ManagerType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagerConstructionInfo = {"_p_ManagerConstructionInfo", "ManagerConstructionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__ArithmeticException = {"_p_Mezzanine__ArithmeticException", "Mezzanine::ArithmeticException *", 0, 0, (void*)&_wrap_class_ArithmeticException, 0};
static swig_type_info _swigt__p_Mezzanine__AxisAlignedBox = {"_p_Mezzanine__AxisAlignedBox", "Mezzanine::AxisAlignedBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryException = {"_p_Mezzanine__DirectoryException", "Mezzanine::DirectoryException *", 0, 0, (void*)&_wrap_class_DirectoryException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryNotFoundException = {"_p_Mezzanine__DirectoryNotFoundException", "Mezzanine::DirectoryNotFoundException *", 0, 0, (void*)&_wrap_class_DirectoryNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryPermissionException = {"_p_Mezzanine__DirectoryPermissionException", "Mezzanine::DirectoryPermissionException *", 0, 0, (void*)&_wrap_class_DirectoryPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryReadException = {"_p_Mezzanine__DirectoryReadException", "Mezzanine::DirectoryReadException *", 0, 0, (void*)&_wrap_class_DirectoryReadException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryWriteException = {"_p_Mezzanine__DirectoryWriteException", "Mezzanine::DirectoryWriteException *", 0, 0, (void*)&_wrap_class_DirectoryWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__ExceptionBase = {"_p_Mezzanine__ExceptionBase", "Mezzanine::ExceptionBase *", 0, 0, (void*)&_wrap_class_ExceptionBase, 0};
static swig_type_info _swigt__p_Mezzanine__FileException = {"_p_Mezzanine__FileException", "Mezzanine::FileException *", 0, 0, (void*)&_wrap_class_FileException, 0};
static swig_type_info _swigt__p_Mezzanine__FileNotFoundException = {"_p_Mezzanine__FileNotFoundException", "Mezzanine::FileNotFoundException *", 0, 0, (void*)&_wrap_class_FileNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__FilePermissionException = {"_p_Mezzanine__FilePermissionException", "Mezzanine::FilePermissionException *", 0, 0, (void*)&_wrap_class_FilePermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__FileReadException = {"_p_Mezzanine__FileReadException", "Mezzanine::FileReadException *", 0, 0, (void*)&_wrap_class_FileReadException, 0};
static swig_type_info _swigt__p_Mezzanine__FileWriteException = {"_p_Mezzanine__FileWriteException", "Mezzanine::FileWriteException *", 0, 0, (void*)&_wrap_class_FileWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__Mesh = {"_p_Mezzanine__Graphics__Mesh", "Mezzanine::Graphics::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__IOException = {"_p_Mezzanine__IOException", "Mezzanine::IOException *", 0, 0, (void*)&_wrap_class_IOException, 0};
static swig_type_info _swigt__p_Mezzanine__IOReadException = {"_p_Mezzanine__IOReadException", "Mezzanine::IOReadException *", 0, 0, (void*)&_wrap_class_IOReadException, 0};
static swig_type_info _swigt__p_Mezzanine__IOWriteException = {"_p_Mezzanine__IOWriteException", "Mezzanine::IOWriteException *", 0, 0, (void*)&_wrap_class_IOWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityDuplicateException = {"_p_Mezzanine__InstanceIdentityDuplicateException", "Mezzanine::InstanceIdentityDuplicateException *", 0, 0, (void*)&_wrap_class_InstanceIdentityDuplicateException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityException = {"_p_Mezzanine__InstanceIdentityException", "Mezzanine::InstanceIdentityException *", 0, 0, (void*)&_wrap_class_InstanceIdentityException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityInvalidException = {"_p_Mezzanine__InstanceIdentityInvalidException", "Mezzanine::InstanceIdentityInvalidException *", 0, 0, (void*)&_wrap_class_InstanceIdentityInvalidException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityNotFoundException = {"_p_Mezzanine__InstanceIdentityNotFoundException", "Mezzanine::InstanceIdentityNotFoundException *", 0, 0, (void*)&_wrap_class_InstanceIdentityNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__InternalException = {"_p_Mezzanine__InternalException", "Mezzanine::InternalException *", 0, 0, (void*)&_wrap_class_InternalException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidAssignment = {"_p_Mezzanine__InvalidAssignment", "Mezzanine::InvalidAssignment *", 0, 0, (void*)&_wrap_class_InvalidAssignment, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidStateException = {"_p_Mezzanine__InvalidStateException", "Mezzanine::InvalidStateException *", 0, 0, (void*)&_wrap_class_InvalidStateException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidVersionException = {"_p_Mezzanine__InvalidVersionException", "Mezzanine::InvalidVersionException *", 0, 0, (void*)&_wrap_class_InvalidVersionException, 0};
static swig_type_info _swigt__p_Mezzanine__Matrix3x3 = {"_p_Mezzanine__Matrix3x3", "Mezzanine::Matrix3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryManagementException = {"_p_Mezzanine__MemoryManagementException", "Mezzanine::MemoryManagementException *", 0, 0, (void*)&_wrap_class_MemoryManagementException, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryOutOfBoundsException = {"_p_Mezzanine__MemoryOutOfBoundsException", "Mezzanine::MemoryOutOfBoundsException *", 0, 0, (void*)&_wrap_class_MemoryOutOfBoundsException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkException = {"_p_Mezzanine__NetworkException", "Mezzanine::NetworkException *", 0, 0, (void*)&_wrap_class_NetworkException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkNotFoundException = {"_p_Mezzanine__NetworkNotFoundException", "Mezzanine::NetworkNotFoundException *", 0, 0, (void*)&_wrap_class_NetworkNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkPermissionException = {"_p_Mezzanine__NetworkPermissionException", "Mezzanine::NetworkPermissionException *", 0, 0, (void*)&_wrap_class_NetworkPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkReadException = {"_p_Mezzanine__NetworkReadException", "Mezzanine::NetworkReadException *", 0, 0, (void*)&_wrap_class_NetworkReadException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkURLException = {"_p_Mezzanine__NetworkURLException", "Mezzanine::NetworkURLException *", 0, 0, (void*)&_wrap_class_NetworkURLException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkWriteException = {"_p_Mezzanine__NetworkWriteException", "Mezzanine::NetworkWriteException *", 0, 0, (void*)&_wrap_class_NetworkWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__NotImplementedException = {"_p_Mezzanine__NotImplementedException", "Mezzanine::NotImplementedException *", 0, 0, (void*)&_wrap_class_NotImplementedException, 0};
static swig_type_info _swigt__p_Mezzanine__OutOfMemoryException = {"_p_Mezzanine__OutOfMemoryException", "Mezzanine::OutOfMemoryException *", 0, 0, (void*)&_wrap_class_OutOfMemoryException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersCastException = {"_p_Mezzanine__ParametersCastException", "Mezzanine::ParametersCastException *", 0, 0, (void*)&_wrap_class_ParametersCastException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersException = {"_p_Mezzanine__ParametersException", "Mezzanine::ParametersException *", 0, 0, (void*)&_wrap_class_ParametersException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersRangeException = {"_p_Mezzanine__ParametersRangeException", "Mezzanine::ParametersRangeException *", 0, 0, (void*)&_wrap_class_ParametersRangeException, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__BoxCollisionShape = {"_p_Mezzanine__Physics__BoxCollisionShape", "Mezzanine::Physics::BoxCollisionShape *", 0, 0, (void*)&_wrap_class_BoxCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CapsuleCollisionShape = {"_p_Mezzanine__Physics__CapsuleCollisionShape", "Mezzanine::Physics::CapsuleCollisionShape *", 0, 0, (void*)&_wrap_class_CapsuleCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollidablePair = {"_p_Mezzanine__Physics__CollidablePair", "Mezzanine::Physics::CollidablePair *", 0, 0, (void*)&_wrap_class_CollidablePair, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollidableProxy = {"_p_Mezzanine__Physics__CollidableProxy", "Mezzanine::Physics::CollidableProxy *", 0, 0, (void*)&_wrap_class_CollidableProxy, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Collision = {"_p_Mezzanine__Physics__Collision", "Mezzanine::Physics::Collision *", 0, 0, (void*)&_wrap_class_Collision, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollisionShape = {"_p_Mezzanine__Physics__CollisionShape", "Mezzanine::Physics::CollisionShape *", 0, 0, (void*)&_wrap_class_CollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollisionShapeDeSerializer = {"_p_Mezzanine__Physics__CollisionShapeDeSerializer", "Mezzanine::Physics::CollisionShapeDeSerializer *", 0, 0, (void*)&_wrap_class_CollisionShapeDeSerializer, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollisionShapeManager = {"_p_Mezzanine__Physics__CollisionShapeManager", "Mezzanine::Physics::CollisionShapeManager *", 0, 0, (void*)&_wrap_class_CollisionShapeManager, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CompoundCollisionShape = {"_p_Mezzanine__Physics__CompoundCollisionShape", "Mezzanine::Physics::CompoundCollisionShape *", 0, 0, (void*)&_wrap_class_CompoundCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__ConeCollisionShape = {"_p_Mezzanine__Physics__ConeCollisionShape", "Mezzanine::Physics::ConeCollisionShape *", 0, 0, (void*)&_wrap_class_ConeCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__ConeTwistConstraint = {"_p_Mezzanine__Physics__ConeTwistConstraint", "Mezzanine::Physics::ConeTwistConstraint *", 0, 0, (void*)&_wrap_class_ConeTwistConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Constraint = {"_p_Mezzanine__Physics__Constraint", "Mezzanine::Physics::Constraint *", 0, 0, (void*)&_wrap_class_Constraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__ConvexHullCollisionShape = {"_p_Mezzanine__Physics__ConvexHullCollisionShape", "Mezzanine::Physics::ConvexHullCollisionShape *", 0, 0, (void*)&_wrap_class_ConvexHullCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CylinderCollisionShape = {"_p_Mezzanine__Physics__CylinderCollisionShape", "Mezzanine::Physics::CylinderCollisionShape *", 0, 0, (void*)&_wrap_class_CylinderCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__DebugDrawWorkUnit = {"_p_Mezzanine__Physics__DebugDrawWorkUnit", "Mezzanine::Physics::DebugDrawWorkUnit *", 0, 0, (void*)&_wrap_class_DebugDrawWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory = {"_p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory", "Mezzanine::Physics::DefaultCollisionShapeManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultCollisionShapeManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__DefaultPhysicsManagerFactory = {"_p_Mezzanine__Physics__DefaultPhysicsManagerFactory", "Mezzanine::Physics::DefaultPhysicsManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultPhysicsManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__DualTransformConstraint = {"_p_Mezzanine__Physics__DualTransformConstraint", "Mezzanine::Physics::DualTransformConstraint *", 0, 0, (void*)&_wrap_class_DualTransformConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__DynamicMeshCollisionShape = {"_p_Mezzanine__Physics__DynamicMeshCollisionShape", "Mezzanine::Physics::DynamicMeshCollisionShape *", 0, 0, (void*)&_wrap_class_DynamicMeshCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__FieldCollisionShape = {"_p_Mezzanine__Physics__FieldCollisionShape", "Mezzanine::Physics::FieldCollisionShape *", 0, 0, (void*)&_wrap_class_FieldCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__GearConstraint = {"_p_Mezzanine__Physics__GearConstraint", "Mezzanine::Physics::GearConstraint *", 0, 0, (void*)&_wrap_class_GearConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Generic6DofConstraint = {"_p_Mezzanine__Physics__Generic6DofConstraint", "Mezzanine::Physics::Generic6DofConstraint *|Mezzanine::Physics::StickyConstraint *", 0, 0, (void*)&_wrap_class_Generic6DofConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Generic6DofSpringConstraint = {"_p_Mezzanine__Physics__Generic6DofSpringConstraint", "Mezzanine::Physics::Generic6DofSpringConstraint *", 0, 0, (void*)&_wrap_class_Generic6DofSpringConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__GhostProxy = {"_p_Mezzanine__Physics__GhostProxy", "Mezzanine::Physics::GhostProxy *", 0, 0, (void*)&_wrap_class_GhostProxy, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__HeightfieldCollisionShape = {"_p_Mezzanine__Physics__HeightfieldCollisionShape", "Mezzanine::Physics::HeightfieldCollisionShape *", 0, 0, (void*)&_wrap_class_HeightfieldCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Hinge2Constraint = {"_p_Mezzanine__Physics__Hinge2Constraint", "Mezzanine::Physics::Hinge2Constraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__HingeConstraint = {"_p_Mezzanine__Physics__HingeConstraint", "Mezzanine::Physics::HingeConstraint *", 0, 0, (void*)&_wrap_class_HingeConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__ManagerConstructionInfo = {"_p_Mezzanine__Physics__ManagerConstructionInfo", "Mezzanine::Physics::ManagerConstructionInfo *", 0, 0, (void*)&_wrap_class_ManagerConstructionInfo, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__MeshCollisionShape = {"_p_Mezzanine__Physics__MeshCollisionShape", "Mezzanine::Physics::MeshCollisionShape *", 0, 0, (void*)&_wrap_class_MeshCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__MultiSphereCollisionShape = {"_p_Mezzanine__Physics__MultiSphereCollisionShape", "Mezzanine::Physics::MultiSphereCollisionShape *", 0, 0, (void*)&_wrap_class_MultiSphereCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__PhysicsManager = {"_p_Mezzanine__Physics__PhysicsManager", "Mezzanine::Physics::PhysicsManager *", 0, 0, (void*)&_wrap_class_PhysicsManager, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__PlaneCollisionShape = {"_p_Mezzanine__Physics__PlaneCollisionShape", "Mezzanine::Physics::PlaneCollisionShape *", 0, 0, (void*)&_wrap_class_PlaneCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Point2PointConstraint = {"_p_Mezzanine__Physics__Point2PointConstraint", "Mezzanine::Physics::Point2PointConstraint *", 0, 0, (void*)&_wrap_class_Point2PointConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__PrimitiveCollisionShape = {"_p_Mezzanine__Physics__PrimitiveCollisionShape", "Mezzanine::Physics::PrimitiveCollisionShape *", 0, 0, (void*)&_wrap_class_PrimitiveCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__RigidProxy = {"_p_Mezzanine__Physics__RigidProxy", "Mezzanine::Physics::RigidProxy *", 0, 0, (void*)&_wrap_class_RigidProxy, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__SimulationMonopolyWorkUnit = {"_p_Mezzanine__Physics__SimulationMonopolyWorkUnit", "Mezzanine::Physics::SimulationMonopolyWorkUnit *", 0, 0, (void*)&_wrap_class_SimulationMonopolyWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__SimulationWorkUnit = {"_p_Mezzanine__Physics__SimulationWorkUnit", "Mezzanine::Physics::SimulationWorkUnit *", 0, 0, (void*)&_wrap_class_SimulationWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__SliderConstraint = {"_p_Mezzanine__Physics__SliderConstraint", "Mezzanine::Physics::SliderConstraint *", 0, 0, (void*)&_wrap_class_SliderConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__SoftCollisionShape = {"_p_Mezzanine__Physics__SoftCollisionShape", "Mezzanine::Physics::SoftCollisionShape *", 0, 0, (void*)&_wrap_class_SoftCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__SoftProxy = {"_p_Mezzanine__Physics__SoftProxy", "Mezzanine::Physics::SoftProxy *", 0, 0, (void*)&_wrap_class_SoftProxy, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__SphereCollisionShape = {"_p_Mezzanine__Physics__SphereCollisionShape", "Mezzanine::Physics::SphereCollisionShape *", 0, 0, (void*)&_wrap_class_SphereCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__StaticMeshCollisionShape = {"_p_Mezzanine__Physics__StaticMeshCollisionShape", "Mezzanine::Physics::StaticMeshCollisionShape *", 0, 0, (void*)&_wrap_class_StaticMeshCollisionShape, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__StickyConstraintConstructionInfo = {"_p_Mezzanine__Physics__StickyConstraintConstructionInfo", "Mezzanine::Physics::StickyConstraintConstructionInfo *", 0, 0, (void*)&_wrap_class_StickyConstraintConstructionInfo, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__StickyData = {"_p_Mezzanine__Physics__StickyData", "Mezzanine::Physics::StickyData *", 0, 0, (void*)&_wrap_class_StickyData, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__UniversalConstraint = {"_p_Mezzanine__Physics__UniversalConstraint", "Mezzanine::Physics::UniversalConstraint *", 0, 0, (void*)&_wrap_class_UniversalConstraint, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit = {"_p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit", "Mezzanine::Physics::WorldTriggerUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_WorldTriggerUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__Plane = {"_p_Mezzanine__Plane", "Mezzanine::Plane *", 0, 0, (void*)&_wrap_class_Plane, 0};
static swig_type_info _swigt__p_Mezzanine__Quaternion = {"_p_Mezzanine__Quaternion", "Mezzanine::Quaternion *", 0, 0, (void*)&_wrap_class_Quaternion, 0};
static swig_type_info _swigt__p_Mezzanine__Ray = {"_p_Mezzanine__Ray", "Mezzanine::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RenderingAPIException = {"_p_Mezzanine__RenderingAPIException", "Mezzanine::RenderingAPIException *", 0, 0, (void*)&_wrap_class_RenderingAPIException, 0};
static swig_type_info _swigt__p_Mezzanine__RuntimeAssertionException = {"_p_Mezzanine__RuntimeAssertionException", "Mezzanine::RuntimeAssertionException *", 0, 0, (void*)&_wrap_class_RuntimeAssertionException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptException = {"_p_Mezzanine__ScriptException", "Mezzanine::ScriptException *", 0, 0, (void*)&_wrap_class_ScriptException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaErrErrException = {"_p_Mezzanine__ScriptLuaErrErrException", "Mezzanine::ScriptLuaErrErrException *", 0, 0, (void*)&_wrap_class_ScriptLuaErrErrException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaException = {"_p_Mezzanine__ScriptLuaException", "Mezzanine::ScriptLuaException *", 0, 0, (void*)&_wrap_class_ScriptLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaRuntimeException = {"_p_Mezzanine__ScriptLuaRuntimeException", "Mezzanine::ScriptLuaRuntimeException *", 0, 0, (void*)&_wrap_class_ScriptLuaRuntimeException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaYieldException = {"_p_Mezzanine__ScriptLuaYieldException", "Mezzanine::ScriptLuaYieldException *", 0, 0, (void*)&_wrap_class_ScriptLuaYieldException, 0};
static swig_type_info _swigt__p_Mezzanine__Sphere = {"_p_Mezzanine__Sphere", "Mezzanine::Sphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorException = {"_p_Mezzanine__SyntaxErrorException", "Mezzanine::SyntaxErrorException *", 0, 0, (void*)&_wrap_class_SyntaxErrorException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorLuaException = {"_p_Mezzanine__SyntaxErrorLuaException", "Mezzanine::SyntaxErrorLuaException *", 0, 0, (void*)&_wrap_class_SyntaxErrorLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXMLException = {"_p_Mezzanine__SyntaxErrorXMLException", "Mezzanine::SyntaxErrorXMLException *", 0, 0, (void*)&_wrap_class_SyntaxErrorXMLException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXPathException = {"_p_Mezzanine__SyntaxErrorXPathException", "Mezzanine::SyntaxErrorXPathException *", 0, 0, (void*)&_wrap_class_SyntaxErrorXPathException, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type = {"_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type", "Mezzanine::Threading::DefaultThreadSpecificStorage::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__DefaultWorkUnit = {"_p_Mezzanine__Threading__DefaultWorkUnit", "Mezzanine::Threading::DefaultWorkUnit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__RawFile = {"_p_Mezzanine__Threading__RawFile", "Mezzanine::Threading::RawFile *|Mezzanine::RawFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Transform = {"_p_Mezzanine__Transform", "Mezzanine::Transform *", 0, 0, (void*)&_wrap_class_Transform, 0};
static swig_type_info _swigt__p_Mezzanine__TransformableChildObject = {"_p_Mezzanine__TransformableChildObject", "Mezzanine::TransformableChildObject *", 0, 0, (void*)&_wrap_class_TransformableChildObject, 0};
static swig_type_info _swigt__p_Mezzanine__TransformableObject = {"_p_Mezzanine__TransformableObject", "Mezzanine::TransformableObject *", 0, 0, (void*)&_wrap_class_TransformableObject, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3 = {"_p_Mezzanine__Vector3", "Mezzanine::Vector3 *|Mezzanine::Physics::Vector3 *", 0, 0, (void*)&_wrap_class_Vector3, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3LengthCompare = {"_p_Mezzanine__Vector3LengthCompare", "Mezzanine::Vector3LengthCompare *", 0, 0, (void*)&_wrap_class_Vector3LengthCompare, 0};
static swig_type_info _swigt__p_Mezzanine__World = {"_p_Mezzanine__World", "Mezzanine::World *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldManager = {"_p_Mezzanine__WorldManager", "Mezzanine::WorldManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldObject = {"_p_Mezzanine__WorldObject", "Mezzanine::WorldObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__WorldProxy = {"_p_Mezzanine__WorldProxy", "Mezzanine::WorldProxy *", 0, 0, (void*)&_wrap_class_WorldProxy, 0};
static swig_type_info _swigt__p_Mezzanine__WorldTrigger = {"_p_Mezzanine__WorldTrigger", "Mezzanine::WorldTrigger *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Plane = {"_p_Ogre__Plane", "Ogre::Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Quaternion = {"_p_Ogre__Quaternion", "Ogre::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParamList = {"_p_ParamList", "ParamList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProxyContainer = {"_p_ProxyContainer", "ProxyContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProxyIterator = {"_p_ProxyIterator", "ProxyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RayTestResult = {"_p_RayTestResult", "RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ShapeMap = {"_p_ShapeMap", "ShapeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ShapeMapIterator = {"_p_ShapeMapIterator", "ShapeMapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ShapeVector = {"_p_ShapeVector", "ShapeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ShapeVectorIterator = {"_p_ShapeVectorIterator", "ShapeVectorIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StandardAxis = {"_p_StandardAxis", "StandardAxis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Transform = {"_p_Transform", "Transform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldManager = {"_p_WorldManager", "WorldManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldTriggerContainer = {"_p_WorldTriggerContainer", "WorldTriggerContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldTriggerIterator = {"_p_WorldTriggerIterator", "WorldTriggerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XML__Node = {"_p_XML__Node", "XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Mezzanine::Boole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btBoxShape = {"_p_btBoxShape", "btBoxShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btBvhTriangleMeshShape = {"_p_btBvhTriangleMeshShape", "btBvhTriangleMeshShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCapsuleShape = {"_p_btCapsuleShape", "btCapsuleShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionObject = {"_p_btCollisionObject", "btCollisionObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCollisionShape = {"_p_btCollisionShape", "btCollisionShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCompoundShape = {"_p_btCompoundShape", "btCompoundShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConcaveShape = {"_p_btConcaveShape", "btConcaveShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConeShape = {"_p_btConeShape", "btConeShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConvexHullShape = {"_p_btConvexHullShape", "btConvexHullShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btConvexInternalShape = {"_p_btConvexInternalShape", "btConvexInternalShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btCylinderShape = {"_p_btCylinderShape", "btCylinderShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btGImpactMeshShape = {"_p_btGImpactMeshShape", "btGImpactMeshShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btHeightfieldTerrainShape = {"_p_btHeightfieldTerrainShape", "btHeightfieldTerrainShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btMultiSphereShape = {"_p_btMultiSphereShape", "btMultiSphereShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btPairCachingGhostObject = {"_p_btPairCachingGhostObject", "btPairCachingGhostObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btQuaternion = {"_p_btQuaternion", "btQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btRigidBody = {"_p_btRigidBody", "btRigidBody *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBody = {"_p_btSoftBody", "btSoftBody *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSoftBodyCollisionShape = {"_p_btSoftBodyCollisionShape", "btSoftBodyCollisionShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btSphereShape = {"_p_btSphereShape", "btSphereShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btStaticPlaneShape = {"_p_btStaticPlaneShape", "btStaticPlaneShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTransform = {"_p_btTransform", "btTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTypedConstraint = {"_p_btTypedConstraint", "btTypedConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Mezzanine::PreciseReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|btScalar *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator = {"_p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator", "Mezzanine::Physics::PhysicsManager::CollisionMapIterator *|std::map< CollidablePair,Mezzanine::Physics::Collision * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator = {"_p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator", "Mezzanine::Physics::CollisionShapeManager::ShapeMapIterator *|std::map< std::string,Mezzanine::Physics::CollisionShape * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Vector3_t = {"_p_std__pairT_bool_Mezzanine__Vector3_t", "Mezzanine::Plane::RayTestResult *|std::pair< bool,Mezzanine::Vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t = {"_p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t", "Mezzanine::Physics::CollisionShapeManager::ShapeVector *|std::vector< Mezzanine::Physics::CollisionShape * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__Physics__ConstraintParam_t = {"_p_std__vectorT_Mezzanine__Physics__ConstraintParam_t", "Mezzanine::Physics::Constraint::ParamList *|std::vector< enum Mezzanine::Physics::ConstraintParam > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t = {"_p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t", "std::vector< Mezzanine::Physics::StickyConstraint * > *|std::vector< Mezzanine::Physics::Generic6DofConstraint * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t = {"_p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t", "std::vector< Mezzanine::Physics::StickyConstraintConstructionInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__Vector3_t = {"_p_std__vectorT_Mezzanine__Vector3_t", "std::vector< Mezzanine::Vector3 > *|std::vector< Mezzanine::Physics::Vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< Mezzanine::Real > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "Mezzanine::Physics::Constraint::AxisList *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AxisAlignedBox,
  &_swigt__p_AxisList,
  &_swigt__p_ChannelType,
  &_swigt__p_CollidablePair,
  &_swigt__p_CollisionContainer,
  &_swigt__p_CollisionIterator,
  &_swigt__p_CollisionMap,
  &_swigt__p_CollisionMapIterator,
  &_swigt__p_CollisionSortPair,
  &_swigt__p_ConstCollisionIterator,
  &_swigt__p_ConstCollisionMapIterator,
  &_swigt__p_ConstConstraintIterator,
  &_swigt__p_ConstProxyIterator,
  &_swigt__p_ConstShapeMapIterator,
  &_swigt__p_ConstShapeVectorIterator,
  &_swigt__p_ConstWorldTriggerIterator,
  &_swigt__p_Constraint,
  &_swigt__p_ConstraintContainer,
  &_swigt__p_ConstraintIterator,
  &_swigt__p_EntresolManager,
  &_swigt__p_ManagerBase__ManagerType,
  &_swigt__p_ManagerConstructionInfo,
  &_swigt__p_Mezzanine__ArithmeticException,
  &_swigt__p_Mezzanine__AxisAlignedBox,
  &_swigt__p_Mezzanine__DirectoryException,
  &_swigt__p_Mezzanine__DirectoryNotFoundException,
  &_swigt__p_Mezzanine__DirectoryPermissionException,
  &_swigt__p_Mezzanine__DirectoryReadException,
  &_swigt__p_Mezzanine__DirectoryWriteException,
  &_swigt__p_Mezzanine__ExceptionBase,
  &_swigt__p_Mezzanine__FileException,
  &_swigt__p_Mezzanine__FileNotFoundException,
  &_swigt__p_Mezzanine__FilePermissionException,
  &_swigt__p_Mezzanine__FileReadException,
  &_swigt__p_Mezzanine__FileWriteException,
  &_swigt__p_Mezzanine__Graphics__Mesh,
  &_swigt__p_Mezzanine__IOException,
  &_swigt__p_Mezzanine__IOReadException,
  &_swigt__p_Mezzanine__IOWriteException,
  &_swigt__p_Mezzanine__InstanceIdentityDuplicateException,
  &_swigt__p_Mezzanine__InstanceIdentityException,
  &_swigt__p_Mezzanine__InstanceIdentityInvalidException,
  &_swigt__p_Mezzanine__InstanceIdentityNotFoundException,
  &_swigt__p_Mezzanine__InternalException,
  &_swigt__p_Mezzanine__InvalidAssignment,
  &_swigt__p_Mezzanine__InvalidStateException,
  &_swigt__p_Mezzanine__InvalidVersionException,
  &_swigt__p_Mezzanine__Matrix3x3,
  &_swigt__p_Mezzanine__MemoryManagementException,
  &_swigt__p_Mezzanine__MemoryOutOfBoundsException,
  &_swigt__p_Mezzanine__NetworkException,
  &_swigt__p_Mezzanine__NetworkNotFoundException,
  &_swigt__p_Mezzanine__NetworkPermissionException,
  &_swigt__p_Mezzanine__NetworkReadException,
  &_swigt__p_Mezzanine__NetworkURLException,
  &_swigt__p_Mezzanine__NetworkWriteException,
  &_swigt__p_Mezzanine__NotImplementedException,
  &_swigt__p_Mezzanine__OutOfMemoryException,
  &_swigt__p_Mezzanine__ParametersCastException,
  &_swigt__p_Mezzanine__ParametersException,
  &_swigt__p_Mezzanine__ParametersRangeException,
  &_swigt__p_Mezzanine__Physics__BoxCollisionShape,
  &_swigt__p_Mezzanine__Physics__CapsuleCollisionShape,
  &_swigt__p_Mezzanine__Physics__CollidablePair,
  &_swigt__p_Mezzanine__Physics__CollidableProxy,
  &_swigt__p_Mezzanine__Physics__Collision,
  &_swigt__p_Mezzanine__Physics__CollisionShape,
  &_swigt__p_Mezzanine__Physics__CollisionShapeDeSerializer,
  &_swigt__p_Mezzanine__Physics__CollisionShapeManager,
  &_swigt__p_Mezzanine__Physics__CompoundCollisionShape,
  &_swigt__p_Mezzanine__Physics__ConeCollisionShape,
  &_swigt__p_Mezzanine__Physics__ConeTwistConstraint,
  &_swigt__p_Mezzanine__Physics__Constraint,
  &_swigt__p_Mezzanine__Physics__ConvexHullCollisionShape,
  &_swigt__p_Mezzanine__Physics__CylinderCollisionShape,
  &_swigt__p_Mezzanine__Physics__DebugDrawWorkUnit,
  &_swigt__p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,
  &_swigt__p_Mezzanine__Physics__DefaultPhysicsManagerFactory,
  &_swigt__p_Mezzanine__Physics__DualTransformConstraint,
  &_swigt__p_Mezzanine__Physics__DynamicMeshCollisionShape,
  &_swigt__p_Mezzanine__Physics__FieldCollisionShape,
  &_swigt__p_Mezzanine__Physics__GearConstraint,
  &_swigt__p_Mezzanine__Physics__Generic6DofConstraint,
  &_swigt__p_Mezzanine__Physics__Generic6DofSpringConstraint,
  &_swigt__p_Mezzanine__Physics__GhostProxy,
  &_swigt__p_Mezzanine__Physics__HeightfieldCollisionShape,
  &_swigt__p_Mezzanine__Physics__Hinge2Constraint,
  &_swigt__p_Mezzanine__Physics__HingeConstraint,
  &_swigt__p_Mezzanine__Physics__ManagerConstructionInfo,
  &_swigt__p_Mezzanine__Physics__MeshCollisionShape,
  &_swigt__p_Mezzanine__Physics__MultiSphereCollisionShape,
  &_swigt__p_Mezzanine__Physics__PhysicsManager,
  &_swigt__p_Mezzanine__Physics__PlaneCollisionShape,
  &_swigt__p_Mezzanine__Physics__Point2PointConstraint,
  &_swigt__p_Mezzanine__Physics__PrimitiveCollisionShape,
  &_swigt__p_Mezzanine__Physics__RigidProxy,
  &_swigt__p_Mezzanine__Physics__SimulationMonopolyWorkUnit,
  &_swigt__p_Mezzanine__Physics__SimulationWorkUnit,
  &_swigt__p_Mezzanine__Physics__SliderConstraint,
  &_swigt__p_Mezzanine__Physics__SoftCollisionShape,
  &_swigt__p_Mezzanine__Physics__SoftProxy,
  &_swigt__p_Mezzanine__Physics__SphereCollisionShape,
  &_swigt__p_Mezzanine__Physics__StaticMeshCollisionShape,
  &_swigt__p_Mezzanine__Physics__StickyConstraintConstructionInfo,
  &_swigt__p_Mezzanine__Physics__StickyData,
  &_swigt__p_Mezzanine__Physics__UniversalConstraint,
  &_swigt__p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit,
  &_swigt__p_Mezzanine__Plane,
  &_swigt__p_Mezzanine__Quaternion,
  &_swigt__p_Mezzanine__Ray,
  &_swigt__p_Mezzanine__RenderingAPIException,
  &_swigt__p_Mezzanine__RuntimeAssertionException,
  &_swigt__p_Mezzanine__ScriptException,
  &_swigt__p_Mezzanine__ScriptLuaErrErrException,
  &_swigt__p_Mezzanine__ScriptLuaException,
  &_swigt__p_Mezzanine__ScriptLuaRuntimeException,
  &_swigt__p_Mezzanine__ScriptLuaYieldException,
  &_swigt__p_Mezzanine__Sphere,
  &_swigt__p_Mezzanine__SyntaxErrorException,
  &_swigt__p_Mezzanine__SyntaxErrorLuaException,
  &_swigt__p_Mezzanine__SyntaxErrorXMLException,
  &_swigt__p_Mezzanine__SyntaxErrorXPathException,
  &_swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,
  &_swigt__p_Mezzanine__Threading__DefaultWorkUnit,
  &_swigt__p_Mezzanine__Threading__RawFile,
  &_swigt__p_Mezzanine__Transform,
  &_swigt__p_Mezzanine__TransformableChildObject,
  &_swigt__p_Mezzanine__TransformableObject,
  &_swigt__p_Mezzanine__Vector3,
  &_swigt__p_Mezzanine__Vector3LengthCompare,
  &_swigt__p_Mezzanine__World,
  &_swigt__p_Mezzanine__WorldManager,
  &_swigt__p_Mezzanine__WorldObject,
  &_swigt__p_Mezzanine__WorldProxy,
  &_swigt__p_Mezzanine__WorldTrigger,
  &_swigt__p_Ogre__Plane,
  &_swigt__p_Ogre__Quaternion,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_ParamList,
  &_swigt__p_ProxyContainer,
  &_swigt__p_ProxyIterator,
  &_swigt__p_RayTestResult,
  &_swigt__p_SDL_Event,
  &_swigt__p_ShapeMap,
  &_swigt__p_ShapeMapIterator,
  &_swigt__p_ShapeVector,
  &_swigt__p_ShapeVectorIterator,
  &_swigt__p_StandardAxis,
  &_swigt__p_Transform,
  &_swigt__p_WorldManager,
  &_swigt__p_WorldTriggerContainer,
  &_swigt__p_WorldTriggerIterator,
  &_swigt__p_XML__Node,
  &_swigt__p_bool,
  &_swigt__p_btBoxShape,
  &_swigt__p_btBvhTriangleMeshShape,
  &_swigt__p_btCapsuleShape,
  &_swigt__p_btCollisionObject,
  &_swigt__p_btCollisionShape,
  &_swigt__p_btCompoundShape,
  &_swigt__p_btConcaveShape,
  &_swigt__p_btConeShape,
  &_swigt__p_btConvexHullShape,
  &_swigt__p_btConvexInternalShape,
  &_swigt__p_btCylinderShape,
  &_swigt__p_btGImpactMeshShape,
  &_swigt__p_btHeightfieldTerrainShape,
  &_swigt__p_btMultiSphereShape,
  &_swigt__p_btPairCachingGhostObject,
  &_swigt__p_btQuaternion,
  &_swigt__p_btRigidBody,
  &_swigt__p_btSoftBody,
  &_swigt__p_btSoftBodyCollisionShape,
  &_swigt__p_btSphereShape,
  &_swigt__p_btStaticPlaneShape,
  &_swigt__p_btTransform,
  &_swigt__p_btTypedConstraint,
  &_swigt__p_btVector3,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__exception,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator,
  &_swigt__p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Vector3_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t,
  &_swigt__p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,
  &_swigt__p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t,
  &_swigt__p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t,
  &_swigt__p_std__vectorT_Mezzanine__Vector3_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_AxisAlignedBox[] = {  {&_swigt__p_AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AxisList[] = {  {&_swigt__p_AxisList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelType[] = {  {&_swigt__p_ChannelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollidablePair[] = {  {&_swigt__p_CollidablePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionContainer[] = {  {&_swigt__p_CollisionContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionIterator[] = {  {&_swigt__p_CollisionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionMap[] = {  {&_swigt__p_CollisionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionMapIterator[] = {  {&_swigt__p_CollisionMapIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionSortPair[] = {  {&_swigt__p_CollisionSortPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstCollisionIterator[] = {  {&_swigt__p_ConstCollisionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstCollisionMapIterator[] = {  {&_swigt__p_ConstCollisionMapIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstConstraintIterator[] = {  {&_swigt__p_ConstConstraintIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstProxyIterator[] = {  {&_swigt__p_ConstProxyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstShapeMapIterator[] = {  {&_swigt__p_ConstShapeMapIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstShapeVectorIterator[] = {  {&_swigt__p_ConstShapeVectorIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstWorldTriggerIterator[] = {  {&_swigt__p_ConstWorldTriggerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Constraint[] = {  {&_swigt__p_Constraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstraintContainer[] = {  {&_swigt__p_ConstraintContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstraintIterator[] = {  {&_swigt__p_ConstraintIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntresolManager[] = {  {&_swigt__p_EntresolManager, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__CollisionShapeManager, _p_Mezzanine__Physics__CollisionShapeManagerTo_p_EntresolManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagerBase__ManagerType[] = {  {&_swigt__p_ManagerBase__ManagerType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagerConstructionInfo[] = {  {&_swigt__p_ManagerConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ArithmeticException[] = {  {&_swigt__p_Mezzanine__ArithmeticException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AxisAlignedBox[] = {  {&_swigt__p_Mezzanine__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryException[] = {  {&_swigt__p_Mezzanine__DirectoryException, 0, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryNotFoundException[] = {  {&_swigt__p_Mezzanine__DirectoryNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryPermissionException[] = {  {&_swigt__p_Mezzanine__DirectoryPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryReadException[] = {  {&_swigt__p_Mezzanine__DirectoryReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryWriteException[] = {  {&_swigt__p_Mezzanine__DirectoryWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ExceptionBase[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ExceptionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileException[] = {  {&_swigt__p_Mezzanine__FileException, 0, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileNotFoundException[] = {  {&_swigt__p_Mezzanine__FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FilePermissionException[] = {  {&_swigt__p_Mezzanine__FilePermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileReadException[] = {  {&_swigt__p_Mezzanine__FileReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileWriteException[] = {  {&_swigt__p_Mezzanine__FileWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__Mesh[] = {  {&_swigt__p_Mezzanine__Graphics__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOReadException[] = {  {&_swigt__p_Mezzanine__IOReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOWriteException[] = {  {&_swigt__p_Mezzanine__IOWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityDuplicateException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityException, 0, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityInvalidException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityNotFoundException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InternalException[] = {  {&_swigt__p_Mezzanine__InternalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidAssignment[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidStateException[] = {  {&_swigt__p_Mezzanine__InvalidStateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidVersionException[] = {  {&_swigt__p_Mezzanine__InvalidVersionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Matrix3x3[] = {  {&_swigt__p_Mezzanine__Matrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryManagementException[] = {  {&_swigt__p_Mezzanine__MemoryManagementException, 0, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryOutOfBoundsException[] = {  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkException[] = {  {&_swigt__p_Mezzanine__NetworkException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkNotFoundException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkPermissionException[] = {  {&_swigt__p_Mezzanine__NetworkPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkReadException[] = {  {&_swigt__p_Mezzanine__NetworkReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkURLException[] = {  {&_swigt__p_Mezzanine__NetworkURLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkWriteException[] = {  {&_swigt__p_Mezzanine__NetworkWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NotImplementedException[] = {  {&_swigt__p_Mezzanine__NotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__OutOfMemoryException[] = {  {&_swigt__p_Mezzanine__OutOfMemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersCastException[] = {  {&_swigt__p_Mezzanine__ParametersCastException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersException[] = {  {&_swigt__p_Mezzanine__ParametersException, 0, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersRangeException[] = {  {&_swigt__p_Mezzanine__ParametersRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__BoxCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__BoxCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CapsuleCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__CapsuleCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollidablePair[] = {  {&_swigt__p_Mezzanine__Physics__CollidablePair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollidableProxy[] = {  {&_swigt__p_Mezzanine__Physics__CollidableProxy, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__GhostProxy, _p_Mezzanine__Physics__GhostProxyTo_p_Mezzanine__Physics__CollidableProxy, 0, 0},  {&_swigt__p_Mezzanine__Physics__SoftProxy, _p_Mezzanine__Physics__SoftProxyTo_p_Mezzanine__Physics__CollidableProxy, 0, 0},  {&_swigt__p_Mezzanine__Physics__RigidProxy, _p_Mezzanine__Physics__RigidProxyTo_p_Mezzanine__Physics__CollidableProxy, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Collision[] = {  {&_swigt__p_Mezzanine__Physics__Collision, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__PlaneCollisionShape, _p_Mezzanine__Physics__PlaneCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__HeightfieldCollisionShape, _p_Mezzanine__Physics__HeightfieldCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__FieldCollisionShape, _p_Mezzanine__Physics__FieldCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__StaticMeshCollisionShape, _p_Mezzanine__Physics__StaticMeshCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__SoftCollisionShape, _p_Mezzanine__Physics__SoftCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__DynamicMeshCollisionShape, _p_Mezzanine__Physics__DynamicMeshCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__MeshCollisionShape, _p_Mezzanine__Physics__MeshCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__CylinderCollisionShape, _p_Mezzanine__Physics__CylinderCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__ConvexHullCollisionShape, _p_Mezzanine__Physics__ConvexHullCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__ConeCollisionShape, _p_Mezzanine__Physics__ConeCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__CompoundCollisionShape, _p_Mezzanine__Physics__CompoundCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__CapsuleCollisionShape, _p_Mezzanine__Physics__CapsuleCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__BoxCollisionShape, _p_Mezzanine__Physics__BoxCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__CollisionShape, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__MultiSphereCollisionShape, _p_Mezzanine__Physics__MultiSphereCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__PrimitiveCollisionShape, _p_Mezzanine__Physics__PrimitiveCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__SphereCollisionShape, _p_Mezzanine__Physics__SphereCollisionShapeTo_p_Mezzanine__Physics__CollisionShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollisionShapeDeSerializer[] = {  {&_swigt__p_Mezzanine__Physics__CollisionShapeDeSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollisionShapeManager[] = {  {&_swigt__p_Mezzanine__Physics__CollisionShapeManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CompoundCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__CompoundCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__ConeCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__ConeCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__ConeTwistConstraint[] = {  {&_swigt__p_Mezzanine__Physics__ConeTwistConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Constraint[] = {  {&_swigt__p_Mezzanine__Physics__Constraint, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__DualTransformConstraint, _p_Mezzanine__Physics__DualTransformConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__ConeTwistConstraint, _p_Mezzanine__Physics__ConeTwistConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__Generic6DofConstraint, _p_Mezzanine__Physics__Generic6DofConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__Generic6DofSpringConstraint, _p_Mezzanine__Physics__Generic6DofSpringConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__UniversalConstraint, _p_Mezzanine__Physics__UniversalConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__HingeConstraint, _p_Mezzanine__Physics__HingeConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__SliderConstraint, _p_Mezzanine__Physics__SliderConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__GearConstraint, _p_Mezzanine__Physics__GearConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__Point2PointConstraint, _p_Mezzanine__Physics__Point2PointConstraintTo_p_Mezzanine__Physics__Constraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__ConvexHullCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__ConvexHullCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CylinderCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__CylinderCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__DebugDrawWorkUnit[] = {  {&_swigt__p_Mezzanine__Physics__DebugDrawWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory[] = {  {&_swigt__p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__DefaultPhysicsManagerFactory[] = {  {&_swigt__p_Mezzanine__Physics__DefaultPhysicsManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__DualTransformConstraint[] = {  {&_swigt__p_Mezzanine__Physics__DualTransformConstraint, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__ConeTwistConstraint, _p_Mezzanine__Physics__ConeTwistConstraintTo_p_Mezzanine__Physics__DualTransformConstraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__Generic6DofConstraint, _p_Mezzanine__Physics__Generic6DofConstraintTo_p_Mezzanine__Physics__DualTransformConstraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__Generic6DofSpringConstraint, _p_Mezzanine__Physics__Generic6DofSpringConstraintTo_p_Mezzanine__Physics__DualTransformConstraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__UniversalConstraint, _p_Mezzanine__Physics__UniversalConstraintTo_p_Mezzanine__Physics__DualTransformConstraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__HingeConstraint, _p_Mezzanine__Physics__HingeConstraintTo_p_Mezzanine__Physics__DualTransformConstraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__SliderConstraint, _p_Mezzanine__Physics__SliderConstraintTo_p_Mezzanine__Physics__DualTransformConstraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__DynamicMeshCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__DynamicMeshCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__FieldCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__FieldCollisionShape, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__HeightfieldCollisionShape, _p_Mezzanine__Physics__HeightfieldCollisionShapeTo_p_Mezzanine__Physics__FieldCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__PlaneCollisionShape, _p_Mezzanine__Physics__PlaneCollisionShapeTo_p_Mezzanine__Physics__FieldCollisionShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__GearConstraint[] = {  {&_swigt__p_Mezzanine__Physics__GearConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Generic6DofConstraint[] = {  {&_swigt__p_Mezzanine__Physics__Generic6DofConstraint, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__Generic6DofSpringConstraint, _p_Mezzanine__Physics__Generic6DofSpringConstraintTo_p_Mezzanine__Physics__Generic6DofConstraint, 0, 0},  {&_swigt__p_Mezzanine__Physics__UniversalConstraint, _p_Mezzanine__Physics__UniversalConstraintTo_p_Mezzanine__Physics__Generic6DofConstraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Generic6DofSpringConstraint[] = {  {&_swigt__p_Mezzanine__Physics__Generic6DofSpringConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__GhostProxy[] = {  {&_swigt__p_Mezzanine__Physics__GhostProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__HeightfieldCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__HeightfieldCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Hinge2Constraint[] = {  {&_swigt__p_Mezzanine__Physics__Hinge2Constraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__HingeConstraint[] = {  {&_swigt__p_Mezzanine__Physics__HingeConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__ManagerConstructionInfo[] = {  {&_swigt__p_Mezzanine__Physics__ManagerConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__MeshCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__MeshCollisionShape, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__DynamicMeshCollisionShape, _p_Mezzanine__Physics__DynamicMeshCollisionShapeTo_p_Mezzanine__Physics__MeshCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__SoftCollisionShape, _p_Mezzanine__Physics__SoftCollisionShapeTo_p_Mezzanine__Physics__MeshCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__StaticMeshCollisionShape, _p_Mezzanine__Physics__StaticMeshCollisionShapeTo_p_Mezzanine__Physics__MeshCollisionShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__MultiSphereCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__MultiSphereCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__PhysicsManager[] = {  {&_swigt__p_Mezzanine__Physics__PhysicsManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__PlaneCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__PlaneCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Point2PointConstraint[] = {  {&_swigt__p_Mezzanine__Physics__Point2PointConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__PrimitiveCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__BoxCollisionShape, _p_Mezzanine__Physics__BoxCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__CapsuleCollisionShape, _p_Mezzanine__Physics__CapsuleCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__ConeCollisionShape, _p_Mezzanine__Physics__ConeCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__ConvexHullCollisionShape, _p_Mezzanine__Physics__ConvexHullCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__CylinderCollisionShape, _p_Mezzanine__Physics__CylinderCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__MultiSphereCollisionShape, _p_Mezzanine__Physics__MultiSphereCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},  {&_swigt__p_Mezzanine__Physics__SphereCollisionShape, _p_Mezzanine__Physics__SphereCollisionShapeTo_p_Mezzanine__Physics__PrimitiveCollisionShape, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__RigidProxy[] = {  {&_swigt__p_Mezzanine__Physics__RigidProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__SimulationMonopolyWorkUnit[] = {  {&_swigt__p_Mezzanine__Physics__SimulationMonopolyWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__SimulationWorkUnit[] = {  {&_swigt__p_Mezzanine__Physics__SimulationWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__SliderConstraint[] = {  {&_swigt__p_Mezzanine__Physics__SliderConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__SoftCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__SoftCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__SoftProxy[] = {  {&_swigt__p_Mezzanine__Physics__SoftProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__SphereCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__SphereCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__StaticMeshCollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__StaticMeshCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__StickyConstraintConstructionInfo[] = {  {&_swigt__p_Mezzanine__Physics__StickyConstraintConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__StickyData[] = {  {&_swigt__p_Mezzanine__Physics__StickyData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__UniversalConstraint[] = {  {&_swigt__p_Mezzanine__Physics__UniversalConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Plane[] = {  {&_swigt__p_Mezzanine__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Quaternion[] = {  {&_swigt__p_Mezzanine__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Ray[] = {  {&_swigt__p_Mezzanine__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RenderingAPIException[] = {  {&_swigt__p_Mezzanine__RenderingAPIException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RuntimeAssertionException[] = {  {&_swigt__p_Mezzanine__RuntimeAssertionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptException[] = {  {&_swigt__p_Mezzanine__ScriptException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaErrErrException[] = {  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaException[] = {  {&_swigt__p_Mezzanine__ScriptLuaException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaRuntimeException[] = {  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaYieldException[] = {  {&_swigt__p_Mezzanine__ScriptLuaYieldException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Sphere[] = {  {&_swigt__p_Mezzanine__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorException, 0, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorLuaException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXMLException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXPathException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type[] = {  {&_swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__DefaultWorkUnit[] = {  {&_swigt__p_Mezzanine__Threading__DefaultWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__RawFile[] = {  {&_swigt__p_Mezzanine__Threading__RawFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Transform[] = {  {&_swigt__p_Mezzanine__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TransformableChildObject[] = {  {&_swigt__p_Mezzanine__TransformableChildObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TransformableObject[] = {  {&_swigt__p_Mezzanine__Physics__CollidableProxy, _p_Mezzanine__Physics__CollidableProxyTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__Physics__GhostProxy, _p_Mezzanine__Physics__GhostProxyTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__Physics__SoftProxy, _p_Mezzanine__Physics__SoftProxyTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__TransformableObject, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__RigidProxy, _p_Mezzanine__Physics__RigidProxyTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__WorldProxy, _p_Mezzanine__WorldProxyTo_p_Mezzanine__TransformableObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3[] = {  {&_swigt__p_Mezzanine__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector3LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__World[] = {  {&_swigt__p_Mezzanine__World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldManager[] = {  {&_swigt__p_Mezzanine__WorldManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldObject[] = {  {&_swigt__p_Mezzanine__WorldObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldProxy[] = {  {&_swigt__p_Mezzanine__Physics__CollidableProxy, _p_Mezzanine__Physics__CollidableProxyTo_p_Mezzanine__WorldProxy, 0, 0},  {&_swigt__p_Mezzanine__Physics__GhostProxy, _p_Mezzanine__Physics__GhostProxyTo_p_Mezzanine__WorldProxy, 0, 0},  {&_swigt__p_Mezzanine__Physics__SoftProxy, _p_Mezzanine__Physics__SoftProxyTo_p_Mezzanine__WorldProxy, 0, 0},  {&_swigt__p_Mezzanine__Physics__RigidProxy, _p_Mezzanine__Physics__RigidProxyTo_p_Mezzanine__WorldProxy, 0, 0},  {&_swigt__p_Mezzanine__WorldProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldTrigger[] = {  {&_swigt__p_Mezzanine__WorldTrigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Plane[] = {  {&_swigt__p_Ogre__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Quaternion[] = {  {&_swigt__p_Ogre__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParamList[] = {  {&_swigt__p_ParamList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProxyContainer[] = {  {&_swigt__p_ProxyContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProxyIterator[] = {  {&_swigt__p_ProxyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RayTestResult[] = {  {&_swigt__p_RayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShapeMap[] = {  {&_swigt__p_ShapeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShapeMapIterator[] = {  {&_swigt__p_ShapeMapIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShapeVector[] = {  {&_swigt__p_ShapeVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ShapeVectorIterator[] = {  {&_swigt__p_ShapeVectorIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StandardAxis[] = {  {&_swigt__p_StandardAxis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Transform[] = {  {&_swigt__p_Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldManager[] = {  {&_swigt__p_WorldManager, 0, 0, 0},  {&_swigt__p_Mezzanine__Physics__PhysicsManager, _p_Mezzanine__Physics__PhysicsManagerTo_p_WorldManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldTriggerContainer[] = {  {&_swigt__p_WorldTriggerContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldTriggerIterator[] = {  {&_swigt__p_WorldTriggerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XML__Node[] = {  {&_swigt__p_XML__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBoxShape[] = {  {&_swigt__p_btBoxShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btBvhTriangleMeshShape[] = {  {&_swigt__p_btBvhTriangleMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCapsuleShape[] = {  {&_swigt__p_btCapsuleShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionObject[] = {  {&_swigt__p_btCollisionObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCollisionShape[] = {  {&_swigt__p_btCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCompoundShape[] = {  {&_swigt__p_btCompoundShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConcaveShape[] = {  {&_swigt__p_btConcaveShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConeShape[] = {  {&_swigt__p_btConeShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexHullShape[] = {  {&_swigt__p_btConvexHullShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btConvexInternalShape[] = {  {&_swigt__p_btConvexInternalShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btCylinderShape[] = {  {&_swigt__p_btCylinderShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btGImpactMeshShape[] = {  {&_swigt__p_btGImpactMeshShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btHeightfieldTerrainShape[] = {  {&_swigt__p_btHeightfieldTerrainShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btMultiSphereShape[] = {  {&_swigt__p_btMultiSphereShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btPairCachingGhostObject[] = {  {&_swigt__p_btPairCachingGhostObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuaternion[] = {  {&_swigt__p_btQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btRigidBody[] = {  {&_swigt__p_btRigidBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBody[] = {  {&_swigt__p_btSoftBody, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSoftBodyCollisionShape[] = {  {&_swigt__p_btSoftBodyCollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btSphereShape[] = {  {&_swigt__p_btSphereShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btStaticPlaneShape[] = {  {&_swigt__p_btStaticPlaneShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransform[] = {  {&_swigt__p_btTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTypedConstraint[] = {  {&_swigt__p_btTypedConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ExceptionBase, _p_Mezzanine__ExceptionBaseTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator[] = {  {&_swigt__p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator[] = {  {&_swigt__p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Vector3_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__Physics__ConstraintParam_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__Physics__ConstraintParam_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__Vector3_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__Vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AxisAlignedBox,
  _swigc__p_AxisList,
  _swigc__p_ChannelType,
  _swigc__p_CollidablePair,
  _swigc__p_CollisionContainer,
  _swigc__p_CollisionIterator,
  _swigc__p_CollisionMap,
  _swigc__p_CollisionMapIterator,
  _swigc__p_CollisionSortPair,
  _swigc__p_ConstCollisionIterator,
  _swigc__p_ConstCollisionMapIterator,
  _swigc__p_ConstConstraintIterator,
  _swigc__p_ConstProxyIterator,
  _swigc__p_ConstShapeMapIterator,
  _swigc__p_ConstShapeVectorIterator,
  _swigc__p_ConstWorldTriggerIterator,
  _swigc__p_Constraint,
  _swigc__p_ConstraintContainer,
  _swigc__p_ConstraintIterator,
  _swigc__p_EntresolManager,
  _swigc__p_ManagerBase__ManagerType,
  _swigc__p_ManagerConstructionInfo,
  _swigc__p_Mezzanine__ArithmeticException,
  _swigc__p_Mezzanine__AxisAlignedBox,
  _swigc__p_Mezzanine__DirectoryException,
  _swigc__p_Mezzanine__DirectoryNotFoundException,
  _swigc__p_Mezzanine__DirectoryPermissionException,
  _swigc__p_Mezzanine__DirectoryReadException,
  _swigc__p_Mezzanine__DirectoryWriteException,
  _swigc__p_Mezzanine__ExceptionBase,
  _swigc__p_Mezzanine__FileException,
  _swigc__p_Mezzanine__FileNotFoundException,
  _swigc__p_Mezzanine__FilePermissionException,
  _swigc__p_Mezzanine__FileReadException,
  _swigc__p_Mezzanine__FileWriteException,
  _swigc__p_Mezzanine__Graphics__Mesh,
  _swigc__p_Mezzanine__IOException,
  _swigc__p_Mezzanine__IOReadException,
  _swigc__p_Mezzanine__IOWriteException,
  _swigc__p_Mezzanine__InstanceIdentityDuplicateException,
  _swigc__p_Mezzanine__InstanceIdentityException,
  _swigc__p_Mezzanine__InstanceIdentityInvalidException,
  _swigc__p_Mezzanine__InstanceIdentityNotFoundException,
  _swigc__p_Mezzanine__InternalException,
  _swigc__p_Mezzanine__InvalidAssignment,
  _swigc__p_Mezzanine__InvalidStateException,
  _swigc__p_Mezzanine__InvalidVersionException,
  _swigc__p_Mezzanine__Matrix3x3,
  _swigc__p_Mezzanine__MemoryManagementException,
  _swigc__p_Mezzanine__MemoryOutOfBoundsException,
  _swigc__p_Mezzanine__NetworkException,
  _swigc__p_Mezzanine__NetworkNotFoundException,
  _swigc__p_Mezzanine__NetworkPermissionException,
  _swigc__p_Mezzanine__NetworkReadException,
  _swigc__p_Mezzanine__NetworkURLException,
  _swigc__p_Mezzanine__NetworkWriteException,
  _swigc__p_Mezzanine__NotImplementedException,
  _swigc__p_Mezzanine__OutOfMemoryException,
  _swigc__p_Mezzanine__ParametersCastException,
  _swigc__p_Mezzanine__ParametersException,
  _swigc__p_Mezzanine__ParametersRangeException,
  _swigc__p_Mezzanine__Physics__BoxCollisionShape,
  _swigc__p_Mezzanine__Physics__CapsuleCollisionShape,
  _swigc__p_Mezzanine__Physics__CollidablePair,
  _swigc__p_Mezzanine__Physics__CollidableProxy,
  _swigc__p_Mezzanine__Physics__Collision,
  _swigc__p_Mezzanine__Physics__CollisionShape,
  _swigc__p_Mezzanine__Physics__CollisionShapeDeSerializer,
  _swigc__p_Mezzanine__Physics__CollisionShapeManager,
  _swigc__p_Mezzanine__Physics__CompoundCollisionShape,
  _swigc__p_Mezzanine__Physics__ConeCollisionShape,
  _swigc__p_Mezzanine__Physics__ConeTwistConstraint,
  _swigc__p_Mezzanine__Physics__Constraint,
  _swigc__p_Mezzanine__Physics__ConvexHullCollisionShape,
  _swigc__p_Mezzanine__Physics__CylinderCollisionShape,
  _swigc__p_Mezzanine__Physics__DebugDrawWorkUnit,
  _swigc__p_Mezzanine__Physics__DefaultCollisionShapeManagerFactory,
  _swigc__p_Mezzanine__Physics__DefaultPhysicsManagerFactory,
  _swigc__p_Mezzanine__Physics__DualTransformConstraint,
  _swigc__p_Mezzanine__Physics__DynamicMeshCollisionShape,
  _swigc__p_Mezzanine__Physics__FieldCollisionShape,
  _swigc__p_Mezzanine__Physics__GearConstraint,
  _swigc__p_Mezzanine__Physics__Generic6DofConstraint,
  _swigc__p_Mezzanine__Physics__Generic6DofSpringConstraint,
  _swigc__p_Mezzanine__Physics__GhostProxy,
  _swigc__p_Mezzanine__Physics__HeightfieldCollisionShape,
  _swigc__p_Mezzanine__Physics__Hinge2Constraint,
  _swigc__p_Mezzanine__Physics__HingeConstraint,
  _swigc__p_Mezzanine__Physics__ManagerConstructionInfo,
  _swigc__p_Mezzanine__Physics__MeshCollisionShape,
  _swigc__p_Mezzanine__Physics__MultiSphereCollisionShape,
  _swigc__p_Mezzanine__Physics__PhysicsManager,
  _swigc__p_Mezzanine__Physics__PlaneCollisionShape,
  _swigc__p_Mezzanine__Physics__Point2PointConstraint,
  _swigc__p_Mezzanine__Physics__PrimitiveCollisionShape,
  _swigc__p_Mezzanine__Physics__RigidProxy,
  _swigc__p_Mezzanine__Physics__SimulationMonopolyWorkUnit,
  _swigc__p_Mezzanine__Physics__SimulationWorkUnit,
  _swigc__p_Mezzanine__Physics__SliderConstraint,
  _swigc__p_Mezzanine__Physics__SoftCollisionShape,
  _swigc__p_Mezzanine__Physics__SoftProxy,
  _swigc__p_Mezzanine__Physics__SphereCollisionShape,
  _swigc__p_Mezzanine__Physics__StaticMeshCollisionShape,
  _swigc__p_Mezzanine__Physics__StickyConstraintConstructionInfo,
  _swigc__p_Mezzanine__Physics__StickyData,
  _swigc__p_Mezzanine__Physics__UniversalConstraint,
  _swigc__p_Mezzanine__Physics__WorldTriggerUpdateWorkUnit,
  _swigc__p_Mezzanine__Plane,
  _swigc__p_Mezzanine__Quaternion,
  _swigc__p_Mezzanine__Ray,
  _swigc__p_Mezzanine__RenderingAPIException,
  _swigc__p_Mezzanine__RuntimeAssertionException,
  _swigc__p_Mezzanine__ScriptException,
  _swigc__p_Mezzanine__ScriptLuaErrErrException,
  _swigc__p_Mezzanine__ScriptLuaException,
  _swigc__p_Mezzanine__ScriptLuaRuntimeException,
  _swigc__p_Mezzanine__ScriptLuaYieldException,
  _swigc__p_Mezzanine__Sphere,
  _swigc__p_Mezzanine__SyntaxErrorException,
  _swigc__p_Mezzanine__SyntaxErrorLuaException,
  _swigc__p_Mezzanine__SyntaxErrorXMLException,
  _swigc__p_Mezzanine__SyntaxErrorXPathException,
  _swigc__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,
  _swigc__p_Mezzanine__Threading__DefaultWorkUnit,
  _swigc__p_Mezzanine__Threading__RawFile,
  _swigc__p_Mezzanine__Transform,
  _swigc__p_Mezzanine__TransformableChildObject,
  _swigc__p_Mezzanine__TransformableObject,
  _swigc__p_Mezzanine__Vector3,
  _swigc__p_Mezzanine__Vector3LengthCompare,
  _swigc__p_Mezzanine__World,
  _swigc__p_Mezzanine__WorldManager,
  _swigc__p_Mezzanine__WorldObject,
  _swigc__p_Mezzanine__WorldProxy,
  _swigc__p_Mezzanine__WorldTrigger,
  _swigc__p_Ogre__Plane,
  _swigc__p_Ogre__Quaternion,
  _swigc__p_Ogre__Vector3,
  _swigc__p_ParamList,
  _swigc__p_ProxyContainer,
  _swigc__p_ProxyIterator,
  _swigc__p_RayTestResult,
  _swigc__p_SDL_Event,
  _swigc__p_ShapeMap,
  _swigc__p_ShapeMapIterator,
  _swigc__p_ShapeVector,
  _swigc__p_ShapeVectorIterator,
  _swigc__p_StandardAxis,
  _swigc__p_Transform,
  _swigc__p_WorldManager,
  _swigc__p_WorldTriggerContainer,
  _swigc__p_WorldTriggerIterator,
  _swigc__p_XML__Node,
  _swigc__p_bool,
  _swigc__p_btBoxShape,
  _swigc__p_btBvhTriangleMeshShape,
  _swigc__p_btCapsuleShape,
  _swigc__p_btCollisionObject,
  _swigc__p_btCollisionShape,
  _swigc__p_btCompoundShape,
  _swigc__p_btConcaveShape,
  _swigc__p_btConeShape,
  _swigc__p_btConvexHullShape,
  _swigc__p_btConvexInternalShape,
  _swigc__p_btCylinderShape,
  _swigc__p_btGImpactMeshShape,
  _swigc__p_btHeightfieldTerrainShape,
  _swigc__p_btMultiSphereShape,
  _swigc__p_btPairCachingGhostObject,
  _swigc__p_btQuaternion,
  _swigc__p_btRigidBody,
  _swigc__p_btSoftBody,
  _swigc__p_btSoftBodyCollisionShape,
  _swigc__p_btSphereShape,
  _swigc__p_btStaticPlaneShape,
  _swigc__p_btTransform,
  _swigc__p_btTypedConstraint,
  _swigc__p_btVector3,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__exception,
  _swigc__p_std__istream,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_CollidablePair_Mezzanine__Physics__Collision_p_t__iterator,
  _swigc__p_std__mapT_std__string_Mezzanine__Physics__CollisionShape_p_t__iterator,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__pairT_bool_Mezzanine__Vector3_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_Mezzanine__Physics__CollisionShape_p_t,
  _swigc__p_std__vectorT_Mezzanine__Physics__ConstraintParam_t,
  _swigc__p_std__vectorT_Mezzanine__Physics__Generic6DofConstraint_p_t,
  _swigc__p_std__vectorT_Mezzanine__Physics__StickyConstraintConstructionInfo_t,
  _swigc__p_std__vectorT_Mezzanine__Vector3_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

