/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ActorContainer swig_types[0]
#define SWIGTYPE_p_ActorIterator swig_types[1]
#define SWIGTYPE_p_AreaEffectContainer swig_types[2]
#define SWIGTYPE_p_AreaEffectIterator swig_types[3]
#define SWIGTYPE_p_AttachableContainer swig_types[4]
#define SWIGTYPE_p_AttachableIterator swig_types[5]
#define SWIGTYPE_p_Byte swig_types[6]
#define SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction swig_types[7]
#define SWIGTYPE_p_ChannelType swig_types[8]
#define SWIGTYPE_p_CollisionContainer swig_types[9]
#define SWIGTYPE_p_CollisionIterator swig_types[10]
#define SWIGTYPE_p_ConstActorIterator swig_types[11]
#define SWIGTYPE_p_ConstAreaEffectIterator swig_types[12]
#define SWIGTYPE_p_ConstAttachableIterator swig_types[13]
#define SWIGTYPE_p_ConstCollisionIterator swig_types[14]
#define SWIGTYPE_p_ConstDebrisIterator swig_types[15]
#define SWIGTYPE_p_ConstEventIterator swig_types[16]
#define SWIGTYPE_p_ConstFactoryIterator swig_types[17]
#define SWIGTYPE_p_ConstManagerFactoryIterator swig_types[18]
#define SWIGTYPE_p_ConstObjectIterator swig_types[19]
#define SWIGTYPE_p_ConstProxyIterator swig_types[20]
#define SWIGTYPE_p_ConstSlotIterator swig_types[21]
#define SWIGTYPE_p_ConstWorldManagerIterator swig_types[22]
#define SWIGTYPE_p_DebrisContainer swig_types[23]
#define SWIGTYPE_p_DebrisIterator swig_types[24]
#define SWIGTYPE_p_EventContainer swig_types[25]
#define SWIGTYPE_p_EventIterator swig_types[26]
#define SWIGTYPE_p_FactoryIterator swig_types[27]
#define SWIGTYPE_p_FactoryMap swig_types[28]
#define SWIGTYPE_p_GameWindowEventID swig_types[29]
#define SWIGTYPE_p_GeometryRayTestResult swig_types[30]
#define SWIGTYPE_p_Input__InputCode swig_types[31]
#define SWIGTYPE_p_Input__MetaCode swig_types[32]
#define SWIGTYPE_p_ManagerFactoryIterator swig_types[33]
#define SWIGTYPE_p_ManagerFactoryMap swig_types[34]
#define SWIGTYPE_p_MathTools__GeometryRayTestResult swig_types[35]
#define SWIGTYPE_p_Mezzanine__Actor swig_types[36]
#define SWIGTYPE_p_Mezzanine__ActorFactory swig_types[37]
#define SWIGTYPE_p_Mezzanine__ActorManager swig_types[38]
#define SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit swig_types[39]
#define SWIGTYPE_p_Mezzanine__AngleLimits swig_types[40]
#define SWIGTYPE_p_Mezzanine__AreaEffect swig_types[41]
#define SWIGTYPE_p_Mezzanine__AreaEffectFactory swig_types[42]
#define SWIGTYPE_p_Mezzanine__AreaEffectManager swig_types[43]
#define SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit swig_types[44]
#define SWIGTYPE_p_Mezzanine__ArithmeticException swig_types[45]
#define SWIGTYPE_p_Mezzanine__AttachableBase swig_types[46]
#define SWIGTYPE_p_Mezzanine__AttachableChild swig_types[47]
#define SWIGTYPE_p_Mezzanine__AttachableParent swig_types[48]
#define SWIGTYPE_p_Mezzanine__AxisAlignedBox swig_types[49]
#define SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer swig_types[50]
#define SWIGTYPE_p_Mezzanine__CameraController swig_types[51]
#define SWIGTYPE_p_Mezzanine__Circle swig_types[52]
#define SWIGTYPE_p_Mezzanine__ColourValue swig_types[53]
#define SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t swig_types[54]
#define SWIGTYPE_p_Mezzanine__CustomSubscriberSlot swig_types[55]
#define SWIGTYPE_p_Mezzanine__Debris swig_types[56]
#define SWIGTYPE_p_Mezzanine__DebrisFactory swig_types[57]
#define SWIGTYPE_p_Mezzanine__DebrisManager swig_types[58]
#define SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit swig_types[59]
#define SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory swig_types[60]
#define SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory swig_types[61]
#define SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory swig_types[62]
#define SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory swig_types[63]
#define SWIGTYPE_p_Mezzanine__DirectoryException swig_types[64]
#define SWIGTYPE_p_Mezzanine__DirectoryNotFoundException swig_types[65]
#define SWIGTYPE_p_Mezzanine__DirectoryPermissionException swig_types[66]
#define SWIGTYPE_p_Mezzanine__DirectoryReadException swig_types[67]
#define SWIGTYPE_p_Mezzanine__DirectoryWriteException swig_types[68]
#define SWIGTYPE_p_Mezzanine__EntresolManager swig_types[69]
#define SWIGTYPE_p_Mezzanine__EntresolManagerFactory swig_types[70]
#define SWIGTYPE_p_Mezzanine__Event swig_types[71]
#define SWIGTYPE_p_Mezzanine__EventArguments swig_types[72]
#define SWIGTYPE_p_Mezzanine__EventBase swig_types[73]
#define SWIGTYPE_p_Mezzanine__EventGameWindow swig_types[74]
#define SWIGTYPE_p_Mezzanine__EventManager swig_types[75]
#define SWIGTYPE_p_Mezzanine__EventPublisher swig_types[76]
#define SWIGTYPE_p_Mezzanine__EventPumpWorkUnit swig_types[77]
#define SWIGTYPE_p_Mezzanine__EventQuit swig_types[78]
#define SWIGTYPE_p_Mezzanine__EventSubscriber swig_types[79]
#define SWIGTYPE_p_Mezzanine__EventSubscriberSlot swig_types[80]
#define SWIGTYPE_p_Mezzanine__EventUserInput swig_types[81]
#define SWIGTYPE_p_Mezzanine__ExceptionBase swig_types[82]
#define SWIGTYPE_p_Mezzanine__FieldOfForce swig_types[83]
#define SWIGTYPE_p_Mezzanine__FileException swig_types[84]
#define SWIGTYPE_p_Mezzanine__FileNotFoundException swig_types[85]
#define SWIGTYPE_p_Mezzanine__FilePermissionException swig_types[86]
#define SWIGTYPE_p_Mezzanine__FileReadException swig_types[87]
#define SWIGTYPE_p_Mezzanine__FileWriteException swig_types[88]
#define SWIGTYPE_p_Mezzanine__FunctorEventSubscriber swig_types[89]
#define SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot swig_types[90]
#define SWIGTYPE_p_Mezzanine__Graphics__CameraProxy swig_types[91]
#define SWIGTYPE_p_Mezzanine__Graphics__Mesh swig_types[92]
#define SWIGTYPE_p_Mezzanine__GravityField swig_types[93]
#define SWIGTYPE_p_Mezzanine__GravityWell swig_types[94]
#define SWIGTYPE_p_Mezzanine__IOException swig_types[95]
#define SWIGTYPE_p_Mezzanine__IOReadException swig_types[96]
#define SWIGTYPE_p_Mezzanine__IOWriteException swig_types[97]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException swig_types[98]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityException swig_types[99]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException swig_types[100]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException swig_types[101]
#define SWIGTYPE_p_Mezzanine__InternalException swig_types[102]
#define SWIGTYPE_p_Mezzanine__InvalidAssignment swig_types[103]
#define SWIGTYPE_p_Mezzanine__InvalidStateException swig_types[104]
#define SWIGTYPE_p_Mezzanine__InvalidVersionException swig_types[105]
#define SWIGTYPE_p_Mezzanine__ManagerBase swig_types[106]
#define SWIGTYPE_p_Mezzanine__ManagerFactory swig_types[107]
#define SWIGTYPE_p_Mezzanine__Matrix3x3 swig_types[108]
#define SWIGTYPE_p_Mezzanine__MemoryManagementException swig_types[109]
#define SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException swig_types[110]
#define SWIGTYPE_p_Mezzanine__NetworkException swig_types[111]
#define SWIGTYPE_p_Mezzanine__NetworkNotFoundException swig_types[112]
#define SWIGTYPE_p_Mezzanine__NetworkPermissionException swig_types[113]
#define SWIGTYPE_p_Mezzanine__NetworkReadException swig_types[114]
#define SWIGTYPE_p_Mezzanine__NetworkURLException swig_types[115]
#define SWIGTYPE_p_Mezzanine__NetworkWriteException swig_types[116]
#define SWIGTYPE_p_Mezzanine__NotImplementedException swig_types[117]
#define SWIGTYPE_p_Mezzanine__OutOfMemoryException swig_types[118]
#define SWIGTYPE_p_Mezzanine__ParametersCastException swig_types[119]
#define SWIGTYPE_p_Mezzanine__ParametersException swig_types[120]
#define SWIGTYPE_p_Mezzanine__ParametersRangeException swig_types[121]
#define SWIGTYPE_p_Mezzanine__Physics__Collision swig_types[122]
#define SWIGTYPE_p_Mezzanine__Physics__CollisionShape swig_types[123]
#define SWIGTYPE_p_Mezzanine__Physics__GhostProxy swig_types[124]
#define SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo swig_types[125]
#define SWIGTYPE_p_Mezzanine__Plane swig_types[126]
#define SWIGTYPE_p_Mezzanine__Quaternion swig_types[127]
#define SWIGTYPE_p_Mezzanine__Ray swig_types[128]
#define SWIGTYPE_p_Mezzanine__RayQueryTool swig_types[129]
#define SWIGTYPE_p_Mezzanine__RectBaseT_float_t swig_types[130]
#define SWIGTYPE_p_Mezzanine__RectBaseT_unsigned_long_t swig_types[131]
#define SWIGTYPE_p_Mezzanine__RenderingAPIException swig_types[132]
#define SWIGTYPE_p_Mezzanine__RigidDebris swig_types[133]
#define SWIGTYPE_p_Mezzanine__RuntimeAssertionException swig_types[134]
#define SWIGTYPE_p_Mezzanine__ScriptException swig_types[135]
#define SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException swig_types[136]
#define SWIGTYPE_p_Mezzanine__ScriptLuaException swig_types[137]
#define SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException swig_types[138]
#define SWIGTYPE_p_Mezzanine__ScriptLuaYieldException swig_types[139]
#define SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot swig_types[140]
#define SWIGTYPE_p_Mezzanine__Scripting__iScript swig_types[141]
#define SWIGTYPE_p_Mezzanine__SingletonT_Mezzanine__EventManager_t swig_types[142]
#define SWIGTYPE_p_Mezzanine__SoftDebris swig_types[143]
#define SWIGTYPE_p_Mezzanine__Sphere swig_types[144]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorException swig_types[145]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException swig_types[146]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException swig_types[147]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException swig_types[148]
#define SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type swig_types[149]
#define SWIGTYPE_p_Mezzanine__Threading__RawFile swig_types[150]
#define SWIGTYPE_p_Mezzanine__Timer swig_types[151]
#define SWIGTYPE_p_Mezzanine__Transform swig_types[152]
#define SWIGTYPE_p_Mezzanine__TransformableChildObject swig_types[153]
#define SWIGTYPE_p_Mezzanine__TransformableObject swig_types[154]
#define SWIGTYPE_p_Mezzanine__Vector2 swig_types[155]
#define SWIGTYPE_p_Mezzanine__Vector2LengthCompare swig_types[156]
#define SWIGTYPE_p_Mezzanine__Vector3 swig_types[157]
#define SWIGTYPE_p_Mezzanine__Vector3LengthCompare swig_types[158]
#define SWIGTYPE_p_Mezzanine__World swig_types[159]
#define SWIGTYPE_p_Mezzanine__WorldManager swig_types[160]
#define SWIGTYPE_p_Mezzanine__WorldManagerFactory swig_types[161]
#define SWIGTYPE_p_Mezzanine__WorldObject swig_types[162]
#define SWIGTYPE_p_Mezzanine__WorldProxy swig_types[163]
#define SWIGTYPE_p_Mezzanine__XML__Node swig_types[164]
#define SWIGTYPE_p_ObjectContainer swig_types[165]
#define SWIGTYPE_p_ObjectIterator swig_types[166]
#define SWIGTYPE_p_Ogre__AxisAlignedBox swig_types[167]
#define SWIGTYPE_p_Ogre__ColourValue swig_types[168]
#define SWIGTYPE_p_Ogre__Plane swig_types[169]
#define SWIGTYPE_p_Ogre__Quaternion swig_types[170]
#define SWIGTYPE_p_Ogre__Ray swig_types[171]
#define SWIGTYPE_p_Ogre__Sphere swig_types[172]
#define SWIGTYPE_p_Ogre__Vector2 swig_types[173]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[174]
#define SWIGTYPE_p_PlaneRayTestResult swig_types[175]
#define SWIGTYPE_p_ProxyContainer swig_types[176]
#define SWIGTYPE_p_ProxyIterator swig_types[177]
#define SWIGTYPE_p_RayTestResult swig_types[178]
#define SWIGTYPE_p_SDL_Event swig_types[179]
#define SWIGTYPE_p_SlotContainer swig_types[180]
#define SWIGTYPE_p_SlotIterator swig_types[181]
#define SWIGTYPE_p_SlotPair swig_types[182]
#define SWIGTYPE_p_WorldManagerContainer swig_types[183]
#define SWIGTYPE_p_WorldManagerIterator swig_types[184]
#define SWIGTYPE_p_XML__Node swig_types[185]
#define SWIGTYPE_p_bool swig_types[186]
#define SWIGTYPE_p_btQuaternion swig_types[187]
#define SWIGTYPE_p_btTransform swig_types[188]
#define SWIGTYPE_p_btVector3 swig_types[189]
#define SWIGTYPE_p_char swig_types[190]
#define SWIGTYPE_p_double swig_types[191]
#define SWIGTYPE_p_float swig_types[192]
#define SWIGTYPE_p_int swig_types[193]
#define SWIGTYPE_p_long_long swig_types[194]
#define SWIGTYPE_p_short swig_types[195]
#define SWIGTYPE_p_signed_char swig_types[196]
#define SWIGTYPE_p_std__exception swig_types[197]
#define SWIGTYPE_p_std__listT_Mezzanine__EventBase_p_t swig_types[198]
#define SWIGTYPE_p_std__listT_Mezzanine__EventGameWindow_p_t swig_types[199]
#define SWIGTYPE_p_std__listT_Mezzanine__EventQuit_p_t swig_types[200]
#define SWIGTYPE_p_std__listT_Mezzanine__EventUserInput_p_t swig_types[201]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[202]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[203]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t swig_types[204]
#define SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t swig_types[205]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[206]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[207]
#define SWIGTYPE_p_std__string swig_types[208]
#define SWIGTYPE_p_std__stringstream swig_types[209]
#define SWIGTYPE_p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator swig_types[210]
#define SWIGTYPE_p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator swig_types[211]
#define SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t swig_types[212]
#define SWIGTYPE_p_std__vectorT_Mezzanine__WorldObject_p_t swig_types[213]
#define SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t swig_types[214]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[215]
#define SWIGTYPE_p_std__wstring swig_types[216]
#define SWIGTYPE_p_unsigned_char swig_types[217]
#define SWIGTYPE_p_unsigned_int swig_types[218]
#define SWIGTYPE_p_unsigned_long swig_types[219]
#define SWIGTYPE_p_unsigned_long_long swig_types[220]
#define SWIGTYPE_p_unsigned_short swig_types[221]
static swig_type_info *swig_types[223];
static swig_module_info swig_module = {swig_types, 222, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Mezzanine"
#define SWIG_init      luaopen_Mezzanine
#define SWIG_init_user luaopen_Mezzanine_user

#define SWIG_LUACODE   luaopen_Mezzanine_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"
        #include "SDL.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        #ifdef GetExceptionCode
        #undef GetExceptionCode
        #endif

        using namespace Mezzanine;
        //using namespace Mezzanine::Threading;
        //using namespace Mezzanine::Physics;

        // Fix cross module type-usage
        namespace Mezzanine
        {
            namespace Physics
            {
                typedef Mezzanine::Vector3 Vector3;
            }
            namespace Threading
            {

            }
            typedef Threading::RawFile RawFile;
        }
    

#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <deque>
#include <stdexcept>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_ExceptionBase_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionCode",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ExceptionBase const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetFunction",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetFunction",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetFunction();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetFile",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetFile",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetFile();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetLine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::Whole *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetLine",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetLine",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::Whole *) &((Mezzanine::ExceptionBase const *)arg1)->GetLine();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionTypeName",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionTypeName",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetExceptionTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionJavaTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionJavaTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionJavaTypeName",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionJavaTypeName",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetExceptionJavaTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetCompleteMessage(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetCompleteMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetCompleteMessage",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetCompleteMessage",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = ((Mezzanine::ExceptionBase const *)arg1)->GetCompleteMessage();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_what(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::what",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_what",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (char *)((Mezzanine::ExceptionBase const *)arg1)->what();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExceptionBase(void *obj) {
Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_ExceptionBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExceptionBase_methods[]= {
    { "GetExceptionCode", _wrap_ExceptionBase_GetExceptionCode},
    { "GetFunction", _wrap_ExceptionBase_GetFunction},
    { "GetFile", _wrap_ExceptionBase_GetFile},
    { "GetLine", _wrap_ExceptionBase_GetLine},
    { "GetExceptionTypeName", _wrap_ExceptionBase_GetExceptionTypeName},
    { "GetExceptionJavaTypeName", _wrap_ExceptionBase_GetExceptionJavaTypeName},
    { "GetCompleteMessage", _wrap_ExceptionBase_GetCompleteMessage},
    { "what", _wrap_ExceptionBase_what},
    {0,0}
};
static swig_lua_method swig_ExceptionBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExceptionBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExceptionBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("FIRST_EXCEPTION", Mezzanine::ExceptionBase::FIRST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_EXCEPTION", Mezzanine::ExceptionBase::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_URL_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_EXCEPTION", Mezzanine::ExceptionBase::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_INVALID_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::ExceptionBase::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_EXCEPTION", Mezzanine::ExceptionBase::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_CAST_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_RANGE_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ARITHMETIC_EXCEPTION", Mezzanine::ExceptionBase::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_VERSION_EXCEPTION", Mezzanine::ExceptionBase::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_STATE_EXCEPTION", Mezzanine::ExceptionBase::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RENDERINGAPI_EXCEPTION", Mezzanine::ExceptionBase::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RT_ASSERTION_EXCEPTION", Mezzanine::ExceptionBase::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INTERNAL_EXCEPTION", Mezzanine::ExceptionBase::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("NOT_IMPLEMENTED_EXCEPTION", Mezzanine::ExceptionBase::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_ASSIGNMENT", Mezzanine::ExceptionBase::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("LAST_EXCEPTION", Mezzanine::ExceptionBase::LAST_EXCEPTION)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExceptionBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExceptionBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExceptionBase_Sf_SwigStatic = {
    "ExceptionBase",
    swig_ExceptionBase_Sf_SwigStatic_methods,
    swig_ExceptionBase_Sf_SwigStatic_attributes,
    swig_ExceptionBase_Sf_SwigStatic_constants,
    swig_ExceptionBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExceptionBase_bases[] = {0};
static const char *swig_ExceptionBase_base_names[] = {0};
static swig_lua_class _wrap_class_ExceptionBase = { "ExceptionBase", "ExceptionBase", &SWIGTYPE_p_Mezzanine__ExceptionBase,0, swig_delete_ExceptionBase, swig_ExceptionBase_methods, swig_ExceptionBase_attributes, &swig_ExceptionBase_Sf_SwigStatic, swig_ExceptionBase_meta, swig_ExceptionBase_bases, swig_ExceptionBase_base_names };

static int _wrap_new_IOException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOException::IOException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOException::IOException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOException *arg1 = (Mezzanine::IOException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOException::GetExceptionCode",1,"Mezzanine::IOException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOException,0))){
    SWIG_fail_ptr("IOException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOException(void *obj) {
Mezzanine::IOException *arg1 = (Mezzanine::IOException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOException_methods[]= {
    { "GetExceptionCode", _wrap_IOException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOException_Sf_SwigStatic = {
    "IOException",
    swig_IOException_Sf_SwigStatic_methods,
    swig_IOException_Sf_SwigStatic_attributes,
    swig_IOException_Sf_SwigStatic_constants,
    swig_IOException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOException_bases[] = {0,0};
static const char *swig_IOException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_IOException = { "IOException", "IOException", &SWIGTYPE_p_Mezzanine__IOException,_proxy__wrap_new_IOException, swig_delete_IOException, swig_IOException_methods, swig_IOException_attributes, &swig_IOException_Sf_SwigStatic, swig_IOException_meta, swig_IOException_bases, swig_IOException_base_names };

static int _wrap_new_FileException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileException::FileException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileException::FileException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileException *arg1 = (Mezzanine::FileException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileException::GetExceptionCode",1,"Mezzanine::FileException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileException,0))){
    SWIG_fail_ptr("FileException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileException(void *obj) {
Mezzanine::FileException *arg1 = (Mezzanine::FileException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileException_methods[]= {
    { "GetExceptionCode", _wrap_FileException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileException_Sf_SwigStatic = {
    "FileException",
    swig_FileException_Sf_SwigStatic_methods,
    swig_FileException_Sf_SwigStatic_attributes,
    swig_FileException_Sf_SwigStatic_constants,
    swig_FileException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileException_bases[] = {0,0};
static const char *swig_FileException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_FileException = { "FileException", "FileException", &SWIGTYPE_p_Mezzanine__FileException,_proxy__wrap_new_FileException, swig_delete_FileException, swig_FileException_methods, swig_FileException_attributes, &swig_FileException_Sf_SwigStatic, swig_FileException_meta, swig_FileException_bases, swig_FileException_base_names };

static int _wrap_new_FileReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::GetExceptionCode",1,"Mezzanine::FileReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileReadException,0))){
    SWIG_fail_ptr("FileReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileReadException(void *obj) {
Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileReadException_methods[]= {
    { "GetExceptionCode", _wrap_FileReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileReadException_Sf_SwigStatic = {
    "FileReadException",
    swig_FileReadException_Sf_SwigStatic_methods,
    swig_FileReadException_Sf_SwigStatic_attributes,
    swig_FileReadException_Sf_SwigStatic_constants,
    swig_FileReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileReadException_bases[] = {0,0};
static const char *swig_FileReadException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileReadException = { "FileReadException", "FileReadException", &SWIGTYPE_p_Mezzanine__FileReadException,_proxy__wrap_new_FileReadException, swig_delete_FileReadException, swig_FileReadException_methods, swig_FileReadException_attributes, &swig_FileReadException_Sf_SwigStatic, swig_FileReadException_meta, swig_FileReadException_bases, swig_FileReadException_base_names };

static int _wrap_new_FileWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::GetExceptionCode",1,"Mezzanine::FileWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileWriteException,0))){
    SWIG_fail_ptr("FileWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileWriteException(void *obj) {
Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileWriteException_methods[]= {
    { "GetExceptionCode", _wrap_FileWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileWriteException_Sf_SwigStatic = {
    "FileWriteException",
    swig_FileWriteException_Sf_SwigStatic_methods,
    swig_FileWriteException_Sf_SwigStatic_attributes,
    swig_FileWriteException_Sf_SwigStatic_constants,
    swig_FileWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileWriteException_bases[] = {0,0};
static const char *swig_FileWriteException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileWriteException = { "FileWriteException", "FileWriteException", &SWIGTYPE_p_Mezzanine__FileWriteException,_proxy__wrap_new_FileWriteException, swig_delete_FileWriteException, swig_FileWriteException_methods, swig_FileWriteException_attributes, &swig_FileWriteException_Sf_SwigStatic, swig_FileWriteException_meta, swig_FileWriteException_bases, swig_FileWriteException_base_names };

static int _wrap_new_FileNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::GetExceptionCode",1,"Mezzanine::FileNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileNotFoundException,0))){
    SWIG_fail_ptr("FileNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileNotFoundException(void *obj) {
Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_FileNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileNotFoundException_Sf_SwigStatic = {
    "FileNotFoundException",
    swig_FileNotFoundException_Sf_SwigStatic_methods,
    swig_FileNotFoundException_Sf_SwigStatic_attributes,
    swig_FileNotFoundException_Sf_SwigStatic_constants,
    swig_FileNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileNotFoundException_bases[] = {0,0};
static const char *swig_FileNotFoundException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileNotFoundException = { "FileNotFoundException", "FileNotFoundException", &SWIGTYPE_p_Mezzanine__FileNotFoundException,_proxy__wrap_new_FileNotFoundException, swig_delete_FileNotFoundException, swig_FileNotFoundException_methods, swig_FileNotFoundException_attributes, &swig_FileNotFoundException_Sf_SwigStatic, swig_FileNotFoundException_meta, swig_FileNotFoundException_bases, swig_FileNotFoundException_base_names };

static int _wrap_new_FilePermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FilePermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FilePermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FilePermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FilePermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::GetExceptionCode",1,"Mezzanine::FilePermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FilePermissionException,0))){
    SWIG_fail_ptr("FilePermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FilePermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FilePermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilePermissionException(void *obj) {
Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilePermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilePermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilePermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilePermissionException_methods[]= {
    { "GetExceptionCode", _wrap_FilePermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FilePermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilePermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilePermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilePermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilePermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilePermissionException_Sf_SwigStatic = {
    "FilePermissionException",
    swig_FilePermissionException_Sf_SwigStatic_methods,
    swig_FilePermissionException_Sf_SwigStatic_attributes,
    swig_FilePermissionException_Sf_SwigStatic_constants,
    swig_FilePermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilePermissionException_bases[] = {0,0};
static const char *swig_FilePermissionException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FilePermissionException = { "FilePermissionException", "FilePermissionException", &SWIGTYPE_p_Mezzanine__FilePermissionException,_proxy__wrap_new_FilePermissionException, swig_delete_FilePermissionException, swig_FilePermissionException_methods, swig_FilePermissionException_attributes, &swig_FilePermissionException_Sf_SwigStatic, swig_FilePermissionException_meta, swig_FilePermissionException_bases, swig_FilePermissionException_base_names };

static int _wrap_new_DirectoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::GetExceptionCode",1,"Mezzanine::DirectoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryException,0))){
    SWIG_fail_ptr("DirectoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryException(void *obj) {
Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryException_Sf_SwigStatic = {
    "DirectoryException",
    swig_DirectoryException_Sf_SwigStatic_methods,
    swig_DirectoryException_Sf_SwigStatic_attributes,
    swig_DirectoryException_Sf_SwigStatic_constants,
    swig_DirectoryException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryException_bases[] = {0,0};
static const char *swig_DirectoryException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_DirectoryException = { "DirectoryException", "DirectoryException", &SWIGTYPE_p_Mezzanine__DirectoryException,_proxy__wrap_new_DirectoryException, swig_delete_DirectoryException, swig_DirectoryException_methods, swig_DirectoryException_attributes, &swig_DirectoryException_Sf_SwigStatic, swig_DirectoryException_meta, swig_DirectoryException_bases, swig_DirectoryException_base_names };

static int _wrap_new_DirectoryReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::GetExceptionCode",1,"Mezzanine::DirectoryReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryReadException,0))){
    SWIG_fail_ptr("DirectoryReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryReadException(void *obj) {
Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryReadException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryReadException_Sf_SwigStatic = {
    "DirectoryReadException",
    swig_DirectoryReadException_Sf_SwigStatic_methods,
    swig_DirectoryReadException_Sf_SwigStatic_attributes,
    swig_DirectoryReadException_Sf_SwigStatic_constants,
    swig_DirectoryReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryReadException_bases[] = {0,0};
static const char *swig_DirectoryReadException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryReadException = { "DirectoryReadException", "DirectoryReadException", &SWIGTYPE_p_Mezzanine__DirectoryReadException,_proxy__wrap_new_DirectoryReadException, swig_delete_DirectoryReadException, swig_DirectoryReadException_methods, swig_DirectoryReadException_attributes, &swig_DirectoryReadException_Sf_SwigStatic, swig_DirectoryReadException_meta, swig_DirectoryReadException_bases, swig_DirectoryReadException_base_names };

static int _wrap_new_DirectoryWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::GetExceptionCode",1,"Mezzanine::DirectoryWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryWriteException,0))){
    SWIG_fail_ptr("DirectoryWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryWriteException(void *obj) {
Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryWriteException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryWriteException_Sf_SwigStatic = {
    "DirectoryWriteException",
    swig_DirectoryWriteException_Sf_SwigStatic_methods,
    swig_DirectoryWriteException_Sf_SwigStatic_attributes,
    swig_DirectoryWriteException_Sf_SwigStatic_constants,
    swig_DirectoryWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryWriteException_bases[] = {0,0};
static const char *swig_DirectoryWriteException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryWriteException = { "DirectoryWriteException", "DirectoryWriteException", &SWIGTYPE_p_Mezzanine__DirectoryWriteException,_proxy__wrap_new_DirectoryWriteException, swig_delete_DirectoryWriteException, swig_DirectoryWriteException_methods, swig_DirectoryWriteException_attributes, &swig_DirectoryWriteException_Sf_SwigStatic, swig_DirectoryWriteException_meta, swig_DirectoryWriteException_bases, swig_DirectoryWriteException_base_names };

static int _wrap_new_DirectoryNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,"Mezzanine::DirectoryNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,0))){
    SWIG_fail_ptr("DirectoryNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryNotFoundException(void *obj) {
Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryNotFoundException_Sf_SwigStatic = {
    "DirectoryNotFoundException",
    swig_DirectoryNotFoundException_Sf_SwigStatic_methods,
    swig_DirectoryNotFoundException_Sf_SwigStatic_attributes,
    swig_DirectoryNotFoundException_Sf_SwigStatic_constants,
    swig_DirectoryNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryNotFoundException_bases[] = {0,0};
static const char *swig_DirectoryNotFoundException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryNotFoundException = { "DirectoryNotFoundException", "DirectoryNotFoundException", &SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,_proxy__wrap_new_DirectoryNotFoundException, swig_delete_DirectoryNotFoundException, swig_DirectoryNotFoundException_methods, swig_DirectoryNotFoundException_attributes, &swig_DirectoryNotFoundException_Sf_SwigStatic, swig_DirectoryNotFoundException_meta, swig_DirectoryNotFoundException_bases, swig_DirectoryNotFoundException_base_names };

static int _wrap_new_DirectoryPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryPermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,"Mezzanine::DirectoryPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,0))){
    SWIG_fail_ptr("DirectoryPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryPermissionException(void *obj) {
Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryPermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryPermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryPermissionException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryPermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryPermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryPermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryPermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryPermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryPermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryPermissionException_Sf_SwigStatic = {
    "DirectoryPermissionException",
    swig_DirectoryPermissionException_Sf_SwigStatic_methods,
    swig_DirectoryPermissionException_Sf_SwigStatic_attributes,
    swig_DirectoryPermissionException_Sf_SwigStatic_constants,
    swig_DirectoryPermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryPermissionException_bases[] = {0,0};
static const char *swig_DirectoryPermissionException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryPermissionException = { "DirectoryPermissionException", "DirectoryPermissionException", &SWIGTYPE_p_Mezzanine__DirectoryPermissionException,_proxy__wrap_new_DirectoryPermissionException, swig_delete_DirectoryPermissionException, swig_DirectoryPermissionException_methods, swig_DirectoryPermissionException_attributes, &swig_DirectoryPermissionException_Sf_SwigStatic, swig_DirectoryPermissionException_meta, swig_DirectoryPermissionException_bases, swig_DirectoryPermissionException_base_names };

static int _wrap_new_NetworkException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::GetExceptionCode",1,"Mezzanine::NetworkException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkException,0))){
    SWIG_fail_ptr("NetworkException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkException(void *obj) {
Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkException_Sf_SwigStatic = {
    "NetworkException",
    swig_NetworkException_Sf_SwigStatic_methods,
    swig_NetworkException_Sf_SwigStatic_attributes,
    swig_NetworkException_Sf_SwigStatic_constants,
    swig_NetworkException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkException_bases[] = {0,0};
static const char *swig_NetworkException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_NetworkException = { "NetworkException", "NetworkException", &SWIGTYPE_p_Mezzanine__NetworkException,_proxy__wrap_new_NetworkException, swig_delete_NetworkException, swig_NetworkException_methods, swig_NetworkException_attributes, &swig_NetworkException_Sf_SwigStatic, swig_NetworkException_meta, swig_NetworkException_bases, swig_NetworkException_base_names };

static int _wrap_new_NetworkReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::GetExceptionCode",1,"Mezzanine::NetworkReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkReadException,0))){
    SWIG_fail_ptr("NetworkReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkReadException(void *obj) {
Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkReadException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkReadException_Sf_SwigStatic = {
    "NetworkReadException",
    swig_NetworkReadException_Sf_SwigStatic_methods,
    swig_NetworkReadException_Sf_SwigStatic_attributes,
    swig_NetworkReadException_Sf_SwigStatic_constants,
    swig_NetworkReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkReadException_bases[] = {0,0};
static const char *swig_NetworkReadException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkReadException = { "NetworkReadException", "NetworkReadException", &SWIGTYPE_p_Mezzanine__NetworkReadException,_proxy__wrap_new_NetworkReadException, swig_delete_NetworkReadException, swig_NetworkReadException_methods, swig_NetworkReadException_attributes, &swig_NetworkReadException_Sf_SwigStatic, swig_NetworkReadException_meta, swig_NetworkReadException_bases, swig_NetworkReadException_base_names };

static int _wrap_new_NetworkWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::GetExceptionCode",1,"Mezzanine::NetworkWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkWriteException,0))){
    SWIG_fail_ptr("NetworkWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkWriteException(void *obj) {
Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkWriteException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkWriteException_Sf_SwigStatic = {
    "NetworkWriteException",
    swig_NetworkWriteException_Sf_SwigStatic_methods,
    swig_NetworkWriteException_Sf_SwigStatic_attributes,
    swig_NetworkWriteException_Sf_SwigStatic_constants,
    swig_NetworkWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkWriteException_bases[] = {0,0};
static const char *swig_NetworkWriteException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkWriteException = { "NetworkWriteException", "NetworkWriteException", &SWIGTYPE_p_Mezzanine__NetworkWriteException,_proxy__wrap_new_NetworkWriteException, swig_delete_NetworkWriteException, swig_NetworkWriteException_methods, swig_NetworkWriteException_attributes, &swig_NetworkWriteException_Sf_SwigStatic, swig_NetworkWriteException_meta, swig_NetworkWriteException_bases, swig_NetworkWriteException_base_names };

static int _wrap_new_NetworkNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,"Mezzanine::NetworkNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,0))){
    SWIG_fail_ptr("NetworkNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkNotFoundException(void *obj) {
Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkNotFoundException_Sf_SwigStatic = {
    "NetworkNotFoundException",
    swig_NetworkNotFoundException_Sf_SwigStatic_methods,
    swig_NetworkNotFoundException_Sf_SwigStatic_attributes,
    swig_NetworkNotFoundException_Sf_SwigStatic_constants,
    swig_NetworkNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkNotFoundException_bases[] = {0,0};
static const char *swig_NetworkNotFoundException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkNotFoundException = { "NetworkNotFoundException", "NetworkNotFoundException", &SWIGTYPE_p_Mezzanine__NetworkNotFoundException,_proxy__wrap_new_NetworkNotFoundException, swig_delete_NetworkNotFoundException, swig_NetworkNotFoundException_methods, swig_NetworkNotFoundException_attributes, &swig_NetworkNotFoundException_Sf_SwigStatic, swig_NetworkNotFoundException_meta, swig_NetworkNotFoundException_bases, swig_NetworkNotFoundException_base_names };

static int _wrap_new_NetworkURLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkURLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkURLException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkURLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkURLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::GetExceptionCode",1,"Mezzanine::NetworkURLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkURLException,0))){
    SWIG_fail_ptr("NetworkURLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkURLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkURLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkURLException(void *obj) {
Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkURLException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkURLException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkURLException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkURLException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkURLException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkURLException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkURLException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkURLException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkURLException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkURLException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkURLException_Sf_SwigStatic = {
    "NetworkURLException",
    swig_NetworkURLException_Sf_SwigStatic_methods,
    swig_NetworkURLException_Sf_SwigStatic_attributes,
    swig_NetworkURLException_Sf_SwigStatic_constants,
    swig_NetworkURLException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkURLException_bases[] = {0,0};
static const char *swig_NetworkURLException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkURLException = { "NetworkURLException", "NetworkURLException", &SWIGTYPE_p_Mezzanine__NetworkURLException,_proxy__wrap_new_NetworkURLException, swig_delete_NetworkURLException, swig_NetworkURLException_methods, swig_NetworkURLException_attributes, &swig_NetworkURLException_Sf_SwigStatic, swig_NetworkURLException_meta, swig_NetworkURLException_bases, swig_NetworkURLException_base_names };

static int _wrap_new_NetworkPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkPermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::GetExceptionCode",1,"Mezzanine::NetworkPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkPermissionException,0))){
    SWIG_fail_ptr("NetworkPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkPermissionException(void *obj) {
Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkPermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkPermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkPermissionException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkPermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkPermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkPermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkPermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkPermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkPermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkPermissionException_Sf_SwigStatic = {
    "NetworkPermissionException",
    swig_NetworkPermissionException_Sf_SwigStatic_methods,
    swig_NetworkPermissionException_Sf_SwigStatic_attributes,
    swig_NetworkPermissionException_Sf_SwigStatic_constants,
    swig_NetworkPermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkPermissionException_bases[] = {0,0};
static const char *swig_NetworkPermissionException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkPermissionException = { "NetworkPermissionException", "NetworkPermissionException", &SWIGTYPE_p_Mezzanine__NetworkPermissionException,_proxy__wrap_new_NetworkPermissionException, swig_delete_NetworkPermissionException, swig_NetworkPermissionException_methods, swig_NetworkPermissionException_attributes, &swig_NetworkPermissionException_Sf_SwigStatic, swig_NetworkPermissionException_meta, swig_NetworkPermissionException_bases, swig_NetworkPermissionException_base_names };

static int _wrap_new_IOWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::GetExceptionCode",1,"Mezzanine::IOWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOWriteException,0))){
    SWIG_fail_ptr("IOWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOWriteException(void *obj) {
Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOWriteException_methods[]= {
    { "GetExceptionCode", _wrap_IOWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOWriteException_Sf_SwigStatic = {
    "IOWriteException",
    swig_IOWriteException_Sf_SwigStatic_methods,
    swig_IOWriteException_Sf_SwigStatic_attributes,
    swig_IOWriteException_Sf_SwigStatic_constants,
    swig_IOWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOWriteException_bases[] = {0,0};
static const char *swig_IOWriteException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_IOWriteException = { "IOWriteException", "IOWriteException", &SWIGTYPE_p_Mezzanine__IOWriteException,_proxy__wrap_new_IOWriteException, swig_delete_IOWriteException, swig_IOWriteException_methods, swig_IOWriteException_attributes, &swig_IOWriteException_Sf_SwigStatic, swig_IOWriteException_meta, swig_IOWriteException_bases, swig_IOWriteException_base_names };

static int _wrap_new_IOReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::GetExceptionCode",1,"Mezzanine::IOReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOReadException,0))){
    SWIG_fail_ptr("IOReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOReadException(void *obj) {
Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOReadException_methods[]= {
    { "GetExceptionCode", _wrap_IOReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOReadException_Sf_SwigStatic = {
    "IOReadException",
    swig_IOReadException_Sf_SwigStatic_methods,
    swig_IOReadException_Sf_SwigStatic_attributes,
    swig_IOReadException_Sf_SwigStatic_constants,
    swig_IOReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOReadException_bases[] = {0,0};
static const char *swig_IOReadException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_IOReadException = { "IOReadException", "IOReadException", &SWIGTYPE_p_Mezzanine__IOReadException,_proxy__wrap_new_IOReadException, swig_delete_IOReadException, swig_IOReadException_methods, swig_IOReadException_attributes, &swig_IOReadException_Sf_SwigStatic, swig_IOReadException_meta, swig_IOReadException_bases, swig_IOReadException_base_names };

static int _wrap_new_InstanceIdentityException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::GetExceptionCode",1,"Mezzanine::InstanceIdentityException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityException,0))){
    SWIG_fail_ptr("InstanceIdentityException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityException(void *obj) {
Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityException_Sf_SwigStatic = {
    "InstanceIdentityException",
    swig_InstanceIdentityException_Sf_SwigStatic_methods,
    swig_InstanceIdentityException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityException_Sf_SwigStatic_constants,
    swig_InstanceIdentityException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityException_bases[] = {0,0};
static const char *swig_InstanceIdentityException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InstanceIdentityException = { "InstanceIdentityException", "InstanceIdentityException", &SWIGTYPE_p_Mezzanine__InstanceIdentityException,_proxy__wrap_new_InstanceIdentityException, swig_delete_InstanceIdentityException, swig_InstanceIdentityException_methods, swig_InstanceIdentityException_attributes, &swig_InstanceIdentityException_Sf_SwigStatic, swig_InstanceIdentityException_meta, swig_InstanceIdentityException_bases, swig_InstanceIdentityException_base_names };

static int _wrap_new_InstanceIdentityInvalidException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityInvalidException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityInvalidException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityInvalidException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityInvalidException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,"Mezzanine::InstanceIdentityInvalidException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,0))){
    SWIG_fail_ptr("InstanceIdentityInvalidException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityInvalidException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityInvalidException(void *obj) {
Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityInvalidException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityInvalidException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityInvalidException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityInvalidException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityInvalidException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityInvalidException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityInvalidException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityInvalidException_Sf_SwigStatic = {
    "InstanceIdentityInvalidException",
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_methods,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_constants,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityInvalidException_bases[] = {0,0};
static const char *swig_InstanceIdentityInvalidException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityInvalidException = { "InstanceIdentityInvalidException", "InstanceIdentityInvalidException", &SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,_proxy__wrap_new_InstanceIdentityInvalidException, swig_delete_InstanceIdentityInvalidException, swig_InstanceIdentityInvalidException_methods, swig_InstanceIdentityInvalidException_attributes, &swig_InstanceIdentityInvalidException_Sf_SwigStatic, swig_InstanceIdentityInvalidException_meta, swig_InstanceIdentityInvalidException_bases, swig_InstanceIdentityInvalidException_base_names };

static int _wrap_new_InstanceIdentityNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,"Mezzanine::InstanceIdentityNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,0))){
    SWIG_fail_ptr("InstanceIdentityNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityNotFoundException(void *obj) {
Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityNotFoundException_Sf_SwigStatic = {
    "InstanceIdentityNotFoundException",
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_methods,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_constants,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityNotFoundException_bases[] = {0,0};
static const char *swig_InstanceIdentityNotFoundException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityNotFoundException = { "InstanceIdentityNotFoundException", "InstanceIdentityNotFoundException", &SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,_proxy__wrap_new_InstanceIdentityNotFoundException, swig_delete_InstanceIdentityNotFoundException, swig_InstanceIdentityNotFoundException_methods, swig_InstanceIdentityNotFoundException_attributes, &swig_InstanceIdentityNotFoundException_Sf_SwigStatic, swig_InstanceIdentityNotFoundException_meta, swig_InstanceIdentityNotFoundException_bases, swig_InstanceIdentityNotFoundException_base_names };

static int _wrap_new_InstanceIdentityDuplicateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityDuplicateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityDuplicateException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityDuplicateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityDuplicateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,"Mezzanine::InstanceIdentityDuplicateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,0))){
    SWIG_fail_ptr("InstanceIdentityDuplicateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityDuplicateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityDuplicateException(void *obj) {
Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityDuplicateException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityDuplicateException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityDuplicateException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityDuplicateException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityDuplicateException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityDuplicateException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityDuplicateException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityDuplicateException_Sf_SwigStatic = {
    "InstanceIdentityDuplicateException",
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_methods,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_constants,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityDuplicateException_bases[] = {0,0};
static const char *swig_InstanceIdentityDuplicateException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityDuplicateException = { "InstanceIdentityDuplicateException", "InstanceIdentityDuplicateException", &SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,_proxy__wrap_new_InstanceIdentityDuplicateException, swig_delete_InstanceIdentityDuplicateException, swig_InstanceIdentityDuplicateException_methods, swig_InstanceIdentityDuplicateException_attributes, &swig_InstanceIdentityDuplicateException_Sf_SwigStatic, swig_InstanceIdentityDuplicateException_meta, swig_InstanceIdentityDuplicateException_bases, swig_InstanceIdentityDuplicateException_base_names };

static int _wrap_new_MemoryManagementException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryManagementException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_MemoryManagementException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryManagementException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryManagementException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::GetExceptionCode",1,"Mezzanine::MemoryManagementException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryManagementException,0))){
    SWIG_fail_ptr("MemoryManagementException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryManagementException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryManagementException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryManagementException(void *obj) {
Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) obj;
delete arg1;
}
static int _proxy__wrap_new_MemoryManagementException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MemoryManagementException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MemoryManagementException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MemoryManagementException_methods[]= {
    { "GetExceptionCode", _wrap_MemoryManagementException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_MemoryManagementException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MemoryManagementException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MemoryManagementException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MemoryManagementException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MemoryManagementException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MemoryManagementException_Sf_SwigStatic = {
    "MemoryManagementException",
    swig_MemoryManagementException_Sf_SwigStatic_methods,
    swig_MemoryManagementException_Sf_SwigStatic_attributes,
    swig_MemoryManagementException_Sf_SwigStatic_constants,
    swig_MemoryManagementException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MemoryManagementException_bases[] = {0,0};
static const char *swig_MemoryManagementException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_MemoryManagementException = { "MemoryManagementException", "MemoryManagementException", &SWIGTYPE_p_Mezzanine__MemoryManagementException,_proxy__wrap_new_MemoryManagementException, swig_delete_MemoryManagementException, swig_MemoryManagementException_methods, swig_MemoryManagementException_attributes, &swig_MemoryManagementException_Sf_SwigStatic, swig_MemoryManagementException_meta, swig_MemoryManagementException_bases, swig_MemoryManagementException_base_names };

static int _wrap_new_OutOfMemoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_OutOfMemoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_OutOfMemoryException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OutOfMemoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OutOfMemoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::GetExceptionCode",1,"Mezzanine::OutOfMemoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__OutOfMemoryException,0))){
    SWIG_fail_ptr("OutOfMemoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__OutOfMemoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::OutOfMemoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OutOfMemoryException(void *obj) {
Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) obj;
delete arg1;
}
static int _proxy__wrap_new_OutOfMemoryException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OutOfMemoryException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OutOfMemoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OutOfMemoryException_methods[]= {
    { "GetExceptionCode", _wrap_OutOfMemoryException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_OutOfMemoryException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OutOfMemoryException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OutOfMemoryException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OutOfMemoryException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OutOfMemoryException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OutOfMemoryException_Sf_SwigStatic = {
    "OutOfMemoryException",
    swig_OutOfMemoryException_Sf_SwigStatic_methods,
    swig_OutOfMemoryException_Sf_SwigStatic_attributes,
    swig_OutOfMemoryException_Sf_SwigStatic_constants,
    swig_OutOfMemoryException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OutOfMemoryException_bases[] = {0,0};
static const char *swig_OutOfMemoryException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_OutOfMemoryException = { "OutOfMemoryException", "OutOfMemoryException", &SWIGTYPE_p_Mezzanine__OutOfMemoryException,_proxy__wrap_new_OutOfMemoryException, swig_delete_OutOfMemoryException, swig_OutOfMemoryException_methods, swig_OutOfMemoryException_attributes, &swig_OutOfMemoryException_Sf_SwigStatic, swig_OutOfMemoryException_meta, swig_OutOfMemoryException_bases, swig_OutOfMemoryException_base_names };

static int _wrap_new_MemoryOutOfBoundsException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryOutOfBoundsException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_MemoryOutOfBoundsException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryOutOfBoundsException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryOutOfBoundsException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,"Mezzanine::MemoryOutOfBoundsException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,0))){
    SWIG_fail_ptr("MemoryOutOfBoundsException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryOutOfBoundsException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryOutOfBoundsException(void *obj) {
Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) obj;
delete arg1;
}
static int _proxy__wrap_new_MemoryOutOfBoundsException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MemoryOutOfBoundsException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MemoryOutOfBoundsException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_methods[]= {
    { "GetExceptionCode", _wrap_MemoryOutOfBoundsException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MemoryOutOfBoundsException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MemoryOutOfBoundsException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MemoryOutOfBoundsException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MemoryOutOfBoundsException_Sf_SwigStatic = {
    "MemoryOutOfBoundsException",
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_methods,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_attributes,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_constants,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MemoryOutOfBoundsException_bases[] = {0,0};
static const char *swig_MemoryOutOfBoundsException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_MemoryOutOfBoundsException = { "MemoryOutOfBoundsException", "MemoryOutOfBoundsException", &SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,_proxy__wrap_new_MemoryOutOfBoundsException, swig_delete_MemoryOutOfBoundsException, swig_MemoryOutOfBoundsException_methods, swig_MemoryOutOfBoundsException_attributes, &swig_MemoryOutOfBoundsException_Sf_SwigStatic, swig_MemoryOutOfBoundsException_meta, swig_MemoryOutOfBoundsException_bases, swig_MemoryOutOfBoundsException_base_names };

static int _wrap_new_SyntaxErrorException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::GetExceptionCode",1,"Mezzanine::SyntaxErrorException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorException,0))){
    SWIG_fail_ptr("SyntaxErrorException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorException(void *obj) {
Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorException_Sf_SwigStatic = {
    "SyntaxErrorException",
    swig_SyntaxErrorException_Sf_SwigStatic_methods,
    swig_SyntaxErrorException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorException_Sf_SwigStatic_constants,
    swig_SyntaxErrorException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorException_bases[] = {0,0};
static const char *swig_SyntaxErrorException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_SyntaxErrorException = { "SyntaxErrorException", "SyntaxErrorException", &SWIGTYPE_p_Mezzanine__SyntaxErrorException,_proxy__wrap_new_SyntaxErrorException, swig_delete_SyntaxErrorException, swig_SyntaxErrorException_methods, swig_SyntaxErrorException_attributes, &swig_SyntaxErrorException_Sf_SwigStatic, swig_SyntaxErrorException_meta, swig_SyntaxErrorException_bases, swig_SyntaxErrorException_base_names };

static int _wrap_new_SyntaxErrorXMLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXMLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorXMLException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXMLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXMLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXMLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,0))){
    SWIG_fail_ptr("SyntaxErrorXMLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXMLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXMLException(void *obj) {
Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorXMLException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorXMLException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorXMLException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorXMLException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorXMLException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorXMLException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorXMLException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorXMLException_Sf_SwigStatic = {
    "SyntaxErrorXMLException",
    swig_SyntaxErrorXMLException_Sf_SwigStatic_methods,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_constants,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorXMLException_bases[] = {0,0};
static const char *swig_SyntaxErrorXMLException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorXMLException = { "SyntaxErrorXMLException", "SyntaxErrorXMLException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,_proxy__wrap_new_SyntaxErrorXMLException, swig_delete_SyntaxErrorXMLException, swig_SyntaxErrorXMLException_methods, swig_SyntaxErrorXMLException_attributes, &swig_SyntaxErrorXMLException_Sf_SwigStatic, swig_SyntaxErrorXMLException_meta, swig_SyntaxErrorXMLException_bases, swig_SyntaxErrorXMLException_base_names };

static int _wrap_new_SyntaxErrorXPathException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXPathException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorXPathException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXPathException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXPathException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXPathException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,0))){
    SWIG_fail_ptr("SyntaxErrorXPathException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXPathException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXPathException(void *obj) {
Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorXPathException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorXPathException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorXPathException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorXPathException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorXPathException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorXPathException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorXPathException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorXPathException_Sf_SwigStatic = {
    "SyntaxErrorXPathException",
    swig_SyntaxErrorXPathException_Sf_SwigStatic_methods,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_constants,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorXPathException_bases[] = {0,0};
static const char *swig_SyntaxErrorXPathException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorXPathException = { "SyntaxErrorXPathException", "SyntaxErrorXPathException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,_proxy__wrap_new_SyntaxErrorXPathException, swig_delete_SyntaxErrorXPathException, swig_SyntaxErrorXPathException_methods, swig_SyntaxErrorXPathException_attributes, &swig_SyntaxErrorXPathException_Sf_SwigStatic, swig_SyntaxErrorXPathException_meta, swig_SyntaxErrorXPathException_bases, swig_SyntaxErrorXPathException_base_names };

static int _wrap_new_SyntaxErrorLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorLuaException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,"Mezzanine::SyntaxErrorLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,0))){
    SWIG_fail_ptr("SyntaxErrorLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorLuaException(void *obj) {
Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorLuaException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorLuaException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorLuaException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorLuaException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorLuaException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorLuaException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorLuaException_Sf_SwigStatic = {
    "SyntaxErrorLuaException",
    swig_SyntaxErrorLuaException_Sf_SwigStatic_methods,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_constants,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorLuaException_bases[] = {0,0};
static const char *swig_SyntaxErrorLuaException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorLuaException = { "SyntaxErrorLuaException", "SyntaxErrorLuaException", &SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,_proxy__wrap_new_SyntaxErrorLuaException, swig_delete_SyntaxErrorLuaException, swig_SyntaxErrorLuaException_methods, swig_SyntaxErrorLuaException_attributes, &swig_SyntaxErrorLuaException_Sf_SwigStatic, swig_SyntaxErrorLuaException_meta, swig_SyntaxErrorLuaException_bases, swig_SyntaxErrorLuaException_base_names };

static int _wrap_new_ScriptException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::GetExceptionCode",1,"Mezzanine::ScriptException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptException,0))){
    SWIG_fail_ptr("ScriptException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptException(void *obj) {
Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptException_Sf_SwigStatic = {
    "ScriptException",
    swig_ScriptException_Sf_SwigStatic_methods,
    swig_ScriptException_Sf_SwigStatic_attributes,
    swig_ScriptException_Sf_SwigStatic_constants,
    swig_ScriptException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptException_bases[] = {0,0};
static const char *swig_ScriptException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ScriptException = { "ScriptException", "ScriptException", &SWIGTYPE_p_Mezzanine__ScriptException,_proxy__wrap_new_ScriptException, swig_delete_ScriptException, swig_ScriptException_methods, swig_ScriptException_attributes, &swig_ScriptException_Sf_SwigStatic, swig_ScriptException_meta, swig_ScriptException_bases, swig_ScriptException_base_names };

static int _wrap_new_ScriptLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::GetExceptionCode",1,"Mezzanine::ScriptLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaException,0))){
    SWIG_fail_ptr("ScriptLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaException(void *obj) {
Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaException_Sf_SwigStatic = {
    "ScriptLuaException",
    swig_ScriptLuaException_Sf_SwigStatic_methods,
    swig_ScriptLuaException_Sf_SwigStatic_attributes,
    swig_ScriptLuaException_Sf_SwigStatic_constants,
    swig_ScriptLuaException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaException_bases[] = {0,0};
static const char *swig_ScriptLuaException_base_names[] = {"Mezzanine::ScriptException *",0};
static swig_lua_class _wrap_class_ScriptLuaException = { "ScriptLuaException", "ScriptLuaException", &SWIGTYPE_p_Mezzanine__ScriptLuaException,_proxy__wrap_new_ScriptLuaException, swig_delete_ScriptLuaException, swig_ScriptLuaException_methods, swig_ScriptLuaException_attributes, &swig_ScriptLuaException_Sf_SwigStatic, swig_ScriptLuaException_meta, swig_ScriptLuaException_bases, swig_ScriptLuaException_base_names };

static int _wrap_new_ScriptLuaYieldException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaYieldException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaYieldException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaYieldException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaYieldException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,"Mezzanine::ScriptLuaYieldException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,0))){
    SWIG_fail_ptr("ScriptLuaYieldException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaYieldException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaYieldException(void *obj) {
Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaYieldException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaYieldException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaYieldException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaYieldException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaYieldException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaYieldException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaYieldException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaYieldException_Sf_SwigStatic = {
    "ScriptLuaYieldException",
    swig_ScriptLuaYieldException_Sf_SwigStatic_methods,
    swig_ScriptLuaYieldException_Sf_SwigStatic_attributes,
    swig_ScriptLuaYieldException_Sf_SwigStatic_constants,
    swig_ScriptLuaYieldException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaYieldException_bases[] = {0,0};
static const char *swig_ScriptLuaYieldException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaYieldException = { "ScriptLuaYieldException", "ScriptLuaYieldException", &SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,_proxy__wrap_new_ScriptLuaYieldException, swig_delete_ScriptLuaYieldException, swig_ScriptLuaYieldException_methods, swig_ScriptLuaYieldException_attributes, &swig_ScriptLuaYieldException_Sf_SwigStatic, swig_ScriptLuaYieldException_meta, swig_ScriptLuaYieldException_bases, swig_ScriptLuaYieldException_base_names };

static int _wrap_new_ScriptLuaRuntimeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaRuntimeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaRuntimeException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaRuntimeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaRuntimeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,"Mezzanine::ScriptLuaRuntimeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,0))){
    SWIG_fail_ptr("ScriptLuaRuntimeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaRuntimeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaRuntimeException(void *obj) {
Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaRuntimeException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaRuntimeException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaRuntimeException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaRuntimeException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaRuntimeException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaRuntimeException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaRuntimeException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaRuntimeException_Sf_SwigStatic = {
    "ScriptLuaRuntimeException",
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_methods,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_attributes,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_constants,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaRuntimeException_bases[] = {0,0};
static const char *swig_ScriptLuaRuntimeException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaRuntimeException = { "ScriptLuaRuntimeException", "ScriptLuaRuntimeException", &SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,_proxy__wrap_new_ScriptLuaRuntimeException, swig_delete_ScriptLuaRuntimeException, swig_ScriptLuaRuntimeException_methods, swig_ScriptLuaRuntimeException_attributes, &swig_ScriptLuaRuntimeException_Sf_SwigStatic, swig_ScriptLuaRuntimeException_meta, swig_ScriptLuaRuntimeException_bases, swig_ScriptLuaRuntimeException_base_names };

static int _wrap_new_ScriptLuaErrErrException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaErrErrException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaErrErrException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaErrErrException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaErrErrException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,"Mezzanine::ScriptLuaErrErrException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,0))){
    SWIG_fail_ptr("ScriptLuaErrErrException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaErrErrException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaErrErrException(void *obj) {
Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaErrErrException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaErrErrException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaErrErrException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaErrErrException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaErrErrException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaErrErrException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaErrErrException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaErrErrException_Sf_SwigStatic = {
    "ScriptLuaErrErrException",
    swig_ScriptLuaErrErrException_Sf_SwigStatic_methods,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_attributes,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_constants,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaErrErrException_bases[] = {0,0};
static const char *swig_ScriptLuaErrErrException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaErrErrException = { "ScriptLuaErrErrException", "ScriptLuaErrErrException", &SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,_proxy__wrap_new_ScriptLuaErrErrException, swig_delete_ScriptLuaErrErrException, swig_ScriptLuaErrErrException_methods, swig_ScriptLuaErrErrException_attributes, &swig_ScriptLuaErrErrException_Sf_SwigStatic, swig_ScriptLuaErrErrException_meta, swig_ScriptLuaErrErrException_bases, swig_ScriptLuaErrErrException_base_names };

static int _wrap_new_ParametersException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::GetExceptionCode",1,"Mezzanine::ParametersException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersException,0))){
    SWIG_fail_ptr("ParametersException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersException(void *obj) {
Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersException_Sf_SwigStatic = {
    "ParametersException",
    swig_ParametersException_Sf_SwigStatic_methods,
    swig_ParametersException_Sf_SwigStatic_attributes,
    swig_ParametersException_Sf_SwigStatic_constants,
    swig_ParametersException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersException_bases[] = {0,0};
static const char *swig_ParametersException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ParametersException = { "ParametersException", "ParametersException", &SWIGTYPE_p_Mezzanine__ParametersException,_proxy__wrap_new_ParametersException, swig_delete_ParametersException, swig_ParametersException_methods, swig_ParametersException_attributes, &swig_ParametersException_Sf_SwigStatic, swig_ParametersException_meta, swig_ParametersException_bases, swig_ParametersException_base_names };

static int _wrap_new_ParametersCastException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersCastException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersCastException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersCastException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersCastException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::GetExceptionCode",1,"Mezzanine::ParametersCastException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersCastException,0))){
    SWIG_fail_ptr("ParametersCastException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersCastException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersCastException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersCastException(void *obj) {
Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersCastException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersCastException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersCastException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersCastException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersCastException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersCastException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersCastException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersCastException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersCastException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersCastException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersCastException_Sf_SwigStatic = {
    "ParametersCastException",
    swig_ParametersCastException_Sf_SwigStatic_methods,
    swig_ParametersCastException_Sf_SwigStatic_attributes,
    swig_ParametersCastException_Sf_SwigStatic_constants,
    swig_ParametersCastException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersCastException_bases[] = {0,0};
static const char *swig_ParametersCastException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_ParametersCastException = { "ParametersCastException", "ParametersCastException", &SWIGTYPE_p_Mezzanine__ParametersCastException,_proxy__wrap_new_ParametersCastException, swig_delete_ParametersCastException, swig_ParametersCastException_methods, swig_ParametersCastException_attributes, &swig_ParametersCastException_Sf_SwigStatic, swig_ParametersCastException_meta, swig_ParametersCastException_bases, swig_ParametersCastException_base_names };

static int _wrap_new_ParametersRangeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersRangeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersRangeException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersRangeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersRangeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::GetExceptionCode",1,"Mezzanine::ParametersRangeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersRangeException,0))){
    SWIG_fail_ptr("ParametersRangeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersRangeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersRangeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersRangeException(void *obj) {
Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersRangeException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersRangeException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersRangeException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersRangeException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersRangeException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersRangeException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersRangeException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersRangeException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersRangeException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersRangeException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersRangeException_Sf_SwigStatic = {
    "ParametersRangeException",
    swig_ParametersRangeException_Sf_SwigStatic_methods,
    swig_ParametersRangeException_Sf_SwigStatic_attributes,
    swig_ParametersRangeException_Sf_SwigStatic_constants,
    swig_ParametersRangeException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersRangeException_bases[] = {0,0};
static const char *swig_ParametersRangeException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_ParametersRangeException = { "ParametersRangeException", "ParametersRangeException", &SWIGTYPE_p_Mezzanine__ParametersRangeException,_proxy__wrap_new_ParametersRangeException, swig_delete_ParametersRangeException, swig_ParametersRangeException_methods, swig_ParametersRangeException_attributes, &swig_ParametersRangeException_Sf_SwigStatic, swig_ParametersRangeException_meta, swig_ParametersRangeException_bases, swig_ParametersRangeException_base_names };

static int _wrap_new_ArithmeticException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ArithmeticException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ArithmeticException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ArithmeticException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArithmeticException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::GetExceptionCode",1,"Mezzanine::ArithmeticException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ArithmeticException,0))){
    SWIG_fail_ptr("ArithmeticException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ArithmeticException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ArithmeticException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArithmeticException(void *obj) {
Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ArithmeticException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ArithmeticException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ArithmeticException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArithmeticException_methods[]= {
    { "GetExceptionCode", _wrap_ArithmeticException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ArithmeticException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ArithmeticException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ArithmeticException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ArithmeticException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ArithmeticException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ArithmeticException_Sf_SwigStatic = {
    "ArithmeticException",
    swig_ArithmeticException_Sf_SwigStatic_methods,
    swig_ArithmeticException_Sf_SwigStatic_attributes,
    swig_ArithmeticException_Sf_SwigStatic_constants,
    swig_ArithmeticException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ArithmeticException_bases[] = {0,0};
static const char *swig_ArithmeticException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ArithmeticException = { "ArithmeticException", "ArithmeticException", &SWIGTYPE_p_Mezzanine__ArithmeticException,_proxy__wrap_new_ArithmeticException, swig_delete_ArithmeticException, swig_ArithmeticException_methods, swig_ArithmeticException_attributes, &swig_ArithmeticException_Sf_SwigStatic, swig_ArithmeticException_meta, swig_ArithmeticException_bases, swig_ArithmeticException_base_names };

static int _wrap_new_InvalidVersionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidVersionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidVersionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidVersionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidVersionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::GetExceptionCode",1,"Mezzanine::InvalidVersionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidVersionException,0))){
    SWIG_fail_ptr("InvalidVersionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidVersionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidVersionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidVersionException(void *obj) {
Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidVersionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidVersionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidVersionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidVersionException_methods[]= {
    { "GetExceptionCode", _wrap_InvalidVersionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidVersionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidVersionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidVersionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidVersionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidVersionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidVersionException_Sf_SwigStatic = {
    "InvalidVersionException",
    swig_InvalidVersionException_Sf_SwigStatic_methods,
    swig_InvalidVersionException_Sf_SwigStatic_attributes,
    swig_InvalidVersionException_Sf_SwigStatic_constants,
    swig_InvalidVersionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidVersionException_bases[] = {0,0};
static const char *swig_InvalidVersionException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidVersionException = { "InvalidVersionException", "InvalidVersionException", &SWIGTYPE_p_Mezzanine__InvalidVersionException,_proxy__wrap_new_InvalidVersionException, swig_delete_InvalidVersionException, swig_InvalidVersionException_methods, swig_InvalidVersionException_attributes, &swig_InvalidVersionException_Sf_SwigStatic, swig_InvalidVersionException_meta, swig_InvalidVersionException_bases, swig_InvalidVersionException_base_names };

static int _wrap_new_InvalidStateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidStateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidStateException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidStateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidStateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::GetExceptionCode",1,"Mezzanine::InvalidStateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidStateException,0))){
    SWIG_fail_ptr("InvalidStateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidStateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidStateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidStateException(void *obj) {
Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidStateException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidStateException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidStateException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidStateException_methods[]= {
    { "GetExceptionCode", _wrap_InvalidStateException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidStateException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidStateException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidStateException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidStateException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidStateException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidStateException_Sf_SwigStatic = {
    "InvalidStateException",
    swig_InvalidStateException_Sf_SwigStatic_methods,
    swig_InvalidStateException_Sf_SwigStatic_attributes,
    swig_InvalidStateException_Sf_SwigStatic_constants,
    swig_InvalidStateException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidStateException_bases[] = {0,0};
static const char *swig_InvalidStateException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidStateException = { "InvalidStateException", "InvalidStateException", &SWIGTYPE_p_Mezzanine__InvalidStateException,_proxy__wrap_new_InvalidStateException, swig_delete_InvalidStateException, swig_InvalidStateException_methods, swig_InvalidStateException_attributes, &swig_InvalidStateException_Sf_SwigStatic, swig_InvalidStateException_meta, swig_InvalidStateException_bases, swig_InvalidStateException_base_names };

static int _wrap_new_RenderingAPIException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RenderingAPIException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RenderingAPIException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RenderingAPIException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingAPIException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::GetExceptionCode",1,"Mezzanine::RenderingAPIException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RenderingAPIException,0))){
    SWIG_fail_ptr("RenderingAPIException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RenderingAPIException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RenderingAPIException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderingAPIException(void *obj) {
Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) obj;
delete arg1;
}
static int _proxy__wrap_new_RenderingAPIException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RenderingAPIException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RenderingAPIException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RenderingAPIException_methods[]= {
    { "GetExceptionCode", _wrap_RenderingAPIException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_RenderingAPIException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderingAPIException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderingAPIException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderingAPIException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderingAPIException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderingAPIException_Sf_SwigStatic = {
    "RenderingAPIException",
    swig_RenderingAPIException_Sf_SwigStatic_methods,
    swig_RenderingAPIException_Sf_SwigStatic_attributes,
    swig_RenderingAPIException_Sf_SwigStatic_constants,
    swig_RenderingAPIException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderingAPIException_bases[] = {0,0};
static const char *swig_RenderingAPIException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_RenderingAPIException = { "RenderingAPIException", "RenderingAPIException", &SWIGTYPE_p_Mezzanine__RenderingAPIException,_proxy__wrap_new_RenderingAPIException, swig_delete_RenderingAPIException, swig_RenderingAPIException_methods, swig_RenderingAPIException_attributes, &swig_RenderingAPIException_Sf_SwigStatic, swig_RenderingAPIException_meta, swig_RenderingAPIException_bases, swig_RenderingAPIException_base_names };

static int _wrap_new_RuntimeAssertionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RuntimeAssertionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RuntimeAssertionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RuntimeAssertionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RuntimeAssertionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,"Mezzanine::RuntimeAssertionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,0))){
    SWIG_fail_ptr("RuntimeAssertionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RuntimeAssertionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RuntimeAssertionException(void *obj) {
Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_RuntimeAssertionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RuntimeAssertionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RuntimeAssertionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RuntimeAssertionException_methods[]= {
    { "GetExceptionCode", _wrap_RuntimeAssertionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_RuntimeAssertionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RuntimeAssertionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RuntimeAssertionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RuntimeAssertionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RuntimeAssertionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RuntimeAssertionException_Sf_SwigStatic = {
    "RuntimeAssertionException",
    swig_RuntimeAssertionException_Sf_SwigStatic_methods,
    swig_RuntimeAssertionException_Sf_SwigStatic_attributes,
    swig_RuntimeAssertionException_Sf_SwigStatic_constants,
    swig_RuntimeAssertionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RuntimeAssertionException_bases[] = {0,0};
static const char *swig_RuntimeAssertionException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_RuntimeAssertionException = { "RuntimeAssertionException", "RuntimeAssertionException", &SWIGTYPE_p_Mezzanine__RuntimeAssertionException,_proxy__wrap_new_RuntimeAssertionException, swig_delete_RuntimeAssertionException, swig_RuntimeAssertionException_methods, swig_RuntimeAssertionException_attributes, &swig_RuntimeAssertionException_Sf_SwigStatic, swig_RuntimeAssertionException_meta, swig_RuntimeAssertionException_bases, swig_RuntimeAssertionException_base_names };

static int _wrap_new_InternalException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InternalException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InternalException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InternalException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InternalException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InternalException::GetExceptionCode",1,"Mezzanine::InternalException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InternalException,0))){
    SWIG_fail_ptr("InternalException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InternalException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InternalException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InternalException(void *obj) {
Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InternalException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InternalException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InternalException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InternalException_methods[]= {
    { "GetExceptionCode", _wrap_InternalException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InternalException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InternalException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InternalException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InternalException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InternalException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InternalException_Sf_SwigStatic = {
    "InternalException",
    swig_InternalException_Sf_SwigStatic_methods,
    swig_InternalException_Sf_SwigStatic_attributes,
    swig_InternalException_Sf_SwigStatic_constants,
    swig_InternalException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InternalException_bases[] = {0,0};
static const char *swig_InternalException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InternalException = { "InternalException", "InternalException", &SWIGTYPE_p_Mezzanine__InternalException,_proxy__wrap_new_InternalException, swig_delete_InternalException, swig_InternalException_methods, swig_InternalException_attributes, &swig_InternalException_Sf_SwigStatic, swig_InternalException_meta, swig_InternalException_bases, swig_InternalException_base_names };

static int _wrap_new_NotImplementedException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NotImplementedException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NotImplementedException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NotImplementedException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NotImplementedException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::GetExceptionCode",1,"Mezzanine::NotImplementedException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NotImplementedException,0))){
    SWIG_fail_ptr("NotImplementedException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NotImplementedException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NotImplementedException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NotImplementedException(void *obj) {
Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NotImplementedException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NotImplementedException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NotImplementedException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NotImplementedException_methods[]= {
    { "GetExceptionCode", _wrap_NotImplementedException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NotImplementedException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NotImplementedException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NotImplementedException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NotImplementedException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NotImplementedException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NotImplementedException_Sf_SwigStatic = {
    "NotImplementedException",
    swig_NotImplementedException_Sf_SwigStatic_methods,
    swig_NotImplementedException_Sf_SwigStatic_attributes,
    swig_NotImplementedException_Sf_SwigStatic_constants,
    swig_NotImplementedException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NotImplementedException_bases[] = {0,0};
static const char *swig_NotImplementedException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_NotImplementedException = { "NotImplementedException", "NotImplementedException", &SWIGTYPE_p_Mezzanine__NotImplementedException,_proxy__wrap_new_NotImplementedException, swig_delete_NotImplementedException, swig_NotImplementedException_methods, swig_NotImplementedException_attributes, &swig_NotImplementedException_Sf_SwigStatic, swig_NotImplementedException_meta, swig_NotImplementedException_bases, swig_NotImplementedException_base_names };

static int _wrap_new_InvalidAssignment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidAssignment__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidAssignment__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidAssignment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidAssignment_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::GetExceptionCode",1,"Mezzanine::InvalidAssignment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidAssignment,0))){
    SWIG_fail_ptr("InvalidAssignment_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidAssignment);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidAssignment const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidAssignment(void *obj) {
Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidAssignment(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidAssignment);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidAssignment_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidAssignment_methods[]= {
    { "GetExceptionCode", _wrap_InvalidAssignment_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidAssignment_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidAssignment_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidAssignment_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidAssignment_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidAssignment_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidAssignment_Sf_SwigStatic = {
    "InvalidAssignment",
    swig_InvalidAssignment_Sf_SwigStatic_methods,
    swig_InvalidAssignment_Sf_SwigStatic_attributes,
    swig_InvalidAssignment_Sf_SwigStatic_constants,
    swig_InvalidAssignment_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidAssignment_bases[] = {0,0};
static const char *swig_InvalidAssignment_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidAssignment = { "InvalidAssignment", "InvalidAssignment", &SWIGTYPE_p_Mezzanine__InvalidAssignment,_proxy__wrap_new_InvalidAssignment, swig_delete_InvalidAssignment, swig_InvalidAssignment_methods, swig_InvalidAssignment_attributes, &swig_InvalidAssignment_Sf_SwigStatic, swig_InvalidAssignment_meta, swig_InvalidAssignment_bases, swig_InvalidAssignment_base_names };

static int _wrap_SerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::SerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeSerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::DeSerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DeSerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_DeSerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DeSerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAxisValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAxisValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAxisValue",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->GetAxisValue((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",0,0)
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",3,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Ogre::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::Vector3()\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector3::Vector3(Ogre::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(btVector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_X",0,0)
  result = Mezzanine::Vector3::Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Y",0,0)
  result = Mezzanine::Vector3::Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Z",0,0)
  result = Mezzanine::Vector3::Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_X",0,0)
  result = Mezzanine::Vector3::Neg_Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Z",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UnitOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::StandardAxis arg1 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::UnitOnAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::UnitOnAxis",1,"Mezzanine::StandardAxis");
  arg1 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 1);
  result = Mezzanine::Vector3::UnitOnAxis(arg1);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsStandardUnitAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsStandardUnitAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsStandardUnitAxis",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsStandardUnitAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::StandardAxis)((Mezzanine::Vector3 const *)arg1)->IsStandardUnitAxis();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Ogre::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator ==(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator <=((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator +(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator -(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->CrossProduct((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->DotProduct((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Normalize",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Normalize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetNormal",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::AngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AngleBetween",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::AngleBetween",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AngleBetween",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AngleBetween",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->AngleBetween((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Permute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Permute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Permute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Permute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Permute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::AntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AntiPermute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->AntiPermute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAntiPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetAntiPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetDirection((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Perpendicular",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsPerpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsPerpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsPerpendicular((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Inverse",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Inverse",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Inverse();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Reflect((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Distance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Distance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Distance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Length",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Length",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZeroLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZeroLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZeroLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZeroLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZeroLength();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3_GetRotationToAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Vector3_GetRotationToAxis__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3_GetRotationToAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Zero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Zero",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Zero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::SetValues",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",4,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SetValues",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZero",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Ceil(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Ceil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Ceil((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Floor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Floor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Floor",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Floor",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Floor((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetBulletVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetBulletVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetBulletVector3();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractBulletVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->ExtractBulletVector3((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetOgreVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetOgreVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetOgreVector3();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractOgreVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->ExtractOgreVector3((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Vector3 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetSerializableName",0,0)
  result = Mezzanine::Vector3::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___tostring(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::__str__",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___tostring",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (char *)(arg1)->__str__();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3_attributes[] = {
    { "X", _wrap_Vector3_X_get, _wrap_Vector3_X_set },
    { "Y", _wrap_Vector3_Y_get, _wrap_Vector3_Y_set },
    { "Z", _wrap_Vector3_Z_get, _wrap_Vector3_Z_set },
    {0,0,0}
};
static swig_lua_method swig_Vector3_methods[]= {
    { "GetAxisValue", _wrap_Vector3_GetAxisValue},
    { "IsStandardUnitAxis", _wrap_Vector3_IsStandardUnitAxis},
    { "__unm", _wrap_Vector3___unm},
    { "__eq", _wrap_Vector3___eq},
    { "__le", _wrap_Vector3___le},
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "CrossProduct", _wrap_Vector3_CrossProduct},
    { "DotProduct", _wrap_Vector3_DotProduct},
    { "Normalize", _wrap_Vector3_Normalize},
    { "GetNormal", _wrap_Vector3_GetNormal},
    { "AngleBetween", _wrap_Vector3_AngleBetween},
    { "Permute", _wrap_Vector3_Permute},
    { "GetPermute", _wrap_Vector3_GetPermute},
    { "AntiPermute", _wrap_Vector3_AntiPermute},
    { "GetAntiPermute", _wrap_Vector3_GetAntiPermute},
    { "GetDirection", _wrap_Vector3_GetDirection},
    { "Perpendicular", _wrap_Vector3_Perpendicular},
    { "IsPerpendicular", _wrap_Vector3_IsPerpendicular},
    { "Inverse", _wrap_Vector3_Inverse},
    { "Reflect", _wrap_Vector3_Reflect},
    { "Distance", _wrap_Vector3_Distance},
    { "SquaredDistance", _wrap_Vector3_SquaredDistance},
    { "Length", _wrap_Vector3_Length},
    { "SquaredLength", _wrap_Vector3_SquaredLength},
    { "IsZeroLength", _wrap_Vector3_IsZeroLength},
    { "GetRotationToAxis", _wrap_Vector3_GetRotationToAxis},
    { "Zero", _wrap_Vector3_Zero},
    { "SetValues", _wrap_Vector3_SetValues},
    { "IsZero", _wrap_Vector3_IsZero},
    { "Ceil", _wrap_Vector3_Ceil},
    { "Floor", _wrap_Vector3_Floor},
    { "GetBulletVector3", _wrap_Vector3_GetBulletVector3},
    { "ExtractBulletVector3", _wrap_Vector3_ExtractBulletVector3},
    { "GetOgreVector3", _wrap_Vector3_GetOgreVector3},
    { "ExtractOgreVector3", _wrap_Vector3_ExtractOgreVector3},
    { "ProtoSerialize", _wrap_Vector3_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Vector3_ProtoDeSerialize},
    { "__tostring", _wrap_Vector3___tostring},
    {0,0}
};
static swig_lua_method swig_Vector3_meta[] = {
    { "__unm", _wrap_Vector3___unm},
    { "__eq", _wrap_Vector3___eq},
    { "__le", _wrap_Vector3___le},
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__tostring", _wrap_Vector3___tostring},
    {0,0}
};

static swig_lua_attribute swig_Vector3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3_Sf_SwigStatic_methods[]= {
    { "Unit_X", _wrap_Vector3_Unit_X},
    { "Unit_Y", _wrap_Vector3_Unit_Y},
    { "Unit_Z", _wrap_Vector3_Unit_Z},
    { "Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "GetSerializableName", _wrap_Vector3_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Vector3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3_Sf_SwigStatic = {
    "Vector3",
    swig_Vector3_Sf_SwigStatic_methods,
    swig_Vector3_Sf_SwigStatic_attributes,
    swig_Vector3_Sf_SwigStatic_constants,
    swig_Vector3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3_bases[] = {0};
static const char *swig_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3 = { "Vector3", "Vector3", &SWIGTYPE_p_Mezzanine__Vector3,_proxy__wrap_new_Vector3, swig_delete_Vector3, swig_Vector3_methods, swig_Vector3_attributes, &swig_Vector3_Sf_SwigStatic, swig_Vector3_meta, swig_Vector3_bases, swig_Vector3_base_names };

static int _wrap_Vector3LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",1,"Mezzanine::Vector3LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3LengthCompare const *)arg1)->operator ()((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::Vector3LengthCompare",0,0)
  result = (Mezzanine::Vector3LengthCompare *)new Mezzanine::Vector3LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3LengthCompare(void *obj) {
Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3LengthCompare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3LengthCompare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector3LengthCompare_methods[]= {
    { "__call", _wrap_Vector3LengthCompare___call},
    {0,0}
};
static swig_lua_method swig_Vector3LengthCompare_meta[] = {
    { "__call", _wrap_Vector3LengthCompare___call},
    {0,0}
};

static swig_lua_attribute swig_Vector3LengthCompare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3LengthCompare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3LengthCompare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3LengthCompare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3LengthCompare_Sf_SwigStatic = {
    "Vector3LengthCompare",
    swig_Vector3LengthCompare_Sf_SwigStatic_methods,
    swig_Vector3LengthCompare_Sf_SwigStatic_attributes,
    swig_Vector3LengthCompare_Sf_SwigStatic_constants,
    swig_Vector3LengthCompare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3LengthCompare_bases[] = {0};
static const char *swig_Vector3LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3LengthCompare = { "Vector3LengthCompare", "Vector3LengthCompare", &SWIGTYPE_p_Mezzanine__Vector3LengthCompare,_proxy__wrap_new_Vector3LengthCompare, swig_delete_Vector3LengthCompare, swig_Vector3LengthCompare_methods, swig_Vector3LengthCompare_attributes, &swig_Vector3LengthCompare_Sf_SwigStatic, swig_Vector3LengthCompare_meta, swig_Vector3LengthCompare_bases, swig_Vector3LengthCompare_base_names };

static int _wrap___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator +(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator +(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator -(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator -(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator *(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator *(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator /(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator /(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::X",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_X_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::X",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_X_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Y",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Y_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Y",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Y_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Z",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Z_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Z",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Z_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_W_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::W",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::W",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_W_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_W_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::W",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_W_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",0,0)
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",4,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Matrix3x3 *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Matrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Matrix3x3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Matrix3x3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Matrix3x3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((btQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Ogre::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Matrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::Quaternion()\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Real const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Matrix3x3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(btQuaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Ogre::Quaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetIdentity",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetIdentity",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real *arg5 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  Mezzanine::Real temp5 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetValues",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",4,"Mezzanine::Real const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",5,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetValues",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  temp5=(Mezzanine::Real)lua_tonumber(L,5); arg5=&temp5;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4,(Mezzanine::Real const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxisAngle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxisAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",2,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisAngle",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisAngle",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxisAngle((Mezzanine::Real const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromMatrix3x3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Matrix3x3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromMatrix3x3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromMatrix3x3",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromMatrix3x3",2,"Mezzanine::Matrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromMatrix3x3",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Matrix3x3,0))){
    SWIG_fail_ptr("Quaternion_SetFromMatrix3x3",2,SWIGTYPE_p_Mezzanine__Matrix3x3);
  }
  
  (arg1)->SetFromMatrix3x3((Mezzanine::Matrix3x3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxes((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxisToZ(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxisToZ",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxisToZ((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ConvertToAngleAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ConvertToAngleAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",2,"Mezzanine::Real &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",3,"Mezzanine::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  ((Mezzanine::Quaternion const *)arg1)->ConvertToAngleAxis(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::DotProduct",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::DotProduct",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_DotProduct",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_DotProduct",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->DotProduct((Mezzanine::Quaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Length",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Length",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_LengthSqrd(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::LengthSqrd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::LengthSqrd",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_LengthSqrd",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->LengthSqrd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Normalize",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Normalize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetNormalizedCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetNormalizedCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetNormalizedCopy",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetNormalizedCopy",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetNormalizedCopy();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetInverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetInverse",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetInverse",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetInverse();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Boole arg2 ;
  btQuaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetBulletQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",1,"Mezzanine::Quaternion const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion(arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetBulletQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Quaternion_GetBulletQuaternion__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_GetBulletQuaternion__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_GetBulletQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::GetBulletQuaternion(Mezzanine::Boole) const\n"
    "    Mezzanine::Quaternion::GetBulletQuaternion() const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_ExtractBulletQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ExtractBulletQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractBulletQuaternion",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractBulletQuaternion",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractBulletQuaternion",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->ExtractBulletQuaternion((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Boole arg2 ;
  Ogre::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetOgreQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",1,"Mezzanine::Quaternion const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion(arg2);
  {
    Ogre::Quaternion * resultptr = new Ogre::Quaternion((const Ogre::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetOgreQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion();
  {
    Ogre::Quaternion * resultptr = new Ogre::Quaternion((const Ogre::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Quaternion_GetOgreQuaternion__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_GetOgreQuaternion__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_GetOgreQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::GetOgreQuaternion(Mezzanine::Boole) const\n"
    "    Mezzanine::Quaternion::GetOgreQuaternion() const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_ExtractOgreQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ExtractOgreQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractOgreQuaternion",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractOgreQuaternion",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractOgreQuaternion",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->ExtractOgreQuaternion((Ogre::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___div(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator /",1,"Mezzanine::Quaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___div",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator +(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator +(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator +(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator -(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator -(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator -(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(btQuaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((Mezzanine::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((Ogre::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((btQuaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator ==(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator ==(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator ==(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator <=",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator <=",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___le",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___le",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator <=((Mezzanine::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoSerialize",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Quaternion_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Quaternion const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoDeSerialize",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Quaternion_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetSerializableName",0,0)
  result = Mezzanine::Quaternion::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quaternion_attributes[] = {
    { "X", _wrap_Quaternion_X_get, _wrap_Quaternion_X_set },
    { "Y", _wrap_Quaternion_Y_get, _wrap_Quaternion_Y_set },
    { "Z", _wrap_Quaternion_Z_get, _wrap_Quaternion_Z_set },
    { "W", _wrap_Quaternion_W_get, _wrap_Quaternion_W_set },
    {0,0,0}
};
static swig_lua_method swig_Quaternion_methods[]= {
    { "SetIdentity", _wrap_Quaternion_SetIdentity},
    { "SetValues", _wrap_Quaternion_SetValues},
    { "SetFromAxisAngle", _wrap_Quaternion_SetFromAxisAngle},
    { "SetFromMatrix3x3", _wrap_Quaternion_SetFromMatrix3x3},
    { "SetFromAxes", _wrap_Quaternion_SetFromAxes},
    { "SetFromAxisToZ", _wrap_Quaternion_SetFromAxisToZ},
    { "ConvertToAngleAxis", _wrap_Quaternion_ConvertToAngleAxis},
    { "DotProduct", _wrap_Quaternion_DotProduct},
    { "Length", _wrap_Quaternion_Length},
    { "LengthSqrd", _wrap_Quaternion_LengthSqrd},
    { "Normalize", _wrap_Quaternion_Normalize},
    { "GetNormalizedCopy", _wrap_Quaternion_GetNormalizedCopy},
    { "GetInverse", _wrap_Quaternion_GetInverse},
    { "GetBulletQuaternion", _wrap_Quaternion_GetBulletQuaternion},
    { "ExtractBulletQuaternion", _wrap_Quaternion_ExtractBulletQuaternion},
    { "GetOgreQuaternion", _wrap_Quaternion_GetOgreQuaternion},
    { "ExtractOgreQuaternion", _wrap_Quaternion_ExtractOgreQuaternion},
    { "__div", _wrap_Quaternion___div},
    { "__add", _wrap_Quaternion___add},
    { "__sub", _wrap_Quaternion___sub},
    { "__mul", _wrap_Quaternion___mul},
    { "__eq", _wrap_Quaternion___eq},
    { "__le", _wrap_Quaternion___le},
    { "ProtoSerialize", _wrap_Quaternion_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Quaternion_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_Quaternion_meta[] = {
    { "__div", _wrap_Quaternion___div},
    { "__add", _wrap_Quaternion___add},
    { "__sub", _wrap_Quaternion___sub},
    { "__mul", _wrap_Quaternion___mul},
    { "__eq", _wrap_Quaternion___eq},
    { "__le", _wrap_Quaternion___le},
    {0,0}
};

static swig_lua_attribute swig_Quaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quaternion_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Quaternion_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Quaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quaternion_Sf_SwigStatic = {
    "Quaternion",
    swig_Quaternion_Sf_SwigStatic_methods,
    swig_Quaternion_Sf_SwigStatic_attributes,
    swig_Quaternion_Sf_SwigStatic_constants,
    swig_Quaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quaternion_bases[] = {0};
static const char *swig_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Quaternion = { "Quaternion", "Quaternion", &SWIGTYPE_p_Mezzanine__Quaternion,_proxy__wrap_new_Quaternion, swig_delete_Quaternion, swig_Quaternion_methods, swig_Quaternion_attributes, &swig_Quaternion_Sf_SwigStatic, swig_Quaternion_meta, swig_Quaternion_bases, swig_Quaternion_base_names };

static int _wrap_TransformableObject_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetLocation",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableObject_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::TransformableObject::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetOrientation",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetScale",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Yaw",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Pitch",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Roll",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableObject_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::TransformableObject::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_ConvertLocalToGlobal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::ConvertLocalToGlobal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::TransformableObject::ConvertLocalToGlobal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_ConvertGlobalToLocal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::ConvertGlobalToLocal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::TransformableObject::ConvertGlobalToLocal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransformableObject(void *obj) {
Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_TransformableObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransformableObject_methods[]= {
    { "SetLocation", _wrap_TransformableObject_SetLocation},
    { "GetLocation", _wrap_TransformableObject_GetLocation},
    { "SetOrientation", _wrap_TransformableObject_SetOrientation},
    { "GetOrientation", _wrap_TransformableObject_GetOrientation},
    { "SetScale", _wrap_TransformableObject_SetScale},
    { "GetScale", _wrap_TransformableObject_GetScale},
    { "Translate", _wrap_TransformableObject_Translate},
    { "Yaw", _wrap_TransformableObject_Yaw},
    { "Pitch", _wrap_TransformableObject_Pitch},
    { "Roll", _wrap_TransformableObject_Roll},
    { "Rotate", _wrap_TransformableObject_Rotate},
    { "Scale", _wrap_TransformableObject_Scale},
    { "ConvertLocalToGlobal", _wrap_TransformableObject_ConvertLocalToGlobal},
    { "ConvertGlobalToLocal", _wrap_TransformableObject_ConvertGlobalToLocal},
    {0,0}
};
static swig_lua_method swig_TransformableObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransformableObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransformableObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransformableObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransformableObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransformableObject_Sf_SwigStatic = {
    "TransformableObject",
    swig_TransformableObject_Sf_SwigStatic_methods,
    swig_TransformableObject_Sf_SwigStatic_attributes,
    swig_TransformableObject_Sf_SwigStatic_constants,
    swig_TransformableObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransformableObject_bases[] = {0};
static const char *swig_TransformableObject_base_names[] = {0};
static swig_lua_class _wrap_class_TransformableObject = { "TransformableObject", "TransformableObject", &SWIGTYPE_p_Mezzanine__TransformableObject,0, swig_delete_TransformableObject, swig_TransformableObject_methods, swig_TransformableObject_attributes, &swig_TransformableObject_Sf_SwigStatic, swig_TransformableObject_meta, swig_TransformableObject_bases, swig_TransformableObject_base_names };

static int _wrap_TransformableChildObject_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetLocation",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableChildObject_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::TransformableChildObject::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetOrientation",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetScale",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::TransformSpace arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",5,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 5);
  (arg1)->Translate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Translate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Translate__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Translate__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableChildObject_Translate__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Vector3 const &,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Yaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Yaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Yaw(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Yaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Yaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Yaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Yaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Yaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Yaw(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Yaw(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Pitch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Pitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Pitch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Pitch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Pitch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Pitch__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Pitch__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Pitch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Pitch(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Pitch(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Roll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Roll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Roll(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Roll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Roll(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Roll__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Roll__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Roll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Roll(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Roll(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::TransformSpace arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",4,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 4);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Quaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Rotate__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Rotate__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Rotate__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Rotate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Quaternion const &,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static void swig_delete_TransformableChildObject(void *obj) {
Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_TransformableChildObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransformableChildObject_methods[]= {
    { "SetLocation", _wrap_TransformableChildObject_SetLocation},
    { "GetLocation", _wrap_TransformableChildObject_GetLocation},
    { "SetOrientation", _wrap_TransformableChildObject_SetOrientation},
    { "GetOrientation", _wrap_TransformableChildObject_GetOrientation},
    { "SetScale", _wrap_TransformableChildObject_SetScale},
    { "GetScale", _wrap_TransformableChildObject_GetScale},
    { "Translate", _wrap_TransformableChildObject_Translate},
    { "Yaw", _wrap_TransformableChildObject_Yaw},
    { "Pitch", _wrap_TransformableChildObject_Pitch},
    { "Roll", _wrap_TransformableChildObject_Roll},
    { "Rotate", _wrap_TransformableChildObject_Rotate},
    { "Scale", _wrap_TransformableChildObject_Scale},
    {0,0}
};
static swig_lua_method swig_TransformableChildObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransformableChildObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransformableChildObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransformableChildObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransformableChildObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransformableChildObject_Sf_SwigStatic = {
    "TransformableChildObject",
    swig_TransformableChildObject_Sf_SwigStatic_methods,
    swig_TransformableChildObject_Sf_SwigStatic_attributes,
    swig_TransformableChildObject_Sf_SwigStatic_constants,
    swig_TransformableChildObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransformableChildObject_bases[] = {0};
static const char *swig_TransformableChildObject_base_names[] = {0};
static swig_lua_class _wrap_class_TransformableChildObject = { "TransformableChildObject", "TransformableChildObject", &SWIGTYPE_p_Mezzanine__TransformableChildObject,0, swig_delete_TransformableChildObject, swig_TransformableChildObject_methods, swig_TransformableChildObject_attributes, &swig_TransformableChildObject_Sf_SwigStatic, swig_TransformableChildObject_meta, swig_TransformableChildObject_bases, swig_TransformableChildObject_base_names };

static int _wrap_Transform_Location_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Location",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Location",1,"Mezzanine::Transform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Transform::Location",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Location_set",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Transform_Location_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Location = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Location_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Location",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Location_get",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Location);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Rotation_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *arg2 = (Mezzanine::Quaternion *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Rotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Rotation",1,"Mezzanine::Transform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Transform::Rotation",2,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Rotation_set",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Transform_Rotation_set",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  if (arg1) (arg1)->Rotation = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Rotation_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Rotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Rotation",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Rotation_get",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Quaternion *)& ((arg1)->Rotation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::Transform",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Transform",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Quaternion const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",0,0)
  result = (Mezzanine::Transform *)new Mezzanine::Transform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_btTransform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((btTransform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Transform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Transform__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Transform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Vector3 const &,Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Transform::Transform()\n"
    "    Mezzanine::Transform::Transform(btTransform const &)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Transform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Transform_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::SetIdentity",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_SetIdentity",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_GetBulletTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("Mezzanine::Transform::GetBulletTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::GetBulletTransform",1,"Mezzanine::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_GetBulletTransform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->GetBulletTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ExtractBulletTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ExtractBulletTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ExtractBulletTransform",1,"Mezzanine::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ExtractBulletTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ExtractBulletTransform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("Transform_ExtractBulletTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->ExtractBulletTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ProtoSerialize",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Transform_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Transform const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ProtoDeSerialize",1,"Mezzanine::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Transform_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Transform::GetSerializableName",0,0)
  result = Mezzanine::Transform::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator -",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator -",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___sub",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___sub",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->operator -((Mezzanine::Transform const &)*arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator +",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator +",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___add",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___add",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->operator +((Mezzanine::Transform const &)*arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___mul(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator *",1,"Mezzanine::Transform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator *",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___mul",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = ((Mezzanine::Transform const *)arg1)->operator *(arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___div(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator /",1,"Mezzanine::Transform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator /",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___div",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = ((Mezzanine::Transform const *)arg1)->operator /(arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator <=",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator <=",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___le",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___le",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Transform const *)arg1)->operator <=((Mezzanine::Transform const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Transform(void *obj) {
Mezzanine::Transform *arg1 = (Mezzanine::Transform *) obj;
delete arg1;
}
static int _proxy__wrap_new_Transform(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Transform);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Transform_attributes[] = {
    { "Location", _wrap_Transform_Location_get, _wrap_Transform_Location_set },
    { "Rotation", _wrap_Transform_Rotation_get, _wrap_Transform_Rotation_set },
    {0,0,0}
};
static swig_lua_method swig_Transform_methods[]= {
    { "SetIdentity", _wrap_Transform_SetIdentity},
    { "GetBulletTransform", _wrap_Transform_GetBulletTransform},
    { "ExtractBulletTransform", _wrap_Transform_ExtractBulletTransform},
    { "ProtoSerialize", _wrap_Transform_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Transform_ProtoDeSerialize},
    { "__sub", _wrap_Transform___sub},
    { "__add", _wrap_Transform___add},
    { "__mul", _wrap_Transform___mul},
    { "__div", _wrap_Transform___div},
    { "__le", _wrap_Transform___le},
    {0,0}
};
static swig_lua_method swig_Transform_meta[] = {
    { "__sub", _wrap_Transform___sub},
    { "__add", _wrap_Transform___add},
    { "__mul", _wrap_Transform___mul},
    { "__div", _wrap_Transform___div},
    { "__le", _wrap_Transform___le},
    {0,0}
};

static swig_lua_attribute swig_Transform_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Transform_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Transform_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Transform_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Transform_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Transform_Sf_SwigStatic = {
    "Transform",
    swig_Transform_Sf_SwigStatic_methods,
    swig_Transform_Sf_SwigStatic_attributes,
    swig_Transform_Sf_SwigStatic_constants,
    swig_Transform_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Transform_bases[] = {0};
static const char *swig_Transform_base_names[] = {0};
static swig_lua_class _wrap_class_Transform = { "Transform", "Transform", &SWIGTYPE_p_Mezzanine__Transform,_proxy__wrap_new_Transform, swig_delete_Transform, swig_Transform_methods, swig_Transform_attributes, &swig_Transform_Sf_SwigStatic, swig_Transform_meta, swig_Transform_bases, swig_Transform_base_names };

static int _wrap_AttachableBase_ConvertLocalToGlobal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertLocalToGlobal",1,"Mezzanine::AttachableBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertLocalToGlobal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AttachableBase_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertLocalToGlobal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_ConvertGlobalToLocal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertGlobalToLocal",1,"Mezzanine::AttachableBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertGlobalToLocal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AttachableBase_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertGlobalToLocal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_ConvertLocalToGlobal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertLocalToGlobal",1,"Mezzanine::AttachableBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertLocalToGlobal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("AttachableBase_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertLocalToGlobal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_ConvertLocalToGlobal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachableBase_ConvertLocalToGlobal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachableBase_ConvertLocalToGlobal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttachableBase_ConvertLocalToGlobal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AttachableBase::ConvertLocalToGlobal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::AttachableBase::ConvertLocalToGlobal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AttachableBase_ConvertGlobalToLocal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertGlobalToLocal",1,"Mezzanine::AttachableBase const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::ConvertGlobalToLocal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("AttachableBase_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->ConvertGlobalToLocal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_ConvertGlobalToLocal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachableBase_ConvertGlobalToLocal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AttachableBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AttachableBase_ConvertGlobalToLocal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttachableBase_ConvertGlobalToLocal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AttachableBase::ConvertGlobalToLocal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::AttachableBase::ConvertGlobalToLocal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AttachableBase_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::ConstString *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::GetName",1,"Mezzanine::AttachableBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_GetName",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  result = (Mezzanine::ConstString *) &((Mezzanine::AttachableBase const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::WorldObjectType result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::GetType",1,"Mezzanine::AttachableBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_GetType",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  result = (Mezzanine::WorldObjectType)((Mezzanine::AttachableBase const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_SetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::SetLocation",1,"Mezzanine::AttachableBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_SetLocation",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AttachableBase_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::GetLocation",1,"Mezzanine::AttachableBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_GetLocation",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_SetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::SetOrientation",1,"Mezzanine::AttachableBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_SetOrientation",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("AttachableBase_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::GetOrientation",1,"Mezzanine::AttachableBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_GetOrientation",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_SetScaling(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::SetScaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::SetScaling",1,"Mezzanine::AttachableBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableBase::SetScaling",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_SetScaling",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AttachableBase_SetScaling",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScaling((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableBase_GetScaling(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AttachableBase::GetScaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableBase::GetScaling",1,"Mezzanine::AttachableBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableBase,0))){
    SWIG_fail_ptr("AttachableBase_GetScaling",1,SWIGTYPE_p_Mezzanine__AttachableBase);
  }
  
  result = ((Mezzanine::AttachableBase const *)arg1)->GetScaling();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttachableBase(void *obj) {
Mezzanine::AttachableBase *arg1 = (Mezzanine::AttachableBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_AttachableBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttachableBase_methods[]= {
    { "ConvertLocalToGlobal", _wrap_AttachableBase_ConvertLocalToGlobal},
    { "ConvertGlobalToLocal", _wrap_AttachableBase_ConvertGlobalToLocal},
    { "GetName", _wrap_AttachableBase_GetName},
    { "GetType", _wrap_AttachableBase_GetType},
    { "SetLocation", _wrap_AttachableBase_SetLocation},
    { "GetLocation", _wrap_AttachableBase_GetLocation},
    { "SetOrientation", _wrap_AttachableBase_SetOrientation},
    { "GetOrientation", _wrap_AttachableBase_GetOrientation},
    { "SetScaling", _wrap_AttachableBase_SetScaling},
    { "GetScaling", _wrap_AttachableBase_GetScaling},
    {0,0}
};
static swig_lua_method swig_AttachableBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AttachableBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttachableBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttachableBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttachableBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttachableBase_Sf_SwigStatic = {
    "AttachableBase",
    swig_AttachableBase_Sf_SwigStatic_methods,
    swig_AttachableBase_Sf_SwigStatic_attributes,
    swig_AttachableBase_Sf_SwigStatic_constants,
    swig_AttachableBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttachableBase_bases[] = {0};
static const char *swig_AttachableBase_base_names[] = {0};
static swig_lua_class _wrap_class_AttachableBase = { "AttachableBase", "AttachableBase", &SWIGTYPE_p_Mezzanine__AttachableBase,0, swig_delete_AttachableBase, swig_AttachableBase_methods, swig_AttachableBase_attributes, &swig_AttachableBase_Sf_SwigStatic, swig_AttachableBase_meta, swig_AttachableBase_bases, swig_AttachableBase_base_names };

static int _wrap_AttachableParent_AttachObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::AttachableChild *arg2 = (Mezzanine::AttachableChild *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::AttachObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::AttachObject",1,"Mezzanine::AttachableParent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AttachableParent::AttachObject",2,"Mezzanine::AttachableChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_AttachObject",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableParent_AttachObject",2,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  (arg1)->AttachObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent_DetachObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::AttachableChild *arg2 = (Mezzanine::AttachableChild *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::DetachObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::DetachObject",1,"Mezzanine::AttachableParent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AttachableParent::DetachObject",2,"Mezzanine::AttachableChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_DetachObject",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableParent_DetachObject",2,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  (arg1)->DetachObject(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent_DetachAllChildren(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::DetachAllChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::DetachAllChildren",1,"Mezzanine::AttachableParent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_DetachAllChildren",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  (arg1)->DetachAllChildren();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent_GetNumAttached(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::GetNumAttached",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::GetNumAttached",1,"Mezzanine::AttachableParent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_GetNumAttached",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::AttachableParent const *)arg1)->GetNumAttached();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent_GetAttached(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::AttachableChild *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::GetAttached",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::GetAttached",1,"Mezzanine::AttachableParent const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AttachableParent::GetAttached",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_GetAttached",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::AttachableChild *)((Mezzanine::AttachableParent const *)arg1)->GetAttached((Mezzanine::Whole const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AttachableChild,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent_BeginChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  SwigValueWrapper< std::vector< Mezzanine::AttachableChild * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::BeginChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::BeginChild",1,"Mezzanine::AttachableParent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_BeginChild",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  result = (arg1)->BeginChild();
  {
    Mezzanine::AttachableParent::AttachableIterator * resultptr = new Mezzanine::AttachableParent::AttachableIterator((const Mezzanine::AttachableParent::AttachableIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent_EndChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  SwigValueWrapper< std::vector< Mezzanine::AttachableChild * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::EndChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::EndChild",1,"Mezzanine::AttachableParent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent_EndChild",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  result = (arg1)->EndChild();
  {
    Mezzanine::AttachableParent::AttachableIterator * resultptr = new Mezzanine::AttachableParent::AttachableIterator((const Mezzanine::AttachableParent::AttachableIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableParent__RecalculateAllChildTransforms(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableParent::_RecalculateAllChildTransforms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableParent::_RecalculateAllChildTransforms",1,"Mezzanine::AttachableParent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableParent,0))){
    SWIG_fail_ptr("AttachableParent__RecalculateAllChildTransforms",1,SWIGTYPE_p_Mezzanine__AttachableParent);
  }
  
  (arg1)->_RecalculateAllChildTransforms();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttachableParent(void *obj) {
Mezzanine::AttachableParent *arg1 = (Mezzanine::AttachableParent *) obj;
delete arg1;
}
static swig_lua_attribute swig_AttachableParent_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttachableParent_methods[]= {
    { "AttachObject", _wrap_AttachableParent_AttachObject},
    { "DetachObject", _wrap_AttachableParent_DetachObject},
    { "DetachAllChildren", _wrap_AttachableParent_DetachAllChildren},
    { "GetNumAttached", _wrap_AttachableParent_GetNumAttached},
    { "GetAttached", _wrap_AttachableParent_GetAttached},
    { "BeginChild", _wrap_AttachableParent_BeginChild},
    { "EndChild", _wrap_AttachableParent_EndChild},
    { "_RecalculateAllChildTransforms", _wrap_AttachableParent__RecalculateAllChildTransforms},
    {0,0}
};
static swig_lua_method swig_AttachableParent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AttachableParent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttachableParent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttachableParent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttachableParent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttachableParent_Sf_SwigStatic = {
    "AttachableParent",
    swig_AttachableParent_Sf_SwigStatic_methods,
    swig_AttachableParent_Sf_SwigStatic_attributes,
    swig_AttachableParent_Sf_SwigStatic_constants,
    swig_AttachableParent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttachableParent_bases[] = {0,0};
static const char *swig_AttachableParent_base_names[] = {"Mezzanine::AttachableBase *",0};
static swig_lua_class _wrap_class_AttachableParent = { "AttachableParent", "AttachableParent", &SWIGTYPE_p_Mezzanine__AttachableParent,0, swig_delete_AttachableParent, swig_AttachableParent_methods, swig_AttachableParent_attributes, &swig_AttachableParent_Sf_SwigStatic, swig_AttachableParent_meta, swig_AttachableParent_bases, swig_AttachableParent_base_names };

static int _wrap_AttachableChild_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::AttachableParent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::GetParent",1,"Mezzanine::AttachableChild const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild_GetParent",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  result = (Mezzanine::AttachableParent *)((Mezzanine::AttachableChild const *)arg1)->GetParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AttachableParent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild_SetLocalLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::SetLocalLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::SetLocalLocation",1,"Mezzanine::AttachableChild *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableChild::SetLocalLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild_SetLocalLocation",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AttachableChild_SetLocalLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocalLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild_GetLocalLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::GetLocalLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::GetLocalLocation",1,"Mezzanine::AttachableChild const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild_GetLocalLocation",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  result = ((Mezzanine::AttachableChild const *)arg1)->GetLocalLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild_SetLocalOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::SetLocalOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::SetLocalOrientation",1,"Mezzanine::AttachableChild *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AttachableChild::SetLocalOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild_SetLocalOrientation",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("AttachableChild_SetLocalOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetLocalOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild_GetLocalOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::GetLocalOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::GetLocalOrientation",1,"Mezzanine::AttachableChild const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild_GetLocalOrientation",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  result = ((Mezzanine::AttachableChild const *)arg1)->GetLocalOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild__RecalculateGlobalTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::_RecalculateGlobalTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::_RecalculateGlobalTransform",1,"Mezzanine::AttachableChild *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::AttachableChild::_RecalculateGlobalTransform",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild__RecalculateGlobalTransform",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->_RecalculateGlobalTransform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild__RecalculateGlobalTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::_RecalculateGlobalTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::_RecalculateGlobalTransform",1,"Mezzanine::AttachableChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild__RecalculateGlobalTransform",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  (arg1)->_RecalculateGlobalTransform();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttachableChild__RecalculateGlobalTransform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AttachableChild, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttachableChild__RecalculateGlobalTransform__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AttachableChild, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttachableChild__RecalculateGlobalTransform__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttachableChild__RecalculateGlobalTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AttachableChild::_RecalculateGlobalTransform(Mezzanine::Boole)\n"
    "    Mezzanine::AttachableChild::_RecalculateGlobalTransform()\n");
  lua_error(L);return 0;
}


static int _wrap_AttachableChild__RecalculateLocalTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AttachableChild::_RecalculateLocalTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AttachableChild::_RecalculateLocalTransform",1,"Mezzanine::AttachableChild *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AttachableChild,0))){
    SWIG_fail_ptr("AttachableChild__RecalculateLocalTransform",1,SWIGTYPE_p_Mezzanine__AttachableChild);
  }
  
  (arg1)->_RecalculateLocalTransform();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttachableChild(void *obj) {
Mezzanine::AttachableChild *arg1 = (Mezzanine::AttachableChild *) obj;
delete arg1;
}
static swig_lua_attribute swig_AttachableChild_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttachableChild_methods[]= {
    { "GetParent", _wrap_AttachableChild_GetParent},
    { "SetLocalLocation", _wrap_AttachableChild_SetLocalLocation},
    { "GetLocalLocation", _wrap_AttachableChild_GetLocalLocation},
    { "SetLocalOrientation", _wrap_AttachableChild_SetLocalOrientation},
    { "GetLocalOrientation", _wrap_AttachableChild_GetLocalOrientation},
    { "_RecalculateGlobalTransform", _wrap_AttachableChild__RecalculateGlobalTransform},
    { "_RecalculateLocalTransform", _wrap_AttachableChild__RecalculateLocalTransform},
    {0,0}
};
static swig_lua_method swig_AttachableChild_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AttachableChild_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttachableChild_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttachableChild_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttachableChild_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttachableChild_Sf_SwigStatic = {
    "AttachableChild",
    swig_AttachableChild_Sf_SwigStatic_methods,
    swig_AttachableChild_Sf_SwigStatic_attributes,
    swig_AttachableChild_Sf_SwigStatic_constants,
    swig_AttachableChild_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttachableChild_bases[] = {0,0};
static const char *swig_AttachableChild_base_names[] = {"Mezzanine::AttachableBase *",0};
static swig_lua_class _wrap_class_AttachableChild = { "AttachableChild", "AttachableChild", &SWIGTYPE_p_Mezzanine__AttachableChild,0, swig_delete_AttachableChild, swig_AttachableChild_methods, swig_AttachableChild_attributes, &swig_AttachableChild_Sf_SwigStatic, swig_AttachableChild_meta, swig_AttachableChild_bases, swig_AttachableChild_base_names };

static int _wrap_WorldObject_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::WorldObjectType result;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::GetType",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_GetType",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::WorldObjectType)((Mezzanine::WorldObject const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::GetName",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_GetName",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::WorldObject const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::GetWorld",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_GetWorld",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::World *)((Mezzanine::WorldObject const *)arg1)->GetWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_IsInWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldObject::IsInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::IsInWorld",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_IsInWorld",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldObject const *)arg1)->IsInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_IsStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldObject::IsStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::IsStatic",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_IsStatic",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldObject const *)arg1)->IsStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_IsKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldObject::IsKinematic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::IsKinematic",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_IsKinematic",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldObject const *)arg1)->IsKinematic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetProxies__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::WorldObject::ProxyContainer *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::GetProxies",1,"Mezzanine::WorldObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::GetProxies",2,"Mezzanine::WorldObject::ProxyContainer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_GetProxies",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t,0))){
    SWIG_fail_ptr("WorldObject_GetProxies",2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t);
  }
  
  (arg1)->GetProxies(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetProxies__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::WorldObject::ProxyContainer *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetProxies",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::GetProxies",1,"Mezzanine::WorldObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::GetProxies",2,"Mezzanine::UInt32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::WorldObject::GetProxies",3,"Mezzanine::WorldObject::ProxyContainer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_GetProxies",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t,0))){
    SWIG_fail_ptr("WorldObject_GetProxies",3,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t);
  }
  
  (arg1)->GetProxies(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetProxies(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldObject_GetProxies__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldObject_GetProxies__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldObject_GetProxies'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldObject::GetProxies(Mezzanine::WorldObject::ProxyContainer &)\n"
    "    Mezzanine::WorldObject::GetProxies(Mezzanine::UInt32 const,Mezzanine::WorldObject::ProxyContainer &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldObject_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::AddToWorld",1,"Mezzanine::WorldObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_AddToWorld",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::RemoveFromWorld",1,"Mezzanine::WorldObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoSerialize",1,"Mezzanine::WorldObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldObject_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::WorldObject const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoSerializeProperties",1,"Mezzanine::WorldObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoSerializeProperties",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldObject_ProtoSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::WorldObject const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_ProtoSerializeProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::ProtoSerializeProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoSerializeProxies",1,"Mezzanine::WorldObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoSerializeProxies",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_ProtoSerializeProxies",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldObject_ProtoSerializeProxies",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::WorldObject const *)arg1)->ProtoSerializeProxies(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoDeSerialize",1,"Mezzanine::WorldObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldObject_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoDeSerializeProperties",1,"Mezzanine::WorldObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoDeSerializeProperties",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldObject_ProtoDeSerializeProperties",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_ProtoDeSerializeProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::ProtoDeSerializeProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoDeSerializeProxies",1,"Mezzanine::WorldObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::ProtoDeSerializeProxies",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_ProtoDeSerializeProxies",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("WorldObject_ProtoDeSerializeProxies",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProxies((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::GetDerivedSerializableName",1,"Mezzanine::WorldObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  result = ((Mezzanine::WorldObject const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::WorldObject::GetSerializableName",0,0)
  result = Mezzanine::WorldObject::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject__Update(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::_Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::_Update",1,"Mezzanine::WorldObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject__Update",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  (arg1)->_Update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject__NotifyProxyDestroyed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::WorldProxy *arg2 = (Mezzanine::WorldProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::_NotifyProxyDestroyed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::_NotifyProxyDestroyed",1,"Mezzanine::WorldObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::_NotifyProxyDestroyed",2,"Mezzanine::WorldProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject__NotifyProxyDestroyed",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldObject__NotifyProxyDestroyed",2,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  (arg1)->_NotifyProxyDestroyed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldObject__NotifyCollisionState(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) 0 ;
  Mezzanine::Physics::Collision *arg2 = (Mezzanine::Physics::Collision *) 0 ;
  Mezzanine::Physics::CollisionState arg3 ;
  
  SWIG_check_num_args("Mezzanine::WorldObject::_NotifyCollisionState",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldObject::_NotifyCollisionState",1,"Mezzanine::WorldObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldObject::_NotifyCollisionState",2,"Mezzanine::Physics::Collision *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldObject::_NotifyCollisionState",3,"Mezzanine::Physics::CollisionState const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldObject__NotifyCollisionState",1,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__Collision,0))){
    SWIG_fail_ptr("WorldObject__NotifyCollisionState",2,SWIGTYPE_p_Mezzanine__Physics__Collision);
  }
  
  arg3 = (Mezzanine::Physics::CollisionState const)(int)lua_tonumber(L, 3);
  (arg1)->_NotifyCollisionState(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldObject(void *obj) {
Mezzanine::WorldObject *arg1 = (Mezzanine::WorldObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldObject_methods[]= {
    { "GetType", _wrap_WorldObject_GetType},
    { "GetName", _wrap_WorldObject_GetName},
    { "GetWorld", _wrap_WorldObject_GetWorld},
    { "IsInWorld", _wrap_WorldObject_IsInWorld},
    { "IsStatic", _wrap_WorldObject_IsStatic},
    { "IsKinematic", _wrap_WorldObject_IsKinematic},
    { "GetProxies", _wrap_WorldObject_GetProxies},
    { "AddToWorld", _wrap_WorldObject_AddToWorld},
    { "RemoveFromWorld", _wrap_WorldObject_RemoveFromWorld},
    { "ProtoSerialize", _wrap_WorldObject_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_WorldObject_ProtoSerializeProperties},
    { "ProtoSerializeProxies", _wrap_WorldObject_ProtoSerializeProxies},
    { "ProtoDeSerialize", _wrap_WorldObject_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_WorldObject_ProtoDeSerializeProperties},
    { "ProtoDeSerializeProxies", _wrap_WorldObject_ProtoDeSerializeProxies},
    { "GetDerivedSerializableName", _wrap_WorldObject_GetDerivedSerializableName},
    { "_Update", _wrap_WorldObject__Update},
    { "_NotifyProxyDestroyed", _wrap_WorldObject__NotifyProxyDestroyed},
    { "_NotifyCollisionState", _wrap_WorldObject__NotifyCollisionState},
    {0,0}
};
static swig_lua_method swig_WorldObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldObject_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_WorldObject_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_WorldObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldObject_Sf_SwigStatic = {
    "WorldObject",
    swig_WorldObject_Sf_SwigStatic_methods,
    swig_WorldObject_Sf_SwigStatic_attributes,
    swig_WorldObject_Sf_SwigStatic_constants,
    swig_WorldObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldObject_bases[] = {0,0};
static const char *swig_WorldObject_base_names[] = {"Mezzanine::TransformableObject *",0};
static swig_lua_class _wrap_class_WorldObject = { "WorldObject", "WorldObject", &SWIGTYPE_p_Mezzanine__WorldObject,0, swig_delete_WorldObject, swig_WorldObject_methods, swig_WorldObject_attributes, &swig_WorldObject_Sf_SwigStatic, swig_WorldObject_meta, swig_WorldObject_bases, swig_WorldObject_base_names };

static void swig_delete_Actor(void *obj) {
Mezzanine::Actor *arg1 = (Mezzanine::Actor *) obj;
delete arg1;
}
static swig_lua_attribute swig_Actor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Actor_methods[]= {
    {0,0}
};
static swig_lua_method swig_Actor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Actor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Actor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Actor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Actor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Actor_Sf_SwigStatic = {
    "Actor",
    swig_Actor_Sf_SwigStatic_methods,
    swig_Actor_Sf_SwigStatic_attributes,
    swig_Actor_Sf_SwigStatic_constants,
    swig_Actor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Actor_bases[] = {0,0};
static const char *swig_Actor_base_names[] = {"Mezzanine::WorldObject *",0};
static swig_lua_class _wrap_class_Actor = { "Actor", "Actor", &SWIGTYPE_p_Mezzanine__Actor,0, swig_delete_Actor, swig_Actor_methods, swig_Actor_attributes, &swig_Actor_Sf_SwigStatic, swig_Actor_meta, swig_Actor_bases, swig_Actor_base_names };

static int _wrap_ActorFactory_GetTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorFactory *arg1 = (Mezzanine::ActorFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ActorFactory::GetTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorFactory::GetTypeName",1,"Mezzanine::ActorFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorFactory_GetTypeName",1,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  result = ((Mezzanine::ActorFactory const *)arg1)->GetTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorFactory_CreateActor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorFactory *arg1 = (Mezzanine::ActorFactory *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorFactory::CreateActor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",1,"Mezzanine::ActorFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",3,"Mezzanine::World *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorFactory_CreateActor",1,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("ActorFactory_CreateActor",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("ActorFactory_CreateActor",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Actor *)(arg1)->CreateActor((Mezzanine::String const &)*arg2,arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorFactory_CreateActor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorFactory *arg1 = (Mezzanine::ActorFactory *) 0 ;
  XML::Node *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorFactory::CreateActor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",1,"Mezzanine::ActorFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",2,"XML::Node const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::ActorFactory::CreateActor",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorFactory_CreateActor",1,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("ActorFactory_CreateActor",2,SWIGTYPE_p_XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("ActorFactory_CreateActor",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Actor *)(arg1)->CreateActor((XML::Node const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorFactory_CreateActor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ActorFactory_CreateActor__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ActorFactory_CreateActor__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ActorFactory_CreateActor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorFactory::CreateActor(Mezzanine::String const &,Mezzanine::World *,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::ActorFactory::CreateActor(XML::Node const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorFactory_DestroyActor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorFactory *arg1 = (Mezzanine::ActorFactory *) 0 ;
  Mezzanine::Actor *arg2 = (Mezzanine::Actor *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorFactory::DestroyActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorFactory::DestroyActor",1,"Mezzanine::ActorFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ActorFactory::DestroyActor",2,"Mezzanine::Actor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorFactory_DestroyActor",1,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Actor,0))){
    SWIG_fail_ptr("ActorFactory_DestroyActor",2,SWIGTYPE_p_Mezzanine__Actor);
  }
  
  (arg1)->DestroyActor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActorFactory(void *obj) {
Mezzanine::ActorFactory *arg1 = (Mezzanine::ActorFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_ActorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActorFactory_methods[]= {
    { "GetTypeName", _wrap_ActorFactory_GetTypeName},
    { "CreateActor", _wrap_ActorFactory_CreateActor},
    { "DestroyActor", _wrap_ActorFactory_DestroyActor},
    {0,0}
};
static swig_lua_method swig_ActorFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ActorFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ActorFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ActorFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ActorFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ActorFactory_Sf_SwigStatic = {
    "ActorFactory",
    swig_ActorFactory_Sf_SwigStatic_methods,
    swig_ActorFactory_Sf_SwigStatic_attributes,
    swig_ActorFactory_Sf_SwigStatic_constants,
    swig_ActorFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ActorFactory_bases[] = {0};
static const char *swig_ActorFactory_base_names[] = {0};
static swig_lua_class _wrap_class_ActorFactory = { "ActorFactory", "ActorFactory", &SWIGTYPE_p_Mezzanine__ActorFactory,0, swig_delete_ActorFactory, swig_ActorFactory_methods, swig_ActorFactory_attributes, &swig_ActorFactory_Sf_SwigStatic, swig_ActorFactory_meta, swig_ActorFactory_bases, swig_ActorFactory_base_names };

static int _wrap_ManagerBase_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::Initialize",1,"Mezzanine::ManagerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_Initialize",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::Deinitialize",1,"Mezzanine::ManagerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_Deinitialize",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_IsInitialized(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::IsInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::IsInitialized",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_IsInitialized",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::ManagerBase const *)arg1)->IsInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetInterfaceType",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::ManagerBase const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetImplementationTypeName",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = ((Mezzanine::ManagerBase const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetInterfaceTypeAsString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetInterfaceTypeAsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetInterfaceTypeAsString",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_GetInterfaceTypeAsString",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = ((Mezzanine::ManagerBase const *)arg1)->GetInterfaceTypeAsString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetTypeAsString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType *arg1 = 0 ;
  Mezzanine::ManagerBase::ManagerType temp1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetTypeAsString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetTypeAsString",1,"Mezzanine::ManagerBase::ManagerType const &");
  temp1=(Mezzanine::ManagerBase::ManagerType)(int)lua_tonumber(L,1); arg1=&temp1;
  result = Mezzanine::ManagerBase::GetTypeAsString((enum Mezzanine::ManagerBase::ManagerType const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetTypeFromString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetTypeFromString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetTypeFromString",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::ManagerBase::ManagerType)Mezzanine::ManagerBase::GetTypeFromString((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagerBase(void *obj) {
Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_ManagerBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ManagerBase_methods[]= {
    { "Initialize", _wrap_ManagerBase_Initialize},
    { "Deinitialize", _wrap_ManagerBase_Deinitialize},
    { "IsInitialized", _wrap_ManagerBase_IsInitialized},
    { "GetInterfaceType", _wrap_ManagerBase_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_ManagerBase_GetImplementationTypeName},
    { "GetInterfaceTypeAsString", _wrap_ManagerBase_GetInterfaceTypeAsString},
    {0,0}
};
static swig_lua_method swig_ManagerBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagerBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagerBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MT_Undefined", Mezzanine::ManagerBase::MT_Undefined)},
    {SWIG_LUA_CONSTTAB_INT("MT_AudioManager", Mezzanine::ManagerBase::MT_AudioManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_AnimationManager", Mezzanine::ManagerBase::MT_AnimationManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_CollisionShapeManager", Mezzanine::ManagerBase::MT_CollisionShapeManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_CompositorManager", Mezzanine::ManagerBase::MT_CompositorManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_GraphicsManager", Mezzanine::ManagerBase::MT_GraphicsManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_EventManager", Mezzanine::ManagerBase::MT_EventManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_InputManager", Mezzanine::ManagerBase::MT_InputManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_LogManager", Mezzanine::ManagerBase::MT_LogManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_MaterialManager", Mezzanine::ManagerBase::MT_MaterialManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_MeshManager", Mezzanine::ManagerBase::MT_MeshManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_NetworkManager", Mezzanine::ManagerBase::MT_NetworkManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_ResourceManager", Mezzanine::ManagerBase::MT_ResourceManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_ScriptingManager", Mezzanine::ManagerBase::MT_ScriptingManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_TextureManager", Mezzanine::ManagerBase::MT_TextureManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_UIManager", Mezzanine::ManagerBase::MT_UIManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_ActorManager", Mezzanine::ManagerBase::MT_ActorManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_AreaEffectManager", Mezzanine::ManagerBase::MT_AreaEffectManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_DebrisManager", Mezzanine::ManagerBase::MT_DebrisManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_PagingManager", Mezzanine::ManagerBase::MT_PagingManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_PhysicsManager", Mezzanine::ManagerBase::MT_PhysicsManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_SceneManager", Mezzanine::ManagerBase::MT_SceneManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_SoundScapeManager", Mezzanine::ManagerBase::MT_SoundScapeManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_TerrainManager", Mezzanine::ManagerBase::MT_TerrainManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_VehicleManager", Mezzanine::ManagerBase::MT_VehicleManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_UserCreated", Mezzanine::ManagerBase::MT_UserCreated)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagerBase_Sf_SwigStatic_methods[]= {
    { "GetTypeAsString", _wrap_ManagerBase_GetTypeAsString},
    { "GetTypeFromString", _wrap_ManagerBase_GetTypeFromString},
    {0,0}
};
static swig_lua_class* swig_ManagerBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagerBase_Sf_SwigStatic = {
    "ManagerBase",
    swig_ManagerBase_Sf_SwigStatic_methods,
    swig_ManagerBase_Sf_SwigStatic_attributes,
    swig_ManagerBase_Sf_SwigStatic_constants,
    swig_ManagerBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagerBase_bases[] = {0};
static const char *swig_ManagerBase_base_names[] = {0};
static swig_lua_class _wrap_class_ManagerBase = { "ManagerBase", "ManagerBase", &SWIGTYPE_p_Mezzanine__ManagerBase,0, swig_delete_ManagerBase, swig_ManagerBase_methods, swig_ManagerBase_attributes, &swig_ManagerBase_Sf_SwigStatic, swig_ManagerBase_meta, swig_ManagerBase_bases, swig_ManagerBase_base_names };

static int _wrap_WorldManager_GetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManager::GetWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::GetWorld",1,"Mezzanine::WorldManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_GetWorld",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  result = (Mezzanine::World *)((Mezzanine::WorldManager const *)arg1)->GetWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::Pause",1,"Mezzanine::WorldManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_Pause",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManager_IsPaused(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldManager::IsPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::IsPaused",1,"Mezzanine::WorldManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_IsPaused",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldManager const *)arg1)->IsPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::Initialize",1,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_Initialize",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldManager(void *obj) {
Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldManager_methods[]= {
    { "GetWorld", _wrap_WorldManager_GetWorld},
    { "Pause", _wrap_WorldManager_Pause},
    { "IsPaused", _wrap_WorldManager_IsPaused},
    { "Initialize", _wrap_WorldManager_Initialize},
    {0,0}
};
static swig_lua_method swig_WorldManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldManager_Sf_SwigStatic = {
    "WorldManager",
    swig_WorldManager_Sf_SwigStatic_methods,
    swig_WorldManager_Sf_SwigStatic_attributes,
    swig_WorldManager_Sf_SwigStatic_constants,
    swig_WorldManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldManager_bases[] = {0,0};
static const char *swig_WorldManager_base_names[] = {"Mezzanine::ManagerBase *",0};
static swig_lua_class _wrap_class_WorldManager = { "WorldManager", "WorldManager", &SWIGTYPE_p_Mezzanine__WorldManager,0, swig_delete_WorldManager, swig_WorldManager_methods, swig_WorldManager_attributes, &swig_WorldManager_Sf_SwigStatic, swig_WorldManager_meta, swig_WorldManager_bases, swig_WorldManager_base_names };

static int _wrap_ManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerFactory *arg1 = (Mezzanine::ManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerFactory::GetManagerImplName",1,"Mezzanine::ManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerFactory,0))){
    SWIG_fail_ptr("ManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__ManagerFactory);
  }
  
  result = ((Mezzanine::ManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerFactory *arg1 = (Mezzanine::ManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerFactory::GetManagerType",1,"Mezzanine::ManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerFactory,0))){
    SWIG_fail_ptr("ManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__ManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::ManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagerFactory(void *obj) {
Mezzanine::ManagerFactory *arg1 = (Mezzanine::ManagerFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_ManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_ManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_ManagerFactory_GetManagerType},
    {0,0}
};
static swig_lua_method swig_ManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagerFactory_Sf_SwigStatic = {
    "ManagerFactory",
    swig_ManagerFactory_Sf_SwigStatic_methods,
    swig_ManagerFactory_Sf_SwigStatic_attributes,
    swig_ManagerFactory_Sf_SwigStatic_constants,
    swig_ManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagerFactory_bases[] = {0};
static const char *swig_ManagerFactory_base_names[] = {0};
static swig_lua_class _wrap_class_ManagerFactory = { "ManagerFactory", "ManagerFactory", &SWIGTYPE_p_Mezzanine__ManagerFactory,0, swig_delete_ManagerFactory, swig_ManagerFactory_methods, swig_ManagerFactory_attributes, &swig_ManagerFactory_Sf_SwigStatic, swig_ManagerFactory_meta, swig_ManagerFactory_bases, swig_ManagerFactory_base_names };

static int _wrap_WorldManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",1,"Mezzanine::WorldManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",1,"Mezzanine::WorldManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::WorldManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::DestroyManager",1,"Mezzanine::WorldManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("WorldManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldManagerFactory(void *obj) {
Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldManagerFactory_methods[]= {
    { "CreateManager", _wrap_WorldManagerFactory_CreateManager},
    { "DestroyManager", _wrap_WorldManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_WorldManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldManagerFactory_Sf_SwigStatic = {
    "WorldManagerFactory",
    swig_WorldManagerFactory_Sf_SwigStatic_methods,
    swig_WorldManagerFactory_Sf_SwigStatic_attributes,
    swig_WorldManagerFactory_Sf_SwigStatic_constants,
    swig_WorldManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldManagerFactory_bases[] = {0,0};
static const char *swig_WorldManagerFactory_base_names[] = {"Mezzanine::ManagerFactory *",0};
static swig_lua_class _wrap_class_WorldManagerFactory = { "WorldManagerFactory", "WorldManagerFactory", &SWIGTYPE_p_Mezzanine__WorldManagerFactory,0, swig_delete_WorldManagerFactory, swig_WorldManagerFactory_methods, swig_WorldManagerFactory_attributes, &swig_WorldManagerFactory_Sf_SwigStatic, swig_WorldManagerFactory_meta, swig_WorldManagerFactory_bases, swig_WorldManagerFactory_base_names };

static int _wrap_new_ActorUpdateWorkUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::ActorUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorUpdateWorkUnit::ActorUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorUpdateWorkUnit::ActorUpdateWorkUnit",1,"Mezzanine::ActorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("new_ActorUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  result = (Mezzanine::ActorUpdateWorkUnit *)new Mezzanine::ActorUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActorUpdateWorkUnit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ActorUpdateWorkUnit__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ActorUpdateWorkUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorUpdateWorkUnit::ActorUpdateWorkUnit(Mezzanine::ActorManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorUpdateWorkUnit *arg1 = (Mezzanine::ActorUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorUpdateWorkUnit::DoWork",1,"Mezzanine::ActorUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ActorUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,0))){
    SWIG_fail_ptr("ActorUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("ActorUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActorUpdateWorkUnit(void *obj) {
Mezzanine::ActorUpdateWorkUnit *arg1 = (Mezzanine::ActorUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_ActorUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ActorUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ActorUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActorUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_ActorUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_ActorUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ActorUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ActorUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ActorUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ActorUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ActorUpdateWorkUnit_Sf_SwigStatic = {
    "ActorUpdateWorkUnit",
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ActorUpdateWorkUnit_bases[] = {0};
static const char *swig_ActorUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_ActorUpdateWorkUnit = { "ActorUpdateWorkUnit", "ActorUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,_proxy__wrap_new_ActorUpdateWorkUnit, swig_delete_ActorUpdateWorkUnit, swig_ActorUpdateWorkUnit_methods, swig_ActorUpdateWorkUnit_attributes, &swig_ActorUpdateWorkUnit_Sf_SwigStatic, swig_ActorUpdateWorkUnit_meta, swig_ActorUpdateWorkUnit_bases, swig_ActorUpdateWorkUnit_base_names };

static int _wrap_ActorManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::ActorManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ActorManager::InterfaceType",0,0)
  result = (Mezzanine::ManagerBase::ManagerType)(Mezzanine::ManagerBase::ManagerType)Mezzanine::ActorManager::InterfaceType;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActorManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::ActorManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::ActorManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::ActorManager",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_ActorManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::ActorManager *)new Mezzanine::ActorManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ActorManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActorManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::ActorManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::ActorManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::ActorManager",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::ActorManager",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_ActorManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_ActorManager",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::ActorManager *)new Mezzanine::ActorManager(arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ActorManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ActorManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ActorManager__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ActorManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ActorManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorManager::ActorManager(Mezzanine::World *)\n"
    "    Mezzanine::ActorManager::ActorManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorManager_CreateActor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::CreateActor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::CreateActor",1,"Mezzanine::ActorManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::CreateActor",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ActorManager::CreateActor",3,"Mezzanine::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::ActorManager::CreateActor",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_CreateActor",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("ActorManager_CreateActor",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Actor *)(arg1)->CreateActor((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_CreateActor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::CreateActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::CreateActor",1,"Mezzanine::ActorManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::CreateActor",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_CreateActor",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("ActorManager_CreateActor",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::Actor *)(arg1)->CreateActor((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_CreateActor(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActorManager_CreateActor__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ActorManager_CreateActor__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ActorManager_CreateActor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorManager::CreateActor(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::ActorManager::CreateActor(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorManager_GetActor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::GetActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::GetActor",1,"Mezzanine::ActorManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::GetActor",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_GetActor",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::Actor *)((Mezzanine::ActorManager const *)arg1)->GetActor(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_GetActor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::GetActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::GetActor",1,"Mezzanine::ActorManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::GetActor",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_GetActor",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Actor *)((Mezzanine::ActorManager const *)arg1)->GetActor((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_GetActor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActorManager_GetActor__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActorManager_GetActor__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ActorManager_GetActor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorManager::GetActor(Mezzanine::Whole const) const\n"
    "    Mezzanine::ActorManager::GetActor(Mezzanine::String const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ActorManager_GetNumActors(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ActorManager::GetNumActors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::GetNumActors",1,"Mezzanine::ActorManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_GetNumActors",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ActorManager const *)arg1)->GetNumActors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_DestroyActor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::DestroyActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActor",1,"Mezzanine::ActorManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActor",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_DestroyActor",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->DestroyActor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_DestroyActor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::Actor *arg2 = (Mezzanine::Actor *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::DestroyActor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActor",1,"Mezzanine::ActorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActor",2,"Mezzanine::Actor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_DestroyActor",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Actor,0))){
    SWIG_fail_ptr("ActorManager_DestroyActor",2,SWIGTYPE_p_Mezzanine__Actor);
  }
  
  (arg1)->DestroyActor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_DestroyActor(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Actor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActorManager_DestroyActor__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActorManager_DestroyActor__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ActorManager_DestroyActor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorManager::DestroyActor(Mezzanine::Whole const)\n"
    "    Mezzanine::ActorManager::DestroyActor(Mezzanine::Actor *)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorManager_DestroyAllActors(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::DestroyAllActors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyAllActors",1,"Mezzanine::ActorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_DestroyAllActors",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  (arg1)->DestroyAllActors();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_AddActorFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::ActorFactory *arg2 = (Mezzanine::ActorFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::AddActorFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::AddActorFactory",1,"Mezzanine::ActorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::AddActorFactory",2,"Mezzanine::ActorFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_AddActorFactory",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorManager_AddActorFactory",2,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  (arg1)->AddActorFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_RemoveActorFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::ActorFactory *arg2 = (Mezzanine::ActorFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::RemoveActorFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::RemoveActorFactory",1,"Mezzanine::ActorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::RemoveActorFactory",2,"Mezzanine::ActorFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_RemoveActorFactory",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorManager_RemoveActorFactory",2,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  (arg1)->RemoveActorFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_RemoveActorFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::RemoveActorFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::RemoveActorFactory",1,"Mezzanine::ActorManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::RemoveActorFactory",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_RemoveActorFactory",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->RemoveActorFactory((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_RemoveActorFactory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorFactory, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActorManager_RemoveActorFactory__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActorManager_RemoveActorFactory__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ActorManager_RemoveActorFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorManager::RemoveActorFactory(Mezzanine::ActorFactory *)\n"
    "    Mezzanine::ActorManager::RemoveActorFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorManager_DestroyActorFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::ActorFactory *arg2 = (Mezzanine::ActorFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::DestroyActorFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActorFactory",1,"Mezzanine::ActorManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActorFactory",2,"Mezzanine::ActorFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_DestroyActorFactory",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ActorFactory,0))){
    SWIG_fail_ptr("ActorManager_DestroyActorFactory",2,SWIGTYPE_p_Mezzanine__ActorFactory);
  }
  
  (arg1)->DestroyActorFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_DestroyActorFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::DestroyActorFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActorFactory",1,"Mezzanine::ActorManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyActorFactory",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_DestroyActorFactory",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->DestroyActorFactory((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_DestroyActorFactory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorFactory, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ActorManager_DestroyActorFactory__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ActorManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ActorManager_DestroyActorFactory__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ActorManager_DestroyActorFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ActorManager::DestroyActorFactory(Mezzanine::ActorFactory *)\n"
    "    Mezzanine::ActorManager::DestroyActorFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ActorManager_DestroyAllActorFactories(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::DestroyAllActorFactories",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::DestroyAllActorFactories",1,"Mezzanine::ActorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_DestroyAllActorFactories",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  (arg1)->DestroyAllActorFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::Pause",1,"Mezzanine::ActorManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ActorManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_Pause",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::Initialize",1,"Mezzanine::ActorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_Initialize",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::Deinitialize",1,"Mezzanine::ActorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_GetActorUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::ActorUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorManager::GetActorUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::GetActorUpdateWork",1,"Mezzanine::ActorManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_GetActorUpdateWork",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  result = (Mezzanine::ActorUpdateWorkUnit *)(arg1)->GetActorUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ActorManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::GetInterfaceType",1,"Mezzanine::ActorManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::ActorManager const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ActorManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorManager::GetImplementationTypeName",1,"Mezzanine::ActorManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorManager,0))){
    SWIG_fail_ptr("ActorManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__ActorManager);
  }
  
  result = ((Mezzanine::ActorManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActorManager(void *obj) {
Mezzanine::ActorManager *arg1 = (Mezzanine::ActorManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_ActorManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ActorManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ActorManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActorManager_methods[]= {
    { "CreateActor", _wrap_ActorManager_CreateActor},
    { "GetActor", _wrap_ActorManager_GetActor},
    { "GetNumActors", _wrap_ActorManager_GetNumActors},
    { "DestroyActor", _wrap_ActorManager_DestroyActor},
    { "DestroyAllActors", _wrap_ActorManager_DestroyAllActors},
    { "AddActorFactory", _wrap_ActorManager_AddActorFactory},
    { "RemoveActorFactory", _wrap_ActorManager_RemoveActorFactory},
    { "DestroyActorFactory", _wrap_ActorManager_DestroyActorFactory},
    { "DestroyAllActorFactories", _wrap_ActorManager_DestroyAllActorFactories},
    { "Pause", _wrap_ActorManager_Pause},
    { "Initialize", _wrap_ActorManager_Initialize},
    { "Deinitialize", _wrap_ActorManager_Deinitialize},
    { "GetActorUpdateWork", _wrap_ActorManager_GetActorUpdateWork},
    { "GetInterfaceType", _wrap_ActorManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_ActorManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_ActorManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ActorManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_ActorManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_ActorManager_InterfaceType_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_ActorManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ActorManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ActorManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ActorManager_Sf_SwigStatic = {
    "ActorManager",
    swig_ActorManager_Sf_SwigStatic_methods,
    swig_ActorManager_Sf_SwigStatic_attributes,
    swig_ActorManager_Sf_SwigStatic_constants,
    swig_ActorManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ActorManager_bases[] = {0,0};
static const char *swig_ActorManager_base_names[] = {"Mezzanine::WorldManager *",0};
static swig_lua_class _wrap_class_ActorManager = { "ActorManager", "ActorManager", &SWIGTYPE_p_Mezzanine__ActorManager,_proxy__wrap_new_ActorManager, swig_delete_ActorManager, swig_ActorManager_methods, swig_ActorManager_attributes, &swig_ActorManager_Sf_SwigStatic, swig_ActorManager_meta, swig_ActorManager_bases, swig_ActorManager_base_names };

static int _wrap_new_DefaultActorManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultActorManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultActorManagerFactory::DefaultActorManagerFactory",0,0)
  result = (Mezzanine::DefaultActorManagerFactory *)new Mezzanine::DefaultActorManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultActorManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultActorManagerFactory *arg1 = (Mezzanine::DefaultActorManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DefaultActorManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::GetManagerImplName",1,"Mezzanine::DefaultActorManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory);
  }
  
  result = ((Mezzanine::DefaultActorManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultActorManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultActorManagerFactory *arg1 = (Mezzanine::DefaultActorManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DefaultActorManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::GetManagerType",1,"Mezzanine::DefaultActorManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::DefaultActorManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultActorManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultActorManagerFactory *arg1 = (Mezzanine::DefaultActorManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultActorManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::CreateManager",1,"Mezzanine::DefaultActorManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultActorManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultActorManagerFactory *arg1 = (Mezzanine::DefaultActorManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultActorManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::CreateManager",1,"Mezzanine::DefaultActorManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultActorManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultActorManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultActorManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultActorManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DefaultActorManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::DefaultActorManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultActorManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultActorManagerFactory *arg1 = (Mezzanine::DefaultActorManagerFactory *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultActorManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::DestroyManager",1,"Mezzanine::DefaultActorManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultActorManagerFactory::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("DefaultActorManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultActorManagerFactory(void *obj) {
Mezzanine::DefaultActorManagerFactory *arg1 = (Mezzanine::DefaultActorManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultActorManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultActorManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultActorManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultActorManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultActorManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultActorManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultActorManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultActorManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultActorManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultActorManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultActorManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultActorManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultActorManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultActorManagerFactory_Sf_SwigStatic = {
    "DefaultActorManagerFactory",
    swig_DefaultActorManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultActorManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultActorManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultActorManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultActorManagerFactory_bases[] = {0,0};
static const char *swig_DefaultActorManagerFactory_base_names[] = {"Mezzanine::WorldManagerFactory *",0};
static swig_lua_class _wrap_class_DefaultActorManagerFactory = { "DefaultActorManagerFactory", "DefaultActorManagerFactory", &SWIGTYPE_p_Mezzanine__DefaultActorManagerFactory,_proxy__wrap_new_DefaultActorManagerFactory, swig_delete_DefaultActorManagerFactory, swig_DefaultActorManagerFactory_methods, swig_DefaultActorManagerFactory_attributes, &swig_DefaultActorManagerFactory_Sf_SwigStatic, swig_DefaultActorManagerFactory_meta, swig_DefaultActorManagerFactory_bases, swig_DefaultActorManagerFactory_base_names };

static int _wrap_new_ColourValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",4,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",3,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",2,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",0,0)
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("new_ColourValue",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Mezzanine::ColourValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_ColourValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ColourValue__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ColourValue__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ColourValue__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ColourValue__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ColourValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real,Mezzanine::Real,Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real,Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue()\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::ColourValue const &)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ColourValue_GetOgreColourValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Ogre::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetOgreColourValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetOgreColourValue",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetOgreColourValue",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = ((Mezzanine::ColourValue const *)arg1)->GetOgreColourValue();
  {
    Ogre::ColourValue * resultptr = new Ogre::ColourValue((const Ogre::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetRedChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetRedChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetRedChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetRedChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetRedChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRedChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetRedChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetRedChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetRedChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetRedChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetRedChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetGreenChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetGreenChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetGreenChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetGreenChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetGreenChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetGreenChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetGreenChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetGreenChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetGreenChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetGreenChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetGreenChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetBlueChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetBlueChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetBlueChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetBlueChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetBlueChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetBlueChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetBlueChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetBlueChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetBlueChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetBlueChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetBlueChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetAlphaChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetAlphaChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetAlphaChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetAlphaChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetAlphaChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetAlphaChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetAlphaChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetAlphaChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetAlphaChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetAlphaChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetAlphaChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetValues",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetValues",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetValues(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Average(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Average",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::Average",1,"Mezzanine::ColourValue const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::Average",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_Average",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_Average",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = ((Mezzanine::ColourValue const *)arg1)->Average((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___mul",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator +",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator +",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___add",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___add",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (arg1)->operator +((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator -",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator -",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___sub",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___sub",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (arg1)->operator -((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___mul",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___mul",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (arg1)->operator *((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColourValue___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ColourValue___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColourValue___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ColourValue::operator *(Mezzanine::Real const)\n"
    "    Mezzanine::ColourValue::operator *(Mezzanine::ColourValue const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ColourValue___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator ==",1,"Mezzanine::ColourValue const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator ==",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___eq",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___eq",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::ColourValue const *)arg1)->operator ==((Mezzanine::ColourValue const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Transparent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Transparent",0,0)
  result = Mezzanine::ColourValue::Transparent();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_AliceBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::AliceBlue",0,0)
  result = Mezzanine::ColourValue::AliceBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_AntiqueWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::AntiqueWhite",0,0)
  result = Mezzanine::ColourValue::AntiqueWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Aqua(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Aqua",0,0)
  result = Mezzanine::ColourValue::Aqua();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Aquamarine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Aquamarine",0,0)
  result = Mezzanine::ColourValue::Aquamarine();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Azure(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Azure",0,0)
  result = Mezzanine::ColourValue::Azure();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Beige(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Beige",0,0)
  result = Mezzanine::ColourValue::Beige();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Bisque(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Bisque",0,0)
  result = Mezzanine::ColourValue::Bisque();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Black(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Black",0,0)
  result = Mezzanine::ColourValue::Black();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Blanchedalmond(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Blanchedalmond",0,0)
  result = Mezzanine::ColourValue::Blanchedalmond();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Blue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Blue",0,0)
  result = Mezzanine::ColourValue::Blue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_BlueViolet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::BlueViolet",0,0)
  result = Mezzanine::ColourValue::BlueViolet();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Brown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Brown",0,0)
  result = Mezzanine::ColourValue::Brown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_BurlyWood(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::BurlyWood",0,0)
  result = Mezzanine::ColourValue::BurlyWood();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_CadetBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::CadetBlue",0,0)
  result = Mezzanine::ColourValue::CadetBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Chartreuse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Chartreuse",0,0)
  result = Mezzanine::ColourValue::Chartreuse();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Chocolate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Chocolate",0,0)
  result = Mezzanine::ColourValue::Chocolate();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Coral(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Coral",0,0)
  result = Mezzanine::ColourValue::Coral();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_CornFlowerBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::CornFlowerBlue",0,0)
  result = Mezzanine::ColourValue::CornFlowerBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_CornSilk(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::CornSilk",0,0)
  result = Mezzanine::ColourValue::CornSilk();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Crimson(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Crimson",0,0)
  result = Mezzanine::ColourValue::Crimson();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Cyan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Cyan",0,0)
  result = Mezzanine::ColourValue::Cyan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkBlue",0,0)
  result = Mezzanine::ColourValue::DarkBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkCyan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkCyan",0,0)
  result = Mezzanine::ColourValue::DarkCyan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkGoldenRod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkGoldenRod",0,0)
  result = Mezzanine::ColourValue::DarkGoldenRod();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkGray",0,0)
  result = Mezzanine::ColourValue::DarkGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkGreen",0,0)
  result = Mezzanine::ColourValue::DarkGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkKhaki(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkKhaki",0,0)
  result = Mezzanine::ColourValue::DarkKhaki();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkMagenta(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkMagenta",0,0)
  result = Mezzanine::ColourValue::DarkMagenta();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkOliveGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkOliveGreen",0,0)
  result = Mezzanine::ColourValue::DarkOliveGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkOrange(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkOrange",0,0)
  result = Mezzanine::ColourValue::DarkOrange();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkOrchid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkOrchid",0,0)
  result = Mezzanine::ColourValue::DarkOrchid();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkRed",0,0)
  result = Mezzanine::ColourValue::DarkRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSalmon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSalmon",0,0)
  result = Mezzanine::ColourValue::DarkSalmon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSeaGreen",0,0)
  result = Mezzanine::ColourValue::DarkSeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSlateBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSlateBlue",0,0)
  result = Mezzanine::ColourValue::DarkSlateBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSlateGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSlateGray",0,0)
  result = Mezzanine::ColourValue::DarkSlateGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkTurquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkTurquoise",0,0)
  result = Mezzanine::ColourValue::DarkTurquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkViolet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkViolet",0,0)
  result = Mezzanine::ColourValue::DarkViolet();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DeepPink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DeepPink",0,0)
  result = Mezzanine::ColourValue::DeepPink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DeepSkyBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DeepSkyBlue",0,0)
  result = Mezzanine::ColourValue::DeepSkyBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DimGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DimGray",0,0)
  result = Mezzanine::ColourValue::DimGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DodgerBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DodgerBlue",0,0)
  result = Mezzanine::ColourValue::DodgerBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_FireBrick(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::FireBrick",0,0)
  result = Mezzanine::ColourValue::FireBrick();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_FloralWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::FloralWhite",0,0)
  result = Mezzanine::ColourValue::FloralWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_ForestGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ForestGreen",0,0)
  result = Mezzanine::ColourValue::ForestGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Fuchsia(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Fuchsia",0,0)
  result = Mezzanine::ColourValue::Fuchsia();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Gainsboro(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Gainsboro",0,0)
  result = Mezzanine::ColourValue::Gainsboro();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GhostWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GhostWhite",0,0)
  result = Mezzanine::ColourValue::GhostWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Gold(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Gold",0,0)
  result = Mezzanine::ColourValue::Gold();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GoldenRod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GoldenRod",0,0)
  result = Mezzanine::ColourValue::GoldenRod();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Gray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Gray",0,0)
  result = Mezzanine::ColourValue::Gray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Green(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Green",0,0)
  result = Mezzanine::ColourValue::Green();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GreenYellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GreenYellow",0,0)
  result = Mezzanine::ColourValue::GreenYellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_HoneyDew(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::HoneyDew",0,0)
  result = Mezzanine::ColourValue::HoneyDew();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_HotPink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::HotPink",0,0)
  result = Mezzanine::ColourValue::HotPink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_IndianRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::IndianRed",0,0)
  result = Mezzanine::ColourValue::IndianRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Indigo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Indigo",0,0)
  result = Mezzanine::ColourValue::Indigo();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Ivory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Ivory",0,0)
  result = Mezzanine::ColourValue::Ivory();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Khaki(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Khaki",0,0)
  result = Mezzanine::ColourValue::Khaki();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Lavender(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Lavender",0,0)
  result = Mezzanine::ColourValue::Lavender();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LavenderBlush(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LavenderBlush",0,0)
  result = Mezzanine::ColourValue::LavenderBlush();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LawnGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LawnGreen",0,0)
  result = Mezzanine::ColourValue::LawnGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LemonChiffon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LemonChiffon",0,0)
  result = Mezzanine::ColourValue::LemonChiffon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightBlue",0,0)
  result = Mezzanine::ColourValue::LightBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightCoral(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightCoral",0,0)
  result = Mezzanine::ColourValue::LightCoral();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightCyan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightCyan",0,0)
  result = Mezzanine::ColourValue::LightCyan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightGoldenRodYellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightGoldenRodYellow",0,0)
  result = Mezzanine::ColourValue::LightGoldenRodYellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightGray",0,0)
  result = Mezzanine::ColourValue::LightGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightGreen",0,0)
  result = Mezzanine::ColourValue::LightGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightPink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightPink",0,0)
  result = Mezzanine::ColourValue::LightPink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSalmon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSalmon",0,0)
  result = Mezzanine::ColourValue::LightSalmon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSeaGreen",0,0)
  result = Mezzanine::ColourValue::LightSeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSkyBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSkyBlue",0,0)
  result = Mezzanine::ColourValue::LightSkyBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSlateGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSlateGray",0,0)
  result = Mezzanine::ColourValue::LightSlateGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSteelBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSteelBlue",0,0)
  result = Mezzanine::ColourValue::LightSteelBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightYellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightYellow",0,0)
  result = Mezzanine::ColourValue::LightYellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Lime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Lime",0,0)
  result = Mezzanine::ColourValue::Lime();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LimeGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LimeGreen",0,0)
  result = Mezzanine::ColourValue::LimeGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Linen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Linen",0,0)
  result = Mezzanine::ColourValue::Linen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Magenta(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Magenta",0,0)
  result = Mezzanine::ColourValue::Magenta();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Maroon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Maroon",0,0)
  result = Mezzanine::ColourValue::Maroon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumAquamarine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumAquamarine",0,0)
  result = Mezzanine::ColourValue::MediumAquamarine();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumBlue",0,0)
  result = Mezzanine::ColourValue::MediumBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumOrchid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumOrchid",0,0)
  result = Mezzanine::ColourValue::MediumOrchid();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumPurple(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumPurple",0,0)
  result = Mezzanine::ColourValue::MediumPurple();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumSeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumSeaGreen",0,0)
  result = Mezzanine::ColourValue::MediumSeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumSlateBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumSlateBlue",0,0)
  result = Mezzanine::ColourValue::MediumSlateBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumSpringGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumSpringGreen",0,0)
  result = Mezzanine::ColourValue::MediumSpringGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumTurquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumTurquoise",0,0)
  result = Mezzanine::ColourValue::MediumTurquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumVioletRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumVioletRed",0,0)
  result = Mezzanine::ColourValue::MediumVioletRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MidnightBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MidnightBlue",0,0)
  result = Mezzanine::ColourValue::MidnightBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MintCream(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MintCream",0,0)
  result = Mezzanine::ColourValue::MintCream();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MistyRose(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MistyRose",0,0)
  result = Mezzanine::ColourValue::MistyRose();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Moccasin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Moccasin",0,0)
  result = Mezzanine::ColourValue::Moccasin();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_NavajoWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::NavajoWhite",0,0)
  result = Mezzanine::ColourValue::NavajoWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Navy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Navy",0,0)
  result = Mezzanine::ColourValue::Navy();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_OldLace(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::OldLace",0,0)
  result = Mezzanine::ColourValue::OldLace();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Olive(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Olive",0,0)
  result = Mezzanine::ColourValue::Olive();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_OliveDrab(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::OliveDrab",0,0)
  result = Mezzanine::ColourValue::OliveDrab();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Orange(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Orange",0,0)
  result = Mezzanine::ColourValue::Orange();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_OrangeRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::OrangeRed",0,0)
  result = Mezzanine::ColourValue::OrangeRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Orchid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Orchid",0,0)
  result = Mezzanine::ColourValue::Orchid();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleGoldenRod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleGoldenRod",0,0)
  result = Mezzanine::ColourValue::PaleGoldenRod();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleGreen",0,0)
  result = Mezzanine::ColourValue::PaleGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleTurquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleTurquoise",0,0)
  result = Mezzanine::ColourValue::PaleTurquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleVioletRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleVioletRed",0,0)
  result = Mezzanine::ColourValue::PaleVioletRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PapayaWhip(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PapayaWhip",0,0)
  result = Mezzanine::ColourValue::PapayaWhip();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PeachPuff(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PeachPuff",0,0)
  result = Mezzanine::ColourValue::PeachPuff();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Peru(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Peru",0,0)
  result = Mezzanine::ColourValue::Peru();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Pink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Pink",0,0)
  result = Mezzanine::ColourValue::Pink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Plum(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Plum",0,0)
  result = Mezzanine::ColourValue::Plum();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PowderBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PowderBlue",0,0)
  result = Mezzanine::ColourValue::PowderBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Purple(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Purple",0,0)
  result = Mezzanine::ColourValue::Purple();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Red(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Red",0,0)
  result = Mezzanine::ColourValue::Red();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_RosyBrown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::RosyBrown",0,0)
  result = Mezzanine::ColourValue::RosyBrown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_RoyalBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::RoyalBlue",0,0)
  result = Mezzanine::ColourValue::RoyalBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SaddleBrown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SaddleBrown",0,0)
  result = Mezzanine::ColourValue::SaddleBrown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Salmon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Salmon",0,0)
  result = Mezzanine::ColourValue::Salmon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SandyBrown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SandyBrown",0,0)
  result = Mezzanine::ColourValue::SandyBrown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SeaGreen",0,0)
  result = Mezzanine::ColourValue::SeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SeaShell(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SeaShell",0,0)
  result = Mezzanine::ColourValue::SeaShell();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Sienna(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Sienna",0,0)
  result = Mezzanine::ColourValue::Sienna();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Silver(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Silver",0,0)
  result = Mezzanine::ColourValue::Silver();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SkyBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SkyBlue",0,0)
  result = Mezzanine::ColourValue::SkyBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SlateBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SlateBlue",0,0)
  result = Mezzanine::ColourValue::SlateBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SlateGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SlateGray",0,0)
  result = Mezzanine::ColourValue::SlateGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Snow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Snow",0,0)
  result = Mezzanine::ColourValue::Snow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SpringGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SpringGreen",0,0)
  result = Mezzanine::ColourValue::SpringGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SteelBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SteelBlue",0,0)
  result = Mezzanine::ColourValue::SteelBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Tan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Tan",0,0)
  result = Mezzanine::ColourValue::Tan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Teal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Teal",0,0)
  result = Mezzanine::ColourValue::Teal();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Thistle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Thistle",0,0)
  result = Mezzanine::ColourValue::Thistle();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Tomato(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Tomato",0,0)
  result = Mezzanine::ColourValue::Tomato();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Turquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Turquoise",0,0)
  result = Mezzanine::ColourValue::Turquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Violet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Violet",0,0)
  result = Mezzanine::ColourValue::Violet();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Wheat(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Wheat",0,0)
  result = Mezzanine::ColourValue::Wheat();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_White(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::White",0,0)
  result = Mezzanine::ColourValue::White();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_WhiteSmoke(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::WhiteSmoke",0,0)
  result = Mezzanine::ColourValue::WhiteSmoke();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Yellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Yellow",0,0)
  result = Mezzanine::ColourValue::Yellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_YellowGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::YellowGreen",0,0)
  result = Mezzanine::ColourValue::YellowGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoSerialize",1,"Mezzanine::ColourValue const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("ColourValue_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::ColourValue const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoDeSerialize",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("ColourValue_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetSerializableName",0,0)
  result = Mezzanine::ColourValue::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ColourValue(void *obj) {
Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_ColourValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ColourValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ColourValue_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ColourValue_methods[]= {
    { "GetOgreColourValue", _wrap_ColourValue_GetOgreColourValue},
    { "SetRedChannel", _wrap_ColourValue_SetRedChannel},
    { "GetRedChannel", _wrap_ColourValue_GetRedChannel},
    { "SetGreenChannel", _wrap_ColourValue_SetGreenChannel},
    { "GetGreenChannel", _wrap_ColourValue_GetGreenChannel},
    { "SetBlueChannel", _wrap_ColourValue_SetBlueChannel},
    { "GetBlueChannel", _wrap_ColourValue_GetBlueChannel},
    { "SetAlphaChannel", _wrap_ColourValue_SetAlphaChannel},
    { "GetAlphaChannel", _wrap_ColourValue_GetAlphaChannel},
    { "SetValues", _wrap_ColourValue_SetValues},
    { "Average", _wrap_ColourValue_Average},
    { "__add", _wrap_ColourValue___add},
    { "__sub", _wrap_ColourValue___sub},
    { "__mul", _wrap_ColourValue___mul},
    { "__eq", _wrap_ColourValue___eq},
    { "ProtoSerialize", _wrap_ColourValue_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_ColourValue_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_ColourValue_meta[] = {
    { "__add", _wrap_ColourValue___add},
    { "__sub", _wrap_ColourValue___sub},
    { "__mul", _wrap_ColourValue___mul},
    { "__eq", _wrap_ColourValue___eq},
    {0,0}
};

static swig_lua_attribute swig_ColourValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ColourValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ColourValue_Sf_SwigStatic_methods[]= {
    { "Transparent", _wrap_ColourValue_Transparent},
    { "AliceBlue", _wrap_ColourValue_AliceBlue},
    { "AntiqueWhite", _wrap_ColourValue_AntiqueWhite},
    { "Aqua", _wrap_ColourValue_Aqua},
    { "Aquamarine", _wrap_ColourValue_Aquamarine},
    { "Azure", _wrap_ColourValue_Azure},
    { "Beige", _wrap_ColourValue_Beige},
    { "Bisque", _wrap_ColourValue_Bisque},
    { "Black", _wrap_ColourValue_Black},
    { "Blanchedalmond", _wrap_ColourValue_Blanchedalmond},
    { "Blue", _wrap_ColourValue_Blue},
    { "BlueViolet", _wrap_ColourValue_BlueViolet},
    { "Brown", _wrap_ColourValue_Brown},
    { "BurlyWood", _wrap_ColourValue_BurlyWood},
    { "CadetBlue", _wrap_ColourValue_CadetBlue},
    { "Chartreuse", _wrap_ColourValue_Chartreuse},
    { "Chocolate", _wrap_ColourValue_Chocolate},
    { "Coral", _wrap_ColourValue_Coral},
    { "CornFlowerBlue", _wrap_ColourValue_CornFlowerBlue},
    { "CornSilk", _wrap_ColourValue_CornSilk},
    { "Crimson", _wrap_ColourValue_Crimson},
    { "Cyan", _wrap_ColourValue_Cyan},
    { "DarkBlue", _wrap_ColourValue_DarkBlue},
    { "DarkCyan", _wrap_ColourValue_DarkCyan},
    { "DarkGoldenRod", _wrap_ColourValue_DarkGoldenRod},
    { "DarkGray", _wrap_ColourValue_DarkGray},
    { "DarkGreen", _wrap_ColourValue_DarkGreen},
    { "DarkKhaki", _wrap_ColourValue_DarkKhaki},
    { "DarkMagenta", _wrap_ColourValue_DarkMagenta},
    { "DarkOliveGreen", _wrap_ColourValue_DarkOliveGreen},
    { "DarkOrange", _wrap_ColourValue_DarkOrange},
    { "DarkOrchid", _wrap_ColourValue_DarkOrchid},
    { "DarkRed", _wrap_ColourValue_DarkRed},
    { "DarkSalmon", _wrap_ColourValue_DarkSalmon},
    { "DarkSeaGreen", _wrap_ColourValue_DarkSeaGreen},
    { "DarkSlateBlue", _wrap_ColourValue_DarkSlateBlue},
    { "DarkSlateGray", _wrap_ColourValue_DarkSlateGray},
    { "DarkTurquoise", _wrap_ColourValue_DarkTurquoise},
    { "DarkViolet", _wrap_ColourValue_DarkViolet},
    { "DeepPink", _wrap_ColourValue_DeepPink},
    { "DeepSkyBlue", _wrap_ColourValue_DeepSkyBlue},
    { "DimGray", _wrap_ColourValue_DimGray},
    { "DodgerBlue", _wrap_ColourValue_DodgerBlue},
    { "FireBrick", _wrap_ColourValue_FireBrick},
    { "FloralWhite", _wrap_ColourValue_FloralWhite},
    { "ForestGreen", _wrap_ColourValue_ForestGreen},
    { "Fuchsia", _wrap_ColourValue_Fuchsia},
    { "Gainsboro", _wrap_ColourValue_Gainsboro},
    { "GhostWhite", _wrap_ColourValue_GhostWhite},
    { "Gold", _wrap_ColourValue_Gold},
    { "GoldenRod", _wrap_ColourValue_GoldenRod},
    { "Gray", _wrap_ColourValue_Gray},
    { "Green", _wrap_ColourValue_Green},
    { "GreenYellow", _wrap_ColourValue_GreenYellow},
    { "HoneyDew", _wrap_ColourValue_HoneyDew},
    { "HotPink", _wrap_ColourValue_HotPink},
    { "IndianRed", _wrap_ColourValue_IndianRed},
    { "Indigo", _wrap_ColourValue_Indigo},
    { "Ivory", _wrap_ColourValue_Ivory},
    { "Khaki", _wrap_ColourValue_Khaki},
    { "Lavender", _wrap_ColourValue_Lavender},
    { "LavenderBlush", _wrap_ColourValue_LavenderBlush},
    { "LawnGreen", _wrap_ColourValue_LawnGreen},
    { "LemonChiffon", _wrap_ColourValue_LemonChiffon},
    { "LightBlue", _wrap_ColourValue_LightBlue},
    { "LightCoral", _wrap_ColourValue_LightCoral},
    { "LightCyan", _wrap_ColourValue_LightCyan},
    { "LightGoldenRodYellow", _wrap_ColourValue_LightGoldenRodYellow},
    { "LightGray", _wrap_ColourValue_LightGray},
    { "LightGreen", _wrap_ColourValue_LightGreen},
    { "LightPink", _wrap_ColourValue_LightPink},
    { "LightSalmon", _wrap_ColourValue_LightSalmon},
    { "LightSeaGreen", _wrap_ColourValue_LightSeaGreen},
    { "LightSkyBlue", _wrap_ColourValue_LightSkyBlue},
    { "LightSlateGray", _wrap_ColourValue_LightSlateGray},
    { "LightSteelBlue", _wrap_ColourValue_LightSteelBlue},
    { "LightYellow", _wrap_ColourValue_LightYellow},
    { "Lime", _wrap_ColourValue_Lime},
    { "LimeGreen", _wrap_ColourValue_LimeGreen},
    { "Linen", _wrap_ColourValue_Linen},
    { "Magenta", _wrap_ColourValue_Magenta},
    { "Maroon", _wrap_ColourValue_Maroon},
    { "MediumAquamarine", _wrap_ColourValue_MediumAquamarine},
    { "MediumBlue", _wrap_ColourValue_MediumBlue},
    { "MediumOrchid", _wrap_ColourValue_MediumOrchid},
    { "MediumPurple", _wrap_ColourValue_MediumPurple},
    { "MediumSeaGreen", _wrap_ColourValue_MediumSeaGreen},
    { "MediumSlateBlue", _wrap_ColourValue_MediumSlateBlue},
    { "MediumSpringGreen", _wrap_ColourValue_MediumSpringGreen},
    { "MediumTurquoise", _wrap_ColourValue_MediumTurquoise},
    { "MediumVioletRed", _wrap_ColourValue_MediumVioletRed},
    { "MidnightBlue", _wrap_ColourValue_MidnightBlue},
    { "MintCream", _wrap_ColourValue_MintCream},
    { "MistyRose", _wrap_ColourValue_MistyRose},
    { "Moccasin", _wrap_ColourValue_Moccasin},
    { "NavajoWhite", _wrap_ColourValue_NavajoWhite},
    { "Navy", _wrap_ColourValue_Navy},
    { "OldLace", _wrap_ColourValue_OldLace},
    { "Olive", _wrap_ColourValue_Olive},
    { "OliveDrab", _wrap_ColourValue_OliveDrab},
    { "Orange", _wrap_ColourValue_Orange},
    { "OrangeRed", _wrap_ColourValue_OrangeRed},
    { "Orchid", _wrap_ColourValue_Orchid},
    { "PaleGoldenRod", _wrap_ColourValue_PaleGoldenRod},
    { "PaleGreen", _wrap_ColourValue_PaleGreen},
    { "PaleTurquoise", _wrap_ColourValue_PaleTurquoise},
    { "PaleVioletRed", _wrap_ColourValue_PaleVioletRed},
    { "PapayaWhip", _wrap_ColourValue_PapayaWhip},
    { "PeachPuff", _wrap_ColourValue_PeachPuff},
    { "Peru", _wrap_ColourValue_Peru},
    { "Pink", _wrap_ColourValue_Pink},
    { "Plum", _wrap_ColourValue_Plum},
    { "PowderBlue", _wrap_ColourValue_PowderBlue},
    { "Purple", _wrap_ColourValue_Purple},
    { "Red", _wrap_ColourValue_Red},
    { "RosyBrown", _wrap_ColourValue_RosyBrown},
    { "RoyalBlue", _wrap_ColourValue_RoyalBlue},
    { "SaddleBrown", _wrap_ColourValue_SaddleBrown},
    { "Salmon", _wrap_ColourValue_Salmon},
    { "SandyBrown", _wrap_ColourValue_SandyBrown},
    { "SeaGreen", _wrap_ColourValue_SeaGreen},
    { "SeaShell", _wrap_ColourValue_SeaShell},
    { "Sienna", _wrap_ColourValue_Sienna},
    { "Silver", _wrap_ColourValue_Silver},
    { "SkyBlue", _wrap_ColourValue_SkyBlue},
    { "SlateBlue", _wrap_ColourValue_SlateBlue},
    { "SlateGray", _wrap_ColourValue_SlateGray},
    { "Snow", _wrap_ColourValue_Snow},
    { "SpringGreen", _wrap_ColourValue_SpringGreen},
    { "SteelBlue", _wrap_ColourValue_SteelBlue},
    { "Tan", _wrap_ColourValue_Tan},
    { "Teal", _wrap_ColourValue_Teal},
    { "Thistle", _wrap_ColourValue_Thistle},
    { "Tomato", _wrap_ColourValue_Tomato},
    { "Turquoise", _wrap_ColourValue_Turquoise},
    { "Violet", _wrap_ColourValue_Violet},
    { "Wheat", _wrap_ColourValue_Wheat},
    { "White", _wrap_ColourValue_White},
    { "WhiteSmoke", _wrap_ColourValue_WhiteSmoke},
    { "Yellow", _wrap_ColourValue_Yellow},
    { "YellowGreen", _wrap_ColourValue_YellowGreen},
    { "GetSerializableName", _wrap_ColourValue_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_ColourValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ColourValue_Sf_SwigStatic = {
    "ColourValue",
    swig_ColourValue_Sf_SwigStatic_methods,
    swig_ColourValue_Sf_SwigStatic_attributes,
    swig_ColourValue_Sf_SwigStatic_constants,
    swig_ColourValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ColourValue_bases[] = {0};
static const char *swig_ColourValue_base_names[] = {0};
static swig_lua_class _wrap_class_ColourValue = { "ColourValue", "ColourValue", &SWIGTYPE_p_Mezzanine__ColourValue,_proxy__wrap_new_ColourValue, swig_delete_ColourValue, swig_ColourValue_methods, swig_ColourValue_attributes, &swig_ColourValue_Sf_SwigStatic, swig_ColourValue_meta, swig_ColourValue_bases, swig_ColourValue_base_names };

static int _wrap_AreaEffect_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::WorldObjectType result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetType",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetType",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::WorldObjectType)((Mezzanine::AreaEffect const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetGhostProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetGhostProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetGhostProxy",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetGhostProxy",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)((Mezzanine::AreaEffect const *)arg1)->GetGhostProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ApplyEffect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ApplyEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ApplyEffect",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ApplyEffect",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->ApplyEffect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_IsInWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::IsInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::IsInWorld",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_IsInWorld",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AreaEffect const *)arg1)->IsInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_IsStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::IsStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::IsStatic",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_IsStatic",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AreaEffect const *)arg1)->IsStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_IsKinematic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::IsKinematic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::IsKinematic",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_IsKinematic",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AreaEffect const *)arg1)->IsKinematic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetProxies__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::WorldObject::ProxyContainer *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetProxies",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::GetProxies",2,"Mezzanine::WorldObject::ProxyContainer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetProxies",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t,0))){
    SWIG_fail_ptr("AreaEffect_GetProxies",2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t);
  }
  
  (arg1)->GetProxies(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetProxies__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::WorldObject::ProxyContainer *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetProxies",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetProxies",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::GetProxies",2,"Mezzanine::UInt32 const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::GetProxies",3,"Mezzanine::WorldObject::ProxyContainer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetProxies",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t,0))){
    SWIG_fail_ptr("AreaEffect_GetProxies",3,SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t);
  }
  
  (arg1)->GetProxies(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetProxies(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_GetProxies__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldProxy_p_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AreaEffect_GetProxies__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_GetProxies'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::GetProxies(Mezzanine::WorldObject::ProxyContainer &)\n"
    "    Mezzanine::AreaEffect::GetProxies(Mezzanine::UInt32 const,Mezzanine::WorldObject::ProxyContainer &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::AddToWorld",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_AddToWorld",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::RemoveFromWorld",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetNumOverlappingObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetNumOverlappingObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetNumOverlappingObjects",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetNumOverlappingObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::AreaEffect const *)arg1)->GetNumOverlappingObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetNumAddedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetNumAddedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetNumAddedObjects",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetNumAddedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::AreaEffect const *)arg1)->GetNumAddedObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetNumRemovedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetNumRemovedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetNumRemovedObjects",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetNumRemovedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::AreaEffect const *)arg1)->GetNumRemovedObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetOverlappingObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::AreaEffect::ObjectContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetOverlappingObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetOverlappingObjects",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetOverlappingObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::AreaEffect::ObjectContainer *) &(arg1)->GetOverlappingObjects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__WorldObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetAddedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::AreaEffect::ObjectContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetAddedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetAddedObjects",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetAddedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::AreaEffect::ObjectContainer *) &(arg1)->GetAddedObjects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__WorldObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetRemovedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::AreaEffect::ObjectContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetRemovedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetRemovedObjects",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetRemovedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::AreaEffect::ObjectContainer *) &(arg1)->GetRemovedObjects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__WorldObject_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetLocation",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetLocation",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AreaEffect_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetLocation",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AreaEffect::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetLocation",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffect_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AreaEffect::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetLocation",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetLocation",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = ((Mezzanine::AreaEffect const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetOrientation",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("AreaEffect_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::AreaEffect::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetOrientation",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AreaEffect_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::AreaEffect::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetOrientation",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetOrientation",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = ((Mezzanine::AreaEffect const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetScale",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetScale",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AreaEffect_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetScale",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AreaEffect::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetScale",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffect_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AreaEffect::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetScale",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetScale",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = ((Mezzanine::AreaEffect const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Translate",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Translate",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AreaEffect_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Translate",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AreaEffect::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Translate",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffect_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AreaEffect::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Yaw",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Yaw",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Pitch",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Pitch",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Roll",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Roll",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Rotate",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Rotate",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AreaEffect_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Rotate",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Rotate",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("AreaEffect_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AreaEffect_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::AreaEffect::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Scale",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Scale",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AreaEffect_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::Scale",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AreaEffect::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_Scale",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffect_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffect_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffect_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AreaEffect::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoSerializeProperties",1,"Mezzanine::AreaEffect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffect_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::AreaEffect const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ProtoSerializeProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ProtoSerializeProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoSerializeProxies",1,"Mezzanine::AreaEffect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoSerializeProxies",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ProtoSerializeProxies",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffect_ProtoSerializeProxies",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::AreaEffect const *)arg1)->ProtoSerializeProxies(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoDeSerializeProperties",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffect_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ProtoDeSerializeProxies(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ProtoDeSerializeProxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoDeSerializeProxies",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoDeSerializeProxies",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ProtoDeSerializeProxies",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffect_ProtoDeSerializeProxies",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProxies((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetDerivedSerializableName",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = ((Mezzanine::AreaEffect const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetSerializableName",0,0)
  result = Mezzanine::AreaEffect::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect__Update(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::_Update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::_Update",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect__Update",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->_Update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect__NotifyProxyDestroyed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::WorldProxy *arg2 = (Mezzanine::WorldProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::_NotifyProxyDestroyed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::_NotifyProxyDestroyed",1,"Mezzanine::AreaEffect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::_NotifyProxyDestroyed",2,"Mezzanine::WorldProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect__NotifyProxyDestroyed",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("AreaEffect__NotifyProxyDestroyed",2,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  (arg1)->_NotifyProxyDestroyed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AreaEffect(void *obj) {
Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) obj;
delete arg1;
}
static swig_lua_attribute swig_AreaEffect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffect_methods[]= {
    { "GetType", _wrap_AreaEffect_GetType},
    { "GetGhostProxy", _wrap_AreaEffect_GetGhostProxy},
    { "ApplyEffect", _wrap_AreaEffect_ApplyEffect},
    { "IsInWorld", _wrap_AreaEffect_IsInWorld},
    { "IsStatic", _wrap_AreaEffect_IsStatic},
    { "IsKinematic", _wrap_AreaEffect_IsKinematic},
    { "GetProxies", _wrap_AreaEffect_GetProxies},
    { "AddToWorld", _wrap_AreaEffect_AddToWorld},
    { "RemoveFromWorld", _wrap_AreaEffect_RemoveFromWorld},
    { "GetNumOverlappingObjects", _wrap_AreaEffect_GetNumOverlappingObjects},
    { "GetNumAddedObjects", _wrap_AreaEffect_GetNumAddedObjects},
    { "GetNumRemovedObjects", _wrap_AreaEffect_GetNumRemovedObjects},
    { "GetOverlappingObjects", _wrap_AreaEffect_GetOverlappingObjects},
    { "GetAddedObjects", _wrap_AreaEffect_GetAddedObjects},
    { "GetRemovedObjects", _wrap_AreaEffect_GetRemovedObjects},
    { "SetLocation", _wrap_AreaEffect_SetLocation},
    { "GetLocation", _wrap_AreaEffect_GetLocation},
    { "SetOrientation", _wrap_AreaEffect_SetOrientation},
    { "GetOrientation", _wrap_AreaEffect_GetOrientation},
    { "SetScale", _wrap_AreaEffect_SetScale},
    { "GetScale", _wrap_AreaEffect_GetScale},
    { "Translate", _wrap_AreaEffect_Translate},
    { "Yaw", _wrap_AreaEffect_Yaw},
    { "Pitch", _wrap_AreaEffect_Pitch},
    { "Roll", _wrap_AreaEffect_Roll},
    { "Rotate", _wrap_AreaEffect_Rotate},
    { "Scale", _wrap_AreaEffect_Scale},
    { "ProtoSerializeProperties", _wrap_AreaEffect_ProtoSerializeProperties},
    { "ProtoSerializeProxies", _wrap_AreaEffect_ProtoSerializeProxies},
    { "ProtoDeSerializeProperties", _wrap_AreaEffect_ProtoDeSerializeProperties},
    { "ProtoDeSerializeProxies", _wrap_AreaEffect_ProtoDeSerializeProxies},
    { "GetDerivedSerializableName", _wrap_AreaEffect_GetDerivedSerializableName},
    { "_Update", _wrap_AreaEffect__Update},
    { "_NotifyProxyDestroyed", _wrap_AreaEffect__NotifyProxyDestroyed},
    {0,0}
};
static swig_lua_method swig_AreaEffect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffect_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_AreaEffect_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_AreaEffect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffect_Sf_SwigStatic = {
    "AreaEffect",
    swig_AreaEffect_Sf_SwigStatic_methods,
    swig_AreaEffect_Sf_SwigStatic_attributes,
    swig_AreaEffect_Sf_SwigStatic_constants,
    swig_AreaEffect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffect_bases[] = {0,0};
static const char *swig_AreaEffect_base_names[] = {"Mezzanine::WorldObject *",0};
static swig_lua_class _wrap_class_AreaEffect = { "AreaEffect", "AreaEffect", &SWIGTYPE_p_Mezzanine__AreaEffect,0, swig_delete_AreaEffect, swig_AreaEffect_methods, swig_AreaEffect_attributes, &swig_AreaEffect_Sf_SwigStatic, swig_AreaEffect_meta, swig_AreaEffect_bases, swig_AreaEffect_base_names };

static int _wrap_AreaEffectFactory_GetTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectFactory *arg1 = (Mezzanine::AreaEffectFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AreaEffectFactory::GetTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::GetTypeName",1,"Mezzanine::AreaEffectFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectFactory_GetTypeName",1,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  result = ((Mezzanine::AreaEffectFactory const *)arg1)->GetTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectFactory_CreateAreaEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectFactory *arg1 = (Mezzanine::AreaEffectFactory *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectFactory::CreateAreaEffect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",1,"Mezzanine::AreaEffectFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",3,"Mezzanine::World *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectFactory_CreateAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("AreaEffectFactory_CreateAreaEffect",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("AreaEffectFactory_CreateAreaEffect",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::AreaEffect *)(arg1)->CreateAreaEffect((Mezzanine::String const &)*arg2,arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectFactory_CreateAreaEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectFactory *arg1 = (Mezzanine::AreaEffectFactory *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectFactory::CreateAreaEffect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",1,"Mezzanine::AreaEffectFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",2,"Mezzanine::XML::Node const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::CreateAreaEffect",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectFactory_CreateAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffectFactory_CreateAreaEffect",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("AreaEffectFactory_CreateAreaEffect",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::AreaEffect *)(arg1)->CreateAreaEffect((Mezzanine::XML::Node const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectFactory_CreateAreaEffect(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AreaEffectFactory_CreateAreaEffect__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AreaEffectFactory_CreateAreaEffect__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectFactory_CreateAreaEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectFactory::CreateAreaEffect(Mezzanine::String const &,Mezzanine::World *,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::AreaEffectFactory::CreateAreaEffect(Mezzanine::XML::Node const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectFactory_DestroyAreaEffect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectFactory *arg1 = (Mezzanine::AreaEffectFactory *) 0 ;
  Mezzanine::AreaEffect *arg2 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectFactory::DestroyAreaEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::DestroyAreaEffect",1,"Mezzanine::AreaEffectFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectFactory::DestroyAreaEffect",2,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectFactory_DestroyAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffectFactory_DestroyAreaEffect",2,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->DestroyAreaEffect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AreaEffectFactory(void *obj) {
Mezzanine::AreaEffectFactory *arg1 = (Mezzanine::AreaEffectFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_AreaEffectFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffectFactory_methods[]= {
    { "GetTypeName", _wrap_AreaEffectFactory_GetTypeName},
    { "CreateAreaEffect", _wrap_AreaEffectFactory_CreateAreaEffect},
    { "DestroyAreaEffect", _wrap_AreaEffectFactory_DestroyAreaEffect},
    {0,0}
};
static swig_lua_method swig_AreaEffectFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffectFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffectFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffectFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AreaEffectFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffectFactory_Sf_SwigStatic = {
    "AreaEffectFactory",
    swig_AreaEffectFactory_Sf_SwigStatic_methods,
    swig_AreaEffectFactory_Sf_SwigStatic_attributes,
    swig_AreaEffectFactory_Sf_SwigStatic_constants,
    swig_AreaEffectFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffectFactory_bases[] = {0};
static const char *swig_AreaEffectFactory_base_names[] = {0};
static swig_lua_class _wrap_class_AreaEffectFactory = { "AreaEffectFactory", "AreaEffectFactory", &SWIGTYPE_p_Mezzanine__AreaEffectFactory,0, swig_delete_AreaEffectFactory, swig_AreaEffectFactory_methods, swig_AreaEffectFactory_attributes, &swig_AreaEffectFactory_Sf_SwigStatic, swig_AreaEffectFactory_meta, swig_AreaEffectFactory_bases, swig_AreaEffectFactory_base_names };

static int _wrap_new_AreaEffectUpdateWorkUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::AreaEffectUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectUpdateWorkUnit::AreaEffectUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectUpdateWorkUnit::AreaEffectUpdateWorkUnit",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("new_AreaEffectUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  result = (Mezzanine::AreaEffectUpdateWorkUnit *)new Mezzanine::AreaEffectUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffectUpdateWorkUnit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AreaEffectUpdateWorkUnit__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AreaEffectUpdateWorkUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectUpdateWorkUnit::AreaEffectUpdateWorkUnit(Mezzanine::AreaEffectManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectUpdateWorkUnit *arg1 = (Mezzanine::AreaEffectUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectUpdateWorkUnit::DoWork",1,"Mezzanine::AreaEffectUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,0))){
    SWIG_fail_ptr("AreaEffectUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("AreaEffectUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AreaEffectUpdateWorkUnit(void *obj) {
Mezzanine::AreaEffectUpdateWorkUnit *arg1 = (Mezzanine::AreaEffectUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_AreaEffectUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AreaEffectUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AreaEffectUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffectUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_AreaEffectUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_AreaEffectUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic = {
    "AreaEffectUpdateWorkUnit",
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffectUpdateWorkUnit_bases[] = {0};
static const char *swig_AreaEffectUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_AreaEffectUpdateWorkUnit = { "AreaEffectUpdateWorkUnit", "AreaEffectUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,_proxy__wrap_new_AreaEffectUpdateWorkUnit, swig_delete_AreaEffectUpdateWorkUnit, swig_AreaEffectUpdateWorkUnit_methods, swig_AreaEffectUpdateWorkUnit_attributes, &swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic, swig_AreaEffectUpdateWorkUnit_meta, swig_AreaEffectUpdateWorkUnit_bases, swig_AreaEffectUpdateWorkUnit_base_names };

static int _wrap_AreaEffectManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::AreaEffectManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::InterfaceType",0,0)
  result = (Mezzanine::ManagerBase::ManagerType)(Mezzanine::ManagerBase::ManagerType)Mezzanine::AreaEffectManager::InterfaceType;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffectManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::AreaEffectManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::AreaEffectManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::AreaEffectManager",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_AreaEffectManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::AreaEffectManager *)new Mezzanine::AreaEffectManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffectManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffectManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::AreaEffectManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::AreaEffectManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::AreaEffectManager",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::AreaEffectManager",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_AreaEffectManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_AreaEffectManager",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::AreaEffectManager *)new Mezzanine::AreaEffectManager(arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffectManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffectManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AreaEffectManager__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AreaEffectManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AreaEffectManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::AreaEffectManager(Mezzanine::World *)\n"
    "    Mezzanine::AreaEffectManager::AreaEffectManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp2 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateFieldOfForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",3,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateFieldOfForce",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",3,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",4,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateFieldOfForce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",3,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateFieldOfForce",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateFieldOfForce",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateFieldOfForce(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffectManager_CreateFieldOfForce__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_CreateFieldOfForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::CreateFieldOfForce(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateFieldOfForce(Mezzanine::String const &)\n"
    "    Mezzanine::AreaEffectManager::CreateFieldOfForce(Mezzanine::String const &,Mezzanine::Physics::CollisionShape *,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateFieldOfForce(Mezzanine::String const &,Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::AreaEffectManager::CreateFieldOfForce(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_CreateGravityField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityField",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",3,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityField__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityField",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",3,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",4,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityField__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityField",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",3,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityField__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityField",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityField",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityField(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateGravityField__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateGravityField__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AreaEffectManager_CreateGravityField__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AreaEffectManager_CreateGravityField__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffectManager_CreateGravityField__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_CreateGravityField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::CreateGravityField(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityField(Mezzanine::String const &)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityField(Mezzanine::String const &,Mezzanine::Physics::CollisionShape *,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityField(Mezzanine::String const &,Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityField(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_CreateGravityWell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityWell",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",3,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityWell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityWell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityWell__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityWell",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",3,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",4,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityWell__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Physics::CollisionShape *arg3 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityWell",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",3,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",3,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityWell__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateGravityWell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateGravityWell",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateGravityWell",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateGravityWell(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateGravityWell__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateGravityWell__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AreaEffectManager_CreateGravityWell__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AreaEffectManager_CreateGravityWell__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_AreaEffectManager_CreateGravityWell__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_CreateGravityWell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::CreateGravityWell(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityWell(Mezzanine::String const &)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityWell(Mezzanine::String const &,Mezzanine::Physics::CollisionShape *,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityWell(Mezzanine::String const &,Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::AreaEffectManager::CreateGravityWell(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_CreateAreaEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::Boole arg5 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateAreaEffect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",3,"Mezzanine::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",4,"Mezzanine::NameValuePairMap const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",5,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateAreaEffect",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Mezzanine::AreaEffect *)(arg1)->CreateAreaEffect((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::NameValuePairMap const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateAreaEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateAreaEffect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",3,"Mezzanine::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateAreaEffect",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::AreaEffect *)(arg1)->CreateAreaEffect((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateAreaEffect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::CreateAreaEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::CreateAreaEffect",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffectManager_CreateAreaEffect",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::AreaEffect *)(arg1)->CreateAreaEffect((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_CreateAreaEffect(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_CreateAreaEffect__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AreaEffectManager_CreateAreaEffect__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_AreaEffectManager_CreateAreaEffect__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_CreateAreaEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::CreateAreaEffect(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::NameValuePairMap const &,Mezzanine::Boole const)\n"
    "    Mezzanine::AreaEffectManager::CreateAreaEffect(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::AreaEffectManager::CreateAreaEffect(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_GetAreaEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::GetAreaEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetAreaEffect",1,"Mezzanine::AreaEffectManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetAreaEffect",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_GetAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::AreaEffect *)((Mezzanine::AreaEffectManager const *)arg1)->GetAreaEffect(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_GetAreaEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::GetAreaEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetAreaEffect",1,"Mezzanine::AreaEffectManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetAreaEffect",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_GetAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::AreaEffect *)((Mezzanine::AreaEffectManager const *)arg1)->GetAreaEffect((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_GetAreaEffect(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_GetAreaEffect__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_GetAreaEffect__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_GetAreaEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::GetAreaEffect(Mezzanine::Whole const) const\n"
    "    Mezzanine::AreaEffectManager::GetAreaEffect(Mezzanine::String const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_GetNumAreaEffects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::GetNumAreaEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetNumAreaEffects",1,"Mezzanine::AreaEffectManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_GetNumAreaEffects",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::AreaEffectManager const *)arg1)->GetNumAreaEffects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_DestroyAreaEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::DestroyAreaEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffect",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffect",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->DestroyAreaEffect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_DestroyAreaEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::AreaEffect *arg2 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::DestroyAreaEffect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffect",1,"Mezzanine::AreaEffectManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffect",2,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAreaEffect",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAreaEffect",2,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->DestroyAreaEffect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_DestroyAreaEffect(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffect, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_DestroyAreaEffect__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_DestroyAreaEffect__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_DestroyAreaEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::DestroyAreaEffect(Mezzanine::Whole const)\n"
    "    Mezzanine::AreaEffectManager::DestroyAreaEffect(Mezzanine::AreaEffect *)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_DestroyAllAreaEffects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::DestroyAllAreaEffects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAllAreaEffects",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAllAreaEffects",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  (arg1)->DestroyAllAreaEffects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_AddAreaEffectFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::AreaEffectFactory *arg2 = (Mezzanine::AreaEffectFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::AddAreaEffectFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::AddAreaEffectFactory",1,"Mezzanine::AreaEffectManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::AddAreaEffectFactory",2,"Mezzanine::AreaEffectFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_AddAreaEffectFactory",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectManager_AddAreaEffectFactory",2,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  (arg1)->AddAreaEffectFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_RemoveAreaEffectFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::AreaEffectFactory *arg2 = (Mezzanine::AreaEffectFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::RemoveAreaEffectFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::RemoveAreaEffectFactory",1,"Mezzanine::AreaEffectManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::RemoveAreaEffectFactory",2,"Mezzanine::AreaEffectFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_RemoveAreaEffectFactory",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectManager_RemoveAreaEffectFactory",2,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  (arg1)->RemoveAreaEffectFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_RemoveAreaEffectFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::RemoveAreaEffectFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::RemoveAreaEffectFactory",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::RemoveAreaEffectFactory",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_RemoveAreaEffectFactory",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->RemoveAreaEffectFactory((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_RemoveAreaEffectFactory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectFactory, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_RemoveAreaEffectFactory__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_RemoveAreaEffectFactory__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_RemoveAreaEffectFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::RemoveAreaEffectFactory(Mezzanine::AreaEffectFactory *)\n"
    "    Mezzanine::AreaEffectManager::RemoveAreaEffectFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_DestroyAreaEffectFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::AreaEffectFactory *arg2 = (Mezzanine::AreaEffectFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::DestroyAreaEffectFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffectFactory",1,"Mezzanine::AreaEffectManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffectFactory",2,"Mezzanine::AreaEffectFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAreaEffectFactory",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AreaEffectFactory,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAreaEffectFactory",2,SWIGTYPE_p_Mezzanine__AreaEffectFactory);
  }
  
  (arg1)->DestroyAreaEffectFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_DestroyAreaEffectFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::DestroyAreaEffectFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffectFactory",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAreaEffectFactory",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAreaEffectFactory",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->DestroyAreaEffectFactory((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_DestroyAreaEffectFactory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectFactory, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AreaEffectManager_DestroyAreaEffectFactory__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AreaEffectManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AreaEffectManager_DestroyAreaEffectFactory__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AreaEffectManager_DestroyAreaEffectFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffectManager::DestroyAreaEffectFactory(Mezzanine::AreaEffectFactory *)\n"
    "    Mezzanine::AreaEffectManager::DestroyAreaEffectFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffectManager_DestroyAllAreaEffectFactories(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::DestroyAllAreaEffectFactories",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::DestroyAllAreaEffectFactories",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_DestroyAllAreaEffectFactories",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  (arg1)->DestroyAllAreaEffectFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::Pause",1,"Mezzanine::AreaEffectManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_Pause",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_MainLoopInitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::MainLoopInitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::MainLoopInitialize",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_MainLoopInitialize",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  (arg1)->MainLoopInitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::Initialize",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_Initialize",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::Deinitialize",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_GetAreaEffectUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::AreaEffectUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::GetAreaEffectUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetAreaEffectUpdateWork",1,"Mezzanine::AreaEffectManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_GetAreaEffectUpdateWork",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  result = (Mezzanine::AreaEffectUpdateWorkUnit *)(arg1)->GetAreaEffectUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetInterfaceType",1,"Mezzanine::AreaEffectManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::AreaEffectManager const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AreaEffectManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectManager::GetImplementationTypeName",1,"Mezzanine::AreaEffectManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectManager,0))){
    SWIG_fail_ptr("AreaEffectManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__AreaEffectManager);
  }
  
  result = ((Mezzanine::AreaEffectManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AreaEffectManager(void *obj) {
Mezzanine::AreaEffectManager *arg1 = (Mezzanine::AreaEffectManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_AreaEffectManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AreaEffectManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AreaEffectManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffectManager_methods[]= {
    { "CreateFieldOfForce", _wrap_AreaEffectManager_CreateFieldOfForce},
    { "CreateGravityField", _wrap_AreaEffectManager_CreateGravityField},
    { "CreateGravityWell", _wrap_AreaEffectManager_CreateGravityWell},
    { "CreateAreaEffect", _wrap_AreaEffectManager_CreateAreaEffect},
    { "GetAreaEffect", _wrap_AreaEffectManager_GetAreaEffect},
    { "GetNumAreaEffects", _wrap_AreaEffectManager_GetNumAreaEffects},
    { "DestroyAreaEffect", _wrap_AreaEffectManager_DestroyAreaEffect},
    { "DestroyAllAreaEffects", _wrap_AreaEffectManager_DestroyAllAreaEffects},
    { "AddAreaEffectFactory", _wrap_AreaEffectManager_AddAreaEffectFactory},
    { "RemoveAreaEffectFactory", _wrap_AreaEffectManager_RemoveAreaEffectFactory},
    { "DestroyAreaEffectFactory", _wrap_AreaEffectManager_DestroyAreaEffectFactory},
    { "DestroyAllAreaEffectFactories", _wrap_AreaEffectManager_DestroyAllAreaEffectFactories},
    { "Pause", _wrap_AreaEffectManager_Pause},
    { "MainLoopInitialize", _wrap_AreaEffectManager_MainLoopInitialize},
    { "Initialize", _wrap_AreaEffectManager_Initialize},
    { "Deinitialize", _wrap_AreaEffectManager_Deinitialize},
    { "GetAreaEffectUpdateWork", _wrap_AreaEffectManager_GetAreaEffectUpdateWork},
    { "GetInterfaceType", _wrap_AreaEffectManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_AreaEffectManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_AreaEffectManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffectManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_AreaEffectManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_AreaEffectManager_InterfaceType_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffectManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffectManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AreaEffectManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffectManager_Sf_SwigStatic = {
    "AreaEffectManager",
    swig_AreaEffectManager_Sf_SwigStatic_methods,
    swig_AreaEffectManager_Sf_SwigStatic_attributes,
    swig_AreaEffectManager_Sf_SwigStatic_constants,
    swig_AreaEffectManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffectManager_bases[] = {0,0};
static const char *swig_AreaEffectManager_base_names[] = {"Mezzanine::WorldManager *",0};
static swig_lua_class _wrap_class_AreaEffectManager = { "AreaEffectManager", "AreaEffectManager", &SWIGTYPE_p_Mezzanine__AreaEffectManager,_proxy__wrap_new_AreaEffectManager, swig_delete_AreaEffectManager, swig_AreaEffectManager_methods, swig_AreaEffectManager_attributes, &swig_AreaEffectManager_Sf_SwigStatic, swig_AreaEffectManager_meta, swig_AreaEffectManager_bases, swig_AreaEffectManager_base_names };

static int _wrap_new_DefaultAreaEffectManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultAreaEffectManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultAreaEffectManagerFactory::DefaultAreaEffectManagerFactory",0,0)
  result = (Mezzanine::DefaultAreaEffectManagerFactory *)new Mezzanine::DefaultAreaEffectManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultAreaEffectManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultAreaEffectManagerFactory *arg1 = (Mezzanine::DefaultAreaEffectManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DefaultAreaEffectManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::GetManagerImplName",1,"Mezzanine::DefaultAreaEffectManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory);
  }
  
  result = ((Mezzanine::DefaultAreaEffectManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultAreaEffectManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultAreaEffectManagerFactory *arg1 = (Mezzanine::DefaultAreaEffectManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DefaultAreaEffectManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::GetManagerType",1,"Mezzanine::DefaultAreaEffectManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::DefaultAreaEffectManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultAreaEffectManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultAreaEffectManagerFactory *arg1 = (Mezzanine::DefaultAreaEffectManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",1,"Mezzanine::DefaultAreaEffectManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultAreaEffectManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultAreaEffectManagerFactory *arg1 = (Mezzanine::DefaultAreaEffectManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",1,"Mezzanine::DefaultAreaEffectManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultAreaEffectManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultAreaEffectManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultAreaEffectManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultAreaEffectManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DefaultAreaEffectManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::DefaultAreaEffectManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultAreaEffectManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultAreaEffectManagerFactory *arg1 = (Mezzanine::DefaultAreaEffectManagerFactory *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultAreaEffectManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::DestroyManager",1,"Mezzanine::DefaultAreaEffectManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultAreaEffectManagerFactory::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("DefaultAreaEffectManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultAreaEffectManagerFactory(void *obj) {
Mezzanine::DefaultAreaEffectManagerFactory *arg1 = (Mezzanine::DefaultAreaEffectManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultAreaEffectManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultAreaEffectManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultAreaEffectManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultAreaEffectManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultAreaEffectManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultAreaEffectManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultAreaEffectManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultAreaEffectManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultAreaEffectManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic = {
    "DefaultAreaEffectManagerFactory",
    swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultAreaEffectManagerFactory_bases[] = {0,0};
static const char *swig_DefaultAreaEffectManagerFactory_base_names[] = {"Mezzanine::WorldManagerFactory *",0};
static swig_lua_class _wrap_class_DefaultAreaEffectManagerFactory = { "DefaultAreaEffectManagerFactory", "DefaultAreaEffectManagerFactory", &SWIGTYPE_p_Mezzanine__DefaultAreaEffectManagerFactory,_proxy__wrap_new_DefaultAreaEffectManagerFactory, swig_delete_DefaultAreaEffectManagerFactory, swig_DefaultAreaEffectManagerFactory_methods, swig_DefaultAreaEffectManagerFactory_attributes, &swig_DefaultAreaEffectManagerFactory_Sf_SwigStatic, swig_DefaultAreaEffectManagerFactory_meta, swig_DefaultAreaEffectManagerFactory_bases, swig_DefaultAreaEffectManagerFactory_base_names };

static int _wrap_Plane_Normal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Plane::Normal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Normal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Normal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Distance",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Real) ((arg1)->Distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",0,0)
  result = (Mezzanine::Plane *)new Mezzanine::Plane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Plane",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Ogre__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Ogre::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Plane__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Plane__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Plane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Plane()\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Plane const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Ogre::Plane const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Define__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Plane::Define",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Plane_Define__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_Define'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetSide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane::Side result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane::Side result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::GetSide",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane::Side)((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_GetSide__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_GetSide__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_GetSide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetDistance",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Plane const *)arg1)->GetDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOverlap(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Ray result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOverlap((Mezzanine::Plane const &)*arg2);
  {
    Mezzanine::Ray * resultptr = new Mezzanine::Ray((const Mezzanine::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  
  SWIG_check_num_args("Mezzanine::Plane::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Intersects",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Intersects",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Plane_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::Plane::RayTestResult * resultptr = new Mezzanine::Plane::RayTestResult((const Mezzanine::Plane::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ExtractOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ExtractOgrePlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",2,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",2,SWIGTYPE_p_Ogre__Plane);
  }
  
  (arg1)->ExtractOgrePlane((Ogre::Plane const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOgrePlane",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOgrePlane",1,"Mezzanine::Plane const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOgrePlane();
  {
    Ogre::Plane * resultptr = new Ogre::Plane((const Ogre::Plane &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Plane,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Plane const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSerializableName",0,0)
  result = Mezzanine::Plane::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::operator ==",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::operator ==",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->operator ==((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Plane(void *obj) {
Mezzanine::Plane *arg1 = (Mezzanine::Plane *) obj;
delete arg1;
}
static int _proxy__wrap_new_Plane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Plane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Plane_attributes[] = {
    { "Normal", _wrap_Plane_Normal_get, _wrap_Plane_Normal_set },
    { "Distance", _wrap_Plane_Distance_get, _wrap_Plane_Distance_set },
    {0,0,0}
};
static swig_lua_method swig_Plane_methods[]= {
    { "Define", _wrap_Plane_Define},
    { "GetSide", _wrap_Plane_GetSide},
    { "GetDistance", _wrap_Plane_GetDistance},
    { "GetOverlap", _wrap_Plane_GetOverlap},
    { "IsOverlapping", _wrap_Plane_IsOverlapping},
    { "Intersects", _wrap_Plane_Intersects},
    { "ExtractOgrePlane", _wrap_Plane_ExtractOgrePlane},
    { "GetOgrePlane", _wrap_Plane_GetOgrePlane},
    { "ProtoSerialize", _wrap_Plane_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Plane_ProtoDeSerialize},
    { "__eq", _wrap_Plane___eq},
    {0,0}
};
static swig_lua_method swig_Plane_meta[] = {
    { "__eq", _wrap_Plane___eq},
    {0,0}
};

static swig_lua_attribute swig_Plane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Plane_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("S_None", Mezzanine::Plane::S_None)},
    {SWIG_LUA_CONSTTAB_INT("S_Positive", Mezzanine::Plane::S_Positive)},
    {SWIG_LUA_CONSTTAB_INT("S_Negative", Mezzanine::Plane::S_Negative)},
    {SWIG_LUA_CONSTTAB_INT("S_Both", Mezzanine::Plane::S_Both)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Plane_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Plane_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Plane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Plane_Sf_SwigStatic = {
    "Plane",
    swig_Plane_Sf_SwigStatic_methods,
    swig_Plane_Sf_SwigStatic_attributes,
    swig_Plane_Sf_SwigStatic_constants,
    swig_Plane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Plane_bases[] = {0};
static const char *swig_Plane_base_names[] = {0};
static swig_lua_class _wrap_class_Plane = { "Plane", "Plane", &SWIGTYPE_p_Mezzanine__Plane,_proxy__wrap_new_Plane, swig_delete_Plane, swig_Plane_methods, swig_Plane_attributes, &swig_Plane_Sf_SwigStatic, swig_Plane_meta, swig_Plane_bases, swig_Plane_base_names };

static int _wrap_AxisAlignedBox_MinExt_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MinExt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MinExt",1,"Mezzanine::AxisAlignedBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MinExt",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MinExt_set",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_MinExt_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->MinExt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_MinExt_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MinExt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MinExt",1,"Mezzanine::AxisAlignedBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MinExt_get",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->MinExt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_MaxExt_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MaxExt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MaxExt",1,"Mezzanine::AxisAlignedBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MaxExt",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MaxExt_set",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_MaxExt_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->MaxExt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_MaxExt_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MaxExt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MaxExt",1,"Mezzanine::AxisAlignedBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MaxExt_get",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->MaxExt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",0,0)
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Mezzanine::AxisAlignedBox const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Ogre::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Ogre::AxisAlignedBox const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AxisAlignedBox__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AxisAlignedBox__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AxisAlignedBox__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AxisAlignedBox__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AxisAlignedBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox()\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Mezzanine::AxisAlignedBox const &)\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Ogre::AxisAlignedBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedBox_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsZero",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsZero",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetVolume(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetVolume",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetVolume",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Real)((Mezzanine::AxisAlignedBox const *)arg1)->GetVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetOverlap(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::AxisAlignedBox result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetOverlap",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetOverlap",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetOverlap",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetOverlap",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetOverlap((Mezzanine::AxisAlignedBox const &)*arg2);
  {
    Mezzanine::AxisAlignedBox * resultptr = new Mezzanine::AxisAlignedBox((const Mezzanine::AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_Expand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::Expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Expand((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_Expand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::Expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  (arg1)->Expand((Mezzanine::AxisAlignedBox const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_Expand(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_Expand__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_Expand__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AxisAlignedBox_Expand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AxisAlignedBox::Expand(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AxisAlignedBox::Expand(Mezzanine::AxisAlignedBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedBox_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsInside",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsInside",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsInside",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsInside((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AxisAlignedBox_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AxisAlignedBox::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::AxisAlignedBox::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::AxisAlignedBox::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedBox_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Ray > > result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Intersects",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Intersects",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("AxisAlignedBox_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::AxisAlignedBox::RayTestResult * resultptr = new Mezzanine::AxisAlignedBox::RayTestResult((const Mezzanine::AxisAlignedBox::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_SetExtents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::SetExtents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::SetExtents",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::SetExtents",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::SetExtents",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_SetExtents",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_SetExtents",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_SetExtents",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetExtents((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSize",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetSize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetSize();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetHalfSize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetHalfSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetHalfSize",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetHalfSize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetHalfSize();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetCenter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCenter",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetCenter",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetCenter();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetCorner(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox::AxisExtent arg2 ;
  Mezzanine::AxisAlignedBox::AxisExtent arg3 ;
  Mezzanine::AxisAlignedBox::AxisExtent arg4 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",2,"Mezzanine::AxisAlignedBox::AxisExtent const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",3,"Mezzanine::AxisAlignedBox::AxisExtent const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",4,"Mezzanine::AxisAlignedBox::AxisExtent const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetCorner",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  arg2 = (Mezzanine::AxisAlignedBox::AxisExtent const)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::AxisAlignedBox::AxisExtent const)(int)lua_tonumber(L, 3);
  arg4 = (Mezzanine::AxisAlignedBox::AxisExtent const)(int)lua_tonumber(L, 4);
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetCorner(arg2,arg3,arg4);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSideExtent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox::Side arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSideExtent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSideExtent",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSideExtent",2,"Mezzanine::AxisAlignedBox::Side");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetSideExtent",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  arg2 = (Mezzanine::AxisAlignedBox::Side)(int)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::AxisAlignedBox const *)arg1)->GetSideExtent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSidePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox::Side arg2 ;
  Mezzanine::Plane result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSidePlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSidePlane",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSidePlane",2,"Mezzanine::AxisAlignedBox::Side");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetSidePlane",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  arg2 = (Mezzanine::AxisAlignedBox::Side)(int)lua_tonumber(L, 2);
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetSidePlane(arg2);
  {
    Mezzanine::Plane * resultptr = new Mezzanine::Plane((const Mezzanine::Plane &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_ExtractOgreAABB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Ogre::AxisAlignedBox *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::ExtractOgreAABB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ExtractOgreAABB",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ExtractOgreAABB",2,"Ogre::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ExtractOgreAABB",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ExtractOgreAABB",2,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  (arg1)->ExtractOgreAABB((Ogre::AxisAlignedBox const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetOgreAABB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Ogre::AxisAlignedBox result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetOgreAABB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetOgreAABB",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetOgreAABB",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetOgreAABB();
  {
    Ogre::AxisAlignedBox * resultptr = new Ogre::AxisAlignedBox((const Ogre::AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoSerialize",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::AxisAlignedBox const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoDeSerialize",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSerializableName",0,0)
  result = Mezzanine::AxisAlignedBox::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___lt",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___lt",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->operator <((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <=",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <=",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___le",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___le",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->operator <=((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator ==",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator ==",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___eq",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___eq",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->operator ==((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AxisAlignedBox(void *obj) {
Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_AxisAlignedBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AxisAlignedBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AxisAlignedBox_attributes[] = {
    { "MinExt", _wrap_AxisAlignedBox_MinExt_get, _wrap_AxisAlignedBox_MinExt_set },
    { "MaxExt", _wrap_AxisAlignedBox_MaxExt_get, _wrap_AxisAlignedBox_MaxExt_set },
    {0,0,0}
};
static swig_lua_method swig_AxisAlignedBox_methods[]= {
    { "IsZero", _wrap_AxisAlignedBox_IsZero},
    { "GetVolume", _wrap_AxisAlignedBox_GetVolume},
    { "GetOverlap", _wrap_AxisAlignedBox_GetOverlap},
    { "Expand", _wrap_AxisAlignedBox_Expand},
    { "IsInside", _wrap_AxisAlignedBox_IsInside},
    { "IsOverlapping", _wrap_AxisAlignedBox_IsOverlapping},
    { "Intersects", _wrap_AxisAlignedBox_Intersects},
    { "SetExtents", _wrap_AxisAlignedBox_SetExtents},
    { "GetSize", _wrap_AxisAlignedBox_GetSize},
    { "GetHalfSize", _wrap_AxisAlignedBox_GetHalfSize},
    { "GetCenter", _wrap_AxisAlignedBox_GetCenter},
    { "GetCorner", _wrap_AxisAlignedBox_GetCorner},
    { "GetSideExtent", _wrap_AxisAlignedBox_GetSideExtent},
    { "GetSidePlane", _wrap_AxisAlignedBox_GetSidePlane},
    { "ExtractOgreAABB", _wrap_AxisAlignedBox_ExtractOgreAABB},
    { "GetOgreAABB", _wrap_AxisAlignedBox_GetOgreAABB},
    { "ProtoSerialize", _wrap_AxisAlignedBox_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_AxisAlignedBox_ProtoDeSerialize},
    { "__lt", _wrap_AxisAlignedBox___lt},
    { "__le", _wrap_AxisAlignedBox___le},
    { "__eq", _wrap_AxisAlignedBox___eq},
    {0,0}
};
static swig_lua_method swig_AxisAlignedBox_meta[] = {
    { "__lt", _wrap_AxisAlignedBox___lt},
    { "__le", _wrap_AxisAlignedBox___le},
    { "__eq", _wrap_AxisAlignedBox___eq},
    {0,0}
};

static swig_lua_attribute swig_AxisAlignedBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AxisAlignedBox_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("AE_Min", Mezzanine::AxisAlignedBox::AE_Min)},
    {SWIG_LUA_CONSTTAB_INT("AE_Max", Mezzanine::AxisAlignedBox::AE_Max)},
    {SWIG_LUA_CONSTTAB_INT("SideMinX", Mezzanine::AxisAlignedBox::SideMinX)},
    {SWIG_LUA_CONSTTAB_INT("SideMinY", Mezzanine::AxisAlignedBox::SideMinY)},
    {SWIG_LUA_CONSTTAB_INT("SideMinZ", Mezzanine::AxisAlignedBox::SideMinZ)},
    {SWIG_LUA_CONSTTAB_INT("SideMaxX", Mezzanine::AxisAlignedBox::SideMaxX)},
    {SWIG_LUA_CONSTTAB_INT("SideMaxY", Mezzanine::AxisAlignedBox::SideMaxY)},
    {SWIG_LUA_CONSTTAB_INT("SideMaxZ", Mezzanine::AxisAlignedBox::SideMaxZ)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AxisAlignedBox_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_AxisAlignedBox_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_AxisAlignedBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AxisAlignedBox_Sf_SwigStatic = {
    "AxisAlignedBox",
    swig_AxisAlignedBox_Sf_SwigStatic_methods,
    swig_AxisAlignedBox_Sf_SwigStatic_attributes,
    swig_AxisAlignedBox_Sf_SwigStatic_constants,
    swig_AxisAlignedBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AxisAlignedBox_bases[] = {0};
static const char *swig_AxisAlignedBox_base_names[] = {0};
static swig_lua_class _wrap_class_AxisAlignedBox = { "AxisAlignedBox", "AxisAlignedBox", &SWIGTYPE_p_Mezzanine__AxisAlignedBox,_proxy__wrap_new_AxisAlignedBox, swig_delete_AxisAlignedBox, swig_AxisAlignedBox_methods, swig_AxisAlignedBox_attributes, &swig_AxisAlignedBox_Sf_SwigStatic, swig_AxisAlignedBox_meta, swig_AxisAlignedBox_bases, swig_AxisAlignedBox_base_names };

static int _wrap_new_BinaryBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",0,0)
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = 0 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("new_BinaryBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer((Mezzanine::BinaryTools::BinaryBuffer const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::Whole const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole const)lua_tonumber(L, 1);
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer::Byte *arg1 = (Mezzanine::BinaryTools::BinaryBuffer::Byte *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer::Byte *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("new_BinaryBuffer",1,SWIGTYPE_p_signed_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::String temp1 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::String const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BinaryBuffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BinaryBuffer__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BinaryBuffer__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BinaryBuffer__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BinaryBuffer__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BinaryBuffer__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BinaryBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer()\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::BinaryTools::BinaryBuffer const &)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::BinaryTools::BinaryBuffer::Byte *,Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryBuffer_CreateBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::CreateBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::CreateBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_CreateBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  (arg1)->CreateBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_DeleteBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_DeleteBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->DeleteBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_DeleteBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_DeleteBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  (arg1)->DeleteBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_DeleteBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BinaryBuffer_DeleteBuffer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryBuffer_DeleteBuffer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BinaryBuffer_DeleteBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer(Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer()\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryBuffer_CreateFromBase64(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_CreateFromBase64",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->CreateFromBase64((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_ToBase64String(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::ToBase64String",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::ToBase64String",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_ToBase64String",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (arg1)->ToBase64String();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_Concatenate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::BinaryTools::BinaryBuffer::Byte *arg2 = (Mezzanine::BinaryTools::BinaryBuffer::Byte *) 0 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",2,"Mezzanine::BinaryTools::BinaryBuffer::Byte const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",2,SWIGTYPE_p_signed_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  (arg1)->Concatenate((Mezzanine::BinaryTools::BinaryBuffer::Byte const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_Concatenate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::BinaryTools::BinaryBuffer arg2 ;
  Mezzanine::BinaryTools::BinaryBuffer *argp2 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",2,"Mezzanine::BinaryTools::BinaryBuffer const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",2,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  arg2 = *argp2;
  
  (arg1)->Concatenate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_Concatenate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryBuffer_Concatenate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BinaryBuffer_Concatenate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BinaryBuffer_Concatenate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::Concatenate(Mezzanine::BinaryTools::BinaryBuffer::Byte const *,Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::Concatenate(Mezzanine::BinaryTools::BinaryBuffer const)\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryBuffer_ToString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::ToString",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_ToString",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (arg1)->ToString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_GetSize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::GetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::GetSize",1,"Mezzanine::BinaryTools::BinaryBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_GetSize",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::BinaryTools::BinaryBuffer const *)arg1)->GetSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BinaryBuffer(void *obj) {
Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_BinaryBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BinaryBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BinaryBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BinaryBuffer_methods[]= {
    { "CreateBuffer", _wrap_BinaryBuffer_CreateBuffer},
    { "DeleteBuffer", _wrap_BinaryBuffer_DeleteBuffer},
    { "CreateFromBase64", _wrap_BinaryBuffer_CreateFromBase64},
    { "ToBase64String", _wrap_BinaryBuffer_ToBase64String},
    { "Concatenate", _wrap_BinaryBuffer_Concatenate},
    { "ToString", _wrap_BinaryBuffer_ToString},
    { "GetSize", _wrap_BinaryBuffer_GetSize},
    {0,0}
};
static swig_lua_method swig_BinaryBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BinaryBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BinaryBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BinaryBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BinaryBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BinaryBuffer_Sf_SwigStatic = {
    "BinaryBuffer",
    swig_BinaryBuffer_Sf_SwigStatic_methods,
    swig_BinaryBuffer_Sf_SwigStatic_attributes,
    swig_BinaryBuffer_Sf_SwigStatic_constants,
    swig_BinaryBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BinaryBuffer_bases[] = {0};
static const char *swig_BinaryBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_BinaryBuffer = { "BinaryBuffer", "BinaryBuffer", &SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,_proxy__wrap_new_BinaryBuffer, swig_delete_BinaryBuffer, swig_BinaryBuffer_methods, swig_BinaryBuffer_attributes, &swig_BinaryBuffer_Sf_SwigStatic, swig_BinaryBuffer_meta, swig_BinaryBuffer_bases, swig_BinaryBuffer_base_names };

static int _wrap_IsBase64(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::IsBase64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::IsBase64",1,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  result = (Mezzanine::Boole)Mezzanine::BinaryTools::IsBase64(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Encode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::BinaryTools::Base64Encode((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Encode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",1,"Mezzanine::BinaryTools::BinaryBuffer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("Base64Encode",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = Mezzanine::BinaryTools::Base64Encode((Mezzanine::BinaryTools::BinaryBuffer const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt8 *arg1 = (Mezzanine::UInt8 *) 0 ;
  unsigned int arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Encode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",1,"Mezzanine::UInt8 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Base64Encode",1,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = Mezzanine::BinaryTools::Base64Encode((unsigned char const *)arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Base64Encode__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Base64Encode__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Base64Encode__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Base64Encode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::Base64Encode(Mezzanine::String const &)\n"
    "    Mezzanine::BinaryTools::Base64Encode(Mezzanine::BinaryTools::BinaryBuffer const &)\n"
    "    Mezzanine::BinaryTools::Base64Encode(Mezzanine::UInt8 const *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Base64Decode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::BinaryTools::BinaryBuffer result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Decode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Decode",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::BinaryTools::Base64Decode((std::string const &)*arg1);
  {
    Mezzanine::BinaryTools::BinaryBuffer * resultptr = new Mezzanine::BinaryTools::BinaryBuffer((const Mezzanine::BinaryTools::BinaryBuffer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PredictBinarySizeFromBase64String(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::PredictBinarySizeFromBase64String",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::PredictBinarySizeFromBase64String",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Whole)Mezzanine::BinaryTools::PredictBinarySizeFromBase64String((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PredictBase64StringSizeFromBinarySize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::PredictBase64StringSizeFromBinarySize",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::PredictBase64StringSizeFromBinarySize",1,"Mezzanine::Whole");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole)lua_tonumber(L, 1);
  result = (Mezzanine::Whole)Mezzanine::BinaryTools::PredictBase64StringSizeFromBinarySize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RayQueryTool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::RayQueryTool",0,0)
  result = (Mezzanine::RayQueryTool *)new Mezzanine::RayQueryTool();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RayQueryTool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RayQueryTool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::RayQueryTool *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::RayQueryTool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::RayQueryTool",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_RayQueryTool",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::RayQueryTool *)new Mezzanine::RayQueryTool(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RayQueryTool,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RayQueryTool(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RayQueryTool__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RayQueryTool__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RayQueryTool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RayQueryTool::RayQueryTool()\n"
    "    Mezzanine::RayQueryTool::RayQueryTool(Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_RayQueryTool_SetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::SetWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::SetWorld",1,"Mezzanine::RayQueryTool *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::RayQueryTool::SetWorld",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_SetWorld",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("RayQueryTool_SetWorld",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->SetWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_ClearReturns(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::ClearReturns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::ClearReturns",1,"Mezzanine::RayQueryTool *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_ClearReturns",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  result = (Mezzanine::Boole)(arg1)->ClearReturns();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_LastQueryResultsValid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::LastQueryResultsValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::LastQueryResultsValid",1,"Mezzanine::RayQueryTool const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_LastQueryResultsValid",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::RayQueryTool const *)arg1)->LastQueryResultsValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_LastQueryResultsOffset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::LastQueryResultsOffset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::LastQueryResultsOffset",1,"Mezzanine::RayQueryTool const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_LastQueryResultsOffset",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  result = ((Mezzanine::RayQueryTool const *)arg1)->LastQueryResultsOffset();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_LastQueryResultsObjectPtr(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::WorldObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::LastQueryResultsObjectPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::LastQueryResultsObjectPtr",1,"Mezzanine::RayQueryTool const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_LastQueryResultsObjectPtr",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  result = (Mezzanine::WorldObject *)((Mezzanine::RayQueryTool const *)arg1)->LastQueryResultsObjectPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_GetFirstObjectOnRayByPolygon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Ray arg2 ;
  Mezzanine::Whole arg3 ;
  Mezzanine::Ray *argp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::GetFirstObjectOnRayByPolygon",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::GetFirstObjectOnRayByPolygon",1,"Mezzanine::RayQueryTool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryTool::GetFirstObjectOnRayByPolygon",2,"Mezzanine::Ray");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::RayQueryTool::GetFirstObjectOnRayByPolygon",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_GetFirstObjectOnRayByPolygon",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQueryTool_GetFirstObjectOnRayByPolygon",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)(arg1)->GetFirstObjectOnRayByPolygon(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_GetFirstObjectOnRayByAABB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Ray arg2 ;
  Mezzanine::Whole arg3 ;
  Mezzanine::Ray *argp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::GetFirstObjectOnRayByAABB",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::GetFirstObjectOnRayByAABB",1,"Mezzanine::RayQueryTool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryTool::GetFirstObjectOnRayByAABB",2,"Mezzanine::Ray");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::RayQueryTool::GetFirstObjectOnRayByAABB",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_GetFirstObjectOnRayByAABB",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQueryTool_GetFirstObjectOnRayByAABB",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  result = (Mezzanine::Boole)(arg1)->GetFirstObjectOnRayByAABB(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_RayPlaneIntersection(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Plane *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::RayPlaneIntersection",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::RayPlaneIntersection",1,"Mezzanine::RayQueryTool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryTool::RayPlaneIntersection",2,"Mezzanine::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::RayQueryTool::RayPlaneIntersection",3,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_RayPlaneIntersection",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQueryTool_RayPlaneIntersection",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("RayQueryTool_RayPlaneIntersection",3,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)(arg1)->RayPlaneIntersection((Mezzanine::Ray const &)*arg2,(Mezzanine::Plane const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_GetMouseRay(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::GetMouseRay",0,0)
  result = Mezzanine::RayQueryTool::GetMouseRay();
  {
    Mezzanine::Ray * resultptr = new Mezzanine::Ray((const Mezzanine::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::ProtoSerialize",1,"Mezzanine::RayQueryTool const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryTool::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RayQueryTool_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::RayQueryTool const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryTool::ProtoDeSerialize",1,"Mezzanine::RayQueryTool *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryTool::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryTool,0))){
    SWIG_fail_ptr("RayQueryTool_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__RayQueryTool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RayQueryTool_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryTool_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::RayQueryTool::GetSerializableName",0,0)
  result = Mezzanine::RayQueryTool::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RayQueryTool(void *obj) {
Mezzanine::RayQueryTool *arg1 = (Mezzanine::RayQueryTool *) obj;
delete arg1;
}
static int _proxy__wrap_new_RayQueryTool(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RayQueryTool);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RayQueryTool_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RayQueryTool_methods[]= {
    { "SetWorld", _wrap_RayQueryTool_SetWorld},
    { "ClearReturns", _wrap_RayQueryTool_ClearReturns},
    { "LastQueryResultsValid", _wrap_RayQueryTool_LastQueryResultsValid},
    { "LastQueryResultsOffset", _wrap_RayQueryTool_LastQueryResultsOffset},
    { "LastQueryResultsObjectPtr", _wrap_RayQueryTool_LastQueryResultsObjectPtr},
    { "GetFirstObjectOnRayByPolygon", _wrap_RayQueryTool_GetFirstObjectOnRayByPolygon},
    { "GetFirstObjectOnRayByAABB", _wrap_RayQueryTool_GetFirstObjectOnRayByAABB},
    { "RayPlaneIntersection", _wrap_RayQueryTool_RayPlaneIntersection},
    { "ProtoSerialize", _wrap_RayQueryTool_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_RayQueryTool_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_RayQueryTool_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RayQueryTool_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RayQueryTool_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RayQueryTool_Sf_SwigStatic_methods[]= {
    { "GetMouseRay", _wrap_RayQueryTool_GetMouseRay},
    { "GetSerializableName", _wrap_RayQueryTool_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_RayQueryTool_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RayQueryTool_Sf_SwigStatic = {
    "RayQueryTool",
    swig_RayQueryTool_Sf_SwigStatic_methods,
    swig_RayQueryTool_Sf_SwigStatic_attributes,
    swig_RayQueryTool_Sf_SwigStatic_constants,
    swig_RayQueryTool_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RayQueryTool_bases[] = {0};
static const char *swig_RayQueryTool_base_names[] = {0};
static swig_lua_class _wrap_class_RayQueryTool = { "RayQueryTool", "RayQueryTool", &SWIGTYPE_p_Mezzanine__RayQueryTool,_proxy__wrap_new_RayQueryTool, swig_delete_RayQueryTool, swig_RayQueryTool_methods, swig_RayQueryTool_attributes, &swig_RayQueryTool_Sf_SwigStatic, swig_RayQueryTool_meta, swig_RayQueryTool_bases, swig_RayQueryTool_base_names };

static int _wrap_AngleLimits_Upper_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleLimits *arg1 = (Mezzanine::AngleLimits *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleLimits::Upper",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleLimits::Upper",1,"Mezzanine::AngleLimits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleLimits::Upper",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleLimits,0))){
    SWIG_fail_ptr("AngleLimits_Upper_set",1,SWIGTYPE_p_Mezzanine__AngleLimits);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Upper = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleLimits_Upper_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleLimits *arg1 = (Mezzanine::AngleLimits *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AngleLimits::Upper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleLimits::Upper",1,"Mezzanine::AngleLimits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleLimits,0))){
    SWIG_fail_ptr("AngleLimits_Upper_get",1,SWIGTYPE_p_Mezzanine__AngleLimits);
  }
  
  result = (Mezzanine::Real) ((arg1)->Upper);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleLimits_Lower_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleLimits *arg1 = (Mezzanine::AngleLimits *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleLimits::Lower",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleLimits::Lower",1,"Mezzanine::AngleLimits *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleLimits::Lower",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleLimits,0))){
    SWIG_fail_ptr("AngleLimits_Lower_set",1,SWIGTYPE_p_Mezzanine__AngleLimits);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Lower = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleLimits_Lower_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleLimits *arg1 = (Mezzanine::AngleLimits *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AngleLimits::Lower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleLimits::Lower",1,"Mezzanine::AngleLimits *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleLimits,0))){
    SWIG_fail_ptr("AngleLimits_Lower_get",1,SWIGTYPE_p_Mezzanine__AngleLimits);
  }
  
  result = (Mezzanine::Real) ((arg1)->Lower);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AngleLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleLimits *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AngleLimits::AngleLimits",0,0)
  result = (Mezzanine::AngleLimits *)new Mezzanine::AngleLimits();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AngleLimits,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AngleLimits(void *obj) {
Mezzanine::AngleLimits *arg1 = (Mezzanine::AngleLimits *) obj;
delete arg1;
}
static int _proxy__wrap_new_AngleLimits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AngleLimits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AngleLimits_attributes[] = {
    { "Upper", _wrap_AngleLimits_Upper_get, _wrap_AngleLimits_Upper_set },
    { "Lower", _wrap_AngleLimits_Lower_get, _wrap_AngleLimits_Lower_set },
    {0,0,0}
};
static swig_lua_method swig_AngleLimits_methods[]= {
    {0,0}
};
static swig_lua_method swig_AngleLimits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AngleLimits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AngleLimits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AngleLimits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AngleLimits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AngleLimits_Sf_SwigStatic = {
    "AngleLimits",
    swig_AngleLimits_Sf_SwigStatic_methods,
    swig_AngleLimits_Sf_SwigStatic_attributes,
    swig_AngleLimits_Sf_SwigStatic_constants,
    swig_AngleLimits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AngleLimits_bases[] = {0};
static const char *swig_AngleLimits_base_names[] = {0};
static swig_lua_class _wrap_class_AngleLimits = { "AngleLimits", "AngleLimits", &SWIGTYPE_p_Mezzanine__AngleLimits,_proxy__wrap_new_AngleLimits, swig_delete_AngleLimits, swig_AngleLimits_methods, swig_AngleLimits_attributes, &swig_AngleLimits_Sf_SwigStatic, swig_AngleLimits_meta, swig_AngleLimits_bases, swig_AngleLimits_base_names };

static int _wrap_new_CameraController__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::CameraController",0,0)
  result = (Mezzanine::CameraController *)new Mezzanine::CameraController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__CameraController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraController__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::CameraProxy *arg1 = (Mezzanine::Graphics::CameraProxy *) 0 ;
  Mezzanine::CameraController *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::CameraController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::CameraController",1,"Mezzanine::Graphics::CameraProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy,0))){
    SWIG_fail_ptr("new_CameraController",1,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy);
  }
  
  result = (Mezzanine::CameraController *)new Mezzanine::CameraController(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__CameraController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraController(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CameraController__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__CameraProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CameraController__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CameraController'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::CameraController::CameraController()\n"
    "    Mezzanine::CameraController::CameraController(Mezzanine::Graphics::CameraProxy *)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraController_SetControlledCamera(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Graphics::CameraProxy *arg2 = (Mezzanine::Graphics::CameraProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetControlledCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetControlledCamera",1,"Mezzanine::CameraController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetControlledCamera",2,"Mezzanine::Graphics::CameraProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetControlledCamera",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy,0))){
    SWIG_fail_ptr("CameraController_SetControlledCamera",2,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy);
  }
  
  (arg1)->SetControlledCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_GetControlledCamera(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Graphics::CameraProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::GetControlledCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::GetControlledCamera",1,"Mezzanine::CameraController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_GetControlledCamera",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  result = (Mezzanine::Graphics::CameraProxy *)((Mezzanine::CameraController const *)arg1)->GetControlledCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetMovementMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::CameraController::MovementMode *arg2 = 0 ;
  Mezzanine::CameraController::MovementMode temp2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetMovementMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetMovementMode",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetMovementMode",2,"Mezzanine::CameraController::MovementMode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetMovementMode",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::CameraController::MovementMode)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetMovementMode((Mezzanine::CameraController::MovementMode const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_GetMovementMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::CameraController::MovementMode result;
  
  SWIG_check_num_args("Mezzanine::CameraController::GetMovementMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::GetMovementMode",1,"Mezzanine::CameraController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_GetMovementMode",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  result = (Mezzanine::CameraController::MovementMode)((Mezzanine::CameraController const *)arg1)->GetMovementMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetHoverHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetHoverHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetHoverHeight",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetHoverHeight",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetHoverHeight",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetHoverHeight((Mezzanine::Real const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_GetHoverHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::CameraController::GetHoverHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::GetHoverHeight",1,"Mezzanine::CameraController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_GetHoverHeight",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  result = (Mezzanine::Real)((Mezzanine::CameraController const *)arg1)->GetHoverHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetYawLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetYawLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetYawLimits",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetYawLimits",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::SetYawLimits",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetYawLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetYawLimits((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_RemoveYawLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::RemoveYawLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::RemoveYawLimits",1,"Mezzanine::CameraController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_RemoveYawLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  (arg1)->RemoveYawLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetPitchLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetPitchLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetPitchLimits",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetPitchLimits",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::SetPitchLimits",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetPitchLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetPitchLimits((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_RemovePitchLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::RemovePitchLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::RemovePitchLimits",1,"Mezzanine::CameraController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_RemovePitchLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  (arg1)->RemovePitchLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetRollLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetRollLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetRollLimits",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetRollLimits",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::SetRollLimits",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetRollLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetRollLimits((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_RemoveRollLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::RemoveRollLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::RemoveRollLimits",1,"Mezzanine::CameraController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_RemoveRollLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  (arg1)->RemoveRollLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_MoveForward(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::MoveForward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::MoveForward",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::MoveForward",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_MoveForward",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->MoveForward(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_MoveBackward(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::MoveBackward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::MoveBackward",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::MoveBackward",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_MoveBackward",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->MoveBackward(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_StrafeLeft(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::StrafeLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::StrafeLeft",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::StrafeLeft",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_StrafeLeft",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->StrafeLeft(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_StrafeRight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::StrafeRight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::StrafeRight",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::StrafeRight",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_StrafeRight",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->StrafeRight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_Rotate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::Rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",4,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_Rotate",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  (arg1)->Rotate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_Rotate6DOF(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::Rotate6DOF",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",4,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_Rotate6DOF",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  (arg1)->Rotate6DOF(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CameraController(void *obj) {
Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) obj;
delete arg1;
}
static int _proxy__wrap_new_CameraController(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CameraController);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CameraController_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraController_methods[]= {
    { "SetControlledCamera", _wrap_CameraController_SetControlledCamera},
    { "GetControlledCamera", _wrap_CameraController_GetControlledCamera},
    { "SetMovementMode", _wrap_CameraController_SetMovementMode},
    { "GetMovementMode", _wrap_CameraController_GetMovementMode},
    { "SetHoverHeight", _wrap_CameraController_SetHoverHeight},
    { "GetHoverHeight", _wrap_CameraController_GetHoverHeight},
    { "SetYawLimits", _wrap_CameraController_SetYawLimits},
    { "RemoveYawLimits", _wrap_CameraController_RemoveYawLimits},
    { "SetPitchLimits", _wrap_CameraController_SetPitchLimits},
    { "RemovePitchLimits", _wrap_CameraController_RemovePitchLimits},
    { "SetRollLimits", _wrap_CameraController_SetRollLimits},
    { "RemoveRollLimits", _wrap_CameraController_RemoveRollLimits},
    { "MoveForward", _wrap_CameraController_MoveForward},
    { "MoveBackward", _wrap_CameraController_MoveBackward},
    { "StrafeLeft", _wrap_CameraController_StrafeLeft},
    { "StrafeRight", _wrap_CameraController_StrafeRight},
    { "Rotate", _wrap_CameraController_Rotate},
    { "Rotate6DOF", _wrap_CameraController_Rotate6DOF},
    {0,0}
};
static swig_lua_method swig_CameraController_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CameraController_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CameraController_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("CCM_Fly", Mezzanine::CameraController::CCM_Fly)},
    {SWIG_LUA_CONSTTAB_INT("CCM_Walk", Mezzanine::CameraController::CCM_Walk)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CameraController_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CameraController_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CameraController_Sf_SwigStatic = {
    "CameraController",
    swig_CameraController_Sf_SwigStatic_methods,
    swig_CameraController_Sf_SwigStatic_attributes,
    swig_CameraController_Sf_SwigStatic_constants,
    swig_CameraController_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CameraController_bases[] = {0};
static const char *swig_CameraController_base_names[] = {0};
static swig_lua_class _wrap_class_CameraController = { "CameraController", "CameraController", &SWIGTYPE_p_Mezzanine__CameraController,_proxy__wrap_new_CameraController, swig_delete_CameraController, swig_CameraController_methods, swig_CameraController_attributes, &swig_CameraController_Sf_SwigStatic, swig_CameraController_meta, swig_CameraController_bases, swig_CameraController_base_names };

static int _wrap_Vector2_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::X",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_X_set",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::X",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_X_get",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Y",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Y_set",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Y",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Y_get",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",0,0)
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",2,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Ogre::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::Vector2()\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Real const &)\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector2::Vector2(Ogre::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_GetOgreVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetOgreVector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::GetOgreVector2",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_GetOgreVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->GetOgreVector2();
  {
    Ogre::Vector2 * resultptr = new Ogre::Vector2((const Ogre::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ExtractOgreVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ExtractOgreVector2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ExtractOgreVector2",1,"Mezzanine::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ExtractOgreVector2",2,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ExtractOgreVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_ExtractOgreVector2",2,SWIGTYPE_p_Ogre__Vector2);
  }
  
  (arg1)->ExtractOgreVector2((Ogre::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Unit_X",0,0)
  result = Mezzanine::Vector2::Unit_X();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Unit_Y",0,0)
  result = Mezzanine::Vector2::Unit_Y();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Neg_Unit_X",0,0)
  result = Mezzanine::Vector2::Neg_Unit_X();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector2::Neg_Unit_Y();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SetIdentity",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SetIdentity",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::SetValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SetValues",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::IsZero",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_IsZero",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator ==((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",2,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator ==((Ogre::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___eq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator ==(Mezzanine::Vector2 const &) const\n"
    "    Mezzanine::Vector2::operator ==(Ogre::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator <=",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator <=",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___le",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___le",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator <=((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator -",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator *",1,"Mezzanine::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator /",1,"Mezzanine::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator +",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator +",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator +((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator -",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator -",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator -((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator *",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator *",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector2::operator *(Mezzanine::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator /",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator /",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector2::operator /(Mezzanine::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::CrossProduct",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::CrossProduct",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->CrossProduct((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::DotProduct",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::DotProduct",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->DotProduct((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Distance",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Distance",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Distance",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Distance",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->Distance((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SquaredDistance",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::SquaredDistance",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->SquaredDistance((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Length",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Length",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SquaredLength",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Perpendicular",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Reflect",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Reflect",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Reflect",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Reflect",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->Reflect((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Normalize",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Normalize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Vector2 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::GetNormal",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_AngleTo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::AngleTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::AngleTo",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::AngleTo",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleTo",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleTo",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->AngleTo((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_AngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::AngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::AngleBetween",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::AngleBetween",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleBetween",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleBetween",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->AngleBetween((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ProtoSerialize",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Vector2_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Vector2 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ProtoDeSerialize",1,"Mezzanine::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Vector2_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetSerializableName",0,0)
  result = Mezzanine::Vector2::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2_attributes[] = {
    { "X", _wrap_Vector2_X_get, _wrap_Vector2_X_set },
    { "Y", _wrap_Vector2_Y_get, _wrap_Vector2_Y_set },
    {0,0,0}
};
static swig_lua_method swig_Vector2_methods[]= {
    { "GetOgreVector2", _wrap_Vector2_GetOgreVector2},
    { "ExtractOgreVector2", _wrap_Vector2_ExtractOgreVector2},
    { "SetIdentity", _wrap_Vector2_SetIdentity},
    { "SetValues", _wrap_Vector2_SetValues},
    { "IsZero", _wrap_Vector2_IsZero},
    { "__eq", _wrap_Vector2___eq},
    { "__le", _wrap_Vector2___le},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    { "CrossProduct", _wrap_Vector2_CrossProduct},
    { "DotProduct", _wrap_Vector2_DotProduct},
    { "Distance", _wrap_Vector2_Distance},
    { "SquaredDistance", _wrap_Vector2_SquaredDistance},
    { "Length", _wrap_Vector2_Length},
    { "SquaredLength", _wrap_Vector2_SquaredLength},
    { "Perpendicular", _wrap_Vector2_Perpendicular},
    { "Reflect", _wrap_Vector2_Reflect},
    { "Normalize", _wrap_Vector2_Normalize},
    { "GetNormal", _wrap_Vector2_GetNormal},
    { "AngleTo", _wrap_Vector2_AngleTo},
    { "AngleBetween", _wrap_Vector2_AngleBetween},
    { "ProtoSerialize", _wrap_Vector2_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Vector2_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_Vector2_meta[] = {
    { "__eq", _wrap_Vector2___eq},
    { "__le", _wrap_Vector2___le},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    {0,0}
};

static swig_lua_attribute swig_Vector2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2_Sf_SwigStatic_methods[]= {
    { "Unit_X", _wrap_Vector2_Unit_X},
    { "Unit_Y", _wrap_Vector2_Unit_Y},
    { "Neg_Unit_X", _wrap_Vector2_Neg_Unit_X},
    { "Neg_Unit_Y", _wrap_Vector2_Neg_Unit_Y},
    { "GetSerializableName", _wrap_Vector2_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Vector2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2_Sf_SwigStatic = {
    "Vector2",
    swig_Vector2_Sf_SwigStatic_methods,
    swig_Vector2_Sf_SwigStatic_attributes,
    swig_Vector2_Sf_SwigStatic_constants,
    swig_Vector2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2_bases[] = {0};
static const char *swig_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2 = { "Vector2", "Vector2", &SWIGTYPE_p_Mezzanine__Vector2,_proxy__wrap_new_Vector2, swig_delete_Vector2, swig_Vector2_methods, swig_Vector2_attributes, &swig_Vector2_Sf_SwigStatic, swig_Vector2_meta, swig_Vector2_bases, swig_Vector2_base_names };

static int _wrap_Vector2LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2LengthCompare *arg1 = (Mezzanine::Vector2LengthCompare *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",1,"Mezzanine::Vector2LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",2,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",3,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2LengthCompare,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector2LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2LengthCompare const *)arg1)->operator ()((Mezzanine::Vector2 const &)*arg2,(Mezzanine::Vector2 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2LengthCompare::Vector2LengthCompare",0,0)
  result = (Mezzanine::Vector2LengthCompare *)new Mezzanine::Vector2LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2LengthCompare(void *obj) {
Mezzanine::Vector2LengthCompare *arg1 = (Mezzanine::Vector2LengthCompare *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2LengthCompare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2LengthCompare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector2LengthCompare_methods[]= {
    { "__call", _wrap_Vector2LengthCompare___call},
    {0,0}
};
static swig_lua_method swig_Vector2LengthCompare_meta[] = {
    { "__call", _wrap_Vector2LengthCompare___call},
    {0,0}
};

static swig_lua_attribute swig_Vector2LengthCompare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2LengthCompare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2LengthCompare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector2LengthCompare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2LengthCompare_Sf_SwigStatic = {
    "Vector2LengthCompare",
    swig_Vector2LengthCompare_Sf_SwigStatic_methods,
    swig_Vector2LengthCompare_Sf_SwigStatic_attributes,
    swig_Vector2LengthCompare_Sf_SwigStatic_constants,
    swig_Vector2LengthCompare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2LengthCompare_bases[] = {0};
static const char *swig_Vector2LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2LengthCompare = { "Vector2LengthCompare", "Vector2LengthCompare", &SWIGTYPE_p_Mezzanine__Vector2LengthCompare,_proxy__wrap_new_Vector2LengthCompare, swig_delete_Vector2LengthCompare, swig_Vector2LengthCompare_methods, swig_Vector2LengthCompare_attributes, &swig_Vector2LengthCompare_Sf_SwigStatic, swig_Vector2LengthCompare_meta, swig_Vector2LengthCompare_bases, swig_Vector2LengthCompare_base_names };

static int _wrap_Circle_Center_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Vector2 *arg2 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Center",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Center",1,"Mezzanine::Circle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Circle::Center",2,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Center_set",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Circle_Center_set",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  if (arg1) (arg1)->Center = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Circle_Center_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Center",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Center",1,"Mezzanine::Circle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Center_get",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  result = (Mezzanine::Vector2 *)& ((arg1)->Center);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Circle_Radius_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Radius",1,"Mezzanine::Circle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Circle::Radius",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Radius_set",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Radius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Circle_Radius_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Circle::Radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Radius",1,"Mezzanine::Circle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Radius_get",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  result = (Mezzanine::Real) ((arg1)->Radius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",0,0)
  result = (Mezzanine::Circle *)new Mezzanine::Circle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Circle::Circle",1,"Mezzanine::Vector2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Circle::Circle",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Circle *)new Mezzanine::Circle((Mezzanine::Vector2 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 *arg3 = 0 ;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Circle::Circle",1,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Circle::Circle",2,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Circle::Circle",3,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",3,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Circle *)new Mezzanine::Circle((Mezzanine::Vector2 const &)*arg1,(Mezzanine::Vector2 const &)*arg2,(Mezzanine::Vector2 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Circle__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Circle__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Circle__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Circle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Circle::Circle()\n"
    "    Mezzanine::Circle::Circle(Mezzanine::Vector2 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Circle::Circle(Mezzanine::Vector2 const &,Mezzanine::Vector2 const &,Mezzanine::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Circle_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Circle::IsInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::IsInside",1,"Mezzanine::Circle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Circle::IsInside",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_IsInside",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Circle_IsInside",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Circle const *)arg1)->IsInside((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Circle(void *obj) {
Mezzanine::Circle *arg1 = (Mezzanine::Circle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Circle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Circle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Circle_attributes[] = {
    { "Center", _wrap_Circle_Center_get, _wrap_Circle_Center_set },
    { "Radius", _wrap_Circle_Radius_get, _wrap_Circle_Radius_set },
    {0,0,0}
};
static swig_lua_method swig_Circle_methods[]= {
    { "IsInside", _wrap_Circle_IsInside},
    {0,0}
};
static swig_lua_method swig_Circle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Circle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Circle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Circle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Circle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Circle_Sf_SwigStatic = {
    "Circle",
    swig_Circle_Sf_SwigStatic_methods,
    swig_Circle_Sf_SwigStatic_attributes,
    swig_Circle_Sf_SwigStatic_constants,
    swig_Circle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Circle_bases[] = {0};
static const char *swig_Circle_base_names[] = {0};
static swig_lua_class _wrap_class_Circle = { "Circle", "Circle", &SWIGTYPE_p_Mezzanine__Circle,_proxy__wrap_new_Circle, swig_delete_Circle, swig_Circle_methods, swig_Circle_attributes, &swig_Circle_Sf_SwigStatic, swig_Circle_meta, swig_Circle_bases, swig_Circle_base_names };

static int _wrap_GetPlatform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::crossplatform::GetPlatform",0,0)
  result = Mezzanine::crossplatform::GetPlatform();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTimeStamp(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MaxInt result;
  
  SWIG_check_num_args("Mezzanine::crossplatform::GetTimeStamp",0,0)
  result = (Mezzanine::MaxInt)Mezzanine::crossplatform::GetTimeStamp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Debris *arg1 = (Mezzanine::Debris *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Debris::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::ProtoSerializeProperties",1,"Mezzanine::Debris const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Debris::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("Debris_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Debris_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Debris const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Debris *arg1 = (Mezzanine::Debris *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Debris::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::ProtoDeSerializeProperties",1,"Mezzanine::Debris *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Debris::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("Debris_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Debris_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Debris *arg1 = (Mezzanine::Debris *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Debris::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::GetDerivedSerializableName",1,"Mezzanine::Debris const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("Debris_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  result = ((Mezzanine::Debris const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Debris::GetSerializableName",0,0)
  result = Mezzanine::Debris::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Debris(void *obj) {
Mezzanine::Debris *arg1 = (Mezzanine::Debris *) obj;
delete arg1;
}
static swig_lua_attribute swig_Debris_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Debris_methods[]= {
    { "ProtoSerializeProperties", _wrap_Debris_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_Debris_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_Debris_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_Debris_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Debris_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Debris_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Debris_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Debris_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Debris_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Debris_Sf_SwigStatic = {
    "Debris",
    swig_Debris_Sf_SwigStatic_methods,
    swig_Debris_Sf_SwigStatic_attributes,
    swig_Debris_Sf_SwigStatic_constants,
    swig_Debris_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Debris_bases[] = {0,0};
static const char *swig_Debris_base_names[] = {"Mezzanine::WorldObject *",0};
static swig_lua_class _wrap_class_Debris = { "Debris", "Debris", &SWIGTYPE_p_Mezzanine__Debris,0, swig_delete_Debris, swig_Debris_methods, swig_Debris_attributes, &swig_Debris_Sf_SwigStatic, swig_Debris_meta, swig_Debris_bases, swig_Debris_base_names };

static int _wrap_DebrisFactory_GetTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisFactory *arg1 = (Mezzanine::DebrisFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DebrisFactory::GetTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisFactory::GetTypeName",1,"Mezzanine::DebrisFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisFactory_GetTypeName",1,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  result = ((Mezzanine::DebrisFactory const *)arg1)->GetTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisFactory_CreateDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisFactory *arg1 = (Mezzanine::DebrisFactory *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisFactory::CreateDebris",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",1,"Mezzanine::DebrisFactory *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",3,"Mezzanine::World *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisFactory_CreateDebris",1,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DebrisFactory_CreateDebris",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("DebrisFactory_CreateDebris",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Debris *)(arg1)->CreateDebris((Mezzanine::String const &)*arg2,arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisFactory_CreateDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisFactory *arg1 = (Mezzanine::DebrisFactory *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisFactory::CreateDebris",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",1,"Mezzanine::DebrisFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",2,"Mezzanine::XML::Node const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::DebrisFactory::CreateDebris",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisFactory_CreateDebris",1,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DebrisFactory_CreateDebris",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DebrisFactory_CreateDebris",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Debris *)(arg1)->CreateDebris((Mezzanine::XML::Node const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisFactory_CreateDebris(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DebrisFactory_CreateDebris__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_DebrisFactory_CreateDebris__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisFactory_CreateDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisFactory::CreateDebris(Mezzanine::String const &,Mezzanine::World *,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::DebrisFactory::CreateDebris(Mezzanine::XML::Node const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisFactory_DestroyDebris(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisFactory *arg1 = (Mezzanine::DebrisFactory *) 0 ;
  Mezzanine::Debris *arg2 = (Mezzanine::Debris *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisFactory::DestroyDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisFactory::DestroyDebris",1,"Mezzanine::DebrisFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DebrisFactory::DestroyDebris",2,"Mezzanine::Debris *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisFactory_DestroyDebris",1,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("DebrisFactory_DestroyDebris",2,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  (arg1)->DestroyDebris(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebrisFactory(void *obj) {
Mezzanine::DebrisFactory *arg1 = (Mezzanine::DebrisFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_DebrisFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DebrisFactory_methods[]= {
    { "GetTypeName", _wrap_DebrisFactory_GetTypeName},
    { "CreateDebris", _wrap_DebrisFactory_CreateDebris},
    { "DestroyDebris", _wrap_DebrisFactory_DestroyDebris},
    {0,0}
};
static swig_lua_method swig_DebrisFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DebrisFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DebrisFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DebrisFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DebrisFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DebrisFactory_Sf_SwigStatic = {
    "DebrisFactory",
    swig_DebrisFactory_Sf_SwigStatic_methods,
    swig_DebrisFactory_Sf_SwigStatic_attributes,
    swig_DebrisFactory_Sf_SwigStatic_constants,
    swig_DebrisFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DebrisFactory_bases[] = {0};
static const char *swig_DebrisFactory_base_names[] = {0};
static swig_lua_class _wrap_class_DebrisFactory = { "DebrisFactory", "DebrisFactory", &SWIGTYPE_p_Mezzanine__DebrisFactory,0, swig_delete_DebrisFactory, swig_DebrisFactory_methods, swig_DebrisFactory_attributes, &swig_DebrisFactory_Sf_SwigStatic, swig_DebrisFactory_meta, swig_DebrisFactory_bases, swig_DebrisFactory_base_names };

static int _wrap_new_DebrisUpdateWorkUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::DebrisUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisUpdateWorkUnit::DebrisUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisUpdateWorkUnit::DebrisUpdateWorkUnit",1,"Mezzanine::DebrisManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("new_DebrisUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  result = (Mezzanine::DebrisUpdateWorkUnit *)new Mezzanine::DebrisUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebrisUpdateWorkUnit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DebrisUpdateWorkUnit__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DebrisUpdateWorkUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisUpdateWorkUnit::DebrisUpdateWorkUnit(Mezzanine::DebrisManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisUpdateWorkUnit *arg1 = (Mezzanine::DebrisUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisUpdateWorkUnit::DoWork",1,"Mezzanine::DebrisUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,0))){
    SWIG_fail_ptr("DebrisUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("DebrisUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebrisUpdateWorkUnit(void *obj) {
Mezzanine::DebrisUpdateWorkUnit *arg1 = (Mezzanine::DebrisUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_DebrisUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DebrisUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DebrisUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DebrisUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_DebrisUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_DebrisUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DebrisUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DebrisUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DebrisUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DebrisUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DebrisUpdateWorkUnit_Sf_SwigStatic = {
    "DebrisUpdateWorkUnit",
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DebrisUpdateWorkUnit_bases[] = {0};
static const char *swig_DebrisUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_DebrisUpdateWorkUnit = { "DebrisUpdateWorkUnit", "DebrisUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,_proxy__wrap_new_DebrisUpdateWorkUnit, swig_delete_DebrisUpdateWorkUnit, swig_DebrisUpdateWorkUnit_methods, swig_DebrisUpdateWorkUnit_attributes, &swig_DebrisUpdateWorkUnit_Sf_SwigStatic, swig_DebrisUpdateWorkUnit_meta, swig_DebrisUpdateWorkUnit_bases, swig_DebrisUpdateWorkUnit_base_names };

static int _wrap_DebrisManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::DebrisManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::InterfaceType",0,0)
  result = (Mezzanine::ManagerBase::ManagerType)(Mezzanine::ManagerBase::ManagerType)Mezzanine::DebrisManager::InterfaceType;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebrisManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::DebrisManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DebrisManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DebrisManager",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_DebrisManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::DebrisManager *)new Mezzanine::DebrisManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DebrisManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebrisManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::DebrisManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DebrisManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DebrisManager",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::DebrisManager",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_DebrisManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_DebrisManager",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::DebrisManager *)new Mezzanine::DebrisManager(arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DebrisManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DebrisManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DebrisManager__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_DebrisManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DebrisManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::DebrisManager(Mezzanine::World *)\n"
    "    Mezzanine::DebrisManager::DebrisManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_CreateRigidDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateRigidDebris",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",3,"Mezzanine::Real const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",4,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateRigidDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::String temp2 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateRigidDebris",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateRigidDebris__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Graphics::Mesh *arg4 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Physics::CollisionShape *arg5 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::Boole arg6 ;
  Mezzanine::String temp2 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateRigidDebris",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",3,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",4,"Mezzanine::Graphics::Mesh *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",5,"Mezzanine::Physics::CollisionShape *");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",6,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",4,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",5,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris((Mezzanine::String const &)*arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateRigidDebris__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Graphics::Mesh *arg4 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Physics::CollisionShape *arg5 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateRigidDebris",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",3,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",4,"Mezzanine::Graphics::Mesh *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",5,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",4,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",5,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris((Mezzanine::String const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateRigidDebris__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateRigidDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateRigidDebris",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DebrisManager_CreateRigidDebris",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateRigidDebris(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DebrisManager_CreateRigidDebris__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DebrisManager_CreateRigidDebris__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_DebrisManager_CreateRigidDebris__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_DebrisManager_CreateRigidDebris__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_DebrisManager_CreateRigidDebris__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_CreateRigidDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::CreateRigidDebris(Mezzanine::String const &,Mezzanine::Real const,Mezzanine::Boole const)\n"
    "    Mezzanine::DebrisManager::CreateRigidDebris(Mezzanine::String const &,Mezzanine::Real const)\n"
    "    Mezzanine::DebrisManager::CreateRigidDebris(Mezzanine::String const &,Mezzanine::Real const,Mezzanine::Graphics::Mesh *,Mezzanine::Physics::CollisionShape *,Mezzanine::Boole const)\n"
    "    Mezzanine::DebrisManager::CreateRigidDebris(Mezzanine::String const &,Mezzanine::Real const,Mezzanine::Graphics::Mesh *,Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::DebrisManager::CreateRigidDebris(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_CreateSoftDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::SoftDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateSoftDebris",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",3,"Mezzanine::Real const");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",4,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateSoftDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::SoftDebris *)(arg1)->CreateSoftDebris((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SoftDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateSoftDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::String temp2 ;
  Mezzanine::SoftDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateSoftDebris",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateSoftDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  result = (Mezzanine::SoftDebris *)(arg1)->CreateSoftDebris((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SoftDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateSoftDebris__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::SoftDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateSoftDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateSoftDebris",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateSoftDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DebrisManager_CreateSoftDebris",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::SoftDebris *)(arg1)->CreateSoftDebris((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SoftDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateSoftDebris(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DebrisManager_CreateSoftDebris__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_DebrisManager_CreateSoftDebris__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_DebrisManager_CreateSoftDebris__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_CreateSoftDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::CreateSoftDebris(Mezzanine::String const &,Mezzanine::Real const,Mezzanine::Boole const)\n"
    "    Mezzanine::DebrisManager::CreateSoftDebris(Mezzanine::String const &,Mezzanine::Real const)\n"
    "    Mezzanine::DebrisManager::CreateSoftDebris(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_CreateDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::Boole arg5 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateDebris",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",3,"Mezzanine::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",4,"Mezzanine::NameValuePairMap const &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",5,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("DebrisManager_CreateDebris",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (Mezzanine::Debris *)(arg1)->CreateDebris((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::NameValuePairMap const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateDebris",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",3,"Mezzanine::String const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("DebrisManager_CreateDebris",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Debris *)(arg1)->CreateDebris((Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateDebris__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::CreateDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::CreateDebris",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_CreateDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DebrisManager_CreateDebris",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::Debris *)(arg1)->CreateDebris((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_CreateDebris(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DebrisManager_CreateDebris__SWIG_2(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_DebrisManager_CreateDebris__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_DebrisManager_CreateDebris__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_CreateDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::CreateDebris(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::NameValuePairMap const &,Mezzanine::Boole const)\n"
    "    Mezzanine::DebrisManager::CreateDebris(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::DebrisManager::CreateDebris(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_GetDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::GetDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::GetDebris",1,"Mezzanine::DebrisManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::GetDebris",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_GetDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::Debris *)((Mezzanine::DebrisManager const *)arg1)->GetDebris(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_GetDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::GetDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::GetDebris",1,"Mezzanine::DebrisManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::GetDebris",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_GetDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Debris *)((Mezzanine::DebrisManager const *)arg1)->GetDebris((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_GetDebris(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DebrisManager_GetDebris__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DebrisManager_GetDebris__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_GetDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::GetDebris(Mezzanine::Whole const) const\n"
    "    Mezzanine::DebrisManager::GetDebris(Mezzanine::String const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_GetNumDebris(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::GetNumDebris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::GetNumDebris",1,"Mezzanine::DebrisManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_GetNumDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DebrisManager const *)arg1)->GetNumDebris();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_DestroyDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DestroyDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebris",1,"Mezzanine::DebrisManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebris",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_DestroyDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->DestroyDebris(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_DestroyDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::Debris *arg2 = (Mezzanine::Debris *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DestroyDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebris",1,"Mezzanine::DebrisManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebris",2,"Mezzanine::Debris *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_DestroyDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("DebrisManager_DestroyDebris",2,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  (arg1)->DestroyDebris(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_DestroyDebris(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Debris, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DebrisManager_DestroyDebris__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_DebrisManager_DestroyDebris__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_DestroyDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::DestroyDebris(Mezzanine::Whole const)\n"
    "    Mezzanine::DebrisManager::DestroyDebris(Mezzanine::Debris *)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_DestroyAllDebris(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DestroyAllDebris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyAllDebris",1,"Mezzanine::DebrisManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_DestroyAllDebris",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  (arg1)->DestroyAllDebris();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_AddDebrisFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::DebrisFactory *arg2 = (Mezzanine::DebrisFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::AddDebrisFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::AddDebrisFactory",1,"Mezzanine::DebrisManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::AddDebrisFactory",2,"Mezzanine::DebrisFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_AddDebrisFactory",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisManager_AddDebrisFactory",2,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  (arg1)->AddDebrisFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_RemoveDebrisFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::DebrisFactory *arg2 = (Mezzanine::DebrisFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::RemoveDebrisFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::RemoveDebrisFactory",1,"Mezzanine::DebrisManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::RemoveDebrisFactory",2,"Mezzanine::DebrisFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_RemoveDebrisFactory",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisManager_RemoveDebrisFactory",2,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  (arg1)->RemoveDebrisFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_RemoveDebrisFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::RemoveDebrisFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::RemoveDebrisFactory",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::RemoveDebrisFactory",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_RemoveDebrisFactory",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->RemoveDebrisFactory((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_RemoveDebrisFactory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisFactory, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DebrisManager_RemoveDebrisFactory__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DebrisManager_RemoveDebrisFactory__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_RemoveDebrisFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::RemoveDebrisFactory(Mezzanine::DebrisFactory *)\n"
    "    Mezzanine::DebrisManager::RemoveDebrisFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_DestroyDebrisFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::DebrisFactory *arg2 = (Mezzanine::DebrisFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DestroyDebrisFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebrisFactory",1,"Mezzanine::DebrisManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebrisFactory",2,"Mezzanine::DebrisFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_DestroyDebrisFactory",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__DebrisFactory,0))){
    SWIG_fail_ptr("DebrisManager_DestroyDebrisFactory",2,SWIGTYPE_p_Mezzanine__DebrisFactory);
  }
  
  (arg1)->DestroyDebrisFactory(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_DestroyDebrisFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DestroyDebrisFactory",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebrisFactory",1,"Mezzanine::DebrisManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyDebrisFactory",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_DestroyDebrisFactory",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->DestroyDebrisFactory((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_DestroyDebrisFactory(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisFactory, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DebrisManager_DestroyDebrisFactory__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DebrisManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DebrisManager_DestroyDebrisFactory__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DebrisManager_DestroyDebrisFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DebrisManager::DestroyDebrisFactory(Mezzanine::DebrisFactory *)\n"
    "    Mezzanine::DebrisManager::DestroyDebrisFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DebrisManager_DestroyAllDebrisFactories(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::DestroyAllDebrisFactories",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::DestroyAllDebrisFactories",1,"Mezzanine::DebrisManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_DestroyAllDebrisFactories",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  (arg1)->DestroyAllDebrisFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::Pause",1,"Mezzanine::DebrisManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::DebrisManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_Pause",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::Initialize",1,"Mezzanine::DebrisManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_Initialize",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::Deinitialize",1,"Mezzanine::DebrisManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_GetDebrisUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::DebrisUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::GetDebrisUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::GetDebrisUpdateWork",1,"Mezzanine::DebrisManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_GetDebrisUpdateWork",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  result = (Mezzanine::DebrisUpdateWorkUnit *)(arg1)->GetDebrisUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::GetInterfaceType",1,"Mezzanine::DebrisManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::DebrisManager const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DebrisManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisManager::GetImplementationTypeName",1,"Mezzanine::DebrisManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisManager,0))){
    SWIG_fail_ptr("DebrisManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__DebrisManager);
  }
  
  result = ((Mezzanine::DebrisManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebrisManager(void *obj) {
Mezzanine::DebrisManager *arg1 = (Mezzanine::DebrisManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_DebrisManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DebrisManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DebrisManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DebrisManager_methods[]= {
    { "CreateRigidDebris", _wrap_DebrisManager_CreateRigidDebris},
    { "CreateSoftDebris", _wrap_DebrisManager_CreateSoftDebris},
    { "CreateDebris", _wrap_DebrisManager_CreateDebris},
    { "GetDebris", _wrap_DebrisManager_GetDebris},
    { "GetNumDebris", _wrap_DebrisManager_GetNumDebris},
    { "DestroyDebris", _wrap_DebrisManager_DestroyDebris},
    { "DestroyAllDebris", _wrap_DebrisManager_DestroyAllDebris},
    { "AddDebrisFactory", _wrap_DebrisManager_AddDebrisFactory},
    { "RemoveDebrisFactory", _wrap_DebrisManager_RemoveDebrisFactory},
    { "DestroyDebrisFactory", _wrap_DebrisManager_DestroyDebrisFactory},
    { "DestroyAllDebrisFactories", _wrap_DebrisManager_DestroyAllDebrisFactories},
    { "Pause", _wrap_DebrisManager_Pause},
    { "Initialize", _wrap_DebrisManager_Initialize},
    { "Deinitialize", _wrap_DebrisManager_Deinitialize},
    { "GetDebrisUpdateWork", _wrap_DebrisManager_GetDebrisUpdateWork},
    { "GetInterfaceType", _wrap_DebrisManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_DebrisManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_DebrisManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DebrisManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_DebrisManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_DebrisManager_InterfaceType_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_DebrisManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DebrisManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DebrisManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DebrisManager_Sf_SwigStatic = {
    "DebrisManager",
    swig_DebrisManager_Sf_SwigStatic_methods,
    swig_DebrisManager_Sf_SwigStatic_attributes,
    swig_DebrisManager_Sf_SwigStatic_constants,
    swig_DebrisManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DebrisManager_bases[] = {0,0};
static const char *swig_DebrisManager_base_names[] = {"Mezzanine::WorldManager *",0};
static swig_lua_class _wrap_class_DebrisManager = { "DebrisManager", "DebrisManager", &SWIGTYPE_p_Mezzanine__DebrisManager,_proxy__wrap_new_DebrisManager, swig_delete_DebrisManager, swig_DebrisManager_methods, swig_DebrisManager_attributes, &swig_DebrisManager_Sf_SwigStatic, swig_DebrisManager_meta, swig_DebrisManager_bases, swig_DebrisManager_base_names };

static int _wrap_new_DefaultDebrisManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultDebrisManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultDebrisManagerFactory::DefaultDebrisManagerFactory",0,0)
  result = (Mezzanine::DefaultDebrisManagerFactory *)new Mezzanine::DefaultDebrisManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultDebrisManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultDebrisManagerFactory *arg1 = (Mezzanine::DefaultDebrisManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DefaultDebrisManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::GetManagerImplName",1,"Mezzanine::DefaultDebrisManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory);
  }
  
  result = ((Mezzanine::DefaultDebrisManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultDebrisManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultDebrisManagerFactory *arg1 = (Mezzanine::DefaultDebrisManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DefaultDebrisManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::GetManagerType",1,"Mezzanine::DefaultDebrisManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::DefaultDebrisManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultDebrisManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultDebrisManagerFactory *arg1 = (Mezzanine::DefaultDebrisManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultDebrisManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::CreateManager",1,"Mezzanine::DefaultDebrisManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultDebrisManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultDebrisManagerFactory *arg1 = (Mezzanine::DefaultDebrisManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultDebrisManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::CreateManager",1,"Mezzanine::DefaultDebrisManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultDebrisManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultDebrisManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultDebrisManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultDebrisManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DefaultDebrisManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::DefaultDebrisManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultDebrisManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultDebrisManagerFactory *arg1 = (Mezzanine::DefaultDebrisManagerFactory *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultDebrisManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::DestroyManager",1,"Mezzanine::DefaultDebrisManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultDebrisManagerFactory::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("DefaultDebrisManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultDebrisManagerFactory(void *obj) {
Mezzanine::DefaultDebrisManagerFactory *arg1 = (Mezzanine::DefaultDebrisManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultDebrisManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultDebrisManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultDebrisManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultDebrisManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultDebrisManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultDebrisManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultDebrisManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultDebrisManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultDebrisManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultDebrisManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultDebrisManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultDebrisManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultDebrisManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultDebrisManagerFactory_Sf_SwigStatic = {
    "DefaultDebrisManagerFactory",
    swig_DefaultDebrisManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultDebrisManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultDebrisManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultDebrisManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultDebrisManagerFactory_bases[] = {0,0};
static const char *swig_DefaultDebrisManagerFactory_base_names[] = {"Mezzanine::WorldManagerFactory *",0};
static swig_lua_class _wrap_class_DefaultDebrisManagerFactory = { "DefaultDebrisManagerFactory", "DefaultDebrisManagerFactory", &SWIGTYPE_p_Mezzanine__DefaultDebrisManagerFactory,_proxy__wrap_new_DefaultDebrisManagerFactory, swig_delete_DefaultDebrisManagerFactory, swig_DefaultDebrisManagerFactory_methods, swig_DefaultDebrisManagerFactory_attributes, &swig_DefaultDebrisManagerFactory_Sf_SwigStatic, swig_DefaultDebrisManagerFactory_meta, swig_DefaultDebrisManagerFactory_bases, swig_DefaultDebrisManagerFactory_base_names };

static int _wrap_EventArguments_EventName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventArguments::EventName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::EventName",1,"Mezzanine::EventArguments *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventArguments,0))){
    SWIG_fail_ptr("EventArguments_EventName_get",1,SWIGTYPE_p_Mezzanine__EventArguments);
  }
  
  result = (Mezzanine::String *) & ((arg1)->EventName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventArguments(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::EventArguments *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventArguments::EventArguments",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::EventArguments",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::EventArguments *)new Mezzanine::EventArguments((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventArguments,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventArguments_IncrementReferenceCount(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::EventArguments::IncrementReferenceCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::IncrementReferenceCount",1,"Mezzanine::EventArguments *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventArguments,0))){
    SWIG_fail_ptr("EventArguments_IncrementReferenceCount",1,SWIGTYPE_p_Mezzanine__EventArguments);
  }
  
  result = (Mezzanine::Whole)(arg1)->IncrementReferenceCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventArguments_DecrementReferenceCount(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::EventArguments::DecrementReferenceCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::DecrementReferenceCount",1,"Mezzanine::EventArguments *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventArguments,0))){
    SWIG_fail_ptr("EventArguments_DecrementReferenceCount",1,SWIGTYPE_p_Mezzanine__EventArguments);
  }
  
  result = (Mezzanine::Whole)(arg1)->DecrementReferenceCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventArguments_GetReferenceCount(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::EventArguments::GetReferenceCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::GetReferenceCount",1,"Mezzanine::EventArguments const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventArguments,0))){
    SWIG_fail_ptr("EventArguments_GetReferenceCount",1,SWIGTYPE_p_Mezzanine__EventArguments);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::EventArguments const *)arg1)->GetReferenceCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventArguments_GetReferenceCountTargetAsPointer(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) 0 ;
  Mezzanine::EventArguments *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventArguments::GetReferenceCountTargetAsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::GetReferenceCountTargetAsPointer",1,"Mezzanine::EventArguments *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventArguments,0))){
    SWIG_fail_ptr("EventArguments_GetReferenceCountTargetAsPointer",1,SWIGTYPE_p_Mezzanine__EventArguments);
  }
  
  result = (Mezzanine::EventArguments *)(arg1)->GetReferenceCountTargetAsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventArguments,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventArguments_GetMostDerived(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) 0 ;
  Mezzanine::EventArguments *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventArguments::GetMostDerived",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventArguments::GetMostDerived",1,"Mezzanine::EventArguments *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventArguments,0))){
    SWIG_fail_ptr("EventArguments_GetMostDerived",1,SWIGTYPE_p_Mezzanine__EventArguments);
  }
  
  result = (Mezzanine::EventArguments *)(arg1)->GetMostDerived();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventArguments,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventArguments(void *obj) {
Mezzanine::EventArguments *arg1 = (Mezzanine::EventArguments *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventArguments(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventArguments);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventArguments_attributes[] = {
    { "EventName", _wrap_EventArguments_EventName_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_EventArguments_methods[]= {
    { "IncrementReferenceCount", _wrap_EventArguments_IncrementReferenceCount},
    { "DecrementReferenceCount", _wrap_EventArguments_DecrementReferenceCount},
    { "GetReferenceCount", _wrap_EventArguments_GetReferenceCount},
    { "GetReferenceCountTargetAsPointer", _wrap_EventArguments_GetReferenceCountTargetAsPointer},
    { "GetMostDerived", _wrap_EventArguments_GetMostDerived},
    {0,0}
};
static swig_lua_method swig_EventArguments_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventArguments_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventArguments_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventArguments_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventArguments_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventArguments_Sf_SwigStatic = {
    "EventArguments",
    swig_EventArguments_Sf_SwigStatic_methods,
    swig_EventArguments_Sf_SwigStatic_attributes,
    swig_EventArguments_Sf_SwigStatic_constants,
    swig_EventArguments_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventArguments_bases[] = {0};
static const char *swig_EventArguments_base_names[] = {0};
static swig_lua_class _wrap_class_EventArguments = { "EventArguments", "EventArguments", &SWIGTYPE_p_Mezzanine__EventArguments,_proxy__wrap_new_EventArguments, swig_delete_EventArguments, swig_EventArguments_methods, swig_EventArguments_attributes, &swig_EventArguments_Sf_SwigStatic, swig_EventArguments_meta, swig_EventArguments_bases, swig_EventArguments_base_names };

static int _wrap_EventSubscriber__NotifyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventSubscriber *arg1 = (Mezzanine::EventSubscriber *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::EventSubscriber::_NotifyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventSubscriber::_NotifyEvent",1,"Mezzanine::EventSubscriber *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EventSubscriber::_NotifyEvent",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("EventSubscriber__NotifyEvent",1,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("EventSubscriber__NotifyEvent",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->_NotifyEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_EventSubscriber_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventSubscriber_methods[]= {
    { "_NotifyEvent", _wrap_EventSubscriber__NotifyEvent},
    {0,0}
};
static swig_lua_method swig_EventSubscriber_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventSubscriber_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventSubscriber_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventSubscriber_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventSubscriber_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventSubscriber_Sf_SwigStatic = {
    "EventSubscriber",
    swig_EventSubscriber_Sf_SwigStatic_methods,
    swig_EventSubscriber_Sf_SwigStatic_attributes,
    swig_EventSubscriber_Sf_SwigStatic_constants,
    swig_EventSubscriber_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventSubscriber_bases[] = {0};
static const char *swig_EventSubscriber_base_names[] = {0};
static swig_lua_class _wrap_class_EventSubscriber = { "EventSubscriber", "EventSubscriber", &SWIGTYPE_p_Mezzanine__EventSubscriber,0,0, swig_EventSubscriber_methods, swig_EventSubscriber_attributes, &swig_EventSubscriber_Sf_SwigStatic, swig_EventSubscriber_meta, swig_EventSubscriber_bases, swig_EventSubscriber_base_names };

static int _wrap_EventSubscriberSlot_GetEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventSubscriberSlot *arg1 = (Mezzanine::EventSubscriberSlot *) 0 ;
  Mezzanine::Event *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventSubscriberSlot::GetEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventSubscriberSlot::GetEvent",1,"Mezzanine::EventSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0))){
    SWIG_fail_ptr("EventSubscriberSlot_GetEvent",1,SWIGTYPE_p_Mezzanine__EventSubscriberSlot);
  }
  
  result = (Mezzanine::Event *)((Mezzanine::EventSubscriberSlot const *)arg1)->GetEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Event,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSubscriberSlot_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventSubscriberSlot *arg1 = (Mezzanine::EventSubscriberSlot *) 0 ;
  Mezzanine::EventSubscriberSlot::SlotType result;
  
  SWIG_check_num_args("Mezzanine::EventSubscriberSlot::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventSubscriberSlot::GetType",1,"Mezzanine::EventSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0))){
    SWIG_fail_ptr("EventSubscriberSlot_GetType",1,SWIGTYPE_p_Mezzanine__EventSubscriberSlot);
  }
  
  result = (Mezzanine::EventSubscriberSlot::SlotType)((Mezzanine::EventSubscriberSlot const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventSubscriberSlot__NotifyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventSubscriberSlot *arg1 = (Mezzanine::EventSubscriberSlot *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::EventSubscriberSlot::_NotifyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventSubscriberSlot::_NotifyEvent",1,"Mezzanine::EventSubscriberSlot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EventSubscriberSlot::_NotifyEvent",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0))){
    SWIG_fail_ptr("EventSubscriberSlot__NotifyEvent",1,SWIGTYPE_p_Mezzanine__EventSubscriberSlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("EventSubscriberSlot__NotifyEvent",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->_NotifyEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventSubscriberSlot(void *obj) {
Mezzanine::EventSubscriberSlot *arg1 = (Mezzanine::EventSubscriberSlot *) obj;
delete arg1;
}
static swig_lua_attribute swig_EventSubscriberSlot_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventSubscriberSlot_methods[]= {
    { "GetEvent", _wrap_EventSubscriberSlot_GetEvent},
    { "GetType", _wrap_EventSubscriberSlot_GetType},
    { "_NotifyEvent", _wrap_EventSubscriberSlot__NotifyEvent},
    {0,0}
};
static swig_lua_method swig_EventSubscriberSlot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventSubscriberSlot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventSubscriberSlot_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ST_Custom", Mezzanine::EventSubscriberSlot::ST_Custom)},
    {SWIG_LUA_CONSTTAB_INT("ST_Functor", Mezzanine::EventSubscriberSlot::ST_Functor)},
    {SWIG_LUA_CONSTTAB_INT("ST_CFunction", Mezzanine::EventSubscriberSlot::ST_CFunction)},
    {SWIG_LUA_CONSTTAB_INT("ST_Script", Mezzanine::EventSubscriberSlot::ST_Script)},
    {SWIG_LUA_CONSTTAB_INT("ST_MemberFunction", Mezzanine::EventSubscriberSlot::ST_MemberFunction)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventSubscriberSlot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventSubscriberSlot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventSubscriberSlot_Sf_SwigStatic = {
    "EventSubscriberSlot",
    swig_EventSubscriberSlot_Sf_SwigStatic_methods,
    swig_EventSubscriberSlot_Sf_SwigStatic_attributes,
    swig_EventSubscriberSlot_Sf_SwigStatic_constants,
    swig_EventSubscriberSlot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventSubscriberSlot_bases[] = {0};
static const char *swig_EventSubscriberSlot_base_names[] = {0};
static swig_lua_class _wrap_class_EventSubscriberSlot = { "EventSubscriberSlot", "EventSubscriberSlot", &SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0, swig_delete_EventSubscriberSlot, swig_EventSubscriberSlot_methods, swig_EventSubscriberSlot_attributes, &swig_EventSubscriberSlot_Sf_SwigStatic, swig_EventSubscriberSlot_meta, swig_EventSubscriberSlot_bases, swig_EventSubscriberSlot_base_names };

static int _wrap_new_CustomSubscriberSlot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::EventSubscriber *arg2 = (Mezzanine::EventSubscriber *) 0 ;
  Mezzanine::CustomSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CustomSubscriberSlot::CustomSubscriberSlot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CustomSubscriberSlot::CustomSubscriberSlot",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::CustomSubscriberSlot::CustomSubscriberSlot",2,"Mezzanine::EventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("new_CustomSubscriberSlot",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("new_CustomSubscriberSlot",2,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  result = (Mezzanine::CustomSubscriberSlot *)new Mezzanine::CustomSubscriberSlot(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CustomSubscriberSlot_GetSubscriber(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CustomSubscriberSlot *arg1 = (Mezzanine::CustomSubscriberSlot *) 0 ;
  Mezzanine::EventSubscriber *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CustomSubscriberSlot::GetSubscriber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CustomSubscriberSlot::GetSubscriber",1,"Mezzanine::CustomSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot,0))){
    SWIG_fail_ptr("CustomSubscriberSlot_GetSubscriber",1,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot);
  }
  
  result = (Mezzanine::EventSubscriber *)((Mezzanine::CustomSubscriberSlot const *)arg1)->GetSubscriber();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriber,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CustomSubscriberSlot_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CustomSubscriberSlot *arg1 = (Mezzanine::CustomSubscriberSlot *) 0 ;
  Mezzanine::EventSubscriberSlot::SlotType result;
  
  SWIG_check_num_args("Mezzanine::CustomSubscriberSlot::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CustomSubscriberSlot::GetType",1,"Mezzanine::CustomSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot,0))){
    SWIG_fail_ptr("CustomSubscriberSlot_GetType",1,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot);
  }
  
  result = (Mezzanine::EventSubscriberSlot::SlotType)((Mezzanine::CustomSubscriberSlot const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CustomSubscriberSlot__NotifyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CustomSubscriberSlot *arg1 = (Mezzanine::CustomSubscriberSlot *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::CustomSubscriberSlot::_NotifyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CustomSubscriberSlot::_NotifyEvent",1,"Mezzanine::CustomSubscriberSlot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::CustomSubscriberSlot::_NotifyEvent",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot,0))){
    SWIG_fail_ptr("CustomSubscriberSlot__NotifyEvent",1,SWIGTYPE_p_Mezzanine__CustomSubscriberSlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("CustomSubscriberSlot__NotifyEvent",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->_NotifyEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CustomSubscriberSlot(void *obj) {
Mezzanine::CustomSubscriberSlot *arg1 = (Mezzanine::CustomSubscriberSlot *) obj;
delete arg1;
}
static int _proxy__wrap_new_CustomSubscriberSlot(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CustomSubscriberSlot);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CustomSubscriberSlot_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CustomSubscriberSlot_methods[]= {
    { "GetSubscriber", _wrap_CustomSubscriberSlot_GetSubscriber},
    { "GetType", _wrap_CustomSubscriberSlot_GetType},
    { "_NotifyEvent", _wrap_CustomSubscriberSlot__NotifyEvent},
    {0,0}
};
static swig_lua_method swig_CustomSubscriberSlot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CustomSubscriberSlot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CustomSubscriberSlot_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CustomSubscriberSlot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CustomSubscriberSlot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CustomSubscriberSlot_Sf_SwigStatic = {
    "CustomSubscriberSlot",
    swig_CustomSubscriberSlot_Sf_SwigStatic_methods,
    swig_CustomSubscriberSlot_Sf_SwigStatic_attributes,
    swig_CustomSubscriberSlot_Sf_SwigStatic_constants,
    swig_CustomSubscriberSlot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CustomSubscriberSlot_bases[] = {0,0};
static const char *swig_CustomSubscriberSlot_base_names[] = {"Mezzanine::EventSubscriberSlot *",0};
static swig_lua_class _wrap_class_CustomSubscriberSlot = { "CustomSubscriberSlot", "CustomSubscriberSlot", &SWIGTYPE_p_Mezzanine__CustomSubscriberSlot,_proxy__wrap_new_CustomSubscriberSlot, swig_delete_CustomSubscriberSlot, swig_CustomSubscriberSlot_methods, swig_CustomSubscriberSlot_attributes, &swig_CustomSubscriberSlot_Sf_SwigStatic, swig_CustomSubscriberSlot_meta, swig_CustomSubscriberSlot_bases, swig_CustomSubscriberSlot_base_names };

static int _wrap_FunctorEventSubscriber___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FunctorEventSubscriber *arg1 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::FunctorEventSubscriber::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FunctorEventSubscriber::operator ()",1,"Mezzanine::FunctorEventSubscriber *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::FunctorEventSubscriber::operator ()",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("FunctorEventSubscriber___call",1,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("FunctorEventSubscriber___call",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FunctorEventSubscriber(void *obj) {
Mezzanine::FunctorEventSubscriber *arg1 = (Mezzanine::FunctorEventSubscriber *) obj;
delete arg1;
}
static swig_lua_attribute swig_FunctorEventSubscriber_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FunctorEventSubscriber_methods[]= {
    { "__call", _wrap_FunctorEventSubscriber___call},
    {0,0}
};
static swig_lua_method swig_FunctorEventSubscriber_meta[] = {
    { "__call", _wrap_FunctorEventSubscriber___call},
    {0,0}
};

static swig_lua_attribute swig_FunctorEventSubscriber_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FunctorEventSubscriber_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FunctorEventSubscriber_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FunctorEventSubscriber_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FunctorEventSubscriber_Sf_SwigStatic = {
    "FunctorEventSubscriber",
    swig_FunctorEventSubscriber_Sf_SwigStatic_methods,
    swig_FunctorEventSubscriber_Sf_SwigStatic_attributes,
    swig_FunctorEventSubscriber_Sf_SwigStatic_constants,
    swig_FunctorEventSubscriber_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FunctorEventSubscriber_bases[] = {0};
static const char *swig_FunctorEventSubscriber_base_names[] = {0};
static swig_lua_class _wrap_class_FunctorEventSubscriber = { "FunctorEventSubscriber", "FunctorEventSubscriber", &SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0, swig_delete_FunctorEventSubscriber, swig_FunctorEventSubscriber_methods, swig_FunctorEventSubscriber_attributes, &swig_FunctorEventSubscriber_Sf_SwigStatic, swig_FunctorEventSubscriber_meta, swig_FunctorEventSubscriber_bases, swig_FunctorEventSubscriber_base_names };

static int _wrap_new_FunctorSubscriberSlot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::FunctorEventSubscriber *arg2 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::FunctorSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FunctorSubscriberSlot::FunctorSubscriberSlot",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::FunctorSubscriberSlot",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::FunctorSubscriberSlot",2,"Mezzanine::FunctorEventSubscriber *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::FunctorSubscriberSlot",3,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("new_FunctorSubscriberSlot",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("new_FunctorSubscriberSlot",2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::FunctorSubscriberSlot *)new Mezzanine::FunctorSubscriberSlot(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctorSubscriberSlot_GetFunctor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FunctorSubscriberSlot *arg1 = (Mezzanine::FunctorSubscriberSlot *) 0 ;
  Mezzanine::FunctorEventSubscriber *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FunctorSubscriberSlot::GetFunctor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::GetFunctor",1,"Mezzanine::FunctorSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot,0))){
    SWIG_fail_ptr("FunctorSubscriberSlot_GetFunctor",1,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot);
  }
  
  result = (Mezzanine::FunctorEventSubscriber *)((Mezzanine::FunctorSubscriberSlot const *)arg1)->GetFunctor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctorSubscriberSlot_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FunctorSubscriberSlot *arg1 = (Mezzanine::FunctorSubscriberSlot *) 0 ;
  Mezzanine::EventSubscriberSlot::SlotType result;
  
  SWIG_check_num_args("Mezzanine::FunctorSubscriberSlot::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::GetType",1,"Mezzanine::FunctorSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot,0))){
    SWIG_fail_ptr("FunctorSubscriberSlot_GetType",1,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot);
  }
  
  result = (Mezzanine::EventSubscriberSlot::SlotType)((Mezzanine::FunctorSubscriberSlot const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FunctorSubscriberSlot__NotifyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FunctorSubscriberSlot *arg1 = (Mezzanine::FunctorSubscriberSlot *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::FunctorSubscriberSlot::_NotifyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::_NotifyEvent",1,"Mezzanine::FunctorSubscriberSlot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::FunctorSubscriberSlot::_NotifyEvent",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot,0))){
    SWIG_fail_ptr("FunctorSubscriberSlot__NotifyEvent",1,SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("FunctorSubscriberSlot__NotifyEvent",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->_NotifyEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FunctorSubscriberSlot(void *obj) {
Mezzanine::FunctorSubscriberSlot *arg1 = (Mezzanine::FunctorSubscriberSlot *) obj;
delete arg1;
}
static int _proxy__wrap_new_FunctorSubscriberSlot(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FunctorSubscriberSlot);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FunctorSubscriberSlot_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FunctorSubscriberSlot_methods[]= {
    { "GetFunctor", _wrap_FunctorSubscriberSlot_GetFunctor},
    { "GetType", _wrap_FunctorSubscriberSlot_GetType},
    { "_NotifyEvent", _wrap_FunctorSubscriberSlot__NotifyEvent},
    {0,0}
};
static swig_lua_method swig_FunctorSubscriberSlot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FunctorSubscriberSlot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FunctorSubscriberSlot_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FunctorSubscriberSlot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FunctorSubscriberSlot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FunctorSubscriberSlot_Sf_SwigStatic = {
    "FunctorSubscriberSlot",
    swig_FunctorSubscriberSlot_Sf_SwigStatic_methods,
    swig_FunctorSubscriberSlot_Sf_SwigStatic_attributes,
    swig_FunctorSubscriberSlot_Sf_SwigStatic_constants,
    swig_FunctorSubscriberSlot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FunctorSubscriberSlot_bases[] = {0,0};
static const char *swig_FunctorSubscriberSlot_base_names[] = {"Mezzanine::EventSubscriberSlot *",0};
static swig_lua_class _wrap_class_FunctorSubscriberSlot = { "FunctorSubscriberSlot", "FunctorSubscriberSlot", &SWIGTYPE_p_Mezzanine__FunctorSubscriberSlot,_proxy__wrap_new_FunctorSubscriberSlot, swig_delete_FunctorSubscriberSlot, swig_FunctorSubscriberSlot_methods, swig_FunctorSubscriberSlot_attributes, &swig_FunctorSubscriberSlot_Sf_SwigStatic, swig_FunctorSubscriberSlot_meta, swig_FunctorSubscriberSlot_bases, swig_FunctorSubscriberSlot_base_names };

static int _wrap_new_ScriptSubscriberSlot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::Scripting::iScript *arg2 = (Mezzanine::Scripting::iScript *) 0 ;
  Mezzanine::ScriptSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptSubscriberSlot::ScriptSubscriberSlot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptSubscriberSlot::ScriptSubscriberSlot",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ScriptSubscriberSlot::ScriptSubscriberSlot",2,"Mezzanine::Scripting::iScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("new_ScriptSubscriberSlot",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Scripting__iScript,0))){
    SWIG_fail_ptr("new_ScriptSubscriberSlot",2,SWIGTYPE_p_Mezzanine__Scripting__iScript);
  }
  
  result = (Mezzanine::ScriptSubscriberSlot *)new Mezzanine::ScriptSubscriberSlot(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptSubscriberSlot_GetScript(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptSubscriberSlot *arg1 = (Mezzanine::ScriptSubscriberSlot *) 0 ;
  Mezzanine::Scripting::iScript *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptSubscriberSlot::GetScript",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptSubscriberSlot::GetScript",1,"Mezzanine::ScriptSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot,0))){
    SWIG_fail_ptr("ScriptSubscriberSlot_GetScript",1,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot);
  }
  
  result = (Mezzanine::Scripting::iScript *)((Mezzanine::ScriptSubscriberSlot const *)arg1)->GetScript();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Scripting__iScript,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptSubscriberSlot_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptSubscriberSlot *arg1 = (Mezzanine::ScriptSubscriberSlot *) 0 ;
  Mezzanine::EventSubscriberSlot::SlotType result;
  
  SWIG_check_num_args("Mezzanine::ScriptSubscriberSlot::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptSubscriberSlot::GetType",1,"Mezzanine::ScriptSubscriberSlot const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot,0))){
    SWIG_fail_ptr("ScriptSubscriberSlot_GetType",1,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot);
  }
  
  result = (Mezzanine::EventSubscriberSlot::SlotType)((Mezzanine::ScriptSubscriberSlot const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScriptSubscriberSlot__NotifyEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptSubscriberSlot *arg1 = (Mezzanine::ScriptSubscriberSlot *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::ScriptSubscriberSlot::_NotifyEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptSubscriberSlot::_NotifyEvent",1,"Mezzanine::ScriptSubscriberSlot *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ScriptSubscriberSlot::_NotifyEvent",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot,0))){
    SWIG_fail_ptr("ScriptSubscriberSlot__NotifyEvent",1,SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("ScriptSubscriberSlot__NotifyEvent",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->_NotifyEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptSubscriberSlot(void *obj) {
Mezzanine::ScriptSubscriberSlot *arg1 = (Mezzanine::ScriptSubscriberSlot *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptSubscriberSlot(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptSubscriberSlot);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptSubscriberSlot_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptSubscriberSlot_methods[]= {
    { "GetScript", _wrap_ScriptSubscriberSlot_GetScript},
    { "GetType", _wrap_ScriptSubscriberSlot_GetType},
    { "_NotifyEvent", _wrap_ScriptSubscriberSlot__NotifyEvent},
    {0,0}
};
static swig_lua_method swig_ScriptSubscriberSlot_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptSubscriberSlot_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptSubscriberSlot_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptSubscriberSlot_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptSubscriberSlot_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptSubscriberSlot_Sf_SwigStatic = {
    "ScriptSubscriberSlot",
    swig_ScriptSubscriberSlot_Sf_SwigStatic_methods,
    swig_ScriptSubscriberSlot_Sf_SwigStatic_attributes,
    swig_ScriptSubscriberSlot_Sf_SwigStatic_constants,
    swig_ScriptSubscriberSlot_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptSubscriberSlot_bases[] = {0,0};
static const char *swig_ScriptSubscriberSlot_base_names[] = {"Mezzanine::EventSubscriberSlot *",0};
static swig_lua_class _wrap_class_ScriptSubscriberSlot = { "ScriptSubscriberSlot", "ScriptSubscriberSlot", &SWIGTYPE_p_Mezzanine__ScriptSubscriberSlot,_proxy__wrap_new_ScriptSubscriberSlot, swig_delete_ScriptSubscriberSlot, swig_ScriptSubscriberSlot_methods, swig_ScriptSubscriberSlot_attributes, &swig_ScriptSubscriberSlot_Sf_SwigStatic, swig_ScriptSubscriberSlot_meta, swig_ScriptSubscriberSlot_bases, swig_ScriptSubscriberSlot_base_names };

static int _wrap_new_Event(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Event *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Event",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::Event::Event",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Event *)new Mezzanine::Event((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Event,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::GetName",1,"Mezzanine::Event const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_GetName",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::Event const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Subscribe__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::EventSubscriber *arg2 = (Mezzanine::EventSubscriber *) 0 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Subscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Subscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Subscribe",2,"Mezzanine::EventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Subscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("Event_Subscribe",2,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Subscribe__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::FunctorEventSubscriber *arg2 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Subscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Subscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Subscribe",2,"Mezzanine::FunctorEventSubscriber *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::Event::Subscribe",3,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Subscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("Event_Subscribe",2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Subscribe__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  CFunctionSubscriberSlot::SubscriberFunction *arg2 = (CFunctionSubscriberSlot::SubscriberFunction *) 0 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Subscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Subscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Subscribe",2,"CFunctionSubscriberSlot::SubscriberFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Subscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction,0))){
    SWIG_fail_ptr("Event_Subscribe",2,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction);
  }
  
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Subscribe__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::Scripting::iScript *arg2 = (Mezzanine::Scripting::iScript *) 0 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Subscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Subscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Subscribe",2,"Mezzanine::Scripting::iScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Subscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Scripting__iScript,0))){
    SWIG_fail_ptr("Event_Subscribe",2,SWIGTYPE_p_Mezzanine__Scripting__iScript);
  }
  
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Subscribe(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriber, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Subscribe__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Subscribe__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Scripting__iScript, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Subscribe__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__FunctorEventSubscriber, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Event_Subscribe__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Event_Subscribe'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Event::Subscribe(Mezzanine::EventSubscriber *)\n"
    "    Mezzanine::Event::Subscribe(Mezzanine::FunctorEventSubscriber *,Mezzanine::Boole)\n"
    "    Mezzanine::Event::Subscribe(CFunctionSubscriberSlot::SubscriberFunction *)\n"
    "    Mezzanine::Event::Subscribe(Mezzanine::Scripting::iScript *)\n");
  lua_error(L);return 0;
}


static int _wrap_Event_Unsubscribe__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::EventSubscriber *arg2 = (Mezzanine::EventSubscriber *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",2,"Mezzanine::EventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Unsubscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("Event_Unsubscribe",2,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Unsubscribe__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::FunctorEventSubscriber *arg2 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",2,"Mezzanine::FunctorEventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Unsubscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("Event_Unsubscribe",2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Unsubscribe__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  CFunctionSubscriberSlot::SubscriberFunction *arg2 = (CFunctionSubscriberSlot::SubscriberFunction *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",2,"CFunctionSubscriberSlot::SubscriberFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Unsubscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction,0))){
    SWIG_fail_ptr("Event_Unsubscribe",2,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Unsubscribe__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::Scripting::iScript *arg2 = (Mezzanine::Scripting::iScript *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",2,"Mezzanine::Scripting::iScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Unsubscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Scripting__iScript,0))){
    SWIG_fail_ptr("Event_Unsubscribe",2,SWIGTYPE_p_Mezzanine__Scripting__iScript);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Unsubscribe__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::EventSubscriberSlot *arg2 = (Mezzanine::EventSubscriberSlot *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Event::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",1,"Mezzanine::Event *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Event::Unsubscribe",2,"Mezzanine::EventSubscriberSlot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_Unsubscribe",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0))){
    SWIG_fail_ptr("Event_Unsubscribe",2,SWIGTYPE_p_Mezzanine__EventSubscriberSlot);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_Unsubscribe(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriber, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Unsubscribe__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__FunctorEventSubscriber, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Unsubscribe__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Unsubscribe__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Scripting__iScript, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Unsubscribe__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriberSlot, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Event_Unsubscribe__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Event_Unsubscribe'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Event::Unsubscribe(Mezzanine::EventSubscriber *)\n"
    "    Mezzanine::Event::Unsubscribe(Mezzanine::FunctorEventSubscriber *)\n"
    "    Mezzanine::Event::Unsubscribe(CFunctionSubscriberSlot::SubscriberFunction *)\n"
    "    Mezzanine::Event::Unsubscribe(Mezzanine::Scripting::iScript *)\n"
    "    Mezzanine::Event::Unsubscribe(Mezzanine::EventSubscriberSlot *)\n");
  lua_error(L);return 0;
}


static int _wrap_Event_UnsubscribeAll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Event::UnsubscribeAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::UnsubscribeAll",1,"Mezzanine::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_UnsubscribeAll",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  result = (Mezzanine::Whole)(arg1)->UnsubscribeAll();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_SubscriberSlotBegin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  SwigValueWrapper< std::vector< Mezzanine::EventSubscriberSlot * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::Event::SubscriberSlotBegin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::SubscriberSlotBegin",1,"Mezzanine::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_SubscriberSlotBegin",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  result = (arg1)->SubscriberSlotBegin();
  {
    Mezzanine::Event::SlotIterator * resultptr = new Mezzanine::Event::SlotIterator((const Mezzanine::Event::SlotIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event_SubscriberSlotEnd(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  SwigValueWrapper< std::vector< Mezzanine::EventSubscriberSlot * >::iterator > result;
  
  SWIG_check_num_args("Mezzanine::Event::SubscriberSlotEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::SubscriberSlotEnd",1,"Mezzanine::Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event_SubscriberSlotEnd",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  result = (arg1)->SubscriberSlotEnd();
  {
    Mezzanine::Event::SlotIterator * resultptr = new Mezzanine::Event::SlotIterator((const Mezzanine::Event::SlotIterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Event__FireEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Event *arg1 = (Mezzanine::Event *) 0 ;
  SwigValueWrapper< Mezzanine::CountedPtr< Mezzanine::EventArguments > > arg2 ;
  Mezzanine::EventArgumentsPtr *argp2 ;
  
  SWIG_check_num_args("Mezzanine::Event::_FireEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Event::_FireEvent",1,"Mezzanine::Event *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Event::_FireEvent",2,"Mezzanine::EventArgumentsPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Event,0))){
    SWIG_fail_ptr("Event__FireEvent",1,SWIGTYPE_p_Mezzanine__Event);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,0))){
    SWIG_fail_ptr("Event__FireEvent",2,SWIGTYPE_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t);
  }
  arg2 = *argp2;
  
  (arg1)->_FireEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Event(void *obj) {
Mezzanine::Event *arg1 = (Mezzanine::Event *) obj;
delete arg1;
}
static int _proxy__wrap_new_Event(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Event);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Event_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Event_methods[]= {
    { "GetName", _wrap_Event_GetName},
    { "Subscribe", _wrap_Event_Subscribe},
    { "Unsubscribe", _wrap_Event_Unsubscribe},
    { "UnsubscribeAll", _wrap_Event_UnsubscribeAll},
    { "SubscriberSlotBegin", _wrap_Event_SubscriberSlotBegin},
    { "SubscriberSlotEnd", _wrap_Event_SubscriberSlotEnd},
    { "_FireEvent", _wrap_Event__FireEvent},
    {0,0}
};
static swig_lua_method swig_Event_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Event_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Event_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Event_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Event_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Event_Sf_SwigStatic = {
    "Event",
    swig_Event_Sf_SwigStatic_methods,
    swig_Event_Sf_SwigStatic_attributes,
    swig_Event_Sf_SwigStatic_constants,
    swig_Event_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Event_bases[] = {0};
static const char *swig_Event_base_names[] = {0};
static swig_lua_class _wrap_class_Event = { "Event", "Event", &SWIGTYPE_p_Mezzanine__Event,_proxy__wrap_new_Event, swig_delete_Event, swig_Event_methods, swig_Event_attributes, &swig_Event_Sf_SwigStatic, swig_Event_meta, swig_Event_bases, swig_Event_base_names };

static int _wrap_EventBase_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventBase *arg1 = (Mezzanine::EventBase *) 0 ;
  Mezzanine::EventBase::EventType result;
  
  SWIG_check_num_args("Mezzanine::EventBase::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventBase::GetType",1,"Mezzanine::EventBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventBase,0))){
    SWIG_fail_ptr("EventBase_GetType",1,SWIGTYPE_p_Mezzanine__EventBase);
  }
  
  result = (Mezzanine::EventBase::EventType)((Mezzanine::EventBase const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventBase(void *obj) {
Mezzanine::EventBase *arg1 = (Mezzanine::EventBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_EventBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventBase_methods[]= {
    { "GetType", _wrap_EventBase_GetType},
    {0,0}
};
static swig_lua_method swig_EventBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("GameWindow", Mezzanine::EventBase::GameWindow)},
    {SWIG_LUA_CONSTTAB_INT("QuitMessage", Mezzanine::EventBase::QuitMessage)},
    {SWIG_LUA_CONSTTAB_INT("UserInput", Mezzanine::EventBase::UserInput)},
    {SWIG_LUA_CONSTTAB_INT("Other", Mezzanine::EventBase::Other)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventBase_Sf_SwigStatic = {
    "EventBase",
    swig_EventBase_Sf_SwigStatic_methods,
    swig_EventBase_Sf_SwigStatic_attributes,
    swig_EventBase_Sf_SwigStatic_constants,
    swig_EventBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventBase_bases[] = {0};
static const char *swig_EventBase_base_names[] = {0};
static swig_lua_class _wrap_class_EventBase = { "EventBase", "EventBase", &SWIGTYPE_p_Mezzanine__EventBase,0, swig_delete_EventBase, swig_EventBase_methods, swig_EventBase_attributes, &swig_EventBase_Sf_SwigStatic, swig_EventBase_meta, swig_EventBase_bases, swig_EventBase_base_names };

static int _wrap_new_EventGameWindow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RawEvent arg1 ;
  Mezzanine::RawEvent *argp1 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::EventGameWindow",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",1,"Mezzanine::RawEvent");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("new_EventGameWindow",1,SWIGTYPE_p_SDL_Event);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::EventGameWindow *)new Mezzanine::EventGameWindow(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventGameWindow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow::GameWindowEventID arg1 ;
  int arg2 ;
  int arg3 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::EventGameWindow",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",1,"Mezzanine::EventGameWindow::GameWindowEventID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",3,"int");
  arg1 = (Mezzanine::EventGameWindow::GameWindowEventID)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (Mezzanine::EventGameWindow *)new Mezzanine::EventGameWindow(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventGameWindow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow::GameWindowEventID arg1 ;
  int arg2 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::EventGameWindow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",1,"Mezzanine::EventGameWindow::GameWindowEventID");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",2,"int");
  arg1 = (Mezzanine::EventGameWindow::GameWindowEventID)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (Mezzanine::EventGameWindow *)new Mezzanine::EventGameWindow(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventGameWindow__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow::GameWindowEventID arg1 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::EventGameWindow",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",1,"Mezzanine::EventGameWindow::GameWindowEventID");
  arg1 = (Mezzanine::EventGameWindow::GameWindowEventID)(int)lua_tonumber(L, 1);
  result = (Mezzanine::EventGameWindow *)new Mezzanine::EventGameWindow(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventGameWindow__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::EventGameWindow",0,0)
  result = (Mezzanine::EventGameWindow *)new Mezzanine::EventGameWindow();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventGameWindow__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = 0 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::EventGameWindow",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::EventGameWindow",1,"Mezzanine::EventGameWindow const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("new_EventGameWindow",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (Mezzanine::EventGameWindow *)new Mezzanine::EventGameWindow((Mezzanine::EventGameWindow const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventGameWindow(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EventGameWindow__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SDL_Event, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventGameWindow__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventGameWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventGameWindow__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EventGameWindow__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_EventGameWindow__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_EventGameWindow__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EventGameWindow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventGameWindow::EventGameWindow(Mezzanine::RawEvent)\n"
    "    Mezzanine::EventGameWindow::EventGameWindow(Mezzanine::EventGameWindow::GameWindowEventID,int,int)\n"
    "    Mezzanine::EventGameWindow::EventGameWindow(Mezzanine::EventGameWindow::GameWindowEventID,int)\n"
    "    Mezzanine::EventGameWindow::EventGameWindow(Mezzanine::EventGameWindow::GameWindowEventID)\n"
    "    Mezzanine::EventGameWindow::EventGameWindow()\n"
    "    Mezzanine::EventGameWindow::EventGameWindow(Mezzanine::EventGameWindow const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventGameWindow_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  Mezzanine::EventBase::EventType result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::GetType",1,"Mezzanine::EventGameWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow_GetType",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (Mezzanine::EventBase::EventType)((Mezzanine::EventGameWindow const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow_GetEventID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  Mezzanine::EventGameWindow::GameWindowEventID result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::GetEventID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::GetEventID",1,"Mezzanine::EventGameWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow_GetEventID",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (Mezzanine::EventGameWindow::GameWindowEventID)((Mezzanine::EventGameWindow const *)arg1)->GetEventID();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow_GetFirstEventData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::GetFirstEventData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::GetFirstEventData",1,"Mezzanine::EventGameWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow_GetFirstEventData",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (int)((Mezzanine::EventGameWindow const *)arg1)->GetFirstEventData();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow_GetSecondEventData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::GetSecondEventData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::GetSecondEventData",1,"Mezzanine::EventGameWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow_GetSecondEventData",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (int)((Mezzanine::EventGameWindow const *)arg1)->GetSecondEventData();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow_GameWindowEventIDToString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow::GameWindowEventID arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::GameWindowEventIDToString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::GameWindowEventIDToString",1,"Mezzanine::EventGameWindow::GameWindowEventID");
  arg1 = (Mezzanine::EventGameWindow::GameWindowEventID)(int)lua_tonumber(L, 1);
  result = Mezzanine::EventGameWindow::GameWindowEventIDToString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow_IsEventIDValid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::IsEventIDValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::IsEventIDValid",1,"Mezzanine::EventGameWindow const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow_IsEventIDValid",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EventGameWindow const *)arg1)->IsEventIDValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  Mezzanine::EventGameWindow *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::operator ==",1,"Mezzanine::EventGameWindow const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EventGameWindow::operator ==",2,"Mezzanine::EventGameWindow const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow___eq",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow___eq",2,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EventGameWindow const *)arg1)->operator ==((Mezzanine::EventGameWindow const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) 0 ;
  Mezzanine::EventGameWindow::GameWindowEventID *arg2 = 0 ;
  Mezzanine::EventGameWindow::GameWindowEventID temp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EventGameWindow::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventGameWindow::operator ==",1,"Mezzanine::EventGameWindow const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventGameWindow::operator ==",2,"Mezzanine::EventGameWindow::GameWindowEventID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventGameWindow,0))){
    SWIG_fail_ptr("EventGameWindow___eq",1,SWIGTYPE_p_Mezzanine__EventGameWindow);
  }
  
  temp2=(Mezzanine::EventGameWindow::GameWindowEventID)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Boole)((Mezzanine::EventGameWindow const *)arg1)->operator ==((Mezzanine::EventGameWindow::GameWindowEventID const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventGameWindow___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventGameWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventGameWindow, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventGameWindow___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventGameWindow, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventGameWindow___eq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventGameWindow___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventGameWindow::operator ==(Mezzanine::EventGameWindow const &) const\n"
    "    Mezzanine::EventGameWindow::operator ==(Mezzanine::EventGameWindow::GameWindowEventID const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_EventGameWindow(void *obj) {
Mezzanine::EventGameWindow *arg1 = (Mezzanine::EventGameWindow *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventGameWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventGameWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventGameWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventGameWindow_methods[]= {
    { "GetType", _wrap_EventGameWindow_GetType},
    { "GetEventID", _wrap_EventGameWindow_GetEventID},
    { "GetFirstEventData", _wrap_EventGameWindow_GetFirstEventData},
    { "GetSecondEventData", _wrap_EventGameWindow_GetSecondEventData},
    { "IsEventIDValid", _wrap_EventGameWindow_IsEventIDValid},
    { "__eq", _wrap_EventGameWindow___eq},
    {0,0}
};
static swig_lua_method swig_EventGameWindow_meta[] = {
    { "__eq", _wrap_EventGameWindow___eq},
    {0,0}
};

static swig_lua_attribute swig_EventGameWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventGameWindow_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_NONE", Mezzanine::EventGameWindow::GAME_WINDOW_NONE)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_FIRST", Mezzanine::EventGameWindow::GAME_WINDOW_FIRST)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_SHOWN", Mezzanine::EventGameWindow::GAME_WINDOW_SHOWN)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_HIDDEN", Mezzanine::EventGameWindow::GAME_WINDOW_HIDDEN)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_EXPOSED", Mezzanine::EventGameWindow::GAME_WINDOW_EXPOSED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_MOVED", Mezzanine::EventGameWindow::GAME_WINDOW_MOVED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_RESIZED", Mezzanine::EventGameWindow::GAME_WINDOW_RESIZED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_SIZE_CHANGED", Mezzanine::EventGameWindow::GAME_WINDOW_SIZE_CHANGED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_MINIMIZED", Mezzanine::EventGameWindow::GAME_WINDOW_MINIMIZED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_MAXIMIZED", Mezzanine::EventGameWindow::GAME_WINDOW_MAXIMIZED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_RESTORED", Mezzanine::EventGameWindow::GAME_WINDOW_RESTORED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_ENTER", Mezzanine::EventGameWindow::GAME_WINDOW_ENTER)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_LEAVE", Mezzanine::EventGameWindow::GAME_WINDOW_LEAVE)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_FOCUS_GAINED", Mezzanine::EventGameWindow::GAME_WINDOW_FOCUS_GAINED)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_FOCUS_LOST", Mezzanine::EventGameWindow::GAME_WINDOW_FOCUS_LOST)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_CLOSE", Mezzanine::EventGameWindow::GAME_WINDOW_CLOSE)},
    {SWIG_LUA_CONSTTAB_INT("GAME_WINDOW_LAST", Mezzanine::EventGameWindow::GAME_WINDOW_LAST)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventGameWindow_Sf_SwigStatic_methods[]= {
    { "GameWindowEventIDToString", _wrap_EventGameWindow_GameWindowEventIDToString},
    {0,0}
};
static swig_lua_class* swig_EventGameWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventGameWindow_Sf_SwigStatic = {
    "EventGameWindow",
    swig_EventGameWindow_Sf_SwigStatic_methods,
    swig_EventGameWindow_Sf_SwigStatic_attributes,
    swig_EventGameWindow_Sf_SwigStatic_constants,
    swig_EventGameWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventGameWindow_bases[] = {0,0};
static const char *swig_EventGameWindow_base_names[] = {"Mezzanine::EventBase *",0};
static swig_lua_class _wrap_class_EventGameWindow = { "EventGameWindow", "EventGameWindow", &SWIGTYPE_p_Mezzanine__EventGameWindow,_proxy__wrap_new_EventGameWindow, swig_delete_EventGameWindow, swig_EventGameWindow_methods, swig_EventGameWindow_attributes, &swig_EventGameWindow_Sf_SwigStatic, swig_EventGameWindow_meta, swig_EventGameWindow_bases, swig_EventGameWindow_base_names };

static void swig_delete_EntresolManager(void *obj) {
Mezzanine::EntresolManager *arg1 = (Mezzanine::EntresolManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntresolManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntresolManager_methods[]= {
    {0,0}
};
static swig_lua_method swig_EntresolManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntresolManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntresolManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntresolManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntresolManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntresolManager_Sf_SwigStatic = {
    "EntresolManager",
    swig_EntresolManager_Sf_SwigStatic_methods,
    swig_EntresolManager_Sf_SwigStatic_attributes,
    swig_EntresolManager_Sf_SwigStatic_constants,
    swig_EntresolManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntresolManager_bases[] = {0,0};
static const char *swig_EntresolManager_base_names[] = {"Mezzanine::ManagerBase *",0};
static swig_lua_class _wrap_class_EntresolManager = { "EntresolManager", "EntresolManager", &SWIGTYPE_p_Mezzanine__EntresolManager,0, swig_delete_EntresolManager, swig_EntresolManager_methods, swig_EntresolManager_attributes, &swig_EntresolManager_Sf_SwigStatic, swig_EntresolManager_meta, swig_EntresolManager_bases, swig_EntresolManager_base_names };

static int _wrap_EntresolManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntresolManagerFactory *arg1 = (Mezzanine::EntresolManagerFactory *) 0 ;
  Mezzanine::NameValuePairList *arg2 = 0 ;
  Mezzanine::EntresolManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntresolManagerFactory::CreateManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntresolManagerFactory::CreateManager",1,"Mezzanine::EntresolManagerFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntresolManagerFactory::CreateManager",2,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntresolManagerFactory,0))){
    SWIG_fail_ptr("EntresolManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__EntresolManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("EntresolManagerFactory_CreateManager",2,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::EntresolManager *)(arg1)->CreateManager((Mezzanine::NameValuePairList const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntresolManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntresolManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntresolManagerFactory *arg1 = (Mezzanine::EntresolManagerFactory *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::EntresolManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntresolManagerFactory::CreateManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntresolManagerFactory::CreateManager",1,"Mezzanine::EntresolManagerFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntresolManagerFactory::CreateManager",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntresolManagerFactory,0))){
    SWIG_fail_ptr("EntresolManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__EntresolManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntresolManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::EntresolManager *)(arg1)->CreateManager((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntresolManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntresolManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntresolManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntresolManagerFactory_CreateManager__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntresolManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntresolManagerFactory_CreateManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntresolManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntresolManagerFactory::CreateManager(Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::EntresolManagerFactory::CreateManager(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntresolManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntresolManagerFactory *arg1 = (Mezzanine::EntresolManagerFactory *) 0 ;
  Mezzanine::EntresolManager *arg2 = (Mezzanine::EntresolManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntresolManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntresolManagerFactory::DestroyManager",1,"Mezzanine::EntresolManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntresolManagerFactory::DestroyManager",2,"Mezzanine::EntresolManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntresolManagerFactory,0))){
    SWIG_fail_ptr("EntresolManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__EntresolManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntresolManager,0))){
    SWIG_fail_ptr("EntresolManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__EntresolManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntresolManagerFactory(void *obj) {
Mezzanine::EntresolManagerFactory *arg1 = (Mezzanine::EntresolManagerFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntresolManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntresolManagerFactory_methods[]= {
    { "CreateManager", _wrap_EntresolManagerFactory_CreateManager},
    { "DestroyManager", _wrap_EntresolManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_EntresolManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntresolManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntresolManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntresolManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntresolManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntresolManagerFactory_Sf_SwigStatic = {
    "EntresolManagerFactory",
    swig_EntresolManagerFactory_Sf_SwigStatic_methods,
    swig_EntresolManagerFactory_Sf_SwigStatic_attributes,
    swig_EntresolManagerFactory_Sf_SwigStatic_constants,
    swig_EntresolManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntresolManagerFactory_bases[] = {0,0};
static const char *swig_EntresolManagerFactory_base_names[] = {"Mezzanine::ManagerFactory *",0};
static swig_lua_class _wrap_class_EntresolManagerFactory = { "EntresolManagerFactory", "EntresolManagerFactory", &SWIGTYPE_p_Mezzanine__EntresolManagerFactory,0, swig_delete_EntresolManagerFactory, swig_EntresolManagerFactory_methods, swig_EntresolManagerFactory_attributes, &swig_EntresolManagerFactory_Sf_SwigStatic, swig_EntresolManagerFactory_meta, swig_EntresolManagerFactory_bases, swig_EntresolManagerFactory_base_names };

static int _wrap_SingletonEventManager_GetSingletonPtr(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Singleton< Mezzanine::EventManager >::GetSingletonPtr",0,0)
  result = (Mezzanine::EventManager *)Mezzanine::Singleton< Mezzanine::EventManager >::SWIGTEMPLATEDISAMBIGUATOR GetSingletonPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SingletonEventManager_SingletonValid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Singleton< Mezzanine::EventManager >::SingletonValid",0,0)
  result = (Mezzanine::Boole)Mezzanine::Singleton< Mezzanine::EventManager >::SWIGTEMPLATEDISAMBIGUATOR SingletonValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SingletonEventManager(void *obj) {
Mezzanine::Singleton< Mezzanine::EventManager > *arg1 = (Mezzanine::Singleton< Mezzanine::EventManager > *) obj;
delete arg1;
}
static swig_lua_attribute swig_SingletonEventManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SingletonEventManager_methods[]= {
    {0,0}
};
static swig_lua_method swig_SingletonEventManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SingletonEventManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SingletonEventManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SingletonEventManager_Sf_SwigStatic_methods[]= {
    { "GetSingletonPtr", _wrap_SingletonEventManager_GetSingletonPtr},
    { "SingletonValid", _wrap_SingletonEventManager_SingletonValid},
    {0,0}
};
static swig_lua_class* swig_SingletonEventManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SingletonEventManager_Sf_SwigStatic = {
    "SingletonEventManager",
    swig_SingletonEventManager_Sf_SwigStatic_methods,
    swig_SingletonEventManager_Sf_SwigStatic_attributes,
    swig_SingletonEventManager_Sf_SwigStatic_constants,
    swig_SingletonEventManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SingletonEventManager_bases[] = {0};
static const char *swig_SingletonEventManager_base_names[] = {0};
static swig_lua_class _wrap_class_SingletonEventManager = { "SingletonEventManager", "SingletonEventManager", &SWIGTYPE_p_Mezzanine__SingletonT_Mezzanine__EventManager_t,0, swig_delete_SingletonEventManager, swig_SingletonEventManager_methods, swig_SingletonEventManager_attributes, &swig_SingletonEventManager_Sf_SwigStatic, swig_SingletonEventManager_meta, swig_SingletonEventManager_bases, swig_SingletonEventManager_base_names };

static int _wrap_new_EventPumpWorkUnit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventPumpWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPumpWorkUnit::EventPumpWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPumpWorkUnit::EventPumpWorkUnit",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("new_EventPumpWorkUnit",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventPumpWorkUnit *)new Mezzanine::EventPumpWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventPumpWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventPumpWorkUnit(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventPumpWorkUnit__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EventPumpWorkUnit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventPumpWorkUnit::EventPumpWorkUnit(Mezzanine::EventManager *)\n");
  lua_error(L);return 0;
}


static int _wrap_EventPumpWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPumpWorkUnit *arg1 = (Mezzanine::EventPumpWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPumpWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPumpWorkUnit::DoWork",1,"Mezzanine::EventPumpWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EventPumpWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPumpWorkUnit,0))){
    SWIG_fail_ptr("EventPumpWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__EventPumpWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("EventPumpWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventPumpWorkUnit(void *obj) {
Mezzanine::EventPumpWorkUnit *arg1 = (Mezzanine::EventPumpWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventPumpWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventPumpWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventPumpWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventPumpWorkUnit_methods[]= {
    { "DoWork", _wrap_EventPumpWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_EventPumpWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventPumpWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventPumpWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventPumpWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventPumpWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventPumpWorkUnit_Sf_SwigStatic = {
    "EventPumpWorkUnit",
    swig_EventPumpWorkUnit_Sf_SwigStatic_methods,
    swig_EventPumpWorkUnit_Sf_SwigStatic_attributes,
    swig_EventPumpWorkUnit_Sf_SwigStatic_constants,
    swig_EventPumpWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventPumpWorkUnit_bases[] = {0};
static const char *swig_EventPumpWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_EventPumpWorkUnit = { "EventPumpWorkUnit", "EventPumpWorkUnit", &SWIGTYPE_p_Mezzanine__EventPumpWorkUnit,_proxy__wrap_new_EventPumpWorkUnit, swig_delete_EventPumpWorkUnit, swig_EventPumpWorkUnit_methods, swig_EventPumpWorkUnit_attributes, &swig_EventPumpWorkUnit_Sf_SwigStatic, swig_EventPumpWorkUnit_meta, swig_EventPumpWorkUnit_bases, swig_EventPumpWorkUnit_base_names };

static int _wrap_EventManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::EventManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::EventManager::InterfaceType",0,0)
  result = (Mezzanine::ManagerBase::ManagerType)(Mezzanine::ManagerBase::ManagerType)Mezzanine::EventManager::InterfaceType;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::EventManager",0,0)
  result = (Mezzanine::EventManager *)new Mezzanine::EventManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventManager__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::EventManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::EventManager",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EventManager::EventManager",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_EventManager",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::EventManager *)new Mezzanine::EventManager((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventManager(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EventManager__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EventManager__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EventManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventManager::EventManager()\n"
    "    Mezzanine::EventManager::EventManager(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EventManager_GetRemainingEventCount(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetRemainingEventCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetRemainingEventCount",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetRemainingEventCount",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (arg1)->GetRemainingEventCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetNextEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetNextEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetNextEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetNextEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventBase *)(arg1)->GetNextEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_PopNextEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::PopNextEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::PopNextEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_PopNextEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventBase *)(arg1)->PopNextEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveNextEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveNextEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveNextEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveNextEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->RemoveNextEvent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_AddEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase *arg2 = (Mezzanine::EventBase *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::AddEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::AddEvent",1,"Mezzanine::EventManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventManager::AddEvent",2,"Mezzanine::EventBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_AddEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventBase,0))){
    SWIG_fail_ptr("EventManager_AddEvent",2,SWIGTYPE_p_Mezzanine__EventBase);
  }
  
  (arg1)->AddEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase *arg2 = (Mezzanine::EventBase *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveEvent",1,"Mezzanine::EventManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventManager::RemoveEvent",2,"Mezzanine::EventBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventBase,0))){
    SWIG_fail_ptr("EventManager_RemoveEvent",2,SWIGTYPE_p_Mezzanine__EventBase);
  }
  
  (arg1)->RemoveEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_UpdateEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::UpdateEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::UpdateEvents",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_UpdateEvents",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->UpdateEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetNextGameWindowEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetNextGameWindowEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetNextGameWindowEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetNextGameWindowEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventGameWindow *)(arg1)->GetNextGameWindowEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_PopNextGameWindowEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventGameWindow *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::PopNextGameWindowEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::PopNextGameWindowEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_PopNextGameWindowEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventGameWindow *)(arg1)->PopNextGameWindowEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventGameWindow,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveNextGameWindowEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveNextGameWindowEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveNextGameWindowEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveNextGameWindowEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->RemoveNextGameWindowEvent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetAllGameWindowEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  std::list< Mezzanine::EventGameWindow * > *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetAllGameWindowEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetAllGameWindowEvents",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetAllGameWindowEvents",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (std::list< Mezzanine::EventGameWindow * > *)(arg1)->GetAllGameWindowEvents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Mezzanine__EventGameWindow_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetNextUserInputEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventUserInput *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetNextUserInputEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetNextUserInputEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetNextUserInputEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventUserInput *)(arg1)->GetNextUserInputEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventUserInput,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_PopNextUserInputEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventUserInput *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::PopNextUserInputEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::PopNextUserInputEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_PopNextUserInputEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventUserInput *)(arg1)->PopNextUserInputEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventUserInput,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveNextUserInputEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveNextUserInputEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveNextUserInputEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveNextUserInputEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->RemoveNextUserInputEvent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetAllUserInputEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  std::list< Mezzanine::EventUserInput * > *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetAllUserInputEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetAllUserInputEvents",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetAllUserInputEvents",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (std::list< Mezzanine::EventUserInput * > *)(arg1)->GetAllUserInputEvents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Mezzanine__EventUserInput_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetNextQuitEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventQuit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetNextQuitEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetNextQuitEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetNextQuitEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventQuit *)(arg1)->GetNextQuitEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventQuit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_PopNextQuitEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventQuit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::PopNextQuitEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::PopNextQuitEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_PopNextQuitEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventQuit *)(arg1)->PopNextQuitEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventQuit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveNextQuitEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveNextQuitEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveNextQuitEvent",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveNextQuitEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->RemoveNextQuitEvent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetAllQuitEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  std::list< Mezzanine::EventQuit * > *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetAllQuitEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetAllQuitEvents",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetAllQuitEvents",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (std::list< Mezzanine::EventQuit * > *)(arg1)->GetAllQuitEvents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Mezzanine__EventQuit_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetNextSpecificEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase::EventType arg2 ;
  Mezzanine::EventBase *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetNextSpecificEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetNextSpecificEvent",1,"Mezzanine::EventManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventManager::GetNextSpecificEvent",2,"Mezzanine::EventBase::EventType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetNextSpecificEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  arg2 = (Mezzanine::EventBase::EventType)(int)lua_tonumber(L, 2);
  result = (Mezzanine::EventBase *)(arg1)->GetNextSpecificEvent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_PopNextSpecificEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase::EventType arg2 ;
  Mezzanine::EventBase *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::PopNextSpecificEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::PopNextSpecificEvent",1,"Mezzanine::EventManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventManager::PopNextSpecificEvent",2,"Mezzanine::EventBase::EventType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_PopNextSpecificEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  arg2 = (Mezzanine::EventBase::EventType)(int)lua_tonumber(L, 2);
  result = (Mezzanine::EventBase *)(arg1)->PopNextSpecificEvent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventBase,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveNextSpecificEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase::EventType arg2 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveNextSpecificEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveNextSpecificEvent",1,"Mezzanine::EventManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventManager::RemoveNextSpecificEvent",2,"Mezzanine::EventBase::EventType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveNextSpecificEvent",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  arg2 = (Mezzanine::EventBase::EventType)(int)lua_tonumber(L, 2);
  (arg1)->RemoveNextSpecificEvent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetAllSpecificEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase::EventType arg2 ;
  std::list< Mezzanine::EventBase * > *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetAllSpecificEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetAllSpecificEvents",1,"Mezzanine::EventManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventManager::GetAllSpecificEvents",2,"Mezzanine::EventBase::EventType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetAllSpecificEvents",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  arg2 = (Mezzanine::EventBase::EventType)(int)lua_tonumber(L, 2);
  result = (std::list< Mezzanine::EventBase * > *)(arg1)->GetAllSpecificEvents(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__listT_Mezzanine__EventBase_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemoveAllSpecificEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventBase::EventType arg2 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemoveAllSpecificEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemoveAllSpecificEvents",1,"Mezzanine::EventManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EventManager::RemoveAllSpecificEvents",2,"Mezzanine::EventBase::EventType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemoveAllSpecificEvents",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  arg2 = (Mezzanine::EventBase::EventType)(int)lua_tonumber(L, 2);
  (arg1)->RemoveAllSpecificEvents(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_AddPollingCheck(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Input::MetaCode *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::AddPollingCheck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::AddPollingCheck",1,"Mezzanine::EventManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EventManager::AddPollingCheck",2,"Input::MetaCode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_AddPollingCheck",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Input__MetaCode,0))){
    SWIG_fail_ptr("EventManager_AddPollingCheck",2,SWIGTYPE_p_Input__MetaCode);
  }
  
  (arg1)->AddPollingCheck((Input::MetaCode const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_RemovePollingCheck(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Input::MetaCode *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::RemovePollingCheck",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::RemovePollingCheck",1,"Mezzanine::EventManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EventManager::RemovePollingCheck",2,"Input::MetaCode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_RemovePollingCheck",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Input__MetaCode,0))){
    SWIG_fail_ptr("EventManager_RemovePollingCheck",2,SWIGTYPE_p_Input__MetaCode);
  }
  
  (arg1)->RemovePollingCheck((Input::MetaCode const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::Initialize",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_Initialize",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::Deinitialize",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetEventPumpWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::EventPumpWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetEventPumpWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetEventPumpWork",1,"Mezzanine::EventManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetEventPumpWork",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::EventPumpWorkUnit *)(arg1)->GetEventPumpWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventPumpWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetInterfaceType",1,"Mezzanine::EventManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::EventManager const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EventManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventManager::GetImplementationTypeName",1,"Mezzanine::EventManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventManager,0))){
    SWIG_fail_ptr("EventManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__EventManager);
  }
  
  result = ((Mezzanine::EventManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventManager(void *obj) {
Mezzanine::EventManager *arg1 = (Mezzanine::EventManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventManager_methods[]= {
    { "GetRemainingEventCount", _wrap_EventManager_GetRemainingEventCount},
    { "GetNextEvent", _wrap_EventManager_GetNextEvent},
    { "PopNextEvent", _wrap_EventManager_PopNextEvent},
    { "RemoveNextEvent", _wrap_EventManager_RemoveNextEvent},
    { "AddEvent", _wrap_EventManager_AddEvent},
    { "RemoveEvent", _wrap_EventManager_RemoveEvent},
    { "UpdateEvents", _wrap_EventManager_UpdateEvents},
    { "GetNextGameWindowEvent", _wrap_EventManager_GetNextGameWindowEvent},
    { "PopNextGameWindowEvent", _wrap_EventManager_PopNextGameWindowEvent},
    { "RemoveNextGameWindowEvent", _wrap_EventManager_RemoveNextGameWindowEvent},
    { "GetAllGameWindowEvents", _wrap_EventManager_GetAllGameWindowEvents},
    { "GetNextUserInputEvent", _wrap_EventManager_GetNextUserInputEvent},
    { "PopNextUserInputEvent", _wrap_EventManager_PopNextUserInputEvent},
    { "RemoveNextUserInputEvent", _wrap_EventManager_RemoveNextUserInputEvent},
    { "GetAllUserInputEvents", _wrap_EventManager_GetAllUserInputEvents},
    { "GetNextQuitEvent", _wrap_EventManager_GetNextQuitEvent},
    { "PopNextQuitEvent", _wrap_EventManager_PopNextQuitEvent},
    { "RemoveNextQuitEvent", _wrap_EventManager_RemoveNextQuitEvent},
    { "GetAllQuitEvents", _wrap_EventManager_GetAllQuitEvents},
    { "GetNextSpecificEvent", _wrap_EventManager_GetNextSpecificEvent},
    { "PopNextSpecificEvent", _wrap_EventManager_PopNextSpecificEvent},
    { "RemoveNextSpecificEvent", _wrap_EventManager_RemoveNextSpecificEvent},
    { "GetAllSpecificEvents", _wrap_EventManager_GetAllSpecificEvents},
    { "RemoveAllSpecificEvents", _wrap_EventManager_RemoveAllSpecificEvents},
    { "AddPollingCheck", _wrap_EventManager_AddPollingCheck},
    { "RemovePollingCheck", _wrap_EventManager_RemovePollingCheck},
    { "Initialize", _wrap_EventManager_Initialize},
    { "Deinitialize", _wrap_EventManager_Deinitialize},
    { "GetEventPumpWork", _wrap_EventManager_GetEventPumpWork},
    { "GetInterfaceType", _wrap_EventManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_EventManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_EventManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_EventManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_EventManager_InterfaceType_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_EventManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventManager_Sf_SwigStatic = {
    "EventManager",
    swig_EventManager_Sf_SwigStatic_methods,
    swig_EventManager_Sf_SwigStatic_attributes,
    swig_EventManager_Sf_SwigStatic_constants,
    swig_EventManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventManager_bases[] = {0,0,0};
static const char *swig_EventManager_base_names[] = {"Mezzanine::EntresolManager *","Mezzanine::Singleton< Mezzanine::EventManager > *",0};
static swig_lua_class _wrap_class_EventManager = { "EventManager", "EventManager", &SWIGTYPE_p_Mezzanine__EventManager,_proxy__wrap_new_EventManager, swig_delete_EventManager, swig_EventManager_methods, swig_EventManager_attributes, &swig_EventManager_Sf_SwigStatic, swig_EventManager_meta, swig_EventManager_bases, swig_EventManager_base_names };

static int _wrap_new_DefaultEventManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEventManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEventManagerFactory::DefaultEventManagerFactory",0,0)
  result = (Mezzanine::DefaultEventManagerFactory *)new Mezzanine::DefaultEventManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEventManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEventManagerFactory *arg1 = (Mezzanine::DefaultEventManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DefaultEventManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::GetManagerImplName",1,"Mezzanine::DefaultEventManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory);
  }
  
  result = ((Mezzanine::DefaultEventManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEventManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEventManagerFactory *arg1 = (Mezzanine::DefaultEventManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DefaultEventManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::GetManagerType",1,"Mezzanine::DefaultEventManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::DefaultEventManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEventManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEventManagerFactory *arg1 = (Mezzanine::DefaultEventManagerFactory *) 0 ;
  Mezzanine::NameValuePairList *arg2 = 0 ;
  Mezzanine::EntresolManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEventManagerFactory::CreateManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::CreateManager",1,"Mezzanine::DefaultEventManagerFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::CreateManager",2,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_CreateManager",2,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::EntresolManager *)(arg1)->CreateManager((Mezzanine::NameValuePairList const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntresolManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEventManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEventManagerFactory *arg1 = (Mezzanine::DefaultEventManagerFactory *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::EntresolManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEventManagerFactory::CreateManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::CreateManager",1,"Mezzanine::DefaultEventManagerFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::CreateManager",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::EntresolManager *)(arg1)->CreateManager((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntresolManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEventManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DefaultEventManagerFactory_CreateManager__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DefaultEventManagerFactory_CreateManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultEventManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DefaultEventManagerFactory::CreateManager(Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::DefaultEventManagerFactory::CreateManager(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultEventManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEventManagerFactory *arg1 = (Mezzanine::DefaultEventManagerFactory *) 0 ;
  Mezzanine::EntresolManager *arg2 = (Mezzanine::EntresolManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEventManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::DestroyManager",1,"Mezzanine::DefaultEventManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultEventManagerFactory::DestroyManager",2,"Mezzanine::EntresolManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntresolManager,0))){
    SWIG_fail_ptr("DefaultEventManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__EntresolManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultEventManagerFactory(void *obj) {
Mezzanine::DefaultEventManagerFactory *arg1 = (Mezzanine::DefaultEventManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultEventManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultEventManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultEventManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultEventManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultEventManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultEventManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultEventManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultEventManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultEventManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultEventManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultEventManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultEventManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultEventManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultEventManagerFactory_Sf_SwigStatic = {
    "DefaultEventManagerFactory",
    swig_DefaultEventManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultEventManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultEventManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultEventManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultEventManagerFactory_bases[] = {0,0};
static const char *swig_DefaultEventManagerFactory_base_names[] = {"Mezzanine::EntresolManagerFactory *",0};
static swig_lua_class _wrap_class_DefaultEventManagerFactory = { "DefaultEventManagerFactory", "DefaultEventManagerFactory", &SWIGTYPE_p_Mezzanine__DefaultEventManagerFactory,_proxy__wrap_new_DefaultEventManagerFactory, swig_delete_DefaultEventManagerFactory, swig_DefaultEventManagerFactory_methods, swig_DefaultEventManagerFactory_attributes, &swig_DefaultEventManagerFactory_Sf_SwigStatic, swig_DefaultEventManagerFactory_meta, swig_DefaultEventManagerFactory_bases, swig_DefaultEventManagerFactory_base_names };

static int _wrap_new_EventPublisher(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::EventPublisher",0,0)
  result = (Mezzanine::EventPublisher *)new Mezzanine::EventPublisher();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventPublisher,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_SetMuteEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::SetMuteEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::SetMuteEvents",1,"Mezzanine::EventPublisher *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::SetMuteEvents",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_SetMuteEvents",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->SetMuteEvents(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_GetMuteEvents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::GetMuteEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::GetMuteEvents",1,"Mezzanine::EventPublisher const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_GetMuteEvents",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EventPublisher const *)arg1)->GetMuteEvents();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_GetEvent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Event *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::GetEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::GetEvent",1,"Mezzanine::EventPublisher const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::GetEvent",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_GetEvent",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Event *)((Mezzanine::EventPublisher const *)arg1)->GetEvent((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Event,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_GetEventExcept(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Event *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::GetEventExcept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::GetEventExcept",1,"Mezzanine::EventPublisher const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::GetEventExcept",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_GetEventExcept",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Event *)((Mezzanine::EventPublisher const *)arg1)->GetEventExcept((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Event,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Subscribe__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::EventSubscriber *arg3 = (Mezzanine::EventSubscriber *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Subscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",3,"Mezzanine::EventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",3,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Subscribe__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::FunctorEventSubscriber *arg3 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Subscribe",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",3,"Mezzanine::FunctorEventSubscriber *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",3,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe((Mezzanine::String const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Subscribe__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  CFunctionSubscriberSlot::SubscriberFunction *arg3 = (CFunctionSubscriberSlot::SubscriberFunction *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Subscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",3,"CFunctionSubscriberSlot::SubscriberFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",3,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction);
  }
  
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Subscribe__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Scripting::iScript *arg3 = (Mezzanine::Scripting::iScript *) 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::EventSubscriberSlot *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Subscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Subscribe",3,"Mezzanine::Scripting::iScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Scripting__iScript,0))){
    SWIG_fail_ptr("EventPublisher_Subscribe",3,SWIGTYPE_p_Mezzanine__Scripting__iScript);
  }
  
  result = (Mezzanine::EventSubscriberSlot *)(arg1)->Subscribe((Mezzanine::String const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Subscribe(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriber, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Subscribe__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Subscribe__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Scripting__iScript, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Subscribe__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__FunctorEventSubscriber, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_EventPublisher_Subscribe__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventPublisher_Subscribe'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventPublisher::Subscribe(Mezzanine::String const &,Mezzanine::EventSubscriber *)\n"
    "    Mezzanine::EventPublisher::Subscribe(Mezzanine::String const &,Mezzanine::FunctorEventSubscriber *,Mezzanine::Boole)\n"
    "    Mezzanine::EventPublisher::Subscribe(Mezzanine::String const &,CFunctionSubscriberSlot::SubscriberFunction *)\n"
    "    Mezzanine::EventPublisher::Subscribe(Mezzanine::String const &,Mezzanine::Scripting::iScript *)\n");
  lua_error(L);return 0;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::EventSubscriber *arg2 = (Mezzanine::EventSubscriber *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::EventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",2,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::FunctorEventSubscriber *arg2 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::FunctorEventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",2,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  CFunctionSubscriberSlot::SubscriberFunction *arg2 = (CFunctionSubscriberSlot::SubscriberFunction *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"CFunctionSubscriberSlot::SubscriberFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",2,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::Scripting::iScript *arg2 = (Mezzanine::Scripting::iScript *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::Scripting::iScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Scripting__iScript,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",2,SWIGTYPE_p_Mezzanine__Scripting__iScript);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::EventSubscriberSlot *arg2 = (Mezzanine::EventSubscriberSlot *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::EventSubscriberSlot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",2,SWIGTYPE_p_Mezzanine__EventSubscriberSlot);
  }
  
  (arg1)->Unsubscribe(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_UnsubscribeAll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::UnsubscribeAll",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::UnsubscribeAll",1,"Mezzanine::EventPublisher *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_UnsubscribeAll",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  result = (Mezzanine::Whole)(arg1)->UnsubscribeAll();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::EventSubscriber *arg3 = (Mezzanine::EventSubscriber *) 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",3,"Mezzanine::EventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__EventSubscriber,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",3,SWIGTYPE_p_Mezzanine__EventSubscriber);
  }
  
  (arg1)->Unsubscribe((Mezzanine::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::FunctorEventSubscriber *arg3 = (Mezzanine::FunctorEventSubscriber *) 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",3,"Mezzanine::FunctorEventSubscriber *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",3,SWIGTYPE_p_Mezzanine__FunctorEventSubscriber);
  }
  
  (arg1)->Unsubscribe((Mezzanine::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  CFunctionSubscriberSlot::SubscriberFunction *arg3 = (CFunctionSubscriberSlot::SubscriberFunction *) 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",3,"CFunctionSubscriberSlot::SubscriberFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",3,SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction);
  }
  
  (arg1)->Unsubscribe((Mezzanine::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Scripting::iScript *arg3 = (Mezzanine::Scripting::iScript *) 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",3,"Mezzanine::Scripting::iScript *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Scripting__iScript,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",3,SWIGTYPE_p_Mezzanine__Scripting__iScript);
  }
  
  (arg1)->Unsubscribe((Mezzanine::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::EventSubscriberSlot *arg3 = (Mezzanine::EventSubscriberSlot *) 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::Unsubscribe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",2,"Mezzanine::String const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EventPublisher::Unsubscribe",3,"Mezzanine::EventSubscriberSlot *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__EventSubscriberSlot,0))){
    SWIG_fail_ptr("EventPublisher_Unsubscribe",3,SWIGTYPE_p_Mezzanine__EventSubscriberSlot);
  }
  
  (arg1)->Unsubscribe((Mezzanine::String const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_Unsubscribe(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriber, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventPublisher_Unsubscribe__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__FunctorEventSubscriber, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventPublisher_Unsubscribe__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventPublisher_Unsubscribe__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Scripting__iScript, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventPublisher_Unsubscribe__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriberSlot, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EventPublisher_Unsubscribe__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriber, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Unsubscribe__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__FunctorEventSubscriber, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Unsubscribe__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_CFunctionSubscriberSlot__SubscriberFunction, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Unsubscribe__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Scripting__iScript, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Unsubscribe__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventSubscriberSlot, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EventPublisher_Unsubscribe__SWIG_9(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventPublisher_Unsubscribe'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::EventSubscriber *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::FunctorEventSubscriber *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(CFunctionSubscriberSlot::SubscriberFunction *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::Scripting::iScript *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::EventSubscriberSlot *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::String const &,Mezzanine::EventSubscriber *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::String const &,Mezzanine::FunctorEventSubscriber *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::String const &,CFunctionSubscriberSlot::SubscriberFunction *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::String const &,Mezzanine::Scripting::iScript *)\n"
    "    Mezzanine::EventPublisher::Unsubscribe(Mezzanine::String const &,Mezzanine::EventSubscriberSlot *)\n");
  lua_error(L);return 0;
}


static int _wrap_EventPublisher_UnsubscribeAll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::EventPublisher::UnsubscribeAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventPublisher::UnsubscribeAll",1,"Mezzanine::EventPublisher *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EventPublisher::UnsubscribeAll",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventPublisher,0))){
    SWIG_fail_ptr("EventPublisher_UnsubscribeAll",1,SWIGTYPE_p_Mezzanine__EventPublisher);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Whole)(arg1)->UnsubscribeAll((Mezzanine::String const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EventPublisher_UnsubscribeAll(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EventPublisher_UnsubscribeAll__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EventPublisher, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_EventPublisher_UnsubscribeAll__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EventPublisher_UnsubscribeAll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EventPublisher::UnsubscribeAll()\n"
    "    Mezzanine::EventPublisher::UnsubscribeAll(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_EventPublisher(void *obj) {
Mezzanine::EventPublisher *arg1 = (Mezzanine::EventPublisher *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventPublisher(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventPublisher);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventPublisher_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventPublisher_methods[]= {
    { "SetMuteEvents", _wrap_EventPublisher_SetMuteEvents},
    { "GetMuteEvents", _wrap_EventPublisher_GetMuteEvents},
    { "GetEvent", _wrap_EventPublisher_GetEvent},
    { "GetEventExcept", _wrap_EventPublisher_GetEventExcept},
    { "Subscribe", _wrap_EventPublisher_Subscribe},
    { "Unsubscribe", _wrap_EventPublisher_Unsubscribe},
    { "UnsubscribeAll", _wrap_EventPublisher_UnsubscribeAll},
    {0,0}
};
static swig_lua_method swig_EventPublisher_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventPublisher_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventPublisher_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventPublisher_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventPublisher_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventPublisher_Sf_SwigStatic = {
    "EventPublisher",
    swig_EventPublisher_Sf_SwigStatic_methods,
    swig_EventPublisher_Sf_SwigStatic_attributes,
    swig_EventPublisher_Sf_SwigStatic_constants,
    swig_EventPublisher_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventPublisher_bases[] = {0};
static const char *swig_EventPublisher_base_names[] = {0};
static swig_lua_class _wrap_class_EventPublisher = { "EventPublisher", "EventPublisher", &SWIGTYPE_p_Mezzanine__EventPublisher,_proxy__wrap_new_EventPublisher, swig_delete_EventPublisher, swig_EventPublisher_methods, swig_EventPublisher_attributes, &swig_EventPublisher_Sf_SwigStatic, swig_EventPublisher_meta, swig_EventPublisher_bases, swig_EventPublisher_base_names };

static int _wrap_EventQuit_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventQuit *arg1 = (Mezzanine::EventQuit *) 0 ;
  Mezzanine::EventBase::EventType result;
  
  SWIG_check_num_args("Mezzanine::EventQuit::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EventQuit::GetType",1,"Mezzanine::EventQuit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EventQuit,0))){
    SWIG_fail_ptr("EventQuit_GetType",1,SWIGTYPE_p_Mezzanine__EventQuit);
  }
  
  result = (Mezzanine::EventBase::EventType)((Mezzanine::EventQuit const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EventQuit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EventQuit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EventQuit::EventQuit",0,0)
  result = (Mezzanine::EventQuit *)new Mezzanine::EventQuit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EventQuit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EventQuit(void *obj) {
Mezzanine::EventQuit *arg1 = (Mezzanine::EventQuit *) obj;
delete arg1;
}
static int _proxy__wrap_new_EventQuit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EventQuit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EventQuit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EventQuit_methods[]= {
    { "GetType", _wrap_EventQuit_GetType},
    {0,0}
};
static swig_lua_method swig_EventQuit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EventQuit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EventQuit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EventQuit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EventQuit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EventQuit_Sf_SwigStatic = {
    "EventQuit",
    swig_EventQuit_Sf_SwigStatic_methods,
    swig_EventQuit_Sf_SwigStatic_attributes,
    swig_EventQuit_Sf_SwigStatic_constants,
    swig_EventQuit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EventQuit_bases[] = {0,0};
static const char *swig_EventQuit_base_names[] = {"Mezzanine::EventBase *",0};
static swig_lua_class _wrap_class_EventQuit = { "EventQuit", "EventQuit", &SWIGTYPE_p_Mezzanine__EventQuit,_proxy__wrap_new_EventQuit, swig_delete_EventQuit, swig_EventQuit_methods, swig_EventQuit_attributes, &swig_EventQuit_Sf_SwigStatic, swig_EventQuit_meta, swig_EventQuit_bases, swig_EventQuit_base_names };

static int _wrap_Ray_Origin_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Origin",1,"Mezzanine::Ray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Ray::Origin",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Origin_set",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_Origin_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Origin_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Origin",1,"Mezzanine::Ray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Origin_get",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Normal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Normal",1,"Mezzanine::Ray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Ray::Normal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Normal_set",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_Normal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Normal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Normal",1,"Mezzanine::Ray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Normal_get",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",0,0)
  result = (Mezzanine::Ray *)new Mezzanine::Ray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Ray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Ray",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Ray",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Ray *arg1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Ogre::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Ray,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Ogre__Ray);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Ogre::Ray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Ray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Ray__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Ray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Ray::Ray()\n"
    "    Mezzanine::Ray::Ray(Mezzanine::Ray const &)\n"
    "    Mezzanine::Ray::Ray(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Ray::Ray(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Ray::Ray(Ogre::Ray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Ray_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetNormal",1,"Mezzanine::Ray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetNormal",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *) &((Mezzanine::Ray const *)arg1)->GetNormal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_SetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::SetNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::SetNormal",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::SetNormal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_SetNormal",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_SetNormal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetNormal((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::GetOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetOrigin",1,"Mezzanine::Ray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetOrigin",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *) &((Mezzanine::Ray const *)arg1)->GetOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_SetOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::SetOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::SetOrigin",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::SetOrigin",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_SetOrigin",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_SetOrigin",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetOrigin((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetPointAtDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Ray::GetPointAtDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetPointAtDistance",1,"Mezzanine::Ray *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Ray::GetPointAtDistance",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetPointAtDistance",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = (arg1)->GetPointAtDistance((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Vector3 > > result;
  
  SWIG_check_num_args("Mezzanine::Ray::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Intersects",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Intersects",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Intersects",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Ray_Intersects",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::Plane const &)*arg2);
  {
    Mezzanine::Ray::PlaneRayTestResult * resultptr = new Mezzanine::Ray::PlaneRayTestResult((const Mezzanine::Ray::PlaneRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Vector3_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Ray::GeometryRayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Ray::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Intersects",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Intersects",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Intersects",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Ray_Intersects",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::Sphere const &)*arg2);
  {
    Mezzanine::Ray::GeometryRayTestResult * resultptr = new Mezzanine::Ray::GeometryRayTestResult((const Mezzanine::Ray::GeometryRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__GeometryRayTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Ray::GeometryRayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Ray::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Intersects",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Intersects",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Intersects",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Ray_Intersects",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::AxisAlignedBox const &)*arg2);
  {
    Mezzanine::Ray::GeometryRayTestResult * resultptr = new Mezzanine::Ray::GeometryRayTestResult((const Mezzanine::Ray::GeometryRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__GeometryRayTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Ray_Intersects'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Ray::Intersects(Mezzanine::Plane const &) const\n"
    "    Mezzanine::Ray::Intersects(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Ray::Intersects(Mezzanine::AxisAlignedBox const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Ray_ExtractOgreRay(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::ExtractOgreRay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::ExtractOgreRay",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::ExtractOgreRay",2,"Ogre::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_ExtractOgreRay",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Ray,0))){
    SWIG_fail_ptr("Ray_ExtractOgreRay",2,SWIGTYPE_p_Ogre__Ray);
  }
  
  (arg1)->ExtractOgreRay((Ogre::Ray const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetOgreRay(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Ogre::Ray result;
  
  SWIG_check_num_args("Mezzanine::Ray::GetOgreRay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetOgreRay",1,"Mezzanine::Ray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetOgreRay",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->GetOgreRay();
  {
    Ogre::Ray * resultptr = new Ogre::Ray((const Ogre::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::ProtoSerialize",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Ray_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Ray const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::ProtoDeSerialize",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Ray_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Ray::GetSerializableName",0,0)
  result = Mezzanine::Ray::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Ray::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::operator ==",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::operator ==",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray___eq",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray___eq",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Ray const *)arg1)->operator ==((Mezzanine::Ray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ray(void *obj) {
Mezzanine::Ray *arg1 = (Mezzanine::Ray *) obj;
delete arg1;
}
static int _proxy__wrap_new_Ray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Ray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Ray_attributes[] = {
    { "Origin", _wrap_Ray_Origin_get, _wrap_Ray_Origin_set },
    { "Normal", _wrap_Ray_Normal_get, _wrap_Ray_Normal_set },
    {0,0,0}
};
static swig_lua_method swig_Ray_methods[]= {
    { "GetNormal", _wrap_Ray_GetNormal},
    { "SetNormal", _wrap_Ray_SetNormal},
    { "GetOrigin", _wrap_Ray_GetOrigin},
    { "SetOrigin", _wrap_Ray_SetOrigin},
    { "GetPointAtDistance", _wrap_Ray_GetPointAtDistance},
    { "Intersects", _wrap_Ray_Intersects},
    { "ExtractOgreRay", _wrap_Ray_ExtractOgreRay},
    { "GetOgreRay", _wrap_Ray_GetOgreRay},
    { "ProtoSerialize", _wrap_Ray_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Ray_ProtoDeSerialize},
    { "__eq", _wrap_Ray___eq},
    {0,0}
};
static swig_lua_method swig_Ray_meta[] = {
    { "__eq", _wrap_Ray___eq},
    {0,0}
};

static swig_lua_attribute swig_Ray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Ray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Ray_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Ray_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Ray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Ray_Sf_SwigStatic = {
    "Ray",
    swig_Ray_Sf_SwigStatic_methods,
    swig_Ray_Sf_SwigStatic_attributes,
    swig_Ray_Sf_SwigStatic_constants,
    swig_Ray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Ray_bases[] = {0};
static const char *swig_Ray_base_names[] = {0};
static swig_lua_class _wrap_class_Ray = { "Ray", "Ray", &SWIGTYPE_p_Mezzanine__Ray,_proxy__wrap_new_Ray, swig_delete_Ray, swig_Ray_methods, swig_Ray_attributes, &swig_Ray_Sf_SwigStatic, swig_Ray_meta, swig_Ray_bases, swig_Ray_base_names };

static int _wrap_Sphere_Center_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Center",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Center",1,"Mezzanine::Sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Center",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Center_set",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Sphere_Center_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Center = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_Center_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Center",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Center",1,"Mezzanine::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Center_get",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Center);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_Radius_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Radius",1,"Mezzanine::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Radius",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Radius_set",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Radius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_Radius_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Sphere::Radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Radius",1,"Mezzanine::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Radius_get",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Real) ((arg1)->Radius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",0,0)
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = 0 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Mezzanine::Sphere const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Mezzanine::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Sphere *arg1 = 0 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Ogre::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Sphere,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Ogre__Sphere);
  }
  
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Ogre::Sphere const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sphere__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Sphere__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Sphere::Sphere()\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Sphere const &)\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Real const)\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Sphere::Sphere(Ogre::Sphere const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Sphere_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsInside",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsInside",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsInside",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Sphere_IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsInside((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sphere_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sphere_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sphere_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sphere_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Sphere::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Sphere::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::Sphere::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Sphere_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::pair< bool,Mezzanine::Ray > > result;
  
  SWIG_check_num_args("Mezzanine::Sphere::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Intersects",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Intersects",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Sphere_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Sphere const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::Sphere::RayTestResult * resultptr = new Mezzanine::Sphere::RayTestResult((const Mezzanine::Sphere::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__pairT_bool_Mezzanine__Ray_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_ExtractOgreSphere(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Ogre::Sphere *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::ExtractOgreSphere",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::ExtractOgreSphere",1,"Mezzanine::Sphere *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::ExtractOgreSphere",2,"Ogre::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_ExtractOgreSphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Sphere,0))){
    SWIG_fail_ptr("Sphere_ExtractOgreSphere",2,SWIGTYPE_p_Ogre__Sphere);
  }
  
  (arg1)->ExtractOgreSphere((Ogre::Sphere const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_GetOgreSphere(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Ogre::Sphere result;
  
  SWIG_check_num_args("Mezzanine::Sphere::GetOgreSphere",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::GetOgreSphere",1,"Mezzanine::Sphere const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_GetOgreSphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = ((Mezzanine::Sphere const *)arg1)->GetOgreSphere();
  {
    Ogre::Sphere * resultptr = new Ogre::Sphere((const Ogre::Sphere &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Sphere,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::ProtoSerialize",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Sphere_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Sphere const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::ProtoDeSerialize",1,"Mezzanine::Sphere *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Sphere_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Sphere::GetSerializableName",0,0)
  result = Mezzanine::Sphere::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::operator <",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::operator <",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___lt",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___lt",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->operator <((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::operator <=",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::operator <=",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___le",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___le",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->operator <=((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::operator ==",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::operator ==",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___eq",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___eq",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->operator ==((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sphere(void *obj) {
Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sphere_attributes[] = {
    { "Center", _wrap_Sphere_Center_get, _wrap_Sphere_Center_set },
    { "Radius", _wrap_Sphere_Radius_get, _wrap_Sphere_Radius_set },
    {0,0,0}
};
static swig_lua_method swig_Sphere_methods[]= {
    { "IsInside", _wrap_Sphere_IsInside},
    { "IsOverlapping", _wrap_Sphere_IsOverlapping},
    { "Intersects", _wrap_Sphere_Intersects},
    { "ExtractOgreSphere", _wrap_Sphere_ExtractOgreSphere},
    { "GetOgreSphere", _wrap_Sphere_GetOgreSphere},
    { "ProtoSerialize", _wrap_Sphere_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Sphere_ProtoDeSerialize},
    { "__lt", _wrap_Sphere___lt},
    { "__le", _wrap_Sphere___le},
    { "__eq", _wrap_Sphere___eq},
    {0,0}
};
static swig_lua_method swig_Sphere_meta[] = {
    { "__lt", _wrap_Sphere___lt},
    { "__le", _wrap_Sphere___le},
    { "__eq", _wrap_Sphere___eq},
    {0,0}
};

static swig_lua_attribute swig_Sphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sphere_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Sphere_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Sphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sphere_Sf_SwigStatic = {
    "Sphere",
    swig_Sphere_Sf_SwigStatic_methods,
    swig_Sphere_Sf_SwigStatic_attributes,
    swig_Sphere_Sf_SwigStatic_constants,
    swig_Sphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sphere_bases[] = {0};
static const char *swig_Sphere_base_names[] = {0};
static swig_lua_class _wrap_class_Sphere = { "Sphere", "Sphere", &SWIGTYPE_p_Mezzanine__Sphere,_proxy__wrap_new_Sphere, swig_delete_Sphere, swig_Sphere_methods, swig_Sphere_attributes, &swig_Sphere_Sf_SwigStatic, swig_Sphere_meta, swig_Sphere_bases, swig_Sphere_base_names };

static int _wrap_Blank_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Blank",0,0)
  result = (Mezzanine::String *) &Mezzanine::StringTools::Blank;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsDigit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsDigit",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsDigit",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsDigit(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsLowerAlphaLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsLowerAlphaLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsLowerAlphaLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsLowerAlphaLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsUpperAlphaLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsUpperAlphaLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsUpperAlphaLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsUpperAlphaLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAlphaLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsAlphaLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsAlphaLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsAlphaLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsLowerHexLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsLowerHexLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsLowerHexLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsLowerHexLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsUpperHexLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsUpperHexLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsUpperHexLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsUpperHexLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsHexLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsHexLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsHexLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsHexLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsHexDigit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsHexDigit",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsHexDigit",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsHexDigit(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAlphanumeric(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsAlphanumeric",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsAlphanumeric",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsAlphanumeric(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Boole arg3 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Trim",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Trim",1,"Mezzanine::String &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Trim",2,"Mezzanine::Boole");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::StringTools::Trim",3,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::StringTools::Trim(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Trim",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Trim",1,"Mezzanine::String &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Trim",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  Mezzanine::StringTools::Trim(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Trim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Trim",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::Trim(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Trim__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Trim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Trim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Trim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::Trim(Mezzanine::String &,Mezzanine::Boole,Mezzanine::Boole)\n"
    "    Mezzanine::StringTools::Trim(Mezzanine::String &,Mezzanine::Boole)\n"
    "    Mezzanine::StringTools::Trim(Mezzanine::String &)\n");
  lua_error(L);return 0;
}


static int _wrap_Split__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Mezzanine::StringTools::Split",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Split",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Split",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::StringTools::Split",3,"Mezzanine::Whole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  result = Mezzanine::StringTools::Split((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  {
    Mezzanine::StringVector * resultptr = new Mezzanine::StringVector((const Mezzanine::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Split__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Mezzanine::StringTools::Split",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Split",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Split",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = Mezzanine::StringTools::Split((std::string const &)*arg1,(std::string const &)*arg2);
  {
    Mezzanine::StringVector * resultptr = new Mezzanine::StringVector((const Mezzanine::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Split__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Mezzanine::StringTools::Split",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Split",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::Split((std::string const &)*arg1);
  {
    Mezzanine::StringVector * resultptr = new Mezzanine::StringVector((const Mezzanine::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Split(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Split__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Split__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Split__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Split'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::Split(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const)\n"
    "    Mezzanine::StringTools::Split(Mezzanine::String const &,Mezzanine::String const &)\n"
    "    Mezzanine::StringTools::Split(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ToUpperCase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::ToUpperCase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ToUpperCase",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ToUpperCase",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::ToUpperCase(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpperCaseCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::UpperCaseCopy",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::UpperCaseCopy",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = Mezzanine::StringTools::UpperCaseCopy(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToLowerCase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::ToLowerCase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ToLowerCase",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ToLowerCase",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::ToLowerCase(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowerCaseCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::LowerCaseCopy",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::LowerCaseCopy",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = Mezzanine::StringTools::LowerCaseCopy(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToCamelCase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::ToCamelCase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ToCamelCase",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ToCamelCase",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::ToCamelCase(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CamelCaseCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::CamelCaseCopy",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::CamelCaseCopy",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = Mezzanine::StringTools::CamelCaseCopy(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartsWith(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::StartsWith",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::StartsWith",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::StartsWith",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::StringTools::StartsWith",3,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::Boole)Mezzanine::StringTools::StartsWith((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndsWith(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::EndsWith",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::EndsWith",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::EndsWith",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::StringTools::EndsWith",3,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::Boole)Mezzanine::StringTools::EndsWith((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RemoveDuplicateWhitespaces(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::RemoveDuplicateWhitespaces",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::RemoveDuplicateWhitespaces",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("RemoveDuplicateWhitespaces",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::RemoveDuplicateWhitespaces(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToVector2",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToVector2",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToVector2((std::string const &)*arg1);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::Vector2 const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToVector3",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToVector3",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToVector3((std::string const &)*arg1);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::Vector3 const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToQuaternion",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToQuaternion",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToQuaternion((std::string const &)*arg1);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::Quaternion const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToColourValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToColourValue",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToColourValue",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToColourValue((std::string const &)*arg1);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::ColourValue const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertHexToColourValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertHexToColourValue",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertHexToColourValue",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertHexToColourValue((std::string const &)*arg1);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToHexString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToHexString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToHexString",1,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ConvertToHexString",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = Mezzanine::StringTools::ConvertToHexString((Mezzanine::ColourValue const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::String temp1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToBool",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToBool",1,"Mezzanine::String const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToBool",2,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Mezzanine::Boole)Mezzanine::StringTools::ConvertToBool((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToBool",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToBool",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Boole)Mezzanine::StringTools::ConvertToBool((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_ConvertToBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConvertToBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvertToBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::ConvertToBool(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::StringTools::ConvertToBool(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvertToReal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToReal",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToReal",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::StringTools::ConvertToReal((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInteger(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInteger",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInteger",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Integer)Mezzanine::StringTools::ConvertToInteger((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToWhole(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToWhole",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToWhole",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Whole)Mezzanine::StringTools::ConvertToWhole((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInt8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Int8 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInt8",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInt8",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Int8)Mezzanine::StringTools::ConvertToInt8((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToUInt8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::UInt8 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToUInt8",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToUInt8",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::UInt8)Mezzanine::StringTools::ConvertToUInt8((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInt16(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Int16 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInt16",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInt16",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Int16)Mezzanine::StringTools::ConvertToInt16((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToUInt16(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::UInt16 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToUInt16",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToUInt16",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::UInt16)Mezzanine::StringTools::ConvertToUInt16((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInt32(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Int32 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInt32",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInt32",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Int32)Mezzanine::StringTools::ConvertToInt32((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToUInt32(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToUInt32",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToUInt32",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::UInt32)Mezzanine::StringTools::ConvertToUInt32((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Input::InputCode *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Input::InputCode const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Input__InputCode,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Input__InputCode);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = Mezzanine::StringTools::ConvertToString((Input::InputCode const &)*arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Input__InputCode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConvertToString__SWIG_5(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvertToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::Vector2 const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::ColourValue const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Input::InputCode const &,Mezzanine::Boole)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Timer",0,0)
  result = (Mezzanine::Timer *)new Mezzanine::Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_SetCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::SetCurrentTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTime",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTime",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_SetCurrentTime",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->SetCurrentTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_SetCurrentTimeInMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::SetCurrentTimeInMilliseconds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTimeInMilliseconds",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTimeInMilliseconds",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_SetCurrentTimeInMilliseconds",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->SetCurrentTimeInMilliseconds(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetCurrentTime",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetCurrentTime",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetCurrentTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetCurrentTimeInMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetCurrentTimeInMilliseconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetCurrentTimeInMilliseconds",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetCurrentTimeInMilliseconds",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetCurrentTimeInMilliseconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_SetCountMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::CountMode arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::SetCountMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::SetCountMode",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::SetCountMode",2,"Mezzanine::CountMode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_SetCountMode",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  arg2 = (Mezzanine::CountMode const)(int)lua_tonumber(L, 2);
  (arg1)->SetCountMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetCountMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::CountMode result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetCountMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetCountMode",1,"Mezzanine::Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetCountMode",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::CountMode)((Mezzanine::Timer const *)arg1)->GetCountMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Start(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Start",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Start",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Stop(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Stop",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Stop",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Reset",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::Reset",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Reset",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->Reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Reset",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Reset",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Timer_Reset__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Timer_Reset__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Timer_Reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Timer::Reset(Mezzanine::Whole const)\n"
    "    Mezzanine::Timer::Reset()\n");
  lua_error(L);return 0;
}


static int _wrap_Timer_IsTicking(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Timer::IsTicking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::IsTicking",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_IsTicking",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Boole)(arg1)->IsTicking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_IsStopped(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Timer::IsStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::IsStopped",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_IsStopped",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Boole)(arg1)->IsStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetTimeAsText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::TimeFormat arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetTimeAsText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetTimeAsText",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::GetTimeAsText",2,"Mezzanine::TimeFormat const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetTimeAsText",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  arg2 = (Mezzanine::TimeFormat const)(int)lua_tonumber(L, 2);
  result = (arg1)->GetTimeAsText(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
Mezzanine::Timer *arg1 = (Mezzanine::Timer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Timer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Timer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_methods[]= {
    { "SetCurrentTime", _wrap_Timer_SetCurrentTime},
    { "SetCurrentTimeInMilliseconds", _wrap_Timer_SetCurrentTimeInMilliseconds},
    { "GetCurrentTime", _wrap_Timer_GetCurrentTime},
    { "GetCurrentTimeInMilliseconds", _wrap_Timer_GetCurrentTimeInMilliseconds},
    { "SetCountMode", _wrap_Timer_SetCountMode},
    { "GetCountMode", _wrap_Timer_GetCountMode},
    { "Start", _wrap_Timer_Start},
    { "Stop", _wrap_Timer_Stop},
    { "Reset", _wrap_Timer_Reset},
    { "IsTicking", _wrap_Timer_IsTicking},
    { "IsStopped", _wrap_Timer_IsStopped},
    { "GetTimeAsText", _wrap_Timer_GetTimeAsText},
    {0,0}
};
static swig_lua_method swig_Timer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Timer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Timer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Timer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Timer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Timer_Sf_SwigStatic = {
    "Timer",
    swig_Timer_Sf_SwigStatic_methods,
    swig_Timer_Sf_SwigStatic_attributes,
    swig_Timer_Sf_SwigStatic_constants,
    swig_Timer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", "Timer", &SWIGTYPE_p_Mezzanine__Timer,_proxy__wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, &swig_Timer_Sf_SwigStatic, swig_Timer_meta, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_new_World__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::World::WorldManagerContainer *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::World",2,"Mezzanine::World::WorldManagerContainer const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t,0))){
    SWIG_fail_ptr("new_World",2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t);
  }
  
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1,(Mezzanine::World::WorldManagerContainer const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Physics::ManagerConstructionInfo *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp3 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::World",2,"Mezzanine::Physics::ManagerConstructionInfo const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::World::World",3,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("new_World",2,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1,(Mezzanine::Physics::ManagerConstructionInfo const &)*arg2,(Mezzanine::String const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::World::WorldManagerContainer *arg2 = 0 ;
  Mezzanine::Physics::ManagerConstructionInfo *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp4 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::World",2,"Mezzanine::World::WorldManagerContainer const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::World",3,"Mezzanine::Physics::ManagerConstructionInfo const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::World::World",4,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t,0))){
    SWIG_fail_ptr("new_World",2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("new_World",3,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1,(Mezzanine::World::WorldManagerContainer const &)*arg2,(Mezzanine::Physics::ManagerConstructionInfo const &)*arg3,(Mezzanine::String const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_World",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_World__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_World__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_World__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_World__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_World__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_World'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::World(Mezzanine::String const &)\n"
    "    Mezzanine::World::World(Mezzanine::String const &,Mezzanine::World::WorldManagerContainer const &)\n"
    "    Mezzanine::World::World(Mezzanine::String const &,Mezzanine::Physics::ManagerConstructionInfo const &,Mezzanine::String const &)\n"
    "    Mezzanine::World::World(Mezzanine::String const &,Mezzanine::World::WorldManagerContainer const &,Mezzanine::Physics::ManagerConstructionInfo const &,Mezzanine::String const &)\n"
    "    Mezzanine::World::World(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetName",1,"Mezzanine::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetName",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::World const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_PauseWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::World::PauseWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::PauseWorld",1,"Mezzanine::World *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::World::PauseWorld",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_PauseWorld",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->PauseWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_Clear(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::Clear",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_Clear",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::Initialize",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_Initialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::Deinitialize",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_Deinitialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_PreMainLoopInit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::PreMainLoopInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::PreMainLoopInit",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_PreMainLoopInit",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->PreMainLoopInit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::NameValuePairList const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::World::CreateManager",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::NameValuePairList const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::XML::Node const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::World::CreateManager",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::XML::Node const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_World_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_World_CreateManager__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_World_CreateManager__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_World_CreateManager__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::NameValuePairList const &,Mezzanine::Boole)\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::XML::Node const &,Mezzanine::Boole)\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyManager",1,"Mezzanine::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::World::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_DestroyManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("World_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_DestroyAllManagers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyAllManagers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyAllManagers",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_DestroyAllManagers",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->DestroyAllManagers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_AddManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::World::AddManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::AddManager",1,"Mezzanine::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::World::AddManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_AddManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("World_AddManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  result = (Mezzanine::Boole)(arg1)->AddManager(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetManager",1,"Mezzanine::World *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::World::GetManager",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::WorldManager *)(arg1)->GetManager(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManager",1,"Mezzanine::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::World::RemoveManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_RemoveManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("World_RemoveManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->RemoveManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManager",1,"Mezzanine::World *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::World::RemoveManager",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_RemoveManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->RemoveManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_World_RemoveManager__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_World_RemoveManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_RemoveManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::RemoveManager(Mezzanine::WorldManager *)\n"
    "    Mezzanine::World::RemoveManager(Mezzanine::Whole const)\n");
  lua_error(L);return 0;
}


static int _wrap_World_RemoveAllManagers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveAllManagers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveAllManagers",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_RemoveAllManagers",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->RemoveAllManagers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetWorldManagers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::World::WorldManagerContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetWorldManagers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetWorldManagers",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetWorldManagers",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::World::WorldManagerContainer *) &(arg1)->GetWorldManagers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_AddManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::AddManagerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::AddManagerFactory",1,"Mezzanine::WorldManagerFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("World_AddManagerFactory",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  Mezzanine::World::AddManagerFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManagerFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManagerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManagerFactory",1,"Mezzanine::WorldManagerFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("World_RemoveManagerFactory",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  Mezzanine::World::RemoveManagerFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManagerFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManagerFactory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManagerFactory",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  Mezzanine::World::RemoveManagerFactory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManagerFactory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_World_RemoveManagerFactory__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_World_RemoveManagerFactory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_RemoveManagerFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::RemoveManagerFactory(Mezzanine::WorldManagerFactory *)\n"
    "    Mezzanine::World::RemoveManagerFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_DestroyManagerFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyManagerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyManagerFactory",1,"Mezzanine::WorldManagerFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("World_DestroyManagerFactory",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  Mezzanine::World::DestroyManagerFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_DestroyManagerFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyManagerFactory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyManagerFactory",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  Mezzanine::World::DestroyManagerFactory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_DestroyManagerFactory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_World_DestroyManagerFactory__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_World_DestroyManagerFactory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_DestroyManagerFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::DestroyManagerFactory(Mezzanine::WorldManagerFactory *)\n"
    "    Mezzanine::World::DestroyManagerFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_DestroyAllManagerFactories(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Mezzanine::World::DestroyAllManagerFactories",0,0)
  Mezzanine::World::DestroyAllManagerFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_AddAllEngineDefaultManagerFactories(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Mezzanine::World::AddAllEngineDefaultManagerFactories",0,0)
  Mezzanine::World::AddAllEngineDefaultManagerFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoSerialize",1,"Mezzanine::World const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::World const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoSerializeProperties",1,"Mezzanine::World const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::World const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerialize",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerializeProperties",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::World::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetDerivedSerializableName",1,"Mezzanine::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = ((Mezzanine::World const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::World::GetSerializableName",0,0)
  result = Mezzanine::World::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_World(void *obj) {
Mezzanine::World *arg1 = (Mezzanine::World *) obj;
delete arg1;
}
static int _proxy__wrap_new_World(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_World);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_World_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_World_methods[]= {
    { "GetName", _wrap_World_GetName},
    { "PauseWorld", _wrap_World_PauseWorld},
    { "Clear", _wrap_World_Clear},
    { "Initialize", _wrap_World_Initialize},
    { "Deinitialize", _wrap_World_Deinitialize},
    { "PreMainLoopInit", _wrap_World_PreMainLoopInit},
    { "CreateManager", _wrap_World_CreateManager},
    { "DestroyManager", _wrap_World_DestroyManager},
    { "DestroyAllManagers", _wrap_World_DestroyAllManagers},
    { "AddManager", _wrap_World_AddManager},
    { "GetManager", _wrap_World_GetManager},
    { "RemoveManager", _wrap_World_RemoveManager},
    { "RemoveAllManagers", _wrap_World_RemoveAllManagers},
    { "GetWorldManagers", _wrap_World_GetWorldManagers},
    { "ProtoSerialize", _wrap_World_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_World_ProtoSerializeProperties},
    { "ProtoDeSerialize", _wrap_World_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_World_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_World_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_World_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_World_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_World_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_World_Sf_SwigStatic_methods[]= {
    { "AddManagerFactory", _wrap_World_AddManagerFactory},
    { "RemoveManagerFactory", _wrap_World_RemoveManagerFactory},
    { "DestroyManagerFactory", _wrap_World_DestroyManagerFactory},
    { "DestroyAllManagerFactories", _wrap_World_DestroyAllManagerFactories},
    { "AddAllEngineDefaultManagerFactories", _wrap_World_AddAllEngineDefaultManagerFactories},
    { "GetSerializableName", _wrap_World_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_World_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_World_Sf_SwigStatic = {
    "World",
    swig_World_Sf_SwigStatic_methods,
    swig_World_Sf_SwigStatic_attributes,
    swig_World_Sf_SwigStatic_constants,
    swig_World_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_World_bases[] = {0};
static const char *swig_World_base_names[] = {0};
static swig_lua_class _wrap_class_World = { "World", "World", &SWIGTYPE_p_Mezzanine__World,_proxy__wrap_new_World, swig_delete_World, swig_World_methods, swig_World_attributes, &swig_World_Sf_SwigStatic, swig_World_meta, swig_World_bases, swig_World_base_names };

static int _wrap_WorldProxy_GetProxyType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::ProxyType result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetProxyType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetProxyType",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetProxyType",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::ProxyType)((Mezzanine::WorldProxy const *)arg1)->GetProxyType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::AddToWorld",1,"Mezzanine::WorldProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_AddToWorld",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::RemoveFromWorld",1,"Mezzanine::WorldProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_IsInWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::IsInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::IsInWorld",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_IsInWorld",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldProxy const *)arg1)->IsInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetParentObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::WorldObject *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetParentObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetParentObject",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetParentObject",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::WorldObject *)((Mezzanine::WorldProxy const *)arg1)->GetParentObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldObject,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetProxyID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetProxyID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetProxyID",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetProxyID",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::WorldProxy const *)arg1)->GetProxyID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetCreator(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetCreator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetCreator",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetCreator",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = (Mezzanine::WorldManager *)((Mezzanine::WorldProxy const *)arg1)->GetCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetLocation",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetLocation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("WorldProxy_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::WorldProxy::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_WorldProxy_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::WorldProxy::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetOrientation",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetOrientation",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetScale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_SetScale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetScale",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetScale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Translate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Translate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Yaw",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Yaw",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Pitch",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Pitch",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Roll",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Roll",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("WorldProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_WorldProxy_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::WorldProxy::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Scale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("WorldProxy_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",1,"Mezzanine::WorldProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::WorldProxy::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_Scale",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_WorldProxy_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_WorldProxy_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldProxy_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldProxy::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::WorldProxy::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldProxy_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerialize",1,"Mezzanine::WorldProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::WorldProxy const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerializeProperties",1,"Mezzanine::WorldProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::WorldProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerialize",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerializeProperties",1,"Mezzanine::WorldProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("WorldProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::GetDerivedSerializableName",1,"Mezzanine::WorldProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  result = ((Mezzanine::WorldProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::GetSerializableName",0,0)
  result = Mezzanine::WorldProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldProxy__Bind(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) 0 ;
  Mezzanine::WorldObject *arg2 = (Mezzanine::WorldObject *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldProxy::_Bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldProxy::_Bind",1,"Mezzanine::WorldProxy *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldProxy::_Bind",2,"Mezzanine::WorldObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldProxy,0))){
    SWIG_fail_ptr("WorldProxy__Bind",1,SWIGTYPE_p_Mezzanine__WorldProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldObject,0))){
    SWIG_fail_ptr("WorldProxy__Bind",2,SWIGTYPE_p_Mezzanine__WorldObject);
  }
  
  (arg1)->_Bind(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldProxy(void *obj) {
Mezzanine::WorldProxy *arg1 = (Mezzanine::WorldProxy *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldProxy_methods[]= {
    { "GetProxyType", _wrap_WorldProxy_GetProxyType},
    { "AddToWorld", _wrap_WorldProxy_AddToWorld},
    { "RemoveFromWorld", _wrap_WorldProxy_RemoveFromWorld},
    { "IsInWorld", _wrap_WorldProxy_IsInWorld},
    { "GetParentObject", _wrap_WorldProxy_GetParentObject},
    { "GetProxyID", _wrap_WorldProxy_GetProxyID},
    { "GetCreator", _wrap_WorldProxy_GetCreator},
    { "SetLocation", _wrap_WorldProxy_SetLocation},
    { "GetLocation", _wrap_WorldProxy_GetLocation},
    { "SetOrientation", _wrap_WorldProxy_SetOrientation},
    { "GetOrientation", _wrap_WorldProxy_GetOrientation},
    { "SetScale", _wrap_WorldProxy_SetScale},
    { "GetScale", _wrap_WorldProxy_GetScale},
    { "Translate", _wrap_WorldProxy_Translate},
    { "Yaw", _wrap_WorldProxy_Yaw},
    { "Pitch", _wrap_WorldProxy_Pitch},
    { "Roll", _wrap_WorldProxy_Roll},
    { "Rotate", _wrap_WorldProxy_Rotate},
    { "Scale", _wrap_WorldProxy_Scale},
    { "ProtoSerialize", _wrap_WorldProxy_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_WorldProxy_ProtoSerializeProperties},
    { "ProtoDeSerialize", _wrap_WorldProxy_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_WorldProxy_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_WorldProxy_GetDerivedSerializableName},
    { "_Bind", _wrap_WorldProxy__Bind},
    {0,0}
};
static swig_lua_method swig_WorldProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_WorldProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_WorldProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldProxy_Sf_SwigStatic = {
    "WorldProxy",
    swig_WorldProxy_Sf_SwigStatic_methods,
    swig_WorldProxy_Sf_SwigStatic_attributes,
    swig_WorldProxy_Sf_SwigStatic_constants,
    swig_WorldProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldProxy_bases[] = {0,0};
static const char *swig_WorldProxy_base_names[] = {"Mezzanine::TransformableObject *",0};
static swig_lua_class _wrap_class_WorldProxy = { "WorldProxy", "WorldProxy", &SWIGTYPE_p_Mezzanine__WorldProxy,0, swig_delete_WorldProxy, swig_WorldProxy_methods, swig_WorldProxy_attributes, &swig_WorldProxy_Sf_SwigStatic, swig_WorldProxy_meta, swig_WorldProxy_bases, swig_WorldProxy_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "ActorManager_ImplementationName", _wrap_ActorManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "ActorManager_InterfaceType", _wrap_ActorManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "AreaEffectManager_ImplementationName", _wrap_AreaEffectManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "AreaEffectManager_InterfaceType", _wrap_AreaEffectManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "DebrisManager_ImplementationName", _wrap_DebrisManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "DebrisManager_InterfaceType", _wrap_DebrisManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "EventManager_ImplementationName", _wrap_EventManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "EventManager_InterfaceType", _wrap_EventManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "Blank", _wrap_Blank_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MEZZANINE_CORE", 1)},
    {SWIG_LUA_CONSTTAB_INT("MEZZ_FRAMESTOTRACK", 10)},
    {SWIG_LUA_CONSTTAB_INT("Att_None", Mezzanine::Att_None)},
    {SWIG_LUA_CONSTTAB_INT("Att_Linear", Mezzanine::Att_Linear)},
    {SWIG_LUA_CONSTTAB_INT("Att_Quadratic", Mezzanine::Att_Quadratic)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_0", Mezzanine::OM_Degree_0)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_90", Mezzanine::OM_Degree_90)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_180", Mezzanine::OM_Degree_180)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_270", Mezzanine::OM_Degree_270)},
    {SWIG_LUA_CONSTTAB_INT("OM_Portrait", Mezzanine::OM_Portrait)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeRight", Mezzanine::OM_LandscapeRight)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeLeft", Mezzanine::OM_LandscapeLeft)},
    {SWIG_LUA_CONSTTAB_INT("PL_Unpaused", Mezzanine::PL_Unpaused)},
    {SWIG_LUA_CONSTTAB_INT("PL_PausePhysics", Mezzanine::PL_PausePhysics)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseParticles", Mezzanine::PL_PauseParticles)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAnimations", Mezzanine::PL_PauseAnimations)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAll", Mezzanine::PL_PauseAll)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_First", Mezzanine::PT_Audio_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_Listener", Mezzanine::PT_Audio_Listener)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_SoundProxy", Mezzanine::PT_Audio_SoundProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_Last", Mezzanine::PT_Audio_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_First", Mezzanine::PT_Graphics_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_BillboardSetProxy", Mezzanine::PT_Graphics_BillboardSetProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_CameraProxy", Mezzanine::PT_Graphics_CameraProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_EntityProxy", Mezzanine::PT_Graphics_EntityProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_LightProxy", Mezzanine::PT_Graphics_LightProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_ParticleSystemProxy", Mezzanine::PT_Graphics_ParticleSystemProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_Last", Mezzanine::PT_Graphics_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_First", Mezzanine::PT_Physics_First)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_GhostProxy", Mezzanine::PT_Physics_GhostProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_RigidProxy", Mezzanine::PT_Physics_RigidProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_SoftProxy", Mezzanine::PT_Physics_SoftProxy)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_Last", Mezzanine::PT_Physics_Last)},
    {SWIG_LUA_CONSTTAB_INT("PT_Audio_All_Proxies", Mezzanine::PT_Audio_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("PT_Graphics_All_Proxies", Mezzanine::PT_Graphics_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("PT_Physics_All_Proxies", Mezzanine::PT_Physics_All_Proxies)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Invalid", Mezzanine::Axis_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("Axis_X", Mezzanine::Axis_X)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Min", Mezzanine::Axis_Min)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Y", Mezzanine::Axis_Y)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Z", Mezzanine::Axis_Z)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Max", Mezzanine::Axis_Max)},
    {SWIG_LUA_CONSTTAB_INT("TT_Simple", Mezzanine::TT_Simple)},
    {SWIG_LUA_CONSTTAB_INT("TT_Spline", Mezzanine::TT_Spline)},
    {SWIG_LUA_CONSTTAB_INT("TT_Bezier", Mezzanine::TT_Bezier)},
    {SWIG_LUA_CONSTTAB_INT("TS_Local", Mezzanine::TS_Local)},
    {SWIG_LUA_CONSTTAB_INT("TS_Parent", Mezzanine::TS_Parent)},
    {SWIG_LUA_CONSTTAB_INT("TS_World", Mezzanine::TS_World)},
    {SWIG_LUA_CONSTTAB_INT("WO_TerrainFirst", Mezzanine::WO_TerrainFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_MeshTerrain", Mezzanine::WO_MeshTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_HeightfieldTerrain", Mezzanine::WO_HeightfieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_VectorFieldTerrain", Mezzanine::WO_VectorFieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_VoxelTerrain", Mezzanine::WO_VoxelTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_MarchingCubeTerrain", Mezzanine::WO_MarchingCubeTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_UnknownTerrain", Mezzanine::WO_UnknownTerrain)},
    {SWIG_LUA_CONSTTAB_INT("WO_TerrainLast", Mezzanine::WO_TerrainLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisFirst", Mezzanine::WO_DebrisFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisRigid", Mezzanine::WO_DebrisRigid)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisSoft", Mezzanine::WO_DebrisSoft)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisUnknown", Mezzanine::WO_DebrisUnknown)},
    {SWIG_LUA_CONSTTAB_INT("WO_DebrisLast", Mezzanine::WO_DebrisLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectFirst", Mezzanine::WO_AreaEffectFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectGravityField", Mezzanine::WO_AreaEffectGravityField)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectGravityWell", Mezzanine::WO_AreaEffectGravityWell)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectFieldOfForce", Mezzanine::WO_AreaEffectFieldOfForce)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectPlaceHolder1", Mezzanine::WO_AreaEffectPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectPlaceHolder2", Mezzanine::WO_AreaEffectPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectUnknown", Mezzanine::WO_AreaEffectUnknown)},
    {SWIG_LUA_CONSTTAB_INT("WO_AreaEffectLast", Mezzanine::WO_AreaEffectLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorFirst", Mezzanine::WO_ActorFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder1", Mezzanine::WO_ActorPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder2", Mezzanine::WO_ActorPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorPlaceHolder3", Mezzanine::WO_ActorPlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("WO_ActorLast", Mezzanine::WO_ActorLast)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehicleFirst", Mezzanine::WO_VehicleFirst)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder1", Mezzanine::WO_VehiclePlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder2", Mezzanine::WO_VehiclePlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder3", Mezzanine::WO_VehiclePlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder4", Mezzanine::WO_VehiclePlaceHolder4)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehiclePlaceHolder5", Mezzanine::WO_VehiclePlaceHolder5)},
    {SWIG_LUA_CONSTTAB_INT("WO_VehicleLast", Mezzanine::WO_VehicleLast)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_FIRST_EXCEPTION", Mezzanine::ExceptionBase::FIRST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_EXCEPTION", Mezzanine::ExceptionBase::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_URL_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_EXCEPTION", Mezzanine::ExceptionBase::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_IDENTITY_INVALID_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::ExceptionBase::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_EXCEPTION", Mezzanine::ExceptionBase::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_CAST_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_RANGE_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_ARITHMETIC_EXCEPTION", Mezzanine::ExceptionBase::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_VERSION_EXCEPTION", Mezzanine::ExceptionBase::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_STATE_EXCEPTION", Mezzanine::ExceptionBase::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_RENDERINGAPI_EXCEPTION", Mezzanine::ExceptionBase::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_RT_ASSERTION_EXCEPTION", Mezzanine::ExceptionBase::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INTERNAL_EXCEPTION", Mezzanine::ExceptionBase::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_NOT_IMPLEMENTED_EXCEPTION", Mezzanine::ExceptionBase::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_ASSIGNMENT", Mezzanine::ExceptionBase::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_LAST_EXCEPTION", Mezzanine::ExceptionBase::LAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IOException_ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileException_ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileReadException_ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileWriteException_ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileNotFoundException_ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FilePermissionException_ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryException_ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryReadException_ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryWriteException_ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryNotFoundException_ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryPermissionException_ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkException_ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkReadException_ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkWriteException_ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkNotFoundException_ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkURLException_ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkPermissionException_ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOWriteException_ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOReadException_ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityException_ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityInvalidException_ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityNotFoundException_ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityDuplicateException_ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryManagementException_ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("OutOfMemoryException_ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryOutOfBoundsException_ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorException_ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXMLException_ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXPathException_ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorLuaException_ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptException_ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaException_ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaYieldException_ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaRuntimeException_ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaErrErrException_ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersException_ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersCastException_ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersRangeException_ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ArithmeticException_ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidVersionException_ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidStateException_ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RenderingAPIException_ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RuntimeAssertionException_ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InternalException_ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NotImplementedException_ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidAssignment_ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneError", Mezzanine::CastNoneError)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneReturnZero", Mezzanine::CastNoneReturnZero)},
    {SWIG_LUA_CONSTTAB_INT("CastImplicit", Mezzanine::CastImplicit)},
    {SWIG_LUA_CONSTTAB_INT("CastStatic", Mezzanine::CastStatic)},
    {SWIG_LUA_CONSTTAB_INT("CastDynamic", Mezzanine::CastDynamic)},
    {SWIG_LUA_CONSTTAB_INT("AS_Active", Mezzanine::Physics::AS_Active)},
    {SWIG_LUA_CONSTTAB_INT("AS_Island_Sleeping", Mezzanine::Physics::AS_Island_Sleeping)},
    {SWIG_LUA_CONSTTAB_INT("AS_Wants_Deactivation", Mezzanine::Physics::AS_Wants_Deactivation)},
    {SWIG_LUA_CONSTTAB_INT("AS_DisableDeactivation", Mezzanine::Physics::AS_DisableDeactivation)},
    {SWIG_LUA_CONSTTAB_INT("AS_DisableSimulation", Mezzanine::Physics::AS_DisableSimulation)},
    {SWIG_LUA_CONSTTAB_INT("AFF_AnisotropicFrictionDisabled", Mezzanine::Physics::AFF_AnisotropicFrictionDisabled)},
    {SWIG_LUA_CONSTTAB_INT("AFF_AnisotropicFriction", Mezzanine::Physics::AFF_AnisotropicFriction)},
    {SWIG_LUA_CONSTTAB_INT("AFF_AnisotropicRollingFriction", Mezzanine::Physics::AFF_AnisotropicRollingFriction)},
    {SWIG_LUA_CONSTTAB_INT("CF_GenericFilter", Mezzanine::Physics::CF_GenericFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_StaticFilter", Mezzanine::Physics::CF_StaticFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_KinematicFilter", Mezzanine::Physics::CF_KinematicFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_DebrisFilter", Mezzanine::Physics::CF_DebrisFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_SensorFilter", Mezzanine::Physics::CF_SensorFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_CharacterFilter", Mezzanine::Physics::CF_CharacterFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_AllFilter", Mezzanine::Physics::CF_AllFilter)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter1", Mezzanine::Physics::CF_UserFilter1)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter2", Mezzanine::Physics::CF_UserFilter2)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter3", Mezzanine::Physics::CF_UserFilter3)},
    {SWIG_LUA_CONSTTAB_INT("CF_UserFilter4", Mezzanine::Physics::CF_UserFilter4)},
    {SWIG_LUA_CONSTTAB_INT("CF_StaticObject", Mezzanine::Physics::CF_StaticObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_KinematicObject", Mezzanine::Physics::CF_KinematicObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_NoContactResponse", Mezzanine::Physics::CF_NoContactResponse)},
    {SWIG_LUA_CONSTTAB_INT("CF_CustomMaterialCallback", Mezzanine::Physics::CF_CustomMaterialCallback)},
    {SWIG_LUA_CONSTTAB_INT("CF_CharacterObject", Mezzanine::Physics::CF_CharacterObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_DisableVisualizeObject", Mezzanine::Physics::CF_DisableVisualizeObject)},
    {SWIG_LUA_CONSTTAB_INT("CF_DisableSPUCollisionProcessing", Mezzanine::Physics::CF_DisableSPUCollisionProcessing)},
    {SWIG_LUA_CONSTTAB_INT("Col_Begin", Mezzanine::Physics::Col_Begin)},
    {SWIG_LUA_CONSTTAB_INT("Col_Contacts_Updated", Mezzanine::Physics::Col_Contacts_Updated)},
    {SWIG_LUA_CONSTTAB_INT("Col_End", Mezzanine::Physics::Col_End)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_Actor", Mezzanine::Physics::Col_Actor_Actor)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_AreaEffect", Mezzanine::Physics::Col_Actor_AreaEffect)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_Debris", Mezzanine::Physics::Col_Actor_Debris)},
    {SWIG_LUA_CONSTTAB_INT("Col_Actor_Terrain", Mezzanine::Physics::Col_Actor_Terrain)},
    {SWIG_LUA_CONSTTAB_INT("Col_AreaEffect_AreaEffect", Mezzanine::Physics::Col_AreaEffect_AreaEffect)},
    {SWIG_LUA_CONSTTAB_INT("Col_AreaEffect_Debris", Mezzanine::Physics::Col_AreaEffect_Debris)},
    {SWIG_LUA_CONSTTAB_INT("Col_AreaEffect_Terrain", Mezzanine::Physics::Col_AreaEffect_Terrain)},
    {SWIG_LUA_CONSTTAB_INT("Col_Debris_Debris", Mezzanine::Physics::Col_Debris_Debris)},
    {SWIG_LUA_CONSTTAB_INT("Col_Debris_Terrain", Mezzanine::Physics::Col_Debris_Terrain)},
    {SWIG_LUA_CONSTTAB_INT("DDM_NoDebug", Mezzanine::Physics::DDM_NoDebug)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawWireframe", Mezzanine::Physics::DDM_DrawWireframe)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawAABB", Mezzanine::Physics::DDM_DrawAABB)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawFeaturesText", Mezzanine::Physics::DDM_DrawFeaturesText)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawContactPoints", Mezzanine::Physics::DDM_DrawContactPoints)},
    {SWIG_LUA_CONSTTAB_INT("DDM_NoDeactivation", Mezzanine::Physics::DDM_NoDeactivation)},
    {SWIG_LUA_CONSTTAB_INT("DDM_NoHelpText", Mezzanine::Physics::DDM_NoHelpText)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawText", Mezzanine::Physics::DDM_DrawText)},
    {SWIG_LUA_CONSTTAB_INT("DDM_ProfileTimings", Mezzanine::Physics::DDM_ProfileTimings)},
    {SWIG_LUA_CONSTTAB_INT("DDM_EnableSatComparison", Mezzanine::Physics::DDM_EnableSatComparison)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DisableBulletLCP", Mezzanine::Physics::DDM_DisableBulletLCP)},
    {SWIG_LUA_CONSTTAB_INT("DDM_EnableCCD", Mezzanine::Physics::DDM_EnableCCD)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawConstraints", Mezzanine::Physics::DDM_DrawConstraints)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawConstraintLimits", Mezzanine::Physics::DDM_DrawConstraintLimits)},
    {SWIG_LUA_CONSTTAB_INT("DDM_FastWireframe", Mezzanine::Physics::DDM_FastWireframe)},
    {SWIG_LUA_CONSTTAB_INT("DDM_DrawNormals", Mezzanine::Physics::DDM_DrawNormals)},
    {SWIG_LUA_CONSTTAB_INT("DDM_All", Mezzanine::Physics::DDM_All)},
    {SWIG_LUA_CONSTTAB_INT("PT_Rigid", Mezzanine::Physics::PT_Rigid)},
    {SWIG_LUA_CONSTTAB_INT("PT_Soft", Mezzanine::Physics::PT_Soft)},
    {SWIG_LUA_CONSTTAB_INT("PT_Ghost", Mezzanine::Physics::PT_Ghost)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_Undefined", Mezzanine::ManagerBase::MT_Undefined)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_AudioManager", Mezzanine::ManagerBase::MT_AudioManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_AnimationManager", Mezzanine::ManagerBase::MT_AnimationManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_CollisionShapeManager", Mezzanine::ManagerBase::MT_CollisionShapeManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_CompositorManager", Mezzanine::ManagerBase::MT_CompositorManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_GraphicsManager", Mezzanine::ManagerBase::MT_GraphicsManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_EventManager", Mezzanine::ManagerBase::MT_EventManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_InputManager", Mezzanine::ManagerBase::MT_InputManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_LogManager", Mezzanine::ManagerBase::MT_LogManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_MaterialManager", Mezzanine::ManagerBase::MT_MaterialManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_MeshManager", Mezzanine::ManagerBase::MT_MeshManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_NetworkManager", Mezzanine::ManagerBase::MT_NetworkManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_ResourceManager", Mezzanine::ManagerBase::MT_ResourceManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_ScriptingManager", Mezzanine::ManagerBase::MT_ScriptingManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_TextureManager", Mezzanine::ManagerBase::MT_TextureManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_UIManager", Mezzanine::ManagerBase::MT_UIManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_ActorManager", Mezzanine::ManagerBase::MT_ActorManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_AreaEffectManager", Mezzanine::ManagerBase::MT_AreaEffectManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_DebrisManager", Mezzanine::ManagerBase::MT_DebrisManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_PagingManager", Mezzanine::ManagerBase::MT_PagingManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_PhysicsManager", Mezzanine::ManagerBase::MT_PhysicsManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_SceneManager", Mezzanine::ManagerBase::MT_SceneManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_SoundScapeManager", Mezzanine::ManagerBase::MT_SoundScapeManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_TerrainManager", Mezzanine::ManagerBase::MT_TerrainManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_VehicleManager", Mezzanine::ManagerBase::MT_VehicleManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_UserCreated", Mezzanine::ManagerBase::MT_UserCreated)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_None", Mezzanine::Plane::S_None)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Positive", Mezzanine::Plane::S_Positive)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Negative", Mezzanine::Plane::S_Negative)},
    {SWIG_LUA_CONSTTAB_INT("Plane_S_Both", Mezzanine::Plane::S_Both)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_AE_Min", Mezzanine::AxisAlignedBox::AE_Min)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_AE_Max", Mezzanine::AxisAlignedBox::AE_Max)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMinX", Mezzanine::AxisAlignedBox::SideMinX)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMinY", Mezzanine::AxisAlignedBox::SideMinY)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMinZ", Mezzanine::AxisAlignedBox::SideMinZ)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMaxX", Mezzanine::AxisAlignedBox::SideMaxX)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMaxY", Mezzanine::AxisAlignedBox::SideMaxY)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMaxZ", Mezzanine::AxisAlignedBox::SideMaxZ)},
    {SWIG_LUA_CONSTTAB_INT("CameraController_CCM_Fly", Mezzanine::CameraController::CCM_Fly)},
    {SWIG_LUA_CONSTTAB_INT("CameraController_CCM_Walk", Mezzanine::CameraController::CCM_Walk)},
    {SWIG_LUA_CONSTTAB_INT("EventSubscriberSlot_ST_Custom", Mezzanine::EventSubscriberSlot::ST_Custom)},
    {SWIG_LUA_CONSTTAB_INT("EventSubscriberSlot_ST_Functor", Mezzanine::EventSubscriberSlot::ST_Functor)},
    {SWIG_LUA_CONSTTAB_INT("EventSubscriberSlot_ST_CFunction", Mezzanine::EventSubscriberSlot::ST_CFunction)},
    {SWIG_LUA_CONSTTAB_INT("EventSubscriberSlot_ST_Script", Mezzanine::EventSubscriberSlot::ST_Script)},
    {SWIG_LUA_CONSTTAB_INT("EventSubscriberSlot_ST_MemberFunction", Mezzanine::EventSubscriberSlot::ST_MemberFunction)},
    {SWIG_LUA_CONSTTAB_INT("EventBase_GameWindow", Mezzanine::EventBase::GameWindow)},
    {SWIG_LUA_CONSTTAB_INT("EventBase_QuitMessage", Mezzanine::EventBase::QuitMessage)},
    {SWIG_LUA_CONSTTAB_INT("EventBase_UserInput", Mezzanine::EventBase::UserInput)},
    {SWIG_LUA_CONSTTAB_INT("EventBase_Other", Mezzanine::EventBase::Other)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_NONE", Mezzanine::EventGameWindow::GAME_WINDOW_NONE)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_FIRST", Mezzanine::EventGameWindow::GAME_WINDOW_FIRST)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_SHOWN", Mezzanine::EventGameWindow::GAME_WINDOW_SHOWN)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_HIDDEN", Mezzanine::EventGameWindow::GAME_WINDOW_HIDDEN)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_EXPOSED", Mezzanine::EventGameWindow::GAME_WINDOW_EXPOSED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_MOVED", Mezzanine::EventGameWindow::GAME_WINDOW_MOVED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_RESIZED", Mezzanine::EventGameWindow::GAME_WINDOW_RESIZED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_SIZE_CHANGED", Mezzanine::EventGameWindow::GAME_WINDOW_SIZE_CHANGED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_MINIMIZED", Mezzanine::EventGameWindow::GAME_WINDOW_MINIMIZED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_MAXIMIZED", Mezzanine::EventGameWindow::GAME_WINDOW_MAXIMIZED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_RESTORED", Mezzanine::EventGameWindow::GAME_WINDOW_RESTORED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_ENTER", Mezzanine::EventGameWindow::GAME_WINDOW_ENTER)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_LEAVE", Mezzanine::EventGameWindow::GAME_WINDOW_LEAVE)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_FOCUS_GAINED", Mezzanine::EventGameWindow::GAME_WINDOW_FOCUS_GAINED)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_FOCUS_LOST", Mezzanine::EventGameWindow::GAME_WINDOW_FOCUS_LOST)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_CLOSE", Mezzanine::EventGameWindow::GAME_WINDOW_CLOSE)},
    {SWIG_LUA_CONSTTAB_INT("EventGameWindow_GAME_WINDOW_LAST", Mezzanine::EventGameWindow::GAME_WINDOW_LAST)},
    {SWIG_LUA_CONSTTAB_INT("TF_RawMicro", Mezzanine::TF_RawMicro)},
    {SWIG_LUA_CONSTTAB_INT("TF_RawMilli", Mezzanine::TF_RawMilli)},
    {SWIG_LUA_CONSTTAB_INT("TF_Seconds", Mezzanine::TF_Seconds)},
    {SWIG_LUA_CONSTTAB_INT("TF_SecondsMilli", Mezzanine::TF_SecondsMilli)},
    {SWIG_LUA_CONSTTAB_INT("TF_MinutesSeconds", Mezzanine::TF_MinutesSeconds)},
    {SWIG_LUA_CONSTTAB_INT("CM_CountUp", Mezzanine::CM_CountUp)},
    {SWIG_LUA_CONSTTAB_INT("CM_CountDown", Mezzanine::CM_CountDown)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "SerializeError", _wrap_SerializeError},
    { "DeSerializeError", _wrap_DeSerializeError},
    { "Vector3_Unit_X", _wrap_Vector3_Unit_X},
    { "Vector3_Unit_Y", _wrap_Vector3_Unit_Y},
    { "Vector3_Unit_Z", _wrap_Vector3_Unit_Z},
    { "Vector3_Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Vector3_Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Vector3_Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "Vector3_UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "Vector3_GetSerializableName", _wrap_Vector3_GetSerializableName},
    { "__add", _wrap___add},
    { "__sub", _wrap___sub},
    { "__mul", _wrap___mul},
    { "__div", _wrap___div},
    { "Quaternion_GetSerializableName", _wrap_Quaternion_GetSerializableName},
    { "Transform_GetSerializableName", _wrap_Transform_GetSerializableName},
    { "WorldObject_GetSerializableName", _wrap_WorldObject_GetSerializableName},
    { "ManagerBase_GetTypeAsString", _wrap_ManagerBase_GetTypeAsString},
    { "ManagerBase_GetTypeFromString", _wrap_ManagerBase_GetTypeFromString},
    { "ColourValue_Transparent", _wrap_ColourValue_Transparent},
    { "ColourValue_AliceBlue", _wrap_ColourValue_AliceBlue},
    { "ColourValue_AntiqueWhite", _wrap_ColourValue_AntiqueWhite},
    { "ColourValue_Aqua", _wrap_ColourValue_Aqua},
    { "ColourValue_Aquamarine", _wrap_ColourValue_Aquamarine},
    { "ColourValue_Azure", _wrap_ColourValue_Azure},
    { "ColourValue_Beige", _wrap_ColourValue_Beige},
    { "ColourValue_Bisque", _wrap_ColourValue_Bisque},
    { "ColourValue_Black", _wrap_ColourValue_Black},
    { "ColourValue_Blanchedalmond", _wrap_ColourValue_Blanchedalmond},
    { "ColourValue_Blue", _wrap_ColourValue_Blue},
    { "ColourValue_BlueViolet", _wrap_ColourValue_BlueViolet},
    { "ColourValue_Brown", _wrap_ColourValue_Brown},
    { "ColourValue_BurlyWood", _wrap_ColourValue_BurlyWood},
    { "ColourValue_CadetBlue", _wrap_ColourValue_CadetBlue},
    { "ColourValue_Chartreuse", _wrap_ColourValue_Chartreuse},
    { "ColourValue_Chocolate", _wrap_ColourValue_Chocolate},
    { "ColourValue_Coral", _wrap_ColourValue_Coral},
    { "ColourValue_CornFlowerBlue", _wrap_ColourValue_CornFlowerBlue},
    { "ColourValue_CornSilk", _wrap_ColourValue_CornSilk},
    { "ColourValue_Crimson", _wrap_ColourValue_Crimson},
    { "ColourValue_Cyan", _wrap_ColourValue_Cyan},
    { "ColourValue_DarkBlue", _wrap_ColourValue_DarkBlue},
    { "ColourValue_DarkCyan", _wrap_ColourValue_DarkCyan},
    { "ColourValue_DarkGoldenRod", _wrap_ColourValue_DarkGoldenRod},
    { "ColourValue_DarkGray", _wrap_ColourValue_DarkGray},
    { "ColourValue_DarkGreen", _wrap_ColourValue_DarkGreen},
    { "ColourValue_DarkKhaki", _wrap_ColourValue_DarkKhaki},
    { "ColourValue_DarkMagenta", _wrap_ColourValue_DarkMagenta},
    { "ColourValue_DarkOliveGreen", _wrap_ColourValue_DarkOliveGreen},
    { "ColourValue_DarkOrange", _wrap_ColourValue_DarkOrange},
    { "ColourValue_DarkOrchid", _wrap_ColourValue_DarkOrchid},
    { "ColourValue_DarkRed", _wrap_ColourValue_DarkRed},
    { "ColourValue_DarkSalmon", _wrap_ColourValue_DarkSalmon},
    { "ColourValue_DarkSeaGreen", _wrap_ColourValue_DarkSeaGreen},
    { "ColourValue_DarkSlateBlue", _wrap_ColourValue_DarkSlateBlue},
    { "ColourValue_DarkSlateGray", _wrap_ColourValue_DarkSlateGray},
    { "ColourValue_DarkTurquoise", _wrap_ColourValue_DarkTurquoise},
    { "ColourValue_DarkViolet", _wrap_ColourValue_DarkViolet},
    { "ColourValue_DeepPink", _wrap_ColourValue_DeepPink},
    { "ColourValue_DeepSkyBlue", _wrap_ColourValue_DeepSkyBlue},
    { "ColourValue_DimGray", _wrap_ColourValue_DimGray},
    { "ColourValue_DodgerBlue", _wrap_ColourValue_DodgerBlue},
    { "ColourValue_FireBrick", _wrap_ColourValue_FireBrick},
    { "ColourValue_FloralWhite", _wrap_ColourValue_FloralWhite},
    { "ColourValue_ForestGreen", _wrap_ColourValue_ForestGreen},
    { "ColourValue_Fuchsia", _wrap_ColourValue_Fuchsia},
    { "ColourValue_Gainsboro", _wrap_ColourValue_Gainsboro},
    { "ColourValue_GhostWhite", _wrap_ColourValue_GhostWhite},
    { "ColourValue_Gold", _wrap_ColourValue_Gold},
    { "ColourValue_GoldenRod", _wrap_ColourValue_GoldenRod},
    { "ColourValue_Gray", _wrap_ColourValue_Gray},
    { "ColourValue_Green", _wrap_ColourValue_Green},
    { "ColourValue_GreenYellow", _wrap_ColourValue_GreenYellow},
    { "ColourValue_HoneyDew", _wrap_ColourValue_HoneyDew},
    { "ColourValue_HotPink", _wrap_ColourValue_HotPink},
    { "ColourValue_IndianRed", _wrap_ColourValue_IndianRed},
    { "ColourValue_Indigo", _wrap_ColourValue_Indigo},
    { "ColourValue_Ivory", _wrap_ColourValue_Ivory},
    { "ColourValue_Khaki", _wrap_ColourValue_Khaki},
    { "ColourValue_Lavender", _wrap_ColourValue_Lavender},
    { "ColourValue_LavenderBlush", _wrap_ColourValue_LavenderBlush},
    { "ColourValue_LawnGreen", _wrap_ColourValue_LawnGreen},
    { "ColourValue_LemonChiffon", _wrap_ColourValue_LemonChiffon},
    { "ColourValue_LightBlue", _wrap_ColourValue_LightBlue},
    { "ColourValue_LightCoral", _wrap_ColourValue_LightCoral},
    { "ColourValue_LightCyan", _wrap_ColourValue_LightCyan},
    { "ColourValue_LightGoldenRodYellow", _wrap_ColourValue_LightGoldenRodYellow},
    { "ColourValue_LightGray", _wrap_ColourValue_LightGray},
    { "ColourValue_LightGreen", _wrap_ColourValue_LightGreen},
    { "ColourValue_LightPink", _wrap_ColourValue_LightPink},
    { "ColourValue_LightSalmon", _wrap_ColourValue_LightSalmon},
    { "ColourValue_LightSeaGreen", _wrap_ColourValue_LightSeaGreen},
    { "ColourValue_LightSkyBlue", _wrap_ColourValue_LightSkyBlue},
    { "ColourValue_LightSlateGray", _wrap_ColourValue_LightSlateGray},
    { "ColourValue_LightSteelBlue", _wrap_ColourValue_LightSteelBlue},
    { "ColourValue_LightYellow", _wrap_ColourValue_LightYellow},
    { "ColourValue_Lime", _wrap_ColourValue_Lime},
    { "ColourValue_LimeGreen", _wrap_ColourValue_LimeGreen},
    { "ColourValue_Linen", _wrap_ColourValue_Linen},
    { "ColourValue_Magenta", _wrap_ColourValue_Magenta},
    { "ColourValue_Maroon", _wrap_ColourValue_Maroon},
    { "ColourValue_MediumAquamarine", _wrap_ColourValue_MediumAquamarine},
    { "ColourValue_MediumBlue", _wrap_ColourValue_MediumBlue},
    { "ColourValue_MediumOrchid", _wrap_ColourValue_MediumOrchid},
    { "ColourValue_MediumPurple", _wrap_ColourValue_MediumPurple},
    { "ColourValue_MediumSeaGreen", _wrap_ColourValue_MediumSeaGreen},
    { "ColourValue_MediumSlateBlue", _wrap_ColourValue_MediumSlateBlue},
    { "ColourValue_MediumSpringGreen", _wrap_ColourValue_MediumSpringGreen},
    { "ColourValue_MediumTurquoise", _wrap_ColourValue_MediumTurquoise},
    { "ColourValue_MediumVioletRed", _wrap_ColourValue_MediumVioletRed},
    { "ColourValue_MidnightBlue", _wrap_ColourValue_MidnightBlue},
    { "ColourValue_MintCream", _wrap_ColourValue_MintCream},
    { "ColourValue_MistyRose", _wrap_ColourValue_MistyRose},
    { "ColourValue_Moccasin", _wrap_ColourValue_Moccasin},
    { "ColourValue_NavajoWhite", _wrap_ColourValue_NavajoWhite},
    { "ColourValue_Navy", _wrap_ColourValue_Navy},
    { "ColourValue_OldLace", _wrap_ColourValue_OldLace},
    { "ColourValue_Olive", _wrap_ColourValue_Olive},
    { "ColourValue_OliveDrab", _wrap_ColourValue_OliveDrab},
    { "ColourValue_Orange", _wrap_ColourValue_Orange},
    { "ColourValue_OrangeRed", _wrap_ColourValue_OrangeRed},
    { "ColourValue_Orchid", _wrap_ColourValue_Orchid},
    { "ColourValue_PaleGoldenRod", _wrap_ColourValue_PaleGoldenRod},
    { "ColourValue_PaleGreen", _wrap_ColourValue_PaleGreen},
    { "ColourValue_PaleTurquoise", _wrap_ColourValue_PaleTurquoise},
    { "ColourValue_PaleVioletRed", _wrap_ColourValue_PaleVioletRed},
    { "ColourValue_PapayaWhip", _wrap_ColourValue_PapayaWhip},
    { "ColourValue_PeachPuff", _wrap_ColourValue_PeachPuff},
    { "ColourValue_Peru", _wrap_ColourValue_Peru},
    { "ColourValue_Pink", _wrap_ColourValue_Pink},
    { "ColourValue_Plum", _wrap_ColourValue_Plum},
    { "ColourValue_PowderBlue", _wrap_ColourValue_PowderBlue},
    { "ColourValue_Purple", _wrap_ColourValue_Purple},
    { "ColourValue_Red", _wrap_ColourValue_Red},
    { "ColourValue_RosyBrown", _wrap_ColourValue_RosyBrown},
    { "ColourValue_RoyalBlue", _wrap_ColourValue_RoyalBlue},
    { "ColourValue_SaddleBrown", _wrap_ColourValue_SaddleBrown},
    { "ColourValue_Salmon", _wrap_ColourValue_Salmon},
    { "ColourValue_SandyBrown", _wrap_ColourValue_SandyBrown},
    { "ColourValue_SeaGreen", _wrap_ColourValue_SeaGreen},
    { "ColourValue_SeaShell", _wrap_ColourValue_SeaShell},
    { "ColourValue_Sienna", _wrap_ColourValue_Sienna},
    { "ColourValue_Silver", _wrap_ColourValue_Silver},
    { "ColourValue_SkyBlue", _wrap_ColourValue_SkyBlue},
    { "ColourValue_SlateBlue", _wrap_ColourValue_SlateBlue},
    { "ColourValue_SlateGray", _wrap_ColourValue_SlateGray},
    { "ColourValue_Snow", _wrap_ColourValue_Snow},
    { "ColourValue_SpringGreen", _wrap_ColourValue_SpringGreen},
    { "ColourValue_SteelBlue", _wrap_ColourValue_SteelBlue},
    { "ColourValue_Tan", _wrap_ColourValue_Tan},
    { "ColourValue_Teal", _wrap_ColourValue_Teal},
    { "ColourValue_Thistle", _wrap_ColourValue_Thistle},
    { "ColourValue_Tomato", _wrap_ColourValue_Tomato},
    { "ColourValue_Turquoise", _wrap_ColourValue_Turquoise},
    { "ColourValue_Violet", _wrap_ColourValue_Violet},
    { "ColourValue_Wheat", _wrap_ColourValue_Wheat},
    { "ColourValue_White", _wrap_ColourValue_White},
    { "ColourValue_WhiteSmoke", _wrap_ColourValue_WhiteSmoke},
    { "ColourValue_Yellow", _wrap_ColourValue_Yellow},
    { "ColourValue_YellowGreen", _wrap_ColourValue_YellowGreen},
    { "ColourValue_GetSerializableName", _wrap_ColourValue_GetSerializableName},
    { "AreaEffect_GetSerializableName", _wrap_AreaEffect_GetSerializableName},
    { "Plane_GetSerializableName", _wrap_Plane_GetSerializableName},
    { "AxisAlignedBox_GetSerializableName", _wrap_AxisAlignedBox_GetSerializableName},
    { "IsBase64", _wrap_IsBase64},
    { "Base64Encode", _wrap_Base64Encode},
    { "Base64Decode", _wrap_Base64Decode},
    { "PredictBinarySizeFromBase64String", _wrap_PredictBinarySizeFromBase64String},
    { "PredictBase64StringSizeFromBinarySize", _wrap_PredictBase64StringSizeFromBinarySize},
    { "RayQueryTool_GetMouseRay", _wrap_RayQueryTool_GetMouseRay},
    { "RayQueryTool_GetSerializableName", _wrap_RayQueryTool_GetSerializableName},
    { "Vector2_Unit_X", _wrap_Vector2_Unit_X},
    { "Vector2_Unit_Y", _wrap_Vector2_Unit_Y},
    { "Vector2_Neg_Unit_X", _wrap_Vector2_Neg_Unit_X},
    { "Vector2_Neg_Unit_Y", _wrap_Vector2_Neg_Unit_Y},
    { "Vector2_GetSerializableName", _wrap_Vector2_GetSerializableName},
    { "GetPlatform", _wrap_GetPlatform},
    { "GetTimeStamp", _wrap_GetTimeStamp},
    { "Debris_GetSerializableName", _wrap_Debris_GetSerializableName},
    { "EventGameWindow_GameWindowEventIDToString", _wrap_EventGameWindow_GameWindowEventIDToString},
    { "SingletonEventManager_GetSingletonPtr", _wrap_SingletonEventManager_GetSingletonPtr},
    { "SingletonEventManager_SingletonValid", _wrap_SingletonEventManager_SingletonValid},
    { "Ray_GetSerializableName", _wrap_Ray_GetSerializableName},
    { "Sphere_GetSerializableName", _wrap_Sphere_GetSerializableName},
    { "IsDigit", _wrap_IsDigit},
    { "IsLowerAlphaLetter", _wrap_IsLowerAlphaLetter},
    { "IsUpperAlphaLetter", _wrap_IsUpperAlphaLetter},
    { "IsAlphaLetter", _wrap_IsAlphaLetter},
    { "IsLowerHexLetter", _wrap_IsLowerHexLetter},
    { "IsUpperHexLetter", _wrap_IsUpperHexLetter},
    { "IsHexLetter", _wrap_IsHexLetter},
    { "IsHexDigit", _wrap_IsHexDigit},
    { "IsAlphanumeric", _wrap_IsAlphanumeric},
    { "Trim", _wrap_Trim},
    { "Split", _wrap_Split},
    { "ToUpperCase", _wrap_ToUpperCase},
    { "UpperCaseCopy", _wrap_UpperCaseCopy},
    { "ToLowerCase", _wrap_ToLowerCase},
    { "LowerCaseCopy", _wrap_LowerCaseCopy},
    { "ToCamelCase", _wrap_ToCamelCase},
    { "CamelCaseCopy", _wrap_CamelCaseCopy},
    { "StartsWith", _wrap_StartsWith},
    { "EndsWith", _wrap_EndsWith},
    { "RemoveDuplicateWhitespaces", _wrap_RemoveDuplicateWhitespaces},
    { "ConvertToVector2", _wrap_ConvertToVector2},
    { "ConvertToVector3", _wrap_ConvertToVector3},
    { "ConvertToQuaternion", _wrap_ConvertToQuaternion},
    { "ConvertToColourValue", _wrap_ConvertToColourValue},
    { "ConvertHexToColourValue", _wrap_ConvertHexToColourValue},
    { "ConvertToHexString", _wrap_ConvertToHexString},
    { "ConvertToBool", _wrap_ConvertToBool},
    { "ConvertToReal", _wrap_ConvertToReal},
    { "ConvertToInteger", _wrap_ConvertToInteger},
    { "ConvertToWhole", _wrap_ConvertToWhole},
    { "ConvertToInt8", _wrap_ConvertToInt8},
    { "ConvertToUInt8", _wrap_ConvertToUInt8},
    { "ConvertToInt16", _wrap_ConvertToInt16},
    { "ConvertToUInt16", _wrap_ConvertToUInt16},
    { "ConvertToInt32", _wrap_ConvertToInt32},
    { "ConvertToUInt32", _wrap_ConvertToUInt32},
    { "ConvertToString", _wrap_ConvertToString},
    { "World_AddManagerFactory", _wrap_World_AddManagerFactory},
    { "World_RemoveManagerFactory", _wrap_World_RemoveManagerFactory},
    { "World_DestroyManagerFactory", _wrap_World_DestroyManagerFactory},
    { "World_DestroyAllManagerFactories", _wrap_World_DestroyAllManagerFactories},
    { "World_AddAllEngineDefaultManagerFactories", _wrap_World_AddAllEngineDefaultManagerFactories},
    { "World_GetSerializableName", _wrap_World_GetSerializableName},
    { "WorldProxy_GetSerializableName", _wrap_WorldProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_ExceptionBase,
&_wrap_class_IOException,
&_wrap_class_FileException,
&_wrap_class_FileReadException,
&_wrap_class_FileWriteException,
&_wrap_class_FileNotFoundException,
&_wrap_class_FilePermissionException,
&_wrap_class_DirectoryException,
&_wrap_class_DirectoryReadException,
&_wrap_class_DirectoryWriteException,
&_wrap_class_DirectoryNotFoundException,
&_wrap_class_DirectoryPermissionException,
&_wrap_class_NetworkException,
&_wrap_class_NetworkReadException,
&_wrap_class_NetworkWriteException,
&_wrap_class_NetworkNotFoundException,
&_wrap_class_NetworkURLException,
&_wrap_class_NetworkPermissionException,
&_wrap_class_IOWriteException,
&_wrap_class_IOReadException,
&_wrap_class_InstanceIdentityException,
&_wrap_class_InstanceIdentityInvalidException,
&_wrap_class_InstanceIdentityNotFoundException,
&_wrap_class_InstanceIdentityDuplicateException,
&_wrap_class_MemoryManagementException,
&_wrap_class_OutOfMemoryException,
&_wrap_class_MemoryOutOfBoundsException,
&_wrap_class_SyntaxErrorException,
&_wrap_class_SyntaxErrorXMLException,
&_wrap_class_SyntaxErrorXPathException,
&_wrap_class_SyntaxErrorLuaException,
&_wrap_class_ScriptException,
&_wrap_class_ScriptLuaException,
&_wrap_class_ScriptLuaYieldException,
&_wrap_class_ScriptLuaRuntimeException,
&_wrap_class_ScriptLuaErrErrException,
&_wrap_class_ParametersException,
&_wrap_class_ParametersCastException,
&_wrap_class_ParametersRangeException,
&_wrap_class_ArithmeticException,
&_wrap_class_InvalidVersionException,
&_wrap_class_InvalidStateException,
&_wrap_class_RenderingAPIException,
&_wrap_class_RuntimeAssertionException,
&_wrap_class_InternalException,
&_wrap_class_NotImplementedException,
&_wrap_class_InvalidAssignment,
&_wrap_class_Vector3,
&_wrap_class_Vector3LengthCompare,
&_wrap_class_Quaternion,
&_wrap_class_TransformableObject,
&_wrap_class_TransformableChildObject,
&_wrap_class_Transform,
&_wrap_class_AttachableBase,
&_wrap_class_AttachableParent,
&_wrap_class_AttachableChild,
&_wrap_class_WorldObject,
&_wrap_class_Actor,
&_wrap_class_ActorFactory,
&_wrap_class_ManagerBase,
&_wrap_class_WorldManager,
&_wrap_class_ManagerFactory,
&_wrap_class_WorldManagerFactory,
&_wrap_class_ActorUpdateWorkUnit,
&_wrap_class_ActorManager,
&_wrap_class_DefaultActorManagerFactory,
&_wrap_class_ColourValue,
&_wrap_class_AreaEffect,
&_wrap_class_AreaEffectFactory,
&_wrap_class_AreaEffectUpdateWorkUnit,
&_wrap_class_AreaEffectManager,
&_wrap_class_DefaultAreaEffectManagerFactory,
&_wrap_class_Plane,
&_wrap_class_AxisAlignedBox,
&_wrap_class_BinaryBuffer,
&_wrap_class_RayQueryTool,
&_wrap_class_AngleLimits,
&_wrap_class_CameraController,
&_wrap_class_Vector2,
&_wrap_class_Vector2LengthCompare,
&_wrap_class_Circle,
&_wrap_class_Debris,
&_wrap_class_DebrisFactory,
&_wrap_class_DebrisUpdateWorkUnit,
&_wrap_class_DebrisManager,
&_wrap_class_DefaultDebrisManagerFactory,
&_wrap_class_EventArguments,
&_wrap_class_EventSubscriber,
&_wrap_class_EventSubscriberSlot,
&_wrap_class_CustomSubscriberSlot,
&_wrap_class_FunctorEventSubscriber,
&_wrap_class_FunctorSubscriberSlot,
&_wrap_class_ScriptSubscriberSlot,
&_wrap_class_Event,
&_wrap_class_EventBase,
&_wrap_class_EventGameWindow,
&_wrap_class_EntresolManager,
&_wrap_class_EntresolManagerFactory,
&_wrap_class_SingletonEventManager,
&_wrap_class_EventPumpWorkUnit,
&_wrap_class_EventManager,
&_wrap_class_DefaultEventManagerFactory,
&_wrap_class_EventPublisher,
&_wrap_class_EventQuit,
&_wrap_class_Ray,
&_wrap_class_Sphere,
&_wrap_class_Timer,
&_wrap_class_World,
&_wrap_class_WorldProxy,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "Mezzanine",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Mezzanine__EventGameWindowTo_p_Mezzanine__EventBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EventBase *)  ((Mezzanine::EventGameWindow *) x));
}
static void *_p_Mezzanine__EventQuitTo_p_Mezzanine__EventBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EventBase *)  ((Mezzanine::EventQuit *) x));
}
static void *_p_Mezzanine__AreaEffectTo_p_Mezzanine__WorldObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldObject *)  ((Mezzanine::AreaEffect *) x));
}
static void *_p_Mezzanine__ActorTo_p_Mezzanine__WorldObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldObject *)  ((Mezzanine::Actor *) x));
}
static void *_p_Mezzanine__DebrisTo_p_Mezzanine__WorldObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldObject *)  ((Mezzanine::Debris *) x));
}
static void *_p_Mezzanine__EventManagerTo_p_Mezzanine__SingletonT_Mezzanine__EventManager_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Singleton< Mezzanine::EventManager > *)  ((Mezzanine::EventManager *) x));
}
static void *_p_Mezzanine__WorldObjectTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *)  ((Mezzanine::WorldObject *) x));
}
static void *_p_Mezzanine__AreaEffectTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldObject *) ((Mezzanine::AreaEffect *) x));
}
static void *_p_Mezzanine__ActorTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldObject *) ((Mezzanine::Actor *) x));
}
static void *_p_Mezzanine__DebrisTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::WorldObject *) ((Mezzanine::Debris *) x));
}
static void *_p_Mezzanine__WorldProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *)  ((Mezzanine::WorldProxy *) x));
}
static void *_p_Mezzanine__WorldManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *)  ((Mezzanine::WorldManager *) x));
}
static void *_p_Mezzanine__ActorManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *) (Mezzanine::WorldManager *) ((Mezzanine::ActorManager *) x));
}
static void *_p_Mezzanine__AreaEffectManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *) (Mezzanine::WorldManager *) ((Mezzanine::AreaEffectManager *) x));
}
static void *_p_Mezzanine__DebrisManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *) (Mezzanine::WorldManager *) ((Mezzanine::DebrisManager *) x));
}
static void *_p_Mezzanine__EntresolManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *)  ((Mezzanine::EntresolManager *) x));
}
static void *_p_Mezzanine__EventManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *) (Mezzanine::EntresolManager *) ((Mezzanine::EventManager *) x));
}
static void *_p_Mezzanine__CustomSubscriberSlotTo_p_Mezzanine__EventSubscriberSlot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EventSubscriberSlot *)  ((Mezzanine::CustomSubscriberSlot *) x));
}
static void *_p_Mezzanine__FunctorSubscriberSlotTo_p_Mezzanine__EventSubscriberSlot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EventSubscriberSlot *)  ((Mezzanine::FunctorSubscriberSlot *) x));
}
static void *_p_Mezzanine__ScriptSubscriberSlotTo_p_Mezzanine__EventSubscriberSlot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EventSubscriberSlot *)  ((Mezzanine::ScriptSubscriberSlot *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__ExceptionBaseTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Mezzanine::ExceptionBase *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *)  ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__DefaultEventManagerFactoryTo_p_Mezzanine__EntresolManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntresolManagerFactory *)  ((Mezzanine::DefaultEventManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultActorManagerFactoryTo_p_Mezzanine__WorldManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManagerFactory *)  ((Mezzanine::DefaultActorManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultAreaEffectManagerFactoryTo_p_Mezzanine__WorldManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManagerFactory *)  ((Mezzanine::DefaultAreaEffectManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultDebrisManagerFactoryTo_p_Mezzanine__WorldManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManagerFactory *)  ((Mezzanine::DefaultDebrisManagerFactory *) x));
}
static void *_p_Mezzanine__WorldManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *)  ((Mezzanine::WorldManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultActorManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *) (Mezzanine::WorldManagerFactory *) ((Mezzanine::DefaultActorManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultAreaEffectManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *) (Mezzanine::WorldManagerFactory *) ((Mezzanine::DefaultAreaEffectManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultDebrisManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *) (Mezzanine::WorldManagerFactory *) ((Mezzanine::DefaultDebrisManagerFactory *) x));
}
static void *_p_Mezzanine__EntresolManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *)  ((Mezzanine::EntresolManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultEventManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *) (Mezzanine::EntresolManagerFactory *) ((Mezzanine::DefaultEventManagerFactory *) x));
}
static void *_p_Mezzanine__AttachableParentTo_p_Mezzanine__AttachableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableBase *)  ((Mezzanine::AttachableParent *) x));
}
static void *_p_Mezzanine__AttachableChildTo_p_Mezzanine__AttachableBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::AttachableBase *)  ((Mezzanine::AttachableChild *) x));
}
static void *_p_Mezzanine__EventManagerTo_p_Mezzanine__EntresolManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntresolManager *)  ((Mezzanine::EventManager *) x));
}
static void *_p_Mezzanine__ActorManagerTo_p_Mezzanine__WorldManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManager *)  ((Mezzanine::ActorManager *) x));
}
static void *_p_Mezzanine__AreaEffectManagerTo_p_Mezzanine__WorldManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManager *)  ((Mezzanine::AreaEffectManager *) x));
}
static void *_p_Mezzanine__DebrisManagerTo_p_Mezzanine__WorldManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManager *)  ((Mezzanine::DebrisManager *) x));
}
static swig_type_info _swigt__p_ActorContainer = {"_p_ActorContainer", "ActorContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ActorIterator = {"_p_ActorIterator", "ActorIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AreaEffectContainer = {"_p_AreaEffectContainer", "AreaEffectContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AreaEffectIterator = {"_p_AreaEffectIterator", "AreaEffectIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AttachableContainer = {"_p_AttachableContainer", "AttachableContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AttachableIterator = {"_p_AttachableIterator", "AttachableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Byte = {"_p_Byte", "Byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CFunctionSubscriberSlot__SubscriberFunction = {"_p_CFunctionSubscriberSlot__SubscriberFunction", "CFunctionSubscriberSlot::SubscriberFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelType = {"_p_ChannelType", "ChannelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionContainer = {"_p_CollisionContainer", "CollisionContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CollisionIterator = {"_p_CollisionIterator", "CollisionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstActorIterator = {"_p_ConstActorIterator", "ConstActorIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstAreaEffectIterator = {"_p_ConstAreaEffectIterator", "ConstAreaEffectIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstAttachableIterator = {"_p_ConstAttachableIterator", "ConstAttachableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstCollisionIterator = {"_p_ConstCollisionIterator", "ConstCollisionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstDebrisIterator = {"_p_ConstDebrisIterator", "ConstDebrisIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstEventIterator = {"_p_ConstEventIterator", "ConstEventIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstFactoryIterator = {"_p_ConstFactoryIterator", "ConstFactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstManagerFactoryIterator = {"_p_ConstManagerFactoryIterator", "ConstManagerFactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstObjectIterator = {"_p_ConstObjectIterator", "ConstObjectIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstProxyIterator = {"_p_ConstProxyIterator", "ConstProxyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstSlotIterator = {"_p_ConstSlotIterator", "ConstSlotIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstWorldManagerIterator = {"_p_ConstWorldManagerIterator", "ConstWorldManagerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DebrisContainer = {"_p_DebrisContainer", "DebrisContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DebrisIterator = {"_p_DebrisIterator", "DebrisIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventContainer = {"_p_EventContainer", "EventContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventIterator = {"_p_EventIterator", "EventIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FactoryIterator = {"_p_FactoryIterator", "FactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FactoryMap = {"_p_FactoryMap", "FactoryMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GameWindowEventID = {"_p_GameWindowEventID", "GameWindowEventID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeometryRayTestResult = {"_p_GeometryRayTestResult", "GeometryRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Input__InputCode = {"_p_Input__InputCode", "Input::InputCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Input__MetaCode = {"_p_Input__MetaCode", "Input::MetaCode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagerFactoryIterator = {"_p_ManagerFactoryIterator", "ManagerFactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagerFactoryMap = {"_p_ManagerFactoryMap", "ManagerFactoryMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MathTools__GeometryRayTestResult = {"_p_MathTools__GeometryRayTestResult", "MathTools::GeometryRayTestResult *|Mezzanine::Ray::GeometryRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Actor = {"_p_Mezzanine__Actor", "Mezzanine::Actor *", 0, 0, (void*)&_wrap_class_Actor, 0};
static swig_type_info _swigt__p_Mezzanine__ActorFactory = {"_p_Mezzanine__ActorFactory", "Mezzanine::ActorFactory *", 0, 0, (void*)&_wrap_class_ActorFactory, 0};
static swig_type_info _swigt__p_Mezzanine__ActorManager = {"_p_Mezzanine__ActorManager", "Mezzanine::ActorManager *", 0, 0, (void*)&_wrap_class_ActorManager, 0};
static swig_type_info _swigt__p_Mezzanine__ActorUpdateWorkUnit = {"_p_Mezzanine__ActorUpdateWorkUnit", "Mezzanine::ActorUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_ActorUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__AngleLimits = {"_p_Mezzanine__AngleLimits", "Mezzanine::AngleLimits *", 0, 0, (void*)&_wrap_class_AngleLimits, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffect = {"_p_Mezzanine__AreaEffect", "Mezzanine::AreaEffect *", 0, 0, (void*)&_wrap_class_AreaEffect, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffectFactory = {"_p_Mezzanine__AreaEffectFactory", "Mezzanine::AreaEffectFactory *", 0, 0, (void*)&_wrap_class_AreaEffectFactory, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffectManager = {"_p_Mezzanine__AreaEffectManager", "Mezzanine::AreaEffectManager *", 0, 0, (void*)&_wrap_class_AreaEffectManager, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffectUpdateWorkUnit = {"_p_Mezzanine__AreaEffectUpdateWorkUnit", "Mezzanine::AreaEffectUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_AreaEffectUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__ArithmeticException = {"_p_Mezzanine__ArithmeticException", "Mezzanine::ArithmeticException *", 0, 0, (void*)&_wrap_class_ArithmeticException, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableBase = {"_p_Mezzanine__AttachableBase", "Mezzanine::AttachableBase *", 0, 0, (void*)&_wrap_class_AttachableBase, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableChild = {"_p_Mezzanine__AttachableChild", "Mezzanine::AttachableChild *", 0, 0, (void*)&_wrap_class_AttachableChild, 0};
static swig_type_info _swigt__p_Mezzanine__AttachableParent = {"_p_Mezzanine__AttachableParent", "Mezzanine::AttachableParent *", 0, 0, (void*)&_wrap_class_AttachableParent, 0};
static swig_type_info _swigt__p_Mezzanine__AxisAlignedBox = {"_p_Mezzanine__AxisAlignedBox", "Mezzanine::AxisAlignedBox *", 0, 0, (void*)&_wrap_class_AxisAlignedBox, 0};
static swig_type_info _swigt__p_Mezzanine__BinaryTools__BinaryBuffer = {"_p_Mezzanine__BinaryTools__BinaryBuffer", "Mezzanine::BinaryTools::BinaryBuffer *", 0, 0, (void*)&_wrap_class_BinaryBuffer, 0};
static swig_type_info _swigt__p_Mezzanine__CameraController = {"_p_Mezzanine__CameraController", "Mezzanine::CameraController *", 0, 0, (void*)&_wrap_class_CameraController, 0};
static swig_type_info _swigt__p_Mezzanine__Circle = {"_p_Mezzanine__Circle", "Mezzanine::Circle *", 0, 0, (void*)&_wrap_class_Circle, 0};
static swig_type_info _swigt__p_Mezzanine__ColourValue = {"_p_Mezzanine__ColourValue", "Mezzanine::ColourValue *", 0, 0, (void*)&_wrap_class_ColourValue, 0};
static swig_type_info _swigt__p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t = {"_p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t", "Mezzanine::EventArgumentsPtr *|Mezzanine::CountedPtr< Mezzanine::EventArguments > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__CustomSubscriberSlot = {"_p_Mezzanine__CustomSubscriberSlot", "Mezzanine::CustomSubscriberSlot *", 0, 0, (void*)&_wrap_class_CustomSubscriberSlot, 0};
static swig_type_info _swigt__p_Mezzanine__Debris = {"_p_Mezzanine__Debris", "Mezzanine::Debris *", 0, 0, (void*)&_wrap_class_Debris, 0};
static swig_type_info _swigt__p_Mezzanine__DebrisFactory = {"_p_Mezzanine__DebrisFactory", "Mezzanine::DebrisFactory *", 0, 0, (void*)&_wrap_class_DebrisFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DebrisManager = {"_p_Mezzanine__DebrisManager", "Mezzanine::DebrisManager *", 0, 0, (void*)&_wrap_class_DebrisManager, 0};
static swig_type_info _swigt__p_Mezzanine__DebrisUpdateWorkUnit = {"_p_Mezzanine__DebrisUpdateWorkUnit", "Mezzanine::DebrisUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_DebrisUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__DefaultActorManagerFactory = {"_p_Mezzanine__DefaultActorManagerFactory", "Mezzanine::DefaultActorManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultActorManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DefaultAreaEffectManagerFactory = {"_p_Mezzanine__DefaultAreaEffectManagerFactory", "Mezzanine::DefaultAreaEffectManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultAreaEffectManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DefaultDebrisManagerFactory = {"_p_Mezzanine__DefaultDebrisManagerFactory", "Mezzanine::DefaultDebrisManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultDebrisManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DefaultEventManagerFactory = {"_p_Mezzanine__DefaultEventManagerFactory", "Mezzanine::DefaultEventManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultEventManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryException = {"_p_Mezzanine__DirectoryException", "Mezzanine::DirectoryException *", 0, 0, (void*)&_wrap_class_DirectoryException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryNotFoundException = {"_p_Mezzanine__DirectoryNotFoundException", "Mezzanine::DirectoryNotFoundException *", 0, 0, (void*)&_wrap_class_DirectoryNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryPermissionException = {"_p_Mezzanine__DirectoryPermissionException", "Mezzanine::DirectoryPermissionException *", 0, 0, (void*)&_wrap_class_DirectoryPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryReadException = {"_p_Mezzanine__DirectoryReadException", "Mezzanine::DirectoryReadException *", 0, 0, (void*)&_wrap_class_DirectoryReadException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryWriteException = {"_p_Mezzanine__DirectoryWriteException", "Mezzanine::DirectoryWriteException *", 0, 0, (void*)&_wrap_class_DirectoryWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__EntresolManager = {"_p_Mezzanine__EntresolManager", "Mezzanine::EntresolManager *", 0, 0, (void*)&_wrap_class_EntresolManager, 0};
static swig_type_info _swigt__p_Mezzanine__EntresolManagerFactory = {"_p_Mezzanine__EntresolManagerFactory", "Mezzanine::EntresolManagerFactory *", 0, 0, (void*)&_wrap_class_EntresolManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__Event = {"_p_Mezzanine__Event", "Mezzanine::Event *", 0, 0, (void*)&_wrap_class_Event, 0};
static swig_type_info _swigt__p_Mezzanine__EventArguments = {"_p_Mezzanine__EventArguments", "Mezzanine::EventArguments *", 0, 0, (void*)&_wrap_class_EventArguments, 0};
static swig_type_info _swigt__p_Mezzanine__EventBase = {"_p_Mezzanine__EventBase", "Mezzanine::EventBase *", 0, 0, (void*)&_wrap_class_EventBase, 0};
static swig_type_info _swigt__p_Mezzanine__EventGameWindow = {"_p_Mezzanine__EventGameWindow", "Mezzanine::EventGameWindow *", 0, 0, (void*)&_wrap_class_EventGameWindow, 0};
static swig_type_info _swigt__p_Mezzanine__EventManager = {"_p_Mezzanine__EventManager", "Mezzanine::EventManager *", 0, 0, (void*)&_wrap_class_EventManager, 0};
static swig_type_info _swigt__p_Mezzanine__EventPublisher = {"_p_Mezzanine__EventPublisher", "Mezzanine::EventPublisher *", 0, 0, (void*)&_wrap_class_EventPublisher, 0};
static swig_type_info _swigt__p_Mezzanine__EventPumpWorkUnit = {"_p_Mezzanine__EventPumpWorkUnit", "Mezzanine::EventPumpWorkUnit *", 0, 0, (void*)&_wrap_class_EventPumpWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__EventQuit = {"_p_Mezzanine__EventQuit", "Mezzanine::EventQuit *", 0, 0, (void*)&_wrap_class_EventQuit, 0};
static swig_type_info _swigt__p_Mezzanine__EventSubscriber = {"_p_Mezzanine__EventSubscriber", "Mezzanine::EventSubscriber *", 0, 0, (void*)&_wrap_class_EventSubscriber, 0};
static swig_type_info _swigt__p_Mezzanine__EventSubscriberSlot = {"_p_Mezzanine__EventSubscriberSlot", "Mezzanine::EventSubscriberSlot *", 0, 0, (void*)&_wrap_class_EventSubscriberSlot, 0};
static swig_type_info _swigt__p_Mezzanine__EventUserInput = {"_p_Mezzanine__EventUserInput", "Mezzanine::EventUserInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__ExceptionBase = {"_p_Mezzanine__ExceptionBase", "Mezzanine::ExceptionBase *", 0, 0, (void*)&_wrap_class_ExceptionBase, 0};
static swig_type_info _swigt__p_Mezzanine__FieldOfForce = {"_p_Mezzanine__FieldOfForce", "Mezzanine::FieldOfForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__FileException = {"_p_Mezzanine__FileException", "Mezzanine::FileException *", 0, 0, (void*)&_wrap_class_FileException, 0};
static swig_type_info _swigt__p_Mezzanine__FileNotFoundException = {"_p_Mezzanine__FileNotFoundException", "Mezzanine::FileNotFoundException *", 0, 0, (void*)&_wrap_class_FileNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__FilePermissionException = {"_p_Mezzanine__FilePermissionException", "Mezzanine::FilePermissionException *", 0, 0, (void*)&_wrap_class_FilePermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__FileReadException = {"_p_Mezzanine__FileReadException", "Mezzanine::FileReadException *", 0, 0, (void*)&_wrap_class_FileReadException, 0};
static swig_type_info _swigt__p_Mezzanine__FileWriteException = {"_p_Mezzanine__FileWriteException", "Mezzanine::FileWriteException *", 0, 0, (void*)&_wrap_class_FileWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__FunctorEventSubscriber = {"_p_Mezzanine__FunctorEventSubscriber", "Mezzanine::FunctorEventSubscriber *", 0, 0, (void*)&_wrap_class_FunctorEventSubscriber, 0};
static swig_type_info _swigt__p_Mezzanine__FunctorSubscriberSlot = {"_p_Mezzanine__FunctorSubscriberSlot", "Mezzanine::FunctorSubscriberSlot *", 0, 0, (void*)&_wrap_class_FunctorSubscriberSlot, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__CameraProxy = {"_p_Mezzanine__Graphics__CameraProxy", "Mezzanine::Graphics::CameraProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__Mesh = {"_p_Mezzanine__Graphics__Mesh", "Mezzanine::Graphics::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__GravityField = {"_p_Mezzanine__GravityField", "Mezzanine::GravityField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__GravityWell = {"_p_Mezzanine__GravityWell", "Mezzanine::GravityWell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__IOException = {"_p_Mezzanine__IOException", "Mezzanine::IOException *", 0, 0, (void*)&_wrap_class_IOException, 0};
static swig_type_info _swigt__p_Mezzanine__IOReadException = {"_p_Mezzanine__IOReadException", "Mezzanine::IOReadException *", 0, 0, (void*)&_wrap_class_IOReadException, 0};
static swig_type_info _swigt__p_Mezzanine__IOWriteException = {"_p_Mezzanine__IOWriteException", "Mezzanine::IOWriteException *", 0, 0, (void*)&_wrap_class_IOWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityDuplicateException = {"_p_Mezzanine__InstanceIdentityDuplicateException", "Mezzanine::InstanceIdentityDuplicateException *", 0, 0, (void*)&_wrap_class_InstanceIdentityDuplicateException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityException = {"_p_Mezzanine__InstanceIdentityException", "Mezzanine::InstanceIdentityException *", 0, 0, (void*)&_wrap_class_InstanceIdentityException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityInvalidException = {"_p_Mezzanine__InstanceIdentityInvalidException", "Mezzanine::InstanceIdentityInvalidException *", 0, 0, (void*)&_wrap_class_InstanceIdentityInvalidException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityNotFoundException = {"_p_Mezzanine__InstanceIdentityNotFoundException", "Mezzanine::InstanceIdentityNotFoundException *", 0, 0, (void*)&_wrap_class_InstanceIdentityNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__InternalException = {"_p_Mezzanine__InternalException", "Mezzanine::InternalException *", 0, 0, (void*)&_wrap_class_InternalException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidAssignment = {"_p_Mezzanine__InvalidAssignment", "Mezzanine::InvalidAssignment *", 0, 0, (void*)&_wrap_class_InvalidAssignment, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidStateException = {"_p_Mezzanine__InvalidStateException", "Mezzanine::InvalidStateException *", 0, 0, (void*)&_wrap_class_InvalidStateException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidVersionException = {"_p_Mezzanine__InvalidVersionException", "Mezzanine::InvalidVersionException *", 0, 0, (void*)&_wrap_class_InvalidVersionException, 0};
static swig_type_info _swigt__p_Mezzanine__ManagerBase = {"_p_Mezzanine__ManagerBase", "Mezzanine::ManagerBase *", 0, 0, (void*)&_wrap_class_ManagerBase, 0};
static swig_type_info _swigt__p_Mezzanine__ManagerFactory = {"_p_Mezzanine__ManagerFactory", "Mezzanine::ManagerFactory *", 0, 0, (void*)&_wrap_class_ManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__Matrix3x3 = {"_p_Mezzanine__Matrix3x3", "Mezzanine::Matrix3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryManagementException = {"_p_Mezzanine__MemoryManagementException", "Mezzanine::MemoryManagementException *", 0, 0, (void*)&_wrap_class_MemoryManagementException, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryOutOfBoundsException = {"_p_Mezzanine__MemoryOutOfBoundsException", "Mezzanine::MemoryOutOfBoundsException *", 0, 0, (void*)&_wrap_class_MemoryOutOfBoundsException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkException = {"_p_Mezzanine__NetworkException", "Mezzanine::NetworkException *", 0, 0, (void*)&_wrap_class_NetworkException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkNotFoundException = {"_p_Mezzanine__NetworkNotFoundException", "Mezzanine::NetworkNotFoundException *", 0, 0, (void*)&_wrap_class_NetworkNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkPermissionException = {"_p_Mezzanine__NetworkPermissionException", "Mezzanine::NetworkPermissionException *", 0, 0, (void*)&_wrap_class_NetworkPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkReadException = {"_p_Mezzanine__NetworkReadException", "Mezzanine::NetworkReadException *", 0, 0, (void*)&_wrap_class_NetworkReadException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkURLException = {"_p_Mezzanine__NetworkURLException", "Mezzanine::NetworkURLException *", 0, 0, (void*)&_wrap_class_NetworkURLException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkWriteException = {"_p_Mezzanine__NetworkWriteException", "Mezzanine::NetworkWriteException *", 0, 0, (void*)&_wrap_class_NetworkWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__NotImplementedException = {"_p_Mezzanine__NotImplementedException", "Mezzanine::NotImplementedException *", 0, 0, (void*)&_wrap_class_NotImplementedException, 0};
static swig_type_info _swigt__p_Mezzanine__OutOfMemoryException = {"_p_Mezzanine__OutOfMemoryException", "Mezzanine::OutOfMemoryException *", 0, 0, (void*)&_wrap_class_OutOfMemoryException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersCastException = {"_p_Mezzanine__ParametersCastException", "Mezzanine::ParametersCastException *", 0, 0, (void*)&_wrap_class_ParametersCastException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersException = {"_p_Mezzanine__ParametersException", "Mezzanine::ParametersException *", 0, 0, (void*)&_wrap_class_ParametersException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersRangeException = {"_p_Mezzanine__ParametersRangeException", "Mezzanine::ParametersRangeException *", 0, 0, (void*)&_wrap_class_ParametersRangeException, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__Collision = {"_p_Mezzanine__Physics__Collision", "Mezzanine::Physics::Collision *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollisionShape = {"_p_Mezzanine__Physics__CollisionShape", "Mezzanine::Physics::CollisionShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__GhostProxy = {"_p_Mezzanine__Physics__GhostProxy", "Mezzanine::Physics::GhostProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__ManagerConstructionInfo = {"_p_Mezzanine__Physics__ManagerConstructionInfo", "Mezzanine::Physics::ManagerConstructionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Plane = {"_p_Mezzanine__Plane", "Mezzanine::Plane *", 0, 0, (void*)&_wrap_class_Plane, 0};
static swig_type_info _swigt__p_Mezzanine__Quaternion = {"_p_Mezzanine__Quaternion", "Mezzanine::Quaternion *", 0, 0, (void*)&_wrap_class_Quaternion, 0};
static swig_type_info _swigt__p_Mezzanine__Ray = {"_p_Mezzanine__Ray", "Mezzanine::Ray *", 0, 0, (void*)&_wrap_class_Ray, 0};
static swig_type_info _swigt__p_Mezzanine__RayQueryTool = {"_p_Mezzanine__RayQueryTool", "Mezzanine::RayQueryTool *", 0, 0, (void*)&_wrap_class_RayQueryTool, 0};
static swig_type_info _swigt__p_Mezzanine__RectBaseT_float_t = {"_p_Mezzanine__RectBaseT_float_t", "Mezzanine::RectBase< float > *|Mezzanine::RealRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RectBaseT_unsigned_long_t = {"_p_Mezzanine__RectBaseT_unsigned_long_t", "Mezzanine::RectBase< unsigned long > *|Mezzanine::WholeRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RenderingAPIException = {"_p_Mezzanine__RenderingAPIException", "Mezzanine::RenderingAPIException *", 0, 0, (void*)&_wrap_class_RenderingAPIException, 0};
static swig_type_info _swigt__p_Mezzanine__RigidDebris = {"_p_Mezzanine__RigidDebris", "Mezzanine::RigidDebris *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RuntimeAssertionException = {"_p_Mezzanine__RuntimeAssertionException", "Mezzanine::RuntimeAssertionException *", 0, 0, (void*)&_wrap_class_RuntimeAssertionException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptException = {"_p_Mezzanine__ScriptException", "Mezzanine::ScriptException *", 0, 0, (void*)&_wrap_class_ScriptException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaErrErrException = {"_p_Mezzanine__ScriptLuaErrErrException", "Mezzanine::ScriptLuaErrErrException *", 0, 0, (void*)&_wrap_class_ScriptLuaErrErrException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaException = {"_p_Mezzanine__ScriptLuaException", "Mezzanine::ScriptLuaException *", 0, 0, (void*)&_wrap_class_ScriptLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaRuntimeException = {"_p_Mezzanine__ScriptLuaRuntimeException", "Mezzanine::ScriptLuaRuntimeException *", 0, 0, (void*)&_wrap_class_ScriptLuaRuntimeException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaYieldException = {"_p_Mezzanine__ScriptLuaYieldException", "Mezzanine::ScriptLuaYieldException *", 0, 0, (void*)&_wrap_class_ScriptLuaYieldException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptSubscriberSlot = {"_p_Mezzanine__ScriptSubscriberSlot", "Mezzanine::ScriptSubscriberSlot *", 0, 0, (void*)&_wrap_class_ScriptSubscriberSlot, 0};
static swig_type_info _swigt__p_Mezzanine__Scripting__iScript = {"_p_Mezzanine__Scripting__iScript", "Mezzanine::Scripting::iScript *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__SingletonT_Mezzanine__EventManager_t = {"_p_Mezzanine__SingletonT_Mezzanine__EventManager_t", "Mezzanine::Singleton< Mezzanine::EventManager > *", 0, 0, (void*)&_wrap_class_SingletonEventManager, 0};
static swig_type_info _swigt__p_Mezzanine__SoftDebris = {"_p_Mezzanine__SoftDebris", "Mezzanine::SoftDebris *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Sphere = {"_p_Mezzanine__Sphere", "Mezzanine::Sphere *", 0, 0, (void*)&_wrap_class_Sphere, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorException = {"_p_Mezzanine__SyntaxErrorException", "Mezzanine::SyntaxErrorException *", 0, 0, (void*)&_wrap_class_SyntaxErrorException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorLuaException = {"_p_Mezzanine__SyntaxErrorLuaException", "Mezzanine::SyntaxErrorLuaException *", 0, 0, (void*)&_wrap_class_SyntaxErrorLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXMLException = {"_p_Mezzanine__SyntaxErrorXMLException", "Mezzanine::SyntaxErrorXMLException *", 0, 0, (void*)&_wrap_class_SyntaxErrorXMLException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXPathException = {"_p_Mezzanine__SyntaxErrorXPathException", "Mezzanine::SyntaxErrorXPathException *", 0, 0, (void*)&_wrap_class_SyntaxErrorXPathException, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type = {"_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type", "Mezzanine::Threading::DefaultThreadSpecificStorage::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__RawFile = {"_p_Mezzanine__Threading__RawFile", "Mezzanine::Threading::RawFile *|Mezzanine::RawFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Timer = {"_p_Mezzanine__Timer", "Mezzanine::Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_Mezzanine__Transform = {"_p_Mezzanine__Transform", "Mezzanine::Transform *", 0, 0, (void*)&_wrap_class_Transform, 0};
static swig_type_info _swigt__p_Mezzanine__TransformableChildObject = {"_p_Mezzanine__TransformableChildObject", "Mezzanine::TransformableChildObject *", 0, 0, (void*)&_wrap_class_TransformableChildObject, 0};
static swig_type_info _swigt__p_Mezzanine__TransformableObject = {"_p_Mezzanine__TransformableObject", "Mezzanine::TransformableObject *", 0, 0, (void*)&_wrap_class_TransformableObject, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2 = {"_p_Mezzanine__Vector2", "Mezzanine::Vector2 *", 0, 0, (void*)&_wrap_class_Vector2, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2LengthCompare = {"_p_Mezzanine__Vector2LengthCompare", "Mezzanine::Vector2LengthCompare *", 0, 0, (void*)&_wrap_class_Vector2LengthCompare, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3 = {"_p_Mezzanine__Vector3", "Mezzanine::Vector3 *|Mezzanine::Physics::Vector3 *", 0, 0, (void*)&_wrap_class_Vector3, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3LengthCompare = {"_p_Mezzanine__Vector3LengthCompare", "Mezzanine::Vector3LengthCompare *", 0, 0, (void*)&_wrap_class_Vector3LengthCompare, 0};
static swig_type_info _swigt__p_Mezzanine__World = {"_p_Mezzanine__World", "Mezzanine::World *", 0, 0, (void*)&_wrap_class_World, 0};
static swig_type_info _swigt__p_Mezzanine__WorldManager = {"_p_Mezzanine__WorldManager", "Mezzanine::WorldManager *", 0, 0, (void*)&_wrap_class_WorldManager, 0};
static swig_type_info _swigt__p_Mezzanine__WorldManagerFactory = {"_p_Mezzanine__WorldManagerFactory", "Mezzanine::WorldManagerFactory *", 0, 0, (void*)&_wrap_class_WorldManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__WorldObject = {"_p_Mezzanine__WorldObject", "Mezzanine::WorldObject *", 0, 0, (void*)&_wrap_class_WorldObject, 0};
static swig_type_info _swigt__p_Mezzanine__WorldProxy = {"_p_Mezzanine__WorldProxy", "Mezzanine::WorldProxy *", 0, 0, (void*)&_wrap_class_WorldProxy, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Node = {"_p_Mezzanine__XML__Node", "Mezzanine::XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectContainer = {"_p_ObjectContainer", "ObjectContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectIterator = {"_p_ObjectIterator", "ObjectIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__AxisAlignedBox = {"_p_Ogre__AxisAlignedBox", "Ogre::AxisAlignedBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__ColourValue = {"_p_Ogre__ColourValue", "Ogre::ColourValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Plane = {"_p_Ogre__Plane", "Ogre::Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Quaternion = {"_p_Ogre__Quaternion", "Ogre::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Ray = {"_p_Ogre__Ray", "Ogre::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Sphere = {"_p_Ogre__Sphere", "Ogre::Sphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector2 = {"_p_Ogre__Vector2", "Ogre::Vector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlaneRayTestResult = {"_p_PlaneRayTestResult", "PlaneRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProxyContainer = {"_p_ProxyContainer", "ProxyContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProxyIterator = {"_p_ProxyIterator", "ProxyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RayTestResult = {"_p_RayTestResult", "RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SlotContainer = {"_p_SlotContainer", "SlotContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SlotIterator = {"_p_SlotIterator", "SlotIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SlotPair = {"_p_SlotPair", "SlotPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldManagerContainer = {"_p_WorldManagerContainer", "WorldManagerContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldManagerIterator = {"_p_WorldManagerIterator", "WorldManagerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XML__Node = {"_p_XML__Node", "XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Mezzanine::Boole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btQuaternion = {"_p_btQuaternion", "btQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTransform = {"_p_btTransform", "btTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Mezzanine::PreciseReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|Mezzanine::BinaryTools::BinaryBuffer::Byte *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Mezzanine__EventBase_p_t = {"_p_std__listT_Mezzanine__EventBase_p_t", "std::list< Mezzanine::EventBase * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Mezzanine__EventGameWindow_p_t = {"_p_std__listT_Mezzanine__EventGameWindow_p_t", "std::list< Mezzanine::EventGameWindow * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Mezzanine__EventQuit_p_t = {"_p_std__listT_Mezzanine__EventQuit_p_t", "std::list< Mezzanine::EventQuit * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Mezzanine__EventUserInput_p_t = {"_p_std__listT_Mezzanine__EventUserInput_p_t", "std::list< Mezzanine::EventUserInput * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Ray_t = {"_p_std__pairT_bool_Mezzanine__Ray_t", "std::pair< bool,Mezzanine::Ray > *|Mezzanine::AxisAlignedBox::RayTestResult *|Mezzanine::Sphere::RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_bool_Mezzanine__Vector3_t = {"_p_std__pairT_bool_Mezzanine__Vector3_t", "Mezzanine::Plane::RayTestResult *|Mezzanine::Ray::PlaneRayTestResult *|std::pair< bool,Mezzanine::Vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator = {"_p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator", "std::vector< Mezzanine::AttachableChild * >::iterator *|Mezzanine::AttachableParent::AttachableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator = {"_p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator", "Mezzanine::Event::SlotIterator *|std::vector< Mezzanine::EventSubscriberSlot * >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__WorldManager_p_t = {"_p_std__vectorT_Mezzanine__WorldManager_p_t", "std::vector< Mezzanine::WorldManager * > *|Mezzanine::World::WorldManagerContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__WorldObject_p_t = {"_p_std__vectorT_Mezzanine__WorldObject_p_t", "std::vector< Mezzanine::WorldObject * > *|Mezzanine::AreaEffect::ObjectContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__WorldProxy_p_t = {"_p_std__vectorT_Mezzanine__WorldProxy_p_t", "std::vector< Mezzanine::WorldProxy * > *|Mezzanine::WorldObject::ProxyContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ActorContainer,
  &_swigt__p_ActorIterator,
  &_swigt__p_AreaEffectContainer,
  &_swigt__p_AreaEffectIterator,
  &_swigt__p_AttachableContainer,
  &_swigt__p_AttachableIterator,
  &_swigt__p_Byte,
  &_swigt__p_CFunctionSubscriberSlot__SubscriberFunction,
  &_swigt__p_ChannelType,
  &_swigt__p_CollisionContainer,
  &_swigt__p_CollisionIterator,
  &_swigt__p_ConstActorIterator,
  &_swigt__p_ConstAreaEffectIterator,
  &_swigt__p_ConstAttachableIterator,
  &_swigt__p_ConstCollisionIterator,
  &_swigt__p_ConstDebrisIterator,
  &_swigt__p_ConstEventIterator,
  &_swigt__p_ConstFactoryIterator,
  &_swigt__p_ConstManagerFactoryIterator,
  &_swigt__p_ConstObjectIterator,
  &_swigt__p_ConstProxyIterator,
  &_swigt__p_ConstSlotIterator,
  &_swigt__p_ConstWorldManagerIterator,
  &_swigt__p_DebrisContainer,
  &_swigt__p_DebrisIterator,
  &_swigt__p_EventContainer,
  &_swigt__p_EventIterator,
  &_swigt__p_FactoryIterator,
  &_swigt__p_FactoryMap,
  &_swigt__p_GameWindowEventID,
  &_swigt__p_GeometryRayTestResult,
  &_swigt__p_Input__InputCode,
  &_swigt__p_Input__MetaCode,
  &_swigt__p_ManagerFactoryIterator,
  &_swigt__p_ManagerFactoryMap,
  &_swigt__p_MathTools__GeometryRayTestResult,
  &_swigt__p_Mezzanine__Actor,
  &_swigt__p_Mezzanine__ActorFactory,
  &_swigt__p_Mezzanine__ActorManager,
  &_swigt__p_Mezzanine__ActorUpdateWorkUnit,
  &_swigt__p_Mezzanine__AngleLimits,
  &_swigt__p_Mezzanine__AreaEffect,
  &_swigt__p_Mezzanine__AreaEffectFactory,
  &_swigt__p_Mezzanine__AreaEffectManager,
  &_swigt__p_Mezzanine__AreaEffectUpdateWorkUnit,
  &_swigt__p_Mezzanine__ArithmeticException,
  &_swigt__p_Mezzanine__AttachableBase,
  &_swigt__p_Mezzanine__AttachableChild,
  &_swigt__p_Mezzanine__AttachableParent,
  &_swigt__p_Mezzanine__AxisAlignedBox,
  &_swigt__p_Mezzanine__BinaryTools__BinaryBuffer,
  &_swigt__p_Mezzanine__CameraController,
  &_swigt__p_Mezzanine__Circle,
  &_swigt__p_Mezzanine__ColourValue,
  &_swigt__p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,
  &_swigt__p_Mezzanine__CustomSubscriberSlot,
  &_swigt__p_Mezzanine__Debris,
  &_swigt__p_Mezzanine__DebrisFactory,
  &_swigt__p_Mezzanine__DebrisManager,
  &_swigt__p_Mezzanine__DebrisUpdateWorkUnit,
  &_swigt__p_Mezzanine__DefaultActorManagerFactory,
  &_swigt__p_Mezzanine__DefaultAreaEffectManagerFactory,
  &_swigt__p_Mezzanine__DefaultDebrisManagerFactory,
  &_swigt__p_Mezzanine__DefaultEventManagerFactory,
  &_swigt__p_Mezzanine__DirectoryException,
  &_swigt__p_Mezzanine__DirectoryNotFoundException,
  &_swigt__p_Mezzanine__DirectoryPermissionException,
  &_swigt__p_Mezzanine__DirectoryReadException,
  &_swigt__p_Mezzanine__DirectoryWriteException,
  &_swigt__p_Mezzanine__EntresolManager,
  &_swigt__p_Mezzanine__EntresolManagerFactory,
  &_swigt__p_Mezzanine__Event,
  &_swigt__p_Mezzanine__EventArguments,
  &_swigt__p_Mezzanine__EventBase,
  &_swigt__p_Mezzanine__EventGameWindow,
  &_swigt__p_Mezzanine__EventManager,
  &_swigt__p_Mezzanine__EventPublisher,
  &_swigt__p_Mezzanine__EventPumpWorkUnit,
  &_swigt__p_Mezzanine__EventQuit,
  &_swigt__p_Mezzanine__EventSubscriber,
  &_swigt__p_Mezzanine__EventSubscriberSlot,
  &_swigt__p_Mezzanine__EventUserInput,
  &_swigt__p_Mezzanine__ExceptionBase,
  &_swigt__p_Mezzanine__FieldOfForce,
  &_swigt__p_Mezzanine__FileException,
  &_swigt__p_Mezzanine__FileNotFoundException,
  &_swigt__p_Mezzanine__FilePermissionException,
  &_swigt__p_Mezzanine__FileReadException,
  &_swigt__p_Mezzanine__FileWriteException,
  &_swigt__p_Mezzanine__FunctorEventSubscriber,
  &_swigt__p_Mezzanine__FunctorSubscriberSlot,
  &_swigt__p_Mezzanine__Graphics__CameraProxy,
  &_swigt__p_Mezzanine__Graphics__Mesh,
  &_swigt__p_Mezzanine__GravityField,
  &_swigt__p_Mezzanine__GravityWell,
  &_swigt__p_Mezzanine__IOException,
  &_swigt__p_Mezzanine__IOReadException,
  &_swigt__p_Mezzanine__IOWriteException,
  &_swigt__p_Mezzanine__InstanceIdentityDuplicateException,
  &_swigt__p_Mezzanine__InstanceIdentityException,
  &_swigt__p_Mezzanine__InstanceIdentityInvalidException,
  &_swigt__p_Mezzanine__InstanceIdentityNotFoundException,
  &_swigt__p_Mezzanine__InternalException,
  &_swigt__p_Mezzanine__InvalidAssignment,
  &_swigt__p_Mezzanine__InvalidStateException,
  &_swigt__p_Mezzanine__InvalidVersionException,
  &_swigt__p_Mezzanine__ManagerBase,
  &_swigt__p_Mezzanine__ManagerFactory,
  &_swigt__p_Mezzanine__Matrix3x3,
  &_swigt__p_Mezzanine__MemoryManagementException,
  &_swigt__p_Mezzanine__MemoryOutOfBoundsException,
  &_swigt__p_Mezzanine__NetworkException,
  &_swigt__p_Mezzanine__NetworkNotFoundException,
  &_swigt__p_Mezzanine__NetworkPermissionException,
  &_swigt__p_Mezzanine__NetworkReadException,
  &_swigt__p_Mezzanine__NetworkURLException,
  &_swigt__p_Mezzanine__NetworkWriteException,
  &_swigt__p_Mezzanine__NotImplementedException,
  &_swigt__p_Mezzanine__OutOfMemoryException,
  &_swigt__p_Mezzanine__ParametersCastException,
  &_swigt__p_Mezzanine__ParametersException,
  &_swigt__p_Mezzanine__ParametersRangeException,
  &_swigt__p_Mezzanine__Physics__Collision,
  &_swigt__p_Mezzanine__Physics__CollisionShape,
  &_swigt__p_Mezzanine__Physics__GhostProxy,
  &_swigt__p_Mezzanine__Physics__ManagerConstructionInfo,
  &_swigt__p_Mezzanine__Plane,
  &_swigt__p_Mezzanine__Quaternion,
  &_swigt__p_Mezzanine__Ray,
  &_swigt__p_Mezzanine__RayQueryTool,
  &_swigt__p_Mezzanine__RectBaseT_float_t,
  &_swigt__p_Mezzanine__RectBaseT_unsigned_long_t,
  &_swigt__p_Mezzanine__RenderingAPIException,
  &_swigt__p_Mezzanine__RigidDebris,
  &_swigt__p_Mezzanine__RuntimeAssertionException,
  &_swigt__p_Mezzanine__ScriptException,
  &_swigt__p_Mezzanine__ScriptLuaErrErrException,
  &_swigt__p_Mezzanine__ScriptLuaException,
  &_swigt__p_Mezzanine__ScriptLuaRuntimeException,
  &_swigt__p_Mezzanine__ScriptLuaYieldException,
  &_swigt__p_Mezzanine__ScriptSubscriberSlot,
  &_swigt__p_Mezzanine__Scripting__iScript,
  &_swigt__p_Mezzanine__SingletonT_Mezzanine__EventManager_t,
  &_swigt__p_Mezzanine__SoftDebris,
  &_swigt__p_Mezzanine__Sphere,
  &_swigt__p_Mezzanine__SyntaxErrorException,
  &_swigt__p_Mezzanine__SyntaxErrorLuaException,
  &_swigt__p_Mezzanine__SyntaxErrorXMLException,
  &_swigt__p_Mezzanine__SyntaxErrorXPathException,
  &_swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,
  &_swigt__p_Mezzanine__Threading__RawFile,
  &_swigt__p_Mezzanine__Timer,
  &_swigt__p_Mezzanine__Transform,
  &_swigt__p_Mezzanine__TransformableChildObject,
  &_swigt__p_Mezzanine__TransformableObject,
  &_swigt__p_Mezzanine__Vector2,
  &_swigt__p_Mezzanine__Vector2LengthCompare,
  &_swigt__p_Mezzanine__Vector3,
  &_swigt__p_Mezzanine__Vector3LengthCompare,
  &_swigt__p_Mezzanine__World,
  &_swigt__p_Mezzanine__WorldManager,
  &_swigt__p_Mezzanine__WorldManagerFactory,
  &_swigt__p_Mezzanine__WorldObject,
  &_swigt__p_Mezzanine__WorldProxy,
  &_swigt__p_Mezzanine__XML__Node,
  &_swigt__p_ObjectContainer,
  &_swigt__p_ObjectIterator,
  &_swigt__p_Ogre__AxisAlignedBox,
  &_swigt__p_Ogre__ColourValue,
  &_swigt__p_Ogre__Plane,
  &_swigt__p_Ogre__Quaternion,
  &_swigt__p_Ogre__Ray,
  &_swigt__p_Ogre__Sphere,
  &_swigt__p_Ogre__Vector2,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_PlaneRayTestResult,
  &_swigt__p_ProxyContainer,
  &_swigt__p_ProxyIterator,
  &_swigt__p_RayTestResult,
  &_swigt__p_SDL_Event,
  &_swigt__p_SlotContainer,
  &_swigt__p_SlotIterator,
  &_swigt__p_SlotPair,
  &_swigt__p_WorldManagerContainer,
  &_swigt__p_WorldManagerIterator,
  &_swigt__p_XML__Node,
  &_swigt__p_bool,
  &_swigt__p_btQuaternion,
  &_swigt__p_btTransform,
  &_swigt__p_btVector3,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__exception,
  &_swigt__p_std__listT_Mezzanine__EventBase_p_t,
  &_swigt__p_std__listT_Mezzanine__EventGameWindow_p_t,
  &_swigt__p_std__listT_Mezzanine__EventQuit_p_t,
  &_swigt__p_std__listT_Mezzanine__EventUserInput_p_t,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Ray_t,
  &_swigt__p_std__pairT_bool_Mezzanine__Vector3_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator,
  &_swigt__p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator,
  &_swigt__p_std__vectorT_Mezzanine__WorldManager_p_t,
  &_swigt__p_std__vectorT_Mezzanine__WorldObject_p_t,
  &_swigt__p_std__vectorT_Mezzanine__WorldProxy_p_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_ActorContainer[] = {  {&_swigt__p_ActorContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ActorIterator[] = {  {&_swigt__p_ActorIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AreaEffectContainer[] = {  {&_swigt__p_AreaEffectContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AreaEffectIterator[] = {  {&_swigt__p_AreaEffectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttachableContainer[] = {  {&_swigt__p_AttachableContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AttachableIterator[] = {  {&_swigt__p_AttachableIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Byte[] = {  {&_swigt__p_Byte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CFunctionSubscriberSlot__SubscriberFunction[] = {  {&_swigt__p_CFunctionSubscriberSlot__SubscriberFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelType[] = {  {&_swigt__p_ChannelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionContainer[] = {  {&_swigt__p_CollisionContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CollisionIterator[] = {  {&_swigt__p_CollisionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstActorIterator[] = {  {&_swigt__p_ConstActorIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstAreaEffectIterator[] = {  {&_swigt__p_ConstAreaEffectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstAttachableIterator[] = {  {&_swigt__p_ConstAttachableIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstCollisionIterator[] = {  {&_swigt__p_ConstCollisionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstDebrisIterator[] = {  {&_swigt__p_ConstDebrisIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstEventIterator[] = {  {&_swigt__p_ConstEventIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstFactoryIterator[] = {  {&_swigt__p_ConstFactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstManagerFactoryIterator[] = {  {&_swigt__p_ConstManagerFactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstObjectIterator[] = {  {&_swigt__p_ConstObjectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstProxyIterator[] = {  {&_swigt__p_ConstProxyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstSlotIterator[] = {  {&_swigt__p_ConstSlotIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstWorldManagerIterator[] = {  {&_swigt__p_ConstWorldManagerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DebrisContainer[] = {  {&_swigt__p_DebrisContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DebrisIterator[] = {  {&_swigt__p_DebrisIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventContainer[] = {  {&_swigt__p_EventContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventIterator[] = {  {&_swigt__p_EventIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FactoryIterator[] = {  {&_swigt__p_FactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FactoryMap[] = {  {&_swigt__p_FactoryMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GameWindowEventID[] = {  {&_swigt__p_GameWindowEventID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeometryRayTestResult[] = {  {&_swigt__p_GeometryRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Input__InputCode[] = {  {&_swigt__p_Input__InputCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Input__MetaCode[] = {  {&_swigt__p_Input__MetaCode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagerFactoryIterator[] = {  {&_swigt__p_ManagerFactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagerFactoryMap[] = {  {&_swigt__p_ManagerFactoryMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MathTools__GeometryRayTestResult[] = {  {&_swigt__p_MathTools__GeometryRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Actor[] = {  {&_swigt__p_Mezzanine__Actor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ActorFactory[] = {  {&_swigt__p_Mezzanine__ActorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ActorManager[] = {  {&_swigt__p_Mezzanine__ActorManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ActorUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__ActorUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AngleLimits[] = {  {&_swigt__p_Mezzanine__AngleLimits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffect[] = {  {&_swigt__p_Mezzanine__AreaEffect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffectFactory[] = {  {&_swigt__p_Mezzanine__AreaEffectFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffectManager[] = {  {&_swigt__p_Mezzanine__AreaEffectManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffectUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__AreaEffectUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ArithmeticException[] = {  {&_swigt__p_Mezzanine__ArithmeticException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableBase[] = {  {&_swigt__p_Mezzanine__AttachableBase, 0, 0, 0},  {&_swigt__p_Mezzanine__AttachableParent, _p_Mezzanine__AttachableParentTo_p_Mezzanine__AttachableBase, 0, 0},  {&_swigt__p_Mezzanine__AttachableChild, _p_Mezzanine__AttachableChildTo_p_Mezzanine__AttachableBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableChild[] = {  {&_swigt__p_Mezzanine__AttachableChild, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AttachableParent[] = {  {&_swigt__p_Mezzanine__AttachableParent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AxisAlignedBox[] = {  {&_swigt__p_Mezzanine__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__BinaryTools__BinaryBuffer[] = {  {&_swigt__p_Mezzanine__BinaryTools__BinaryBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__CameraController[] = {  {&_swigt__p_Mezzanine__CameraController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Circle[] = {  {&_swigt__p_Mezzanine__Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ColourValue[] = {  {&_swigt__p_Mezzanine__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t[] = {  {&_swigt__p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__CustomSubscriberSlot[] = {  {&_swigt__p_Mezzanine__CustomSubscriberSlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Debris[] = {  {&_swigt__p_Mezzanine__Debris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DebrisFactory[] = {  {&_swigt__p_Mezzanine__DebrisFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DebrisManager[] = {  {&_swigt__p_Mezzanine__DebrisManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DebrisUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__DebrisUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DefaultActorManagerFactory[] = {  {&_swigt__p_Mezzanine__DefaultActorManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DefaultAreaEffectManagerFactory[] = {  {&_swigt__p_Mezzanine__DefaultAreaEffectManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DefaultDebrisManagerFactory[] = {  {&_swigt__p_Mezzanine__DefaultDebrisManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DefaultEventManagerFactory[] = {  {&_swigt__p_Mezzanine__DefaultEventManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryException[] = {  {&_swigt__p_Mezzanine__DirectoryException, 0, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryNotFoundException[] = {  {&_swigt__p_Mezzanine__DirectoryNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryPermissionException[] = {  {&_swigt__p_Mezzanine__DirectoryPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryReadException[] = {  {&_swigt__p_Mezzanine__DirectoryReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryWriteException[] = {  {&_swigt__p_Mezzanine__DirectoryWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntresolManager[] = {  {&_swigt__p_Mezzanine__EntresolManager, 0, 0, 0},  {&_swigt__p_Mezzanine__EventManager, _p_Mezzanine__EventManagerTo_p_Mezzanine__EntresolManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntresolManagerFactory[] = {  {&_swigt__p_Mezzanine__EntresolManagerFactory, 0, 0, 0},  {&_swigt__p_Mezzanine__DefaultEventManagerFactory, _p_Mezzanine__DefaultEventManagerFactoryTo_p_Mezzanine__EntresolManagerFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Event[] = {  {&_swigt__p_Mezzanine__Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventArguments[] = {  {&_swigt__p_Mezzanine__EventArguments, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventBase[] = {  {&_swigt__p_Mezzanine__EventGameWindow, _p_Mezzanine__EventGameWindowTo_p_Mezzanine__EventBase, 0, 0},  {&_swigt__p_Mezzanine__EventBase, 0, 0, 0},  {&_swigt__p_Mezzanine__EventQuit, _p_Mezzanine__EventQuitTo_p_Mezzanine__EventBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventGameWindow[] = {  {&_swigt__p_Mezzanine__EventGameWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventManager[] = {  {&_swigt__p_Mezzanine__EventManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventPublisher[] = {  {&_swigt__p_Mezzanine__EventPublisher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventPumpWorkUnit[] = {  {&_swigt__p_Mezzanine__EventPumpWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventQuit[] = {  {&_swigt__p_Mezzanine__EventQuit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventSubscriber[] = {  {&_swigt__p_Mezzanine__EventSubscriber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventSubscriberSlot[] = {  {&_swigt__p_Mezzanine__EventSubscriberSlot, 0, 0, 0},  {&_swigt__p_Mezzanine__CustomSubscriberSlot, _p_Mezzanine__CustomSubscriberSlotTo_p_Mezzanine__EventSubscriberSlot, 0, 0},  {&_swigt__p_Mezzanine__FunctorSubscriberSlot, _p_Mezzanine__FunctorSubscriberSlotTo_p_Mezzanine__EventSubscriberSlot, 0, 0},  {&_swigt__p_Mezzanine__ScriptSubscriberSlot, _p_Mezzanine__ScriptSubscriberSlotTo_p_Mezzanine__EventSubscriberSlot, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EventUserInput[] = {  {&_swigt__p_Mezzanine__EventUserInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ExceptionBase[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ExceptionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FieldOfForce[] = {  {&_swigt__p_Mezzanine__FieldOfForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileException[] = {  {&_swigt__p_Mezzanine__FileException, 0, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileNotFoundException[] = {  {&_swigt__p_Mezzanine__FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FilePermissionException[] = {  {&_swigt__p_Mezzanine__FilePermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileReadException[] = {  {&_swigt__p_Mezzanine__FileReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileWriteException[] = {  {&_swigt__p_Mezzanine__FileWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FunctorEventSubscriber[] = {  {&_swigt__p_Mezzanine__FunctorEventSubscriber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FunctorSubscriberSlot[] = {  {&_swigt__p_Mezzanine__FunctorSubscriberSlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__CameraProxy[] = {  {&_swigt__p_Mezzanine__Graphics__CameraProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__Mesh[] = {  {&_swigt__p_Mezzanine__Graphics__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__GravityField[] = {  {&_swigt__p_Mezzanine__GravityField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__GravityWell[] = {  {&_swigt__p_Mezzanine__GravityWell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOReadException[] = {  {&_swigt__p_Mezzanine__IOReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOWriteException[] = {  {&_swigt__p_Mezzanine__IOWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityDuplicateException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityException, 0, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityInvalidException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityNotFoundException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InternalException[] = {  {&_swigt__p_Mezzanine__InternalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidAssignment[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidStateException[] = {  {&_swigt__p_Mezzanine__InvalidStateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidVersionException[] = {  {&_swigt__p_Mezzanine__InvalidVersionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ManagerBase[] = {  {&_swigt__p_Mezzanine__WorldManager, _p_Mezzanine__WorldManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__ActorManager, _p_Mezzanine__ActorManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__AreaEffectManager, _p_Mezzanine__AreaEffectManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__DebrisManager, _p_Mezzanine__DebrisManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__EntresolManager, _p_Mezzanine__EntresolManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__EventManager, _p_Mezzanine__EventManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__ManagerBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ManagerFactory[] = {  {&_swigt__p_Mezzanine__ManagerFactory, 0, 0, 0},  {&_swigt__p_Mezzanine__WorldManagerFactory, _p_Mezzanine__WorldManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultActorManagerFactory, _p_Mezzanine__DefaultActorManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultAreaEffectManagerFactory, _p_Mezzanine__DefaultAreaEffectManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultDebrisManagerFactory, _p_Mezzanine__DefaultDebrisManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__EntresolManagerFactory, _p_Mezzanine__EntresolManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultEventManagerFactory, _p_Mezzanine__DefaultEventManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Matrix3x3[] = {  {&_swigt__p_Mezzanine__Matrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryManagementException[] = {  {&_swigt__p_Mezzanine__MemoryManagementException, 0, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryOutOfBoundsException[] = {  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkException[] = {  {&_swigt__p_Mezzanine__NetworkException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkNotFoundException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkPermissionException[] = {  {&_swigt__p_Mezzanine__NetworkPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkReadException[] = {  {&_swigt__p_Mezzanine__NetworkReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkURLException[] = {  {&_swigt__p_Mezzanine__NetworkURLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkWriteException[] = {  {&_swigt__p_Mezzanine__NetworkWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NotImplementedException[] = {  {&_swigt__p_Mezzanine__NotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__OutOfMemoryException[] = {  {&_swigt__p_Mezzanine__OutOfMemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersCastException[] = {  {&_swigt__p_Mezzanine__ParametersCastException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersException[] = {  {&_swigt__p_Mezzanine__ParametersException, 0, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersRangeException[] = {  {&_swigt__p_Mezzanine__ParametersRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__Collision[] = {  {&_swigt__p_Mezzanine__Physics__Collision, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__CollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__GhostProxy[] = {  {&_swigt__p_Mezzanine__Physics__GhostProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__ManagerConstructionInfo[] = {  {&_swigt__p_Mezzanine__Physics__ManagerConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Plane[] = {  {&_swigt__p_Mezzanine__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Quaternion[] = {  {&_swigt__p_Mezzanine__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Ray[] = {  {&_swigt__p_Mezzanine__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RayQueryTool[] = {  {&_swigt__p_Mezzanine__RayQueryTool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RectBaseT_float_t[] = {  {&_swigt__p_Mezzanine__RectBaseT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RectBaseT_unsigned_long_t[] = {  {&_swigt__p_Mezzanine__RectBaseT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RenderingAPIException[] = {  {&_swigt__p_Mezzanine__RenderingAPIException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RigidDebris[] = {  {&_swigt__p_Mezzanine__RigidDebris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RuntimeAssertionException[] = {  {&_swigt__p_Mezzanine__RuntimeAssertionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptException[] = {  {&_swigt__p_Mezzanine__ScriptException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaErrErrException[] = {  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaException[] = {  {&_swigt__p_Mezzanine__ScriptLuaException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaRuntimeException[] = {  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaYieldException[] = {  {&_swigt__p_Mezzanine__ScriptLuaYieldException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptSubscriberSlot[] = {  {&_swigt__p_Mezzanine__ScriptSubscriberSlot, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Scripting__iScript[] = {  {&_swigt__p_Mezzanine__Scripting__iScript, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SingletonT_Mezzanine__EventManager_t[] = {  {&_swigt__p_Mezzanine__SingletonT_Mezzanine__EventManager_t, 0, 0, 0},  {&_swigt__p_Mezzanine__EventManager, _p_Mezzanine__EventManagerTo_p_Mezzanine__SingletonT_Mezzanine__EventManager_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SoftDebris[] = {  {&_swigt__p_Mezzanine__SoftDebris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Sphere[] = {  {&_swigt__p_Mezzanine__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorException, 0, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorLuaException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXMLException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXPathException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type[] = {  {&_swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__RawFile[] = {  {&_swigt__p_Mezzanine__Threading__RawFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Timer[] = {  {&_swigt__p_Mezzanine__Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Transform[] = {  {&_swigt__p_Mezzanine__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TransformableChildObject[] = {  {&_swigt__p_Mezzanine__TransformableChildObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TransformableObject[] = {  {&_swigt__p_Mezzanine__Debris, _p_Mezzanine__DebrisTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__WorldObject, _p_Mezzanine__WorldObjectTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__AreaEffect, _p_Mezzanine__AreaEffectTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__TransformableObject, 0, 0, 0},  {&_swigt__p_Mezzanine__Actor, _p_Mezzanine__ActorTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__WorldProxy, _p_Mezzanine__WorldProxyTo_p_Mezzanine__TransformableObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2[] = {  {&_swigt__p_Mezzanine__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector2LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3[] = {  {&_swigt__p_Mezzanine__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector3LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__World[] = {  {&_swigt__p_Mezzanine__World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldManager[] = {  {&_swigt__p_Mezzanine__WorldManager, 0, 0, 0},  {&_swigt__p_Mezzanine__ActorManager, _p_Mezzanine__ActorManagerTo_p_Mezzanine__WorldManager, 0, 0},  {&_swigt__p_Mezzanine__AreaEffectManager, _p_Mezzanine__AreaEffectManagerTo_p_Mezzanine__WorldManager, 0, 0},  {&_swigt__p_Mezzanine__DebrisManager, _p_Mezzanine__DebrisManagerTo_p_Mezzanine__WorldManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldManagerFactory[] = {  {&_swigt__p_Mezzanine__WorldManagerFactory, 0, 0, 0},  {&_swigt__p_Mezzanine__DefaultActorManagerFactory, _p_Mezzanine__DefaultActorManagerFactoryTo_p_Mezzanine__WorldManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultAreaEffectManagerFactory, _p_Mezzanine__DefaultAreaEffectManagerFactoryTo_p_Mezzanine__WorldManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultDebrisManagerFactory, _p_Mezzanine__DefaultDebrisManagerFactoryTo_p_Mezzanine__WorldManagerFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldObject[] = {  {&_swigt__p_Mezzanine__Debris, _p_Mezzanine__DebrisTo_p_Mezzanine__WorldObject, 0, 0},  {&_swigt__p_Mezzanine__WorldObject, 0, 0, 0},  {&_swigt__p_Mezzanine__AreaEffect, _p_Mezzanine__AreaEffectTo_p_Mezzanine__WorldObject, 0, 0},  {&_swigt__p_Mezzanine__Actor, _p_Mezzanine__ActorTo_p_Mezzanine__WorldObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldProxy[] = {  {&_swigt__p_Mezzanine__WorldProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Node[] = {  {&_swigt__p_Mezzanine__XML__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectContainer[] = {  {&_swigt__p_ObjectContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectIterator[] = {  {&_swigt__p_ObjectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__AxisAlignedBox[] = {  {&_swigt__p_Ogre__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ColourValue[] = {  {&_swigt__p_Ogre__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Plane[] = {  {&_swigt__p_Ogre__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Quaternion[] = {  {&_swigt__p_Ogre__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Ray[] = {  {&_swigt__p_Ogre__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Sphere[] = {  {&_swigt__p_Ogre__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector2[] = {  {&_swigt__p_Ogre__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlaneRayTestResult[] = {  {&_swigt__p_PlaneRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProxyContainer[] = {  {&_swigt__p_ProxyContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProxyIterator[] = {  {&_swigt__p_ProxyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RayTestResult[] = {  {&_swigt__p_RayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SlotContainer[] = {  {&_swigt__p_SlotContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SlotIterator[] = {  {&_swigt__p_SlotIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SlotPair[] = {  {&_swigt__p_SlotPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldManagerContainer[] = {  {&_swigt__p_WorldManagerContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldManagerIterator[] = {  {&_swigt__p_WorldManagerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XML__Node[] = {  {&_swigt__p_XML__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuaternion[] = {  {&_swigt__p_btQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransform[] = {  {&_swigt__p_btTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ExceptionBase, _p_Mezzanine__ExceptionBaseTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Mezzanine__EventBase_p_t[] = {  {&_swigt__p_std__listT_Mezzanine__EventBase_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Mezzanine__EventGameWindow_p_t[] = {  {&_swigt__p_std__listT_Mezzanine__EventGameWindow_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Mezzanine__EventQuit_p_t[] = {  {&_swigt__p_std__listT_Mezzanine__EventQuit_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Mezzanine__EventUserInput_p_t[] = {  {&_swigt__p_std__listT_Mezzanine__EventUserInput_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Ray_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Ray_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_bool_Mezzanine__Vector3_t[] = {  {&_swigt__p_std__pairT_bool_Mezzanine__Vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator[] = {  {&_swigt__p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator[] = {  {&_swigt__p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__WorldManager_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__WorldManager_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__WorldObject_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__WorldObject_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__WorldProxy_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__WorldProxy_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ActorContainer,
  _swigc__p_ActorIterator,
  _swigc__p_AreaEffectContainer,
  _swigc__p_AreaEffectIterator,
  _swigc__p_AttachableContainer,
  _swigc__p_AttachableIterator,
  _swigc__p_Byte,
  _swigc__p_CFunctionSubscriberSlot__SubscriberFunction,
  _swigc__p_ChannelType,
  _swigc__p_CollisionContainer,
  _swigc__p_CollisionIterator,
  _swigc__p_ConstActorIterator,
  _swigc__p_ConstAreaEffectIterator,
  _swigc__p_ConstAttachableIterator,
  _swigc__p_ConstCollisionIterator,
  _swigc__p_ConstDebrisIterator,
  _swigc__p_ConstEventIterator,
  _swigc__p_ConstFactoryIterator,
  _swigc__p_ConstManagerFactoryIterator,
  _swigc__p_ConstObjectIterator,
  _swigc__p_ConstProxyIterator,
  _swigc__p_ConstSlotIterator,
  _swigc__p_ConstWorldManagerIterator,
  _swigc__p_DebrisContainer,
  _swigc__p_DebrisIterator,
  _swigc__p_EventContainer,
  _swigc__p_EventIterator,
  _swigc__p_FactoryIterator,
  _swigc__p_FactoryMap,
  _swigc__p_GameWindowEventID,
  _swigc__p_GeometryRayTestResult,
  _swigc__p_Input__InputCode,
  _swigc__p_Input__MetaCode,
  _swigc__p_ManagerFactoryIterator,
  _swigc__p_ManagerFactoryMap,
  _swigc__p_MathTools__GeometryRayTestResult,
  _swigc__p_Mezzanine__Actor,
  _swigc__p_Mezzanine__ActorFactory,
  _swigc__p_Mezzanine__ActorManager,
  _swigc__p_Mezzanine__ActorUpdateWorkUnit,
  _swigc__p_Mezzanine__AngleLimits,
  _swigc__p_Mezzanine__AreaEffect,
  _swigc__p_Mezzanine__AreaEffectFactory,
  _swigc__p_Mezzanine__AreaEffectManager,
  _swigc__p_Mezzanine__AreaEffectUpdateWorkUnit,
  _swigc__p_Mezzanine__ArithmeticException,
  _swigc__p_Mezzanine__AttachableBase,
  _swigc__p_Mezzanine__AttachableChild,
  _swigc__p_Mezzanine__AttachableParent,
  _swigc__p_Mezzanine__AxisAlignedBox,
  _swigc__p_Mezzanine__BinaryTools__BinaryBuffer,
  _swigc__p_Mezzanine__CameraController,
  _swigc__p_Mezzanine__Circle,
  _swigc__p_Mezzanine__ColourValue,
  _swigc__p_Mezzanine__CountedPtrT_Mezzanine__EventArguments_t,
  _swigc__p_Mezzanine__CustomSubscriberSlot,
  _swigc__p_Mezzanine__Debris,
  _swigc__p_Mezzanine__DebrisFactory,
  _swigc__p_Mezzanine__DebrisManager,
  _swigc__p_Mezzanine__DebrisUpdateWorkUnit,
  _swigc__p_Mezzanine__DefaultActorManagerFactory,
  _swigc__p_Mezzanine__DefaultAreaEffectManagerFactory,
  _swigc__p_Mezzanine__DefaultDebrisManagerFactory,
  _swigc__p_Mezzanine__DefaultEventManagerFactory,
  _swigc__p_Mezzanine__DirectoryException,
  _swigc__p_Mezzanine__DirectoryNotFoundException,
  _swigc__p_Mezzanine__DirectoryPermissionException,
  _swigc__p_Mezzanine__DirectoryReadException,
  _swigc__p_Mezzanine__DirectoryWriteException,
  _swigc__p_Mezzanine__EntresolManager,
  _swigc__p_Mezzanine__EntresolManagerFactory,
  _swigc__p_Mezzanine__Event,
  _swigc__p_Mezzanine__EventArguments,
  _swigc__p_Mezzanine__EventBase,
  _swigc__p_Mezzanine__EventGameWindow,
  _swigc__p_Mezzanine__EventManager,
  _swigc__p_Mezzanine__EventPublisher,
  _swigc__p_Mezzanine__EventPumpWorkUnit,
  _swigc__p_Mezzanine__EventQuit,
  _swigc__p_Mezzanine__EventSubscriber,
  _swigc__p_Mezzanine__EventSubscriberSlot,
  _swigc__p_Mezzanine__EventUserInput,
  _swigc__p_Mezzanine__ExceptionBase,
  _swigc__p_Mezzanine__FieldOfForce,
  _swigc__p_Mezzanine__FileException,
  _swigc__p_Mezzanine__FileNotFoundException,
  _swigc__p_Mezzanine__FilePermissionException,
  _swigc__p_Mezzanine__FileReadException,
  _swigc__p_Mezzanine__FileWriteException,
  _swigc__p_Mezzanine__FunctorEventSubscriber,
  _swigc__p_Mezzanine__FunctorSubscriberSlot,
  _swigc__p_Mezzanine__Graphics__CameraProxy,
  _swigc__p_Mezzanine__Graphics__Mesh,
  _swigc__p_Mezzanine__GravityField,
  _swigc__p_Mezzanine__GravityWell,
  _swigc__p_Mezzanine__IOException,
  _swigc__p_Mezzanine__IOReadException,
  _swigc__p_Mezzanine__IOWriteException,
  _swigc__p_Mezzanine__InstanceIdentityDuplicateException,
  _swigc__p_Mezzanine__InstanceIdentityException,
  _swigc__p_Mezzanine__InstanceIdentityInvalidException,
  _swigc__p_Mezzanine__InstanceIdentityNotFoundException,
  _swigc__p_Mezzanine__InternalException,
  _swigc__p_Mezzanine__InvalidAssignment,
  _swigc__p_Mezzanine__InvalidStateException,
  _swigc__p_Mezzanine__InvalidVersionException,
  _swigc__p_Mezzanine__ManagerBase,
  _swigc__p_Mezzanine__ManagerFactory,
  _swigc__p_Mezzanine__Matrix3x3,
  _swigc__p_Mezzanine__MemoryManagementException,
  _swigc__p_Mezzanine__MemoryOutOfBoundsException,
  _swigc__p_Mezzanine__NetworkException,
  _swigc__p_Mezzanine__NetworkNotFoundException,
  _swigc__p_Mezzanine__NetworkPermissionException,
  _swigc__p_Mezzanine__NetworkReadException,
  _swigc__p_Mezzanine__NetworkURLException,
  _swigc__p_Mezzanine__NetworkWriteException,
  _swigc__p_Mezzanine__NotImplementedException,
  _swigc__p_Mezzanine__OutOfMemoryException,
  _swigc__p_Mezzanine__ParametersCastException,
  _swigc__p_Mezzanine__ParametersException,
  _swigc__p_Mezzanine__ParametersRangeException,
  _swigc__p_Mezzanine__Physics__Collision,
  _swigc__p_Mezzanine__Physics__CollisionShape,
  _swigc__p_Mezzanine__Physics__GhostProxy,
  _swigc__p_Mezzanine__Physics__ManagerConstructionInfo,
  _swigc__p_Mezzanine__Plane,
  _swigc__p_Mezzanine__Quaternion,
  _swigc__p_Mezzanine__Ray,
  _swigc__p_Mezzanine__RayQueryTool,
  _swigc__p_Mezzanine__RectBaseT_float_t,
  _swigc__p_Mezzanine__RectBaseT_unsigned_long_t,
  _swigc__p_Mezzanine__RenderingAPIException,
  _swigc__p_Mezzanine__RigidDebris,
  _swigc__p_Mezzanine__RuntimeAssertionException,
  _swigc__p_Mezzanine__ScriptException,
  _swigc__p_Mezzanine__ScriptLuaErrErrException,
  _swigc__p_Mezzanine__ScriptLuaException,
  _swigc__p_Mezzanine__ScriptLuaRuntimeException,
  _swigc__p_Mezzanine__ScriptLuaYieldException,
  _swigc__p_Mezzanine__ScriptSubscriberSlot,
  _swigc__p_Mezzanine__Scripting__iScript,
  _swigc__p_Mezzanine__SingletonT_Mezzanine__EventManager_t,
  _swigc__p_Mezzanine__SoftDebris,
  _swigc__p_Mezzanine__Sphere,
  _swigc__p_Mezzanine__SyntaxErrorException,
  _swigc__p_Mezzanine__SyntaxErrorLuaException,
  _swigc__p_Mezzanine__SyntaxErrorXMLException,
  _swigc__p_Mezzanine__SyntaxErrorXPathException,
  _swigc__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,
  _swigc__p_Mezzanine__Threading__RawFile,
  _swigc__p_Mezzanine__Timer,
  _swigc__p_Mezzanine__Transform,
  _swigc__p_Mezzanine__TransformableChildObject,
  _swigc__p_Mezzanine__TransformableObject,
  _swigc__p_Mezzanine__Vector2,
  _swigc__p_Mezzanine__Vector2LengthCompare,
  _swigc__p_Mezzanine__Vector3,
  _swigc__p_Mezzanine__Vector3LengthCompare,
  _swigc__p_Mezzanine__World,
  _swigc__p_Mezzanine__WorldManager,
  _swigc__p_Mezzanine__WorldManagerFactory,
  _swigc__p_Mezzanine__WorldObject,
  _swigc__p_Mezzanine__WorldProxy,
  _swigc__p_Mezzanine__XML__Node,
  _swigc__p_ObjectContainer,
  _swigc__p_ObjectIterator,
  _swigc__p_Ogre__AxisAlignedBox,
  _swigc__p_Ogre__ColourValue,
  _swigc__p_Ogre__Plane,
  _swigc__p_Ogre__Quaternion,
  _swigc__p_Ogre__Ray,
  _swigc__p_Ogre__Sphere,
  _swigc__p_Ogre__Vector2,
  _swigc__p_Ogre__Vector3,
  _swigc__p_PlaneRayTestResult,
  _swigc__p_ProxyContainer,
  _swigc__p_ProxyIterator,
  _swigc__p_RayTestResult,
  _swigc__p_SDL_Event,
  _swigc__p_SlotContainer,
  _swigc__p_SlotIterator,
  _swigc__p_SlotPair,
  _swigc__p_WorldManagerContainer,
  _swigc__p_WorldManagerIterator,
  _swigc__p_XML__Node,
  _swigc__p_bool,
  _swigc__p_btQuaternion,
  _swigc__p_btTransform,
  _swigc__p_btVector3,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__exception,
  _swigc__p_std__listT_Mezzanine__EventBase_p_t,
  _swigc__p_std__listT_Mezzanine__EventGameWindow_p_t,
  _swigc__p_std__listT_Mezzanine__EventQuit_p_t,
  _swigc__p_std__listT_Mezzanine__EventUserInput_p_t,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__pairT_bool_Mezzanine__Ray_t,
  _swigc__p_std__pairT_bool_Mezzanine__Vector3_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_Mezzanine__AttachableChild_p_t__iterator,
  _swigc__p_std__vectorT_Mezzanine__EventSubscriberSlot_p_t__iterator,
  _swigc__p_std__vectorT_Mezzanine__WorldManager_p_t,
  _swigc__p_std__vectorT_Mezzanine__WorldObject_p_t,
  _swigc__p_std__vectorT_Mezzanine__WorldProxy_p_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

